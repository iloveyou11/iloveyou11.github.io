<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>系列专题导航</title>
      <link href="/2020/07/31/%E7%B3%BB%E5%88%97%E5%AF%BC%E8%88%AA/"/>
      <url>/2020/07/31/%E7%B3%BB%E5%88%97%E5%AF%BC%E8%88%AA/</url>
      
        <content type="html"><![CDATA[<h3 id="前端学习路线系列"><a href="#前端学习路线系列" class="headerlink" title="前端学习路线系列"></a>前端学习路线系列</h3><p><a href>初中级前端知识体系</a><br><a href>高级前端知识体系</a></p><h3 id="前端进阶系列"><a href="#前端进阶系列" class="headerlink" title="前端进阶系列"></a>前端进阶系列</h3><p><a href>前端进阶-01</a><br><a href>前端进阶-02</a><br><a href>前端进阶-03</a><br><a href>前端进阶-04</a><br><a href>前端进阶-05</a><br><a href>前端进阶-06</a><br><a href>前端进阶-07</a><br><a href>前端进阶-08</a><br><a href>前端进阶-09</a></p><h3 id="CV（计算机视觉）入门系列"><a href="#CV（计算机视觉）入门系列" class="headerlink" title="CV（计算机视觉）入门系列"></a>CV（计算机视觉）入门系列</h3><p><a href="https://iloveyou11.github.io/2020/02/16/CV-01/" target="_blank" rel="noopener">CV系列1：计算机视觉基础知识</a><br><a href="https://iloveyou11.github.io/2020/02/20/CV-02/" target="_blank" rel="noopener">CV系列2：卷积神经网络的演变</a><br><a href="https://iloveyou11.github.io/2020/03/01/CV-03/" target="_blank" rel="noopener">CV系列3：卷积神经网络代码实现</a><br><a href="https://iloveyou11.github.io/2020/03/12/CV-04/" target="_blank" rel="noopener">CV系列4：对抗生成网络</a><br><a href="https://iloveyou11.github.io/2020/03/19/CV-05/" target="_blank" rel="noopener">CV系列5：目标检测算法</a></p><h3 id="ML（机器学习）入门系列"><a href="#ML（机器学习）入门系列" class="headerlink" title="ML（机器学习）入门系列"></a>ML（机器学习）入门系列</h3><p><a href="https://iloveyou11.github.io/2019/12/04/ML-01/" target="_blank" rel="noopener">ML系列1：AI学习资源与知识点</a><br><a href="https://iloveyou11.github.io/2019/12/10/ML-02/" target="_blank" rel="noopener">ML系列2：机器学习必会算法</a><br><a href="https://iloveyou11.github.io/2019/12/29/ML-04/" target="_blank" rel="noopener">ML系列3：深度学习中的问题解答</a><br><a href="https://iloveyou11.github.io/2020/01/02/ML-05/" target="_blank" rel="noopener">ML系列4：tensorflow入门-1</a><br><a href="https://iloveyou11.github.io/2020/01/10/ML-06/" target="_blank" rel="noopener">ML系列5：tensorflow入门-2</a><br><a href="https://iloveyou11.github.io/2020/01/30/ML-07/" target="_blank" rel="noopener">ML系列6：tensorflow项目实战</a></p><h3 id="NLP（自然语言处理）入门系列"><a href="#NLP（自然语言处理）入门系列" class="headerlink" title="NLP（自然语言处理）入门系列"></a>NLP（自然语言处理）入门系列</h3><p><a href="https://iloveyou11.github.io/2020/03/22/NLP-01/" target="_blank" rel="noopener">NLP系列1：NLP简介</a><br><a href="https://iloveyou11.github.io/2020/04/02/NLP-02/" target="_blank" rel="noopener">NLP系列2：分词与文本表示</a><br><a href="https://iloveyou11.github.io/2020/04/21/NLP-03/" target="_blank" rel="noopener">NLP系列3：语言系统与NLP基础</a><br><a href="https://iloveyou11.github.io/2020/05/02/NLP-04/" target="_blank" rel="noopener">NLP系列4：NLP核心任务</a><br><a href="https://iloveyou11.github.io/2020/05/10/NLP-05/" target="_blank" rel="noopener">NLP系列5：重要模型与算法</a><br><a href="https://iloveyou11.github.io/2020/05/20/NLP-06/" target="_blank" rel="noopener">NLP系列6：词向量与文本生成</a></p><h3 id="NLP模型系列"><a href="#NLP模型系列" class="headerlink" title="NLP模型系列"></a>NLP模型系列</h3><p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-01-%E9%A2%84%E8%AE%AD%E7%BB%83%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/" target="_blank" rel="noopener">NLP模型-01-预训练语言模型</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-02-HMM/" target="_blank" rel="noopener">NLP模型-02-HMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-03-GMM/" target="_blank" rel="noopener">NLP模型-03-GMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-04-CRF/" target="_blank" rel="noopener">NLP模型-04-CRF</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-05-transformer/" target="_blank" rel="noopener">NLP模型-05-transformer</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-06-Bert/" target="_blank" rel="noopener">NLP模型-06-Bert</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-07-LDA/" target="_blank" rel="noopener">NLP模型-07-LDA</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-08-fastText/" target="_blank" rel="noopener">NLP模型-08-fastText</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-09-Glove/" target="_blank" rel="noopener">NLP模型-09-Glove</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-10-textRNN%20&%20textCNN/" target="_blank" rel="noopener">NLP模型-10-textRNN &amp; textCNN</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-11-seq2seq/" target="_blank" rel="noopener">NLP模型-11-seq2seq</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-12-attention/" target="_blank" rel="noopener">NLP模型-12-attention</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-13-XLnet/" target="_blank" rel="noopener">NLP模型-13-XLnet</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-14-%E6%A0%B8%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">NLP模型-14-核方法</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-15-%E6%B7%B1%E5%BA%A6%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-15-深度玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-16-%E5%8F%97%E9%99%90%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-16-受限玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-17-%E6%B7%B1%E5%BA%A6%E4%BF%A1%E5%BF%B5%E7%BD%91%E7%BB%9C/" target="_blank" rel="noopener">NLP模型-17-深度信念网络</a></p><h3 id="NLP任务系列"><a href="#NLP任务系列" class="headerlink" title="NLP任务系列"></a>NLP任务系列</h3><p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-01-%E8%AF%8D%E5%B5%8C%E5%85%A5/" target="_blank" rel="noopener">NLP任务-01-词嵌入</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-02-%E5%BA%8F%E5%88%97%E6%A0%87%E6%B3%A8/" target="_blank" rel="noopener">NLP任务-02-序列标注</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-03-%E5%88%86%E8%AF%8D/" target="_blank" rel="noopener">NLP任务-03-分词</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-04-%E8%AF%8D%E6%80%A7%E6%A0%87%E6%B3%A8/" target="_blank" rel="noopener">NLP任务-04-词性标注</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-05-%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%ABNER/" target="_blank" rel="noopener">NLP任务-05-命名实体识别</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-06-%E4%BE%9D%E5%AD%98%E5%8F%A5%E6%B3%95%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">NLP任务-06-依存句法分析</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-07-%E4%BF%A1%E6%81%AF%E6%8A%BD%E5%8F%96/" target="_blank" rel="noopener">NLP任务-07-信息抽取</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-08-%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB/" target="_blank" rel="noopener">NLP任务-08-文本分类</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-09-%E6%96%87%E6%9C%AC%E8%81%9A%E7%B1%BB/" target="_blank" rel="noopener">NLP任务-09-文本聚类</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-10-%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/" target="_blank" rel="noopener">NLP任务-10-自动补全</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-11-%E8%AF%AD%E4%B9%89%E6%B6%88%E6%AD%A7/" target="_blank" rel="noopener">NLP任务-11-语义消歧</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-12-%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/" target="_blank" rel="noopener">NLP任务-12-问答系统</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-13-%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/" target="_blank" rel="noopener">NLP任务-13-机器翻译</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-14-%E8%87%AA%E5%8A%A8%E6%91%98%E8%A6%81/" target="_blank" rel="noopener">NLP任务-14-自动摘要</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-15-%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">NLP任务-15-情感分析</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-16-%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/" target="_blank" rel="noopener">NLP任务-16-聊天机器人</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端/AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ant Design组件库源码分析</title>
      <link href="/2020/07/30/Ant%20Design%E7%BB%84%E4%BB%B6%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2020/07/30/Ant%20Design%E7%BB%84%E4%BB%B6%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="UI组件库搭建流程"><a href="#UI组件库搭建流程" class="headerlink" title="UI组件库搭建流程"></a>UI组件库搭建流程</h3><h3 id="AD组件源码分析"><a href="#AD组件源码分析" class="headerlink" title="AD组件源码分析"></a>AD组件源码分析</h3><h3 id="组件测试"><a href="#组件测试" class="headerlink" title="组件测试"></a>组件测试</h3><h3 id="中后台组件封装需求分析"><a href="#中后台组件封装需求分析" class="headerlink" title="中后台组件封装需求分析"></a>中后台组件封装需求分析</h3><h3 id="商家中后台组件库开发"><a href="#商家中后台组件库开发" class="headerlink" title="商家中后台组件库开发"></a>商家中后台组件库开发</h3><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端进阶-01-源码研读系列</title>
      <link href="/2020/07/30/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-01/"/>
      <url>/2020/07/30/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-01/</url>
      
        <content type="html"><![CDATA[<p><a href="https://note.youdao.com/ynoteshare1/index.html?id=24e9d3cdd8febbf4104baf0601aaf444&type=note" target="_blank" rel="noopener">有道云笔记-源码研读系列</a></p><p>【内容大纲】</p><ol><li>jquery源码分析（面向对象式编程）</li><li>express源码分析</li><li>underscore源码分析（函数式编程）</li><li>vue源码分析（双向数据绑定、响应式原理、编译原理）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端进阶-02-js高级</title>
      <link href="/2020/07/30/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-02/"/>
      <url>/2020/07/30/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-02/</url>
      
        <content type="html"><![CDATA[<p><a href="https://note.youdao.com/ynoteshare1/index.html?id=fa23dd3d2ff21b4bd25221c9b7796101&type=note" target="_blank" rel="noopener">有道云笔记-js高级</a></p><p>【内容提纲】</p><ol><li>深究剖析闭包原理及应用场景</li><li>解密V8引擎运行机制原理（掌握GO/AO）</li><li>前端模板引擎 - 微引擎开发</li><li>v8引擎内存优化（了解v8引擎内存回收机制，掌握内存优化技巧）</li><li>前端i18n国际化开发技术（多语言支持如何实现）</li><li>剖析new运算符</li><li>实现一个驱动模块框架（第三方库开发思维）</li><li>性能优化Cache架构（第三方库开发思维）</li><li>一步步实现发布-订阅模式</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端进阶-03-JS进阶深入</title>
      <link href="/2020/07/30/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-03/"/>
      <url>/2020/07/30/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-03/</url>
      
        <content type="html"><![CDATA[<h3 id="js执行机制"><a href="#js执行机制" class="headerlink" title="js执行机制"></a>js执行机制</h3><h4 id="浏览器常驻线程"><a href="#浏览器常驻线程" class="headerlink" title="浏览器常驻线程"></a>浏览器常驻线程</h4><p><strong>浏览器常驻的线程：</strong></p><ol><li>js引擎线程（解释执行js、用户输入、网络请求）</li><li>GUI线程（绘制用户界面、与js主线程是互斥的）</li><li>http网络请求线程（处理用户的get、post等请求，等返回结果后将回调函数推入任务队列）</li><li>定时触发器线程（setTimeout、setInterval等待时间结束后把执行函数推入任务队列中）</li><li>浏览器事件处理线程（将click、mouse等交互事件发生后将这些事件放入事件队列中）</li></ol><p>大部分浏览器中都是具有这5个线程的，这些线程是通过<code>UI主线程</code>进行协调运作的。</p><p><code>js引擎线程和GUI线程是互斥的</code>：<br>js可以操作DOM元素，进而会影响到GUI的渲染结果，因此js引擎线程与GUI渲染线程是互斥的。也就是说方js引擎线程处于运行状态时，GUI渲染线程将处于冻结状态。</p><h4 id="js单线程"><a href="#js单线程" class="headerlink" title="js单线程"></a>js单线程</h4><p>JavaScript是基于单线程运行的，同时又是可以异步执行的，一般来说这种既是单线程又是异步的语言都是基于事件来驱动的，恰好浏览器就给JavaScript提供了这么一个环境。</p><img src="https://i.loli.net/2020/07/30/AnqgEt2i3QS9jpZ.png" alt="js主线程" width="80%"><p><strong>上图表达的原理</strong>：</p><ol><li>同步和异步任务分别进入不同的执行”场所“，同步的进入主线程（执行栈），异步的进入Event Table并注册函数</li><li>当指定的事情完成时，Event Table会将这个函数移入Event Queue（任务队列）</li><li>主线程内的任务执行完毕，会去Event Queue读取对应的函数，进入主线程执行</li></ol><p>上述过程会不断重复，也就是常说的Event Loop（事件轮询）。事件轮询与宏任务和微任务密切相关。</p><h4 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h4><p><code>setTimeout</code>的等待时间结束后并不是直接执行的，而是先进入浏览器的一个任务队列。在同步队列结束后再依次调用任务队列中的任务。<br><code>setTimeout(function(){},0)</code>：如果定义为0ms，是指当js主线程中的执行栈为空时，再将此异步队列中的任务放入主线程执行。但是0ms实际上是达不到的，根据html标准，最低是4ms。况且如果js主线程的执行时间过长，也会依次等待主线程执行完毕，所以此函数的等待时间要超过0ms。<br><code>setInterval</code>是每隔一段时间把任务放到<code>Event Queue</code>中，执行机制同<code>setTimeout</code>。</p><h4 id="宏任务-amp-微任务"><a href="#宏任务-amp-微任务" class="headerlink" title="宏任务&amp;微任务"></a>宏任务&amp;微任务</h4><p>在一个事件循环中，异步事件返回结果后会被放到一个任务队列中。然而，根据这个异步事件的类型，这个事件实际上会被对应的<code>宏任务队列</code>或者<code>微任务队列</code>中去。并且在当前执行栈为空的时候，主线程会查看微任务队列是否有事件存在。如果不存在，那么再去宏任务队列中取出一个事件并把对应的回到加入当前执行栈；如果存在，则会依次执行队列中事件对应的回调，直到微任务队列为空，然后去宏任务队列中取出最前面的一个事件，把对应的回调加入当前执行栈…如此反复，进入循环。</p><h5 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h5><p>常见宏任务：I/O、setTimeout、setInterval、setImmediate、requestAnimationFrame</p><img src="https://i.loli.net/2020/07/30/J3yiLzdbCSfGYeO.png" alt="宏任务" width="80%"><h5 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h5><p>常见微任务：process.nextTick()、MutationObserver、Promise.then/catch/finally</p><img src="https://i.loli.net/2020/07/30/AaZy6rGPBmHFTh4.png" alt="微任务" width="80%"><p>【任务1】在主线程上添加宏任务与微任务</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在主线程上添加宏任务与微任务 </span></span><br><span class="line"><span class="comment">// 执行顺序：主线程 =&gt; 主线程上创建的微任务 =&gt; 主线程上创建的宏任务 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'-------start--------'</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>);</span><br><span class="line">    <span class="comment">// 将回调代码放入另一个宏任务队列 </span></span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Promise实例成功回调执行'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将回调代码放入微任务队列 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'-------end--------'</span>);</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-------start--------</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">-------end--------</span><br></pre></td></tr></table></figure><p>【任务2】在微任务中创建微任务</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在微任务中创建微任务 </span></span><br><span class="line"><span class="comment">// 执行顺序：主线程 =&gt; 主线程上创建的微任务1 =&gt; 微任务1上创建的微任务2 =&gt; 主线程上创建的宏任务 </span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">4</span>))</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    resolve()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'before timeout'</span>)</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'also before timeout'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">before timeout</span><br><span class="line">also before timeout</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>【任务3】在宏任务中创建微任务</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 宏任务中创建微任务 // 执行顺序：主线程 =&gt; 主线程上的宏任务队列1 =&gt; 宏任务队列1中创建的微任务 // 宏任务队列 1 </span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 宏任务队列 2.1 </span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'timer_1'</span>);</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 宏任务队列 3 </span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'timer_3'</span>)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        resolve()</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'new promise'</span>)</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 微任务队列 1 </span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'promise then'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 宏任务队列 2.2 </span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'timer_2'</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'========== Sync queue =========='</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">========== Sync queue ==========</span><br><span class="line">timer_1</span><br><span class="line">new promise</span><br><span class="line">promise then</span><br><span class="line">timer_2</span><br><span class="line">timer_3</span><br></pre></td></tr></table></figure><p>【任务4】在微任务中创建宏任务</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 微任务队列中创建的宏任务 // 执行顺序：主线程 =&gt; 主线程上创建的微任务 =&gt; 主线程上创建的宏任务 =&gt; 微任务中创建的宏任务 // 宏任务1 </span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'new Promise(macro task 1)'</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 微任务1 </span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'micro task 1'</span>);</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 宏任务3 </span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'macro task 3'</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 宏任务2 </span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'macro task 2'</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'========== Sync queue(macro task 1) =========='</span>);</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">new Promise(macro task 1)</span><br><span class="line">========== Sync queue(macro task 1) ==========</span><br><span class="line">micro task 1</span><br><span class="line">macro task 3</span><br><span class="line">macro task 2</span><br></pre></td></tr></table></figure><p>【任务5】综合</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'======== main task start ========'</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'create micro task 1'</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'micro task 1 callback'</span>);</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'macro task 3 callback'</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'create macro task 2'</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'macro task 2 callback'</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'create micro task 3'</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'micro task 3 callback'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'create macro task 4'</span>);</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'macro task 4 callback'</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'create micro task 2'</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'micro task 2 callback'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'======== main task end ========'</span>);</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">======== main task start ========</span><br><span class="line">create micro task 1</span><br><span class="line">create macro task 2</span><br><span class="line">create micro task 2</span><br><span class="line">======== main task end ========</span><br><span class="line">micro task 1 callback</span><br><span class="line">micro task 2 callback</span><br><span class="line">macro task 2 callback</span><br><span class="line">create micro task 3</span><br><span class="line">create macro task 4</span><br><span class="line">micro task 3 callback</span><br><span class="line">macro task 3 callback</span><br><span class="line">macro task 4 callback</span><br></pre></td></tr></table></figure><h3 id="call、apply手写实现与应用"><a href="#call、apply手写实现与应用" class="headerlink" title="call、apply手写实现与应用"></a>call、apply手写实现与应用</h3><h4 id="call实现"><a href="#call实现" class="headerlink" title="call实现"></a>call实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 手写call </span></span><br><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ctx = <span class="built_in">arguments</span>[<span class="number">0</span>] || <span class="built_in">window</span></span><br><span class="line">    ctx.fn = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">let</span> args = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        args.push(<span class="string">`arguments[<span class="subst">$&#123;i&#125;</span>]`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="built_in">eval</span>(<span class="string">`ctx.fn(<span class="subst">$&#123;args.join(<span class="string">','</span>)&#125;</span>)`</span>)</span><br><span class="line">    <span class="keyword">delete</span> ctx.fn</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手写apply </span></span><br><span class="line"><span class="built_in">Function</span>.prototype.myApply = <span class="function"><span class="keyword">function</span>(<span class="params">ctx, arr</span>) </span>&#123;</span><br><span class="line">    ctx = ctx || <span class="built_in">window</span></span><br><span class="line">    ctx.fn = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span> (!arr) &#123;</span><br><span class="line">        result = ctx.fn()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> args = []</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            args.push(<span class="string">`arr[<span class="subst">$&#123;i&#125;</span>]`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        result = <span class="built_in">eval</span>(<span class="string">`ctx.fn(<span class="subst">$&#123;args.join(<span class="string">','</span>)&#125;</span>)`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> ctx.fn</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始测试 </span></span><br><span class="line"><span class="keyword">let</span> value = <span class="string">'window'</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    value: <span class="string">'obj'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name,</span><br><span class="line">        age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(show.myCall(obj, <span class="string">'ypp'</span>, <span class="number">12</span>));</span><br><span class="line"><span class="built_in">console</span>.log(show.myApply(obj, [<span class="string">'ypp'</span>, <span class="number">12</span>]));</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">obj</span><br><span class="line">&#123; name: &apos;ypp&apos;, age: 12 &#125;</span><br><span class="line">obj</span><br><span class="line">&#123; name: &apos;ypp&apos;, age: 12 &#125;</span><br></pre></td></tr></table></figure><h3 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h3><p>在数学和计算机科学中，柯里化是一种将使用多个参数的一个函数转化为一系列使用一个参数的函数的技术。<br>前端使用柯里化的用途主要是简化代码结构，提高系统的维护性，一个方法只有一个参数，强制了功能的单一性。很自然就做到了功能内聚，降低了耦合性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>)</span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pre + cur</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FixedCurry</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这里的arguments是[add, 1, 2] </span></span><br><span class="line">    <span class="keyword">let</span> _args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="comment">//相当于[].call(arguments,1) </span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 这里的arguments是[2, 3] </span></span><br><span class="line">        <span class="keyword">let</span> newArgs = _args.concat([].slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>))</span><br><span class="line">            <span class="comment">//这里的 newArgs相当于完成了所有参数的拼接 [1,2,2,3] </span></span><br><span class="line">        <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, newArgs)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> newAdd = FixedCurry(add, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(newAdd(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"><span class="built_in">console</span>.log(newAdd(<span class="number">3</span>));</span><br><span class="line"><span class="built_in">console</span>.log(newAdd(<span class="number">4</span>));</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>)</span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pre + cur</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FixedCurry</span>(<span class="params">fn</span>) </span>&#123; <span class="comment">// 这里的arguments是[add, 1, 2] </span></span><br><span class="line">    <span class="keyword">let</span> _args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>) <span class="comment">//相当于[].call(arguments,1) </span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 这里的arguments是[2, 3] </span></span><br><span class="line">        <span class="keyword">let</span> newArgs = _args.concat([].slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>)) <span class="comment">//这里的 newArgs相当于完成了所有参数的拼接 [1,2,2,3] </span></span><br><span class="line">        <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, newArgs)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 要实现的效果 </span></span><br><span class="line"><span class="comment">// let newAdd = Curry(add) // newAdd(1, 2, 3, 4) // newAdd(1)(2)(3)(4) // newAdd(1, 2)(3)(4) // ... </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Curry</span>(<span class="params">fn, length</span>) </span>&#123;</span><br><span class="line">    length = length || fn.length <span class="comment">//fn.length代表fn函数需要传入的参数个数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &lt; length) &#123;</span><br><span class="line">            <span class="comment">// combined=[fn,1,2,3,...] </span></span><br><span class="line">            <span class="keyword">let</span> combined = [fn].concat([].slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>)) <span class="comment">// 递归 </span></span><br><span class="line">            <span class="keyword">return</span> Curry(FixedCurry.apply(<span class="keyword">this</span>, combined), length - <span class="built_in">arguments</span>.length)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 传入的参数个数达到要求时，执行函数 </span></span><br><span class="line">            <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> newAdd = Curry(add, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">console</span>.log(newAdd(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line"><span class="built_in">console</span>.log(newAdd(<span class="number">1</span>)(<span class="number">20</span>)(<span class="number">3</span>)(<span class="number">4</span>));</span><br><span class="line"><span class="built_in">console</span>.log(newAdd(<span class="number">1</span>, <span class="number">22</span>)(<span class="number">3</span>)(<span class="number">4</span>));</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">28</span><br><span class="line">30</span><br></pre></td></tr></table></figure><p>在ajax请求中应用函数curry化：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">type, url, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">    xhr.open(type, url, <span class="literal">true</span>)</span><br><span class="line">    xhr.send(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> GET = <span class="string">'get'</span></span><br><span class="line"><span class="keyword">const</span> POST = <span class="string">'post'</span></span><br><span class="line">ajax(POST, <span class="string">'www.test1.com'</span>, <span class="string">"age=12"</span>)</span><br><span class="line">ajax(POST, <span class="string">'www.test2.com'</span>, <span class="string">"age=20"</span>)</span><br><span class="line">ajax(POST, <span class="string">'www.test23com'</span>, <span class="string">"age=23"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ajaxCurry = curry(ajax)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> post = ajaxCurry(POST)</span><br><span class="line">post(<span class="string">'www.test1.com'</span>, <span class="string">'age=12'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> postFromTest = post(<span class="string">'www.test1.com'</span>)</span><br><span class="line">postFromTest(<span class="string">'age=12'</span>)</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/07/30/iRH6xS1eaMWJZnE.png" alt="ajax curry" width="60%"><h3 id="数据扁平化"><a href="#数据扁平化" class="headerlink" title="数据扁平化"></a>数据扁平化</h3><p>数据扁平化是指将多维的数组压成一维的数组，不存在数组嵌套的问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、方法一 </span></span><br><span class="line"><span class="comment">// 初始版本 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr = []</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> resArr = []</span><br><span class="line">    <span class="keyword">let</span> len = arr.length</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(arr[i])) &#123;</span><br><span class="line">            resArr = resArr.concat(flatten(arr[i]))</span><br><span class="line">                <span class="comment">//递归 </span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resArr.push(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resArr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载原型链上 </span></span><br><span class="line"><span class="built_in">Array</span>.prototype.flatten = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> resArr = []</span><br><span class="line">    <span class="keyword">this</span>.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">Array</span>.isArray(item) ? resArr = resArr.concat(item.flatten()) : resArr.push(item)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> resArr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、方法二 </span></span><br><span class="line"><span class="comment">// reduce实现（精简） </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr = []</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">prev, cur</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(cur) ? prev.concat(flatten(cur)) : prev.concat(cur)</span><br><span class="line">    &#125;, [])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 简化写法 </span></span><br><span class="line"><span class="keyword">const</span> flatten = <span class="function"><span class="params">arr</span> =&gt;</span> arr.reduce(<span class="function">(<span class="params">prev, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(cur) ? prev.concat(flatten(cur)) : prev.concat(cur)</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure><h3 id="惰性函数"><a href="#惰性函数" class="headerlink" title="惰性函数"></a>惰性函数</h3><p>惰性函数是指在函数调用后，改变函数的实现，这样就不需要在每次调用此函数时都去根据条件选择具体的实现，有几个典型的应用场景：</p><ol><li>用户vip会员判断（一次判断后固定优惠策略）</li><li>浏览器内核检测</li><li>事件绑定函数封装</li><li>……</li></ol><p>示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 场景1：永远打印第一次调用时的时间 </span></span><br><span class="line"><span class="keyword">let</span> printTime = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> t = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (t)</span><br><span class="line">            <span class="keyword">return</span> t</span><br><span class="line">        t = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line">        <span class="keyword">return</span> t</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上版本有个问题，下次再调用时依次会走判断逻辑 </span></span><br><span class="line"><span class="keyword">let</span> printTime = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> t = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line">    test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> test</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 场景2：事件绑定方法邓庄 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvent</span>(<span class="params">dom, type, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dom.addEventListener) &#123;</span><br><span class="line">        dom.addEventListener(type, handler, <span class="literal">false</span>)</span><br><span class="line">        addEvent = <span class="function"><span class="keyword">function</span>(<span class="params">dom, type, handler</span>) </span>&#123;</span><br><span class="line">            dom.addEventListener(type, handler, <span class="literal">false</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        dom.attachEvent(<span class="string">'on'</span> + type, handler)</span><br><span class="line">        addEvent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            dom.attachEvent(<span class="string">'on'</span> + type, handler)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数组合"><a href="#函数组合" class="headerlink" title="函数组合"></a>函数组合</h3><p>函数组合是指将多个函数的实现，糅合到一个函数（功能组合），示例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 古老版本，但是如果传入的是很多个函数呢？ </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">comose</span>(<span class="params">f, g</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f(g(x))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 依次传入很多个函数f1,f2,f3,f4...，要返回一个组合函数f1(f2,f3,f4(x)) </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>) <span class="comment">//变为数组 </span></span><br><span class="line">    <span class="keyword">let</span> idx = args.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> result = args[idx](x)</span><br><span class="line">        <span class="keyword">while</span> (idx--) &#123;</span><br><span class="line">            result = args[idx](result)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 进一步优化 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>) <span class="comment">//变为数组 </span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> args.reduceRight(<span class="function">(<span class="params">prev, cur</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> cur(prev)</span><br><span class="line">        &#125;, x)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 进一步简化 </span></span><br><span class="line"><span class="keyword">const</span> compose = <span class="function">(<span class="params">...args</span>) =&gt;</span> <span class="function"><span class="params">x</span> =&gt;</span> args.reduceRight(<span class="function">(<span class="params">prev, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cur(prev)</span><br><span class="line">&#125;, x)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> f = compose(fn1, fn2, fn3)</span><br><span class="line"><span class="built_in">console</span>.log(f(<span class="string">'dferfes'</span>));</span><br></pre></td></tr></table></figure><h3 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h3><p>纯函数：对于相同的输入，永远的到相同的输出，而且没有任何可观察的副作用，也不依赖于外部环境的状态。<br>纯函数非常容易进行单元测试，因为不需要考虑上下文环境，只需要考虑输入和输出。<br>纯函数能更好地管理状态，使得可预测性增强，降低了代码管理难度，但是前端基本上都是在和副作用打交道，所有函数都是纯函数这种愿望不可强求~</p><h3 id="函数记忆"><a href="#函数记忆" class="headerlink" title="函数记忆"></a>函数记忆</h3><p>函数记忆是针对需要重复计算和获取值的场景下设置的，类似于动态规划的思想，将每一个状态的前一个状态记录下来，这样可以加速运算~</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>,</span><br><span class="line">    cache = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cache[n]) &#123;</span><br><span class="line">        <span class="keyword">return</span> cache[n]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// </span></span><br><span class="line">        <span class="keyword">if</span> (n === <span class="number">0</span> || n === <span class="number">1</span>) &#123;</span><br><span class="line">            cache[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">            cache[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        &#125; <span class="comment">// </span></span><br><span class="line">        cache[n] = n * fn(n - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> cache[n]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 优化，缓存应该是私有的 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">memorize</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cache = &#123;&#125; <span class="comment">//对象的查找速度比数组更快</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 保证key唯一 </span></span><br><span class="line">        <span class="keyword">let</span> key = <span class="built_in">arguments</span>.length + <span class="built_in">Array</span>.prototype.join.call(<span class="built_in">arguments</span>)</span><br><span class="line">        <span class="keyword">if</span> (cache[key]) &#123;</span><br><span class="line">            <span class="keyword">return</span> cache[key]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cache[key] = fn.apply(<span class="built_in">arguments</span>)</span><br><span class="line">            <span class="keyword">return</span> cache[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h3><h4 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h4><p><code>防抖</code>：在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时。</p><ol><li>search搜索联想，用户在不断输入值时，用防抖来节约请求资源。</li><li>window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 防抖：非立即执行版</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce1</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timeout;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span> (timeout) clearTimeout(timeout);</span><br><span class="line">        timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            func.apply(context, args)</span><br><span class="line">        &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// 防抖：立即执行版 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce2</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timeout;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span> (timeout) clearTimeout(timeout);</span><br><span class="line">        <span class="keyword">let</span> callNow = !timeout;</span><br><span class="line">        timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            timeout = <span class="literal">null</span>;</span><br><span class="line">        &#125;, wait)</span><br><span class="line">        <span class="keyword">if</span> (callNow) func.apply(context, args)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 防抖：双剑合璧版 </span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc </span>函数防抖 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>func 函数 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>wait 延迟执行毫秒数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>immediate 立即执行 true 表立即执行，false 表非立即执行 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce3</span>(<span class="params">func, wait, immediate</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timeout;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span> (timeout) clearTimeout(timeout);</span><br><span class="line">        <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">            <span class="keyword">var</span> callNow = !timeout;</span><br><span class="line">            timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                timeout = <span class="literal">null</span>;</span><br><span class="line">            &#125;, wait)</span><br><span class="line">            <span class="keyword">if</span> (callNow) func.apply(context, args)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            timeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                func.apply(context, args)</span><br><span class="line">            &#125;, wait);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h4><p><code>节流</code>：规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效。</p><ol><li>鼠标不断点击触发，mousedown(单位时间内只触发一次)</li><li>监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断<br>页面频繁点击<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 节流：时间戳版 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> previous = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span> (now - previous &gt; wait) &#123;</span><br><span class="line">            func.apply(context, args);</span><br><span class="line">            previous = now;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 节流：定时器版 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timeout;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">            timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                timeout = <span class="literal">null</span>;</span><br><span class="line">                func.apply(context, args)</span><br><span class="line">            &#125;, wait)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 节流：双剑合璧版 </span></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc </span>函数节流 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>func 函数 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>wait 延迟执行毫秒数 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>type 1 表时间戳版，2 表定时器版 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait, type</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (type === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> previous = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> timeout;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span> (type === <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line">            <span class="keyword">if</span> (now - previous &gt; wait) &#123;</span><br><span class="line">                func.apply(context, args);</span><br><span class="line">                previous = now;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">                timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    timeout = <span class="literal">null</span>;</span><br><span class="line">                    func.apply(context, args)</span><br><span class="line">                &#125;, wait)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端进阶-04-webpack系列</title>
      <link href="/2020/07/30/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-04/"/>
      <url>/2020/07/30/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-04/</url>
      
        <content type="html"><![CDATA[<p><a href="https://note.youdao.com/ynoteshare1/index.html?id=16623d3c11c9d0baa6954629b75addc6&type=note" target="_blank" rel="noopener">有道云笔记-webpack系列</a></p><p>【内容提纲】</p><ol><li>手写webpack（简易版，并不涉及内部原理，这里只实现了单纯的替换）</li><li>手写loader（对单类型文件作统一解析处理）</li><li>手写plugin（需要针对整个构建流程作处理，并非对单类型文件作处理）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端进阶-05-vue高级应用和vue3.0的到来</title>
      <link href="/2020/07/30/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-05/"/>
      <url>/2020/07/30/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-05/</url>
      
        <content type="html"><![CDATA[<p><a href="https://note.youdao.com/ynoteshare1/index.html?id=ff4ffa452ed4e9833b02ac597b27267c&type=note" target="_blank" rel="noopener">有道云笔记-vue高级应用和vue3.0的到来</a></p><p>【内容提纲】</p><ol><li>vue高级应用场景（包括render函数运用、批量注册全局组件、自动化注册路由、路由懒加载）</li><li>大型vue项目的api层如何封装（api层设计、axios二次封装）</li><li>vue3.0的变化</li><li>vue3更快的 Virtual DOM 新策略优化</li><li>vue的优化技巧（打包速度优化、路由优化）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端进阶-06-vue插件和UI库编写</title>
      <link href="/2020/07/30/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-06/"/>
      <url>/2020/07/30/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-06/</url>
      
        <content type="html"><![CDATA[<p><a href="https://note.youdao.com/ynoteshare1/index.html?id=7846e739acece4f1ecce5f0d7c9b3bf3&type=note" target="_blank" rel="noopener">有道云笔记-vue插件和UI库编写</a></p><p>【内容提纲】</p><ol><li>编写vuex（简易版）</li><li>编写vuex异步插件（掌握vue插件编写的整个流程）</li><li>实现vue-cli3的UI库</li><li>搭建自己的vue-cli（实现自己的代码下载工具）</li><li>手写vue-router</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端进阶-07-前端优化策略</title>
      <link href="/2020/07/30/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-07/"/>
      <url>/2020/07/30/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-07/</url>
      
        <content type="html"><![CDATA[<p><a href="https://note.youdao.com/ynoteshare1/index.html?id=7d76b4426aa29dc6d897e0a347662c15&type=note" target="_blank" rel="noopener">有道云笔记-前端优化策略</a></p><p>【内容提纲】</p><ol><li>懒加载与预加载的原理和实现</li><li>webpack做模块懒加载（模块异步加载）</li><li>前端还有哪些优化策略？</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端进阶-08-前端开发模式变化</title>
      <link href="/2020/07/30/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-08/"/>
      <url>/2020/07/30/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-08/</url>
      
        <content type="html"><![CDATA[<p><a href="https://note.youdao.com/ynoteshare1/index.html?id=326804064be687c5a23315deb70506c3&type=note" target="_blank" rel="noopener">有道云笔记-前端开发模式变化</a></p><p>【内容提纲】</p><ol><li>未来的开发模式（mvc时代-&gt;mvvm时代-&gt;中间层时代）</li><li>基于NodeJS打造Web中间层</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端进阶-09-高并发系统架构</title>
      <link href="/2020/07/30/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-09/"/>
      <url>/2020/07/30/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6-09/</url>
      
        <content type="html"><![CDATA[<p><a href="https://note.youdao.com/ynoteshare1/index.html?id=03464998d761636d7c6a42c2f52e9025&type=note" target="_blank" rel="noopener">有道云笔记-高并发系统架构</a></p><p>【内容提纲】</p><ol><li>高并发系统架构技术（了解高并发情况下的处理方案）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>商家文案自动生产与个性化生成</title>
      <link href="/2020/07/30/%E5%95%86%E5%AE%B6%E6%96%87%E6%A1%88%E8%87%AA%E5%8A%A8%E7%94%9F%E4%BA%A7%E4%B8%8E%E4%B8%AA%E6%80%A7%E5%8C%96%E7%94%9F%E6%88%90/"/>
      <url>/2020/07/30/%E5%95%86%E5%AE%B6%E6%96%87%E6%A1%88%E8%87%AA%E5%8A%A8%E7%94%9F%E4%BA%A7%E4%B8%8E%E4%B8%AA%E6%80%A7%E5%8C%96%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h3 id="智能UI"><a href="#智能UI" class="headerlink" title="智能UI"></a>智能UI</h3><h3 id="文案自动生产"><a href="#文案自动生产" class="headerlink" title="文案自动生产"></a>文案自动生产</h3><h3 id="文案个性化投入"><a href="#文案个性化投入" class="headerlink" title="文案个性化投入"></a>文案个性化投入</h3><h3 id="结果展示-amp-效果评估"><a href="#结果展示-amp-效果评估" class="headerlink" title="结果展示 &amp; 效果评估"></a>结果展示 &amp; 效果评估</h3>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP任务-01-词嵌入</title>
      <link href="/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-01-%E8%AF%8D%E5%B5%8C%E5%85%A5/"/>
      <url>/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-01-%E8%AF%8D%E5%B5%8C%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-01-%E8%AF%8D%E5%B5%8C%E5%85%A5/" target="_blank" rel="noopener">NLP任务-01-词嵌入</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-02-%E5%BA%8F%E5%88%97%E6%A0%87%E6%B3%A8/" target="_blank" rel="noopener">NLP任务-02-序列标注</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-03-%E5%88%86%E8%AF%8D/" target="_blank" rel="noopener">NLP任务-03-分词</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-04-%E8%AF%8D%E6%80%A7%E6%A0%87%E6%B3%A8/" target="_blank" rel="noopener">NLP任务-04-词性标注</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-05-%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%ABNER/" target="_blank" rel="noopener">NLP任务-05-命名实体识别</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-06-%E4%BE%9D%E5%AD%98%E5%8F%A5%E6%B3%95%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">NLP任务-06-依存句法分析</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-07-%E4%BF%A1%E6%81%AF%E6%8A%BD%E5%8F%96/" target="_blank" rel="noopener">NLP任务-07-信息抽取</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-08-%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB/" target="_blank" rel="noopener">NLP任务-08-文本分类</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-09-%E6%96%87%E6%9C%AC%E8%81%9A%E7%B1%BB/" target="_blank" rel="noopener">NLP任务-09-文本聚类</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-10-%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/" target="_blank" rel="noopener">NLP任务-10-自动补全</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-11-%E8%AF%AD%E4%B9%89%E6%B6%88%E6%AD%A7/" target="_blank" rel="noopener">NLP任务-11-语义消歧</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-12-%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/" target="_blank" rel="noopener">NLP任务-12-问答系统</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-13-%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/" target="_blank" rel="noopener">NLP任务-13-机器翻译</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-14-%E8%87%AA%E5%8A%A8%E6%91%98%E8%A6%81/" target="_blank" rel="noopener">NLP任务-14-自动摘要</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-15-%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">NLP任务-15-情感分析</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-16-%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/" target="_blank" rel="noopener">NLP任务-16-聊天机器人</a></p><h3 id="词向量（wordvector）"><a href="#词向量（wordvector）" class="headerlink" title="词向量（wordvector）"></a>词向量（wordvector）</h3><img width="100%" src="https://i.loli.net/2020/03/25/lxXWp9yaeIjfq8Y.jpg" alt="词向量"><p>在NLP领域中，为了能表示人类的语言符号，一般会把这些符号转成一种数学向量形式以方便处理，我们把语言单词嵌入到向量空间中就叫<code>词嵌入（word embedding）</code>。<br>比如有比较流行的谷歌开源的 word2vec ，它能生成词向量，通过该词向量在一定程度上还可以用来度量词与词之间的相似性。word2vec采用的模型包含了连续词袋模型（CBOW）和Skip-Gram模型，并通过神经网络来训练。</p><ol><li>one-hot形式的词向量<br>one-hot形式的维数通常会很大，因为词数量一般在10W级别，这会导致训练时难度大大增加，造成维数灾难。另外这么多维只以顺序信息并且只用1和0来表示单词，很浪费空间。再一个是这种方式的任意两个词都是孤立的，没法看出两个词之间的相似性。</li><li>分布式词向量<br>鉴于one-hot形式词向量的缺点，出现了另外一种词向量表示方式——分布式词向量(distributed word representation)。 分布式词向量则干脆直接用普通的向量来表示词向量，而元素的值为任意实数，该向量的维数可以在事前确定，一般可以为50维或100维。<h4 id="CBow（连续词袋模型）"><a href="#CBow（连续词袋模型）" class="headerlink" title="CBow（连续词袋模型）"></a>CBow（连续词袋模型）</h4>该方法就是将{“The”，“cat”，“over”，“the”，“puddle”}当做一个上下文（或语义背景），然后根据这些单词，预测并产生中心单词“jumped”，这种模型我们称作为CBow模型。<h4 id="Skip-Gram"><a href="#Skip-Gram" class="headerlink" title="Skip-Gram"></a>Skip-Gram</h4>这种方法就是通过给出的中心词“jumped”来创建一个模型，来预测和产生周围词汇（或者中心词的上下文）“The”,“cat”,”over,“the”,“puddle”。这里我们称之为“跳跃”的上下文，将这种类型的模型称为Skip-Gram模型。<br>与CBOW相比，初始化时大部分是相同的，只是我们需要将x和y，就是在CBOW中的x现在是y，反之亦然。我将输入one hot向量记为x，输出向量记为y(c)，V、U和CBOW模型一样。<h4 id="subword"><a href="#subword" class="headerlink" title="subword"></a>subword</h4>解决痛点：低频词、OOV（新词不存在已有此库中）</li></ol><p>Subword 背后的思想: 大多数现有方法都用一个分离的 vector 来表示一个 word, 这就忽视了 word 的内在结构, 而它可能蕴含丰富的词意. 这对于拉丁语系的语言可能是很有帮助的. 这样做的一个好处是, 对于 corpus 中出现频率极低的, 或者从未出现过的 word, 利用 character level information, 能更好地表示它们.<br>在一个 word 前后加上 &lt; 与 &gt;, 然后将单词分成 n-gram 的词袋, 此处前后缀能起到区别于其他单词序列的作用. 比如使用 3-gram, where 被表示成 &lt;wh, whe, her, ere, re&gt;. 英文单词 her 的词袋是 &lt;he, her, er&gt;, 因此不应将 where 中的 3-gram her 与单词 her 搞混. 另外, 将带前后缀的原单词 <where> 也加入词袋. 最后 word vector 就用 n-gram vectors 的和表示.<br>Subwords 模型允许在 word 间共享表示, 因此对于低频单词, 能学到更可靠的表示.</where></p><h4 id="ELMo"><a href="#ELMo" class="headerlink" title="ELMo"></a>ELMo</h4><p><code>ELMO</code>是<code>Embedding from Language Models</code>的简称，其实这个名字并没有反应它的本质思想，提出ELMO的论文题目：“Deep contextualized word representation”更能体现其精髓，而精髓在哪里？在deep contextualized这个短语，一个是deep，一个是context，其中context更关键。<br>在此之前的Word Embedding本质上是个静态的方式，所谓静态指的是训练好之后每个单词的表达就固定住了，以后使用的时候，不论新句子上下文单词是什么，这个单词的Word Embedding不会跟着上下文场景的变化而改变，所以对于比如Bank这个词，它事先学好的Word Embedding中混合了几种语义 ，在应用中来了个新句子，即使从上下文中（比如句子包含money等词）明显可以看出它代表的是“银行”的含义，但是对应的Word Embedding内容也不会变，它还是混合了多种语义。这是为何说它是静态的，这也是问题所在。<br><strong>ELMO的本质思想是：</strong>我事先用语言模型学好一个单词的Word Embedding，此时多义词无法区分，不过这没关系。在我实际使用Word Embedding的时候，单词已经具备了特定的上下文了，这个时候我可以根据上下文单词的语义去调整单词的Word Embedding表示，这样经过调整后的Word Embedding更能表达在这个上下文中的具体含义，自然也就解决了多义词的问题了。所以ELMO本身是个根据当前上下文对Word Embedding动态调整的思路。<br>ELMO采用了典型的两阶段过程，第一个阶段是利用语言模型进行预训练；第二个阶段是在做下游任务时，从预训练网络中提取对应单词的网络各层的Word Embedding作为新特征补充到下游任务中。</p><p><strong>ELMO有什么值得改进的缺点呢？</strong></p><ul><li>首先，一个非常明显的缺点在特征抽取器选择方面，ELMO使用了LSTM而不是新贵Transformer，Transformer是谷歌在17年做机器翻译任务的“Attention is all you need”的论文中提出的，引起了相当大的反响，很多研究已经证明了Transformer提取特征的能力是要远强于LSTM的。如果ELMO采取Transformer作为特征提取器，那么估计Bert的反响远不如现在的这种火爆场面。</li><li>另外一点，ELMO采取双向拼接这种融合特征的能力可能比Bert一体化的融合特征方式弱，但是，这只是一种从道理推断产生的怀疑，目前并没有具体实验说明这一点。</li></ul><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>首先需要一份比较大的中文语料数据，可以考虑中文的维基百科（也可以试试搜狗的新闻语料库）。<br>中文维基百科的打包文件地址为 链接: <a href="https://pan.baidu.com/s/1H-wuIve0d_fvczvy3EOKMQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1H-wuIve0d_fvczvy3EOKMQ</a> 提取码: uqua<br>百度网盘加速<a href="https://www.baiduwp.com/?m=index" target="_blank" rel="noopener">下载地址</a><br>中文维基百科的数据不是太大，xml的压缩文件大约1G左右。首先用处理这个XML压缩文件。</p><h4 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> gensim.corpora <span class="keyword">import</span> WikiCorpus</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 定义输入输出</span></span><br><span class="line">    basename = <span class="string">"F:/temp/DL/"</span></span><br><span class="line">    inp = basename+<span class="string">'zhwiki-latest-pages-articles.xml.bz2'</span></span><br><span class="line">    outp = basename+<span class="string">'wiki.zh.text'</span></span><br><span class="line">    </span><br><span class="line">    program = os.path.basename(basename)</span><br><span class="line">    logger = logging.getLogger(program)</span><br><span class="line">    logging.basicConfig(format=<span class="string">'%(asctime)s: %(levelname)s: %(message)s'</span>)</span><br><span class="line">    logging.root.setLevel(level=logging.INFO)</span><br><span class="line">    logger.info(<span class="string">"running %s"</span> % <span class="string">' '</span>.join(sys.argv))</span><br><span class="line">    <span class="comment"># check and process input arguments</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &lt; <span class="number">3</span>:</span><br><span class="line">        print(globals()[<span class="string">'__doc__'</span>] % locals())</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    space = <span class="string">" "</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    output = open(outp, <span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">    wiki = WikiCorpus(inp, lemmatize=<span class="literal">False</span>, dictionary=&#123;&#125;)</span><br><span class="line">    <span class="keyword">for</span> text <span class="keyword">in</span> wiki.get_texts():</span><br><span class="line">        output.write(space.join(text) + <span class="string">"\n"</span>)</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">10000</span> == <span class="number">0</span>):</span><br><span class="line">            logger.info(<span class="string">"Saved "</span> + str(i) + <span class="string">" articles"</span>)</span><br><span class="line">    output.close()</span><br><span class="line">    logger.info(<span class="string">"Finished Saved "</span> + str(i) + <span class="string">" articles"</span>)</span><br></pre></td></tr></table></figure><h4 id="训练数据"><a href="#训练数据" class="headerlink" title="训练数据"></a>训练数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">from</span> gensim.corpora <span class="keyword">import</span> WikiCorpus</span><br><span class="line"><span class="keyword">from</span> gensim.models <span class="keyword">import</span> Word2Vec</span><br><span class="line"><span class="keyword">from</span> gensim.models.word2vec <span class="keyword">import</span> LineSentence</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义输入输出</span></span><br><span class="line">basename = <span class="string">"F:/temp/DL/"</span></span><br><span class="line">inp = basename+<span class="string">'wiki.zh.text'</span></span><br><span class="line">outp1 = basename+<span class="string">'wiki.zh.text.model'</span></span><br><span class="line">outp2 = basename+<span class="string">'wiki.zh.text.vector'</span></span><br><span class="line"></span><br><span class="line">program = os.path.basename(basename)</span><br><span class="line">logger = logging.getLogger(program)</span><br><span class="line">logging.basicConfig(format=<span class="string">'%(asctime)s: %(levelname)s: %(message)s'</span>)</span><br><span class="line">logging.root.setLevel(level=logging.INFO)</span><br><span class="line">logger.info(<span class="string">"running %s"</span> % <span class="string">' '</span>.join(sys.argv))</span><br><span class="line"><span class="comment"># check and process input arguments</span></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) &lt; <span class="number">4</span>:</span><br><span class="line">    print(globals()[<span class="string">'__doc__'</span>] % locals())</span><br><span class="line"></span><br><span class="line">model = Word2Vec(LineSentence(inp), size=<span class="number">400</span>, window=<span class="number">5</span>, min_count=<span class="number">5</span>,</span><br><span class="line">        workers=multiprocessing.cpu_count())</span><br><span class="line"><span class="comment"># trim unneeded model memory = use(much) less RAM</span></span><br><span class="line"><span class="comment">#model.init_sims(replace=True)</span></span><br><span class="line">model.save(outp1)</span><br><span class="line">model.save_word2vec_format(outp2, binary=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h4 id="训练数据-1"><a href="#训练数据-1" class="headerlink" title="训练数据"></a>训练数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试结果</span></span><br><span class="line"><span class="keyword">import</span> gensim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义输入输出</span></span><br><span class="line">basename = <span class="string">"F:/temp/DL/"</span></span><br><span class="line">model = basename+<span class="string">'wiki.zh.text.model'</span></span><br><span class="line"></span><br><span class="line">model = gensim.models.Word2Vec.load(model)</span><br><span class="line"></span><br><span class="line">result = model.most_similar(<span class="string">u"足球"</span>)</span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> result:</span><br><span class="line">    print(e[<span class="number">0</span>], e[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = model.most_similar(<span class="string">u"男人"</span>)</span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> result:</span><br><span class="line">    print(e[<span class="number">0</span>], e[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP任务-02-序列标注</title>
      <link href="/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-02-%E5%BA%8F%E5%88%97%E6%A0%87%E6%B3%A8/"/>
      <url>/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-02-%E5%BA%8F%E5%88%97%E6%A0%87%E6%B3%A8/</url>
      
        <content type="html"><![CDATA[<p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-01-%E8%AF%8D%E5%B5%8C%E5%85%A5/" target="_blank" rel="noopener">NLP任务-01-词嵌入</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-02-%E5%BA%8F%E5%88%97%E6%A0%87%E6%B3%A8/" target="_blank" rel="noopener">NLP任务-02-序列标注</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-03-%E5%88%86%E8%AF%8D/" target="_blank" rel="noopener">NLP任务-03-分词</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-04-%E8%AF%8D%E6%80%A7%E6%A0%87%E6%B3%A8/" target="_blank" rel="noopener">NLP任务-04-词性标注</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-05-%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%ABNER/" target="_blank" rel="noopener">NLP任务-05-命名实体识别</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-06-%E4%BE%9D%E5%AD%98%E5%8F%A5%E6%B3%95%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">NLP任务-06-依存句法分析</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-07-%E4%BF%A1%E6%81%AF%E6%8A%BD%E5%8F%96/" target="_blank" rel="noopener">NLP任务-07-信息抽取</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-08-%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB/" target="_blank" rel="noopener">NLP任务-08-文本分类</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-09-%E6%96%87%E6%9C%AC%E8%81%9A%E7%B1%BB/" target="_blank" rel="noopener">NLP任务-09-文本聚类</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-10-%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/" target="_blank" rel="noopener">NLP任务-10-自动补全</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-11-%E8%AF%AD%E4%B9%89%E6%B6%88%E6%AD%A7/" target="_blank" rel="noopener">NLP任务-11-语义消歧</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-12-%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/" target="_blank" rel="noopener">NLP任务-12-问答系统</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-13-%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/" target="_blank" rel="noopener">NLP任务-13-机器翻译</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-14-%E8%87%AA%E5%8A%A8%E6%91%98%E8%A6%81/" target="_blank" rel="noopener">NLP任务-14-自动摘要</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-15-%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">NLP任务-15-情感分析</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-16-%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/" target="_blank" rel="noopener">NLP任务-16-聊天机器人</a></p><p>序列标注包括了以下几个方面：</p><ol><li><code>中文分词</code>——人们提出了{B,M,E,S}这种最流行的标注集，{B,M,E,S}分为代表{Begin,Middle,End,Single}</li><li><code>词性标注</code>——根据单词序列，标注出词性序列</li><li><code>命名实体识别</code>——命名实体识别可以复用{B,M,E,S}标注集，但是还需要确定实体所属的类别</li></ol><p><code>序列标注方面</code>，传统的统计方法是HMM(隐马尔可夫)、MEMM(最大熵马尔可夫)、CRF(条件随机场)，基本就和命名实体识别类似了，而在深度学习引入后，形成了输入层、编码层、解码层的主要架构，同过预训练表征模型(如w2v)、深度学习结构(CNN、RNN等)以及输出层(CRF、softmax)等结构链接，完成最基本的结构。</p><p><strong>数据标注方式：</strong><br>主要有BIO和BIOES两种。BIOES如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">BIOES如下：</span><br><span class="line"></span><br><span class="line">B，即Begin，表示开始</span><br><span class="line">I，即Intermediate，表示中间</span><br><span class="line">E，即End，表示结尾</span><br><span class="line">S，即Single，表示单个字符</span><br><span class="line">O，即Other，表示其他，用于标记无关字符</span><br><span class="line"></span><br><span class="line">BIO如下：</span><br><span class="line"></span><br><span class="line">B，即Begin，表示开始</span><br><span class="line">I，即Intermediate，表示中间</span><br><span class="line">E，即End，表示结尾</span><br></pre></td></tr></table></figure><h4 id="HMM与序列标注"><a href="#HMM与序列标注" class="headerlink" title="HMM与序列标注"></a>HMM与序列标注</h4><p><strong>具体流程：</strong></p><img src="https://i.loli.net/2020/07/23/MPQpLulqTESiIna.png" alt="HMM参数" width="80%"><p>当获得了分好词的语料之后，三个概率<code>θ=(A,B,Π)</code>可以通过如下方式获得：<br>(1) 初始状态概率<code>Π</code>-<code>P(z1)</code><br>统计每个句子开头，序列标记分别为B，S的个数，最后除以总句子的个数，即得到了初始概率矩阵。<br>(2) 状态转移概率<code>A</code>-<code>(zi|zi-1)</code><br>根据语料，统计不同序列状态之间转化的个数，例如<code>count(yi=”E”|yi-1=”M”)</code>为语料中i-1时刻标为“M”时，i时刻标记为“E”出现的次数。得到一个<code>4*4</code>的矩阵，再将矩阵的每个元素除以语料中该标记字的个数，得到状态转移概率矩阵。<br>(3) 输出观测概率<code>B</code>-<code>P(xi|zi)</code><br>根据语料，统计由某个隐藏状态输出为某个观测状态的个数，例如<code>count(xi=”深”|yi=”B”)</code>为i时刻标记为“B”时，i时刻观测到字为“深”的次数。得到一个<code>4*N</code>的矩阵，再将矩阵的每个元素除以语料中该标记的个数，得到输出观测概率矩阵。</p><p>训练结束后，即可获得三个概率矩阵<code>θ=(A,B,Π)</code>，接下来需要使用维特比算法获得一个句子的最大概率分词标记序列。</p><img src="https://i.loli.net/2020/07/27/qPQNLlFvnzTyUHr.png" alt="NER-HMM" width="80%"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">第一个词为“我”，通过初始概率矩阵和输出观测概率矩阵分别计算delta1(&quot;B&quot;)=P(y1=”S”)P(x1=”我”|y1=”S”)，delta1(&quot;M&quot;)=P(y1=”B”)P(x1=”我”|y1=”B”)，delta1(&quot;E&quot;)=P(y1=”M”)P(x1=”我”|y1=”M”)，delta1(&quot;S&quot;)=P(y1=”E”)P(x1=”我”|y1=”E”)，并设kethe1(&quot;B&quot;)=kethe1(&quot;M&quot;)=kethe1(&quot;E&quot;)=kethe1(&quot;S&quot;)=0；</span><br><span class="line">同理利用公式分别计算：</span><br><span class="line">delta2(&quot;B&quot;)，delta2(&quot;M&quot;)，delta2(&quot;E&quot;)，delta2(&quot;S&quot;)。图中列出了delta2(&quot;S&quot;)的计算过程，就是计算：</span><br><span class="line">P(y2=”S”|y1=”B”)P(x2=”爱”|y2=”S”)</span><br><span class="line">P(y2=”S”|y1=”M”)P(x2=”爱”|y2=”S”)</span><br><span class="line">P(y2=”S”|y1=”E”)P(x2=”爱”|y2=”S”)</span><br><span class="line">P(y2=”S”|y1=”S”)P(x2=”爱”|y2=”S”)</span><br><span class="line">其中P(y2=”S”|y1=”S”)P(x2=”爱”|y2=”S”)的值最大，为0.034，因此delta2(&quot;S&quot;)，kethe2(&quot;S&quot;)=&quot;S&quot;，同理，可以计算出delta2(&quot;B&quot;)，delta2(&quot;M&quot;)，delta2(&quot;E&quot;)及kethe2(&quot;B&quot;)，kethe2(&quot;M&quot;)，kethe2(&quot;E&quot;)。</span><br><span class="line"></span><br><span class="line">同理可以获得第三个和第四个序列标记的delta和kethe。</span><br><span class="line">到最后一个序列，delta4(&quot;B&quot;)，delta4(&quot;M&quot;)，delta4(&quot;E&quot;)，delta4(&quot;S&quot;)中delta4(&quot;S&quot;)的值最大，因此，最后一个状态为”S”。</span><br><span class="line">最后，回退，</span><br><span class="line">i3 = kethe4(&quot;S&quot;) =&quot;B&quot;</span><br><span class="line">i2 =kethe3(&quot;B&quot;) = &quot;S&quot;</span><br><span class="line">i1 = kethe2(&quot;S&quot;) =&quot;S&quot;</span><br><span class="line">求得序列标记为：“SSBE”。</span><br></pre></td></tr></table></figure><p><strong>HMM解决序列标注问题的优势与不足：</strong><br>HMM时非常适合用于序列标注问题，但HMM引入了马尔科夫假设，即T时刻的状态仅仅与前一时刻的状态相关。但是，语言往往是前后文相互照应的，所以HMM可能会有它的局限和问题，我们可以思考一下，如何解决这个问题。</p><h4 id="CRF与序列标注"><a href="#CRF与序列标注" class="headerlink" title="CRF与序列标注"></a>CRF与序列标注</h4><p>NER任务特征提取的网路结构如下：</p><img src="https://i.loli.net/2020/07/27/7sqMkygxn83UYJO.png" alt="NER-CRF" width="80%"><p>句子经过双向LSTM进行特征提取之后，会得到一个特征输出。训练时，将这个特征和对应的label输入到条件随机场中，就可以计算损失了。预测时，将自然语言输入到该网络，经CRF就可以识别该句子中的实体了。</p><p><code>条件随机场(CRF)在现今NLP中序列标记任务中是不可或缺的存在。太多的实现基于此，例如LSTM+CRF，CNN+CRF，BERT+CRF。因此，这是一个必须要深入理解和吃透的模型。！！</code></p><h4 id="LSTM-CRF与序列标注"><a href="#LSTM-CRF与序列标注" class="headerlink" title="LSTM+CRF与序列标注"></a>LSTM+CRF与序列标注</h4><p>采用LSTM作为特征抽取器，再接一个CRF层来作为输出层，结构如下图所示：</p><img src="https://i.loli.net/2020/07/27/aBxdrj6Nos7SOWK.png" alt="NER-LSTM+CRF" width="80%"><h4 id="CNN-CRF与序列标注"><a href="#CNN-CRF与序列标注" class="headerlink" title="CNN+CRF与序列标注"></a>CNN+CRF与序列标注</h4><p>采用LSTM作为特征抽取器，再接一个CRF层来作为输出层，结构如下图所示：</p><img src="https://i.loli.net/2020/07/27/fu8t9FBAh6yQCHb.png" alt="NER-CNN+CRF" width="80%"><p>虽然CNN并不太擅长长序列的特征提取，但是CNN具有非常高效的并行运算能力，能够加快运算速度。</p><h4 id="BERT-（LSTM）-CRF与序列标注"><a href="#BERT-（LSTM）-CRF与序列标注" class="headerlink" title="BERT+（LSTM）+CRF与序列标注"></a>BERT+（LSTM）+CRF与序列标注</h4><p>利用预训练好的BERT模型，再用少量的标注数据进行fine tune，能够快速地实现NER任务。</p><img src="https://i.loli.net/2020/07/27/MC2DtKFon9jUhPz.png" alt="NER-BERT+CRF" width="80%">]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP任务-03-分词</title>
      <link href="/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-03-%E5%88%86%E8%AF%8D/"/>
      <url>/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-03-%E5%88%86%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-01-%E8%AF%8D%E5%B5%8C%E5%85%A5/" target="_blank" rel="noopener">NLP任务-01-词嵌入</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-02-%E5%BA%8F%E5%88%97%E6%A0%87%E6%B3%A8/" target="_blank" rel="noopener">NLP任务-02-序列标注</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-03-%E5%88%86%E8%AF%8D/" target="_blank" rel="noopener">NLP任务-03-分词</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-04-%E8%AF%8D%E6%80%A7%E6%A0%87%E6%B3%A8/" target="_blank" rel="noopener">NLP任务-04-词性标注</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-05-%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%ABNER/" target="_blank" rel="noopener">NLP任务-05-命名实体识别</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-06-%E4%BE%9D%E5%AD%98%E5%8F%A5%E6%B3%95%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">NLP任务-06-依存句法分析</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-07-%E4%BF%A1%E6%81%AF%E6%8A%BD%E5%8F%96/" target="_blank" rel="noopener">NLP任务-07-信息抽取</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-08-%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB/" target="_blank" rel="noopener">NLP任务-08-文本分类</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-09-%E6%96%87%E6%9C%AC%E8%81%9A%E7%B1%BB/" target="_blank" rel="noopener">NLP任务-09-文本聚类</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-10-%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/" target="_blank" rel="noopener">NLP任务-10-自动补全</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-11-%E8%AF%AD%E4%B9%89%E6%B6%88%E6%AD%A7/" target="_blank" rel="noopener">NLP任务-11-语义消歧</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-12-%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/" target="_blank" rel="noopener">NLP任务-12-问答系统</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-13-%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/" target="_blank" rel="noopener">NLP任务-13-机器翻译</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-14-%E8%87%AA%E5%8A%A8%E6%91%98%E8%A6%81/" target="_blank" rel="noopener">NLP任务-14-自动摘要</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-15-%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">NLP任务-15-情感分析</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-16-%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/" target="_blank" rel="noopener">NLP任务-16-聊天机器人</a></p><h3 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h3><p>分词算法有以下几种：</p><ol><li>最大匹配算法（贪心算法）<br>包括前向最大匹配和后向最大匹配，缺点是不能考虑语义，可能是局部最优</li><li>考虑语义<br>基本思想：根据输入的句子，生成所有可能的分割，根据LM（语言模型，用来评估句子的合理程度，后面会讲到）选择其中最好的分割方式，但是效率低下。</li><li>维特比算法<br>根据词典概率，构建连接图，使用DP动态规划</li></ol><img width="70%" src="https://i.loli.net/2020/03/24/wEi7GCpbOzsnx38.jpg" alt="维特比算法"><p>核心问题变为：如何找到最短的路径</p><p><strong>总结：</strong></p><ol><li>基于匹配规则的方法（max-matching）</li><li>基于概率的方法（LM,HMM,CRF）</li><li>分词可以认为是已经解决的问题，基本不会涉及到重新设计分词，可能会根据业务需求有小的修改</li></ol><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><ol start="0"><li>加载词典<br><a href="https://github.com/NLP-LOVE/Introduction-NLP/blob/master/data/dictionnary/CoreNatureDictionary.mini.txt" target="_blank" rel="noopener">CoreNatureDictionary.mini.txt</a></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_dictionary</span><span class="params">()</span>:</span></span><br><span class="line">    dic = set()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 按行读取字典文件，每行第一个空格之前的字符串提取出来。</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> open(<span class="string">"CoreNatureDictionary.mini.txt"</span>,<span class="string">"r"</span>):</span><br><span class="line">        dic.add(line[<span class="number">0</span>:line.find(<span class="string">'  '</span>)])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dic</span><br></pre></td></tr></table></figure><ol><li><p>完全切分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fully_segment</span><span class="params">(text, dic)</span>:</span></span><br><span class="line">    word_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(text)):                  <span class="comment"># i 从 0 到text的最后一个字的下标遍历</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, len(text) + <span class="number">1</span>):   <span class="comment"># j 遍历[i + 1, len(text)]区间</span></span><br><span class="line">            word = text[i:j]                    <span class="comment"># 取出连续区间[i, j]对应的字符串</span></span><br><span class="line">            <span class="keyword">if</span> word <span class="keyword">in</span> dic:                     <span class="comment"># 如果在词典中，则认为是一个词</span></span><br><span class="line">                word_list.append(word)</span><br><span class="line">    <span class="keyword">return</span> word_list</span><br><span class="line">  </span><br><span class="line">dic = load_dictionary()</span><br><span class="line">print(fully_segment(<span class="string">'就读北京大学'</span>, dic))</span><br></pre></td></tr></table></figure></li><li><p>正向最长匹配</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward_segment</span><span class="params">(text, dic)</span>:</span></span><br><span class="line">    word_list = []</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; len(text):</span><br><span class="line">        longest_word = text[i]                      <span class="comment"># 当前扫描位置的单字</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, len(text) + <span class="number">1</span>):       <span class="comment"># 所有可能的结尾</span></span><br><span class="line">            word = text[i:j]                        <span class="comment"># 从当前位置到结尾的连续字符串</span></span><br><span class="line">            <span class="keyword">if</span> word <span class="keyword">in</span> dic:                         <span class="comment"># 在词典中</span></span><br><span class="line">                <span class="keyword">if</span> len(word) &gt; len(longest_word):   <span class="comment"># 并且更长</span></span><br><span class="line">                    longest_word = word             <span class="comment"># 则更优先输出</span></span><br><span class="line">        word_list.append(longest_word)              <span class="comment"># 输出最长词</span></span><br><span class="line">        i += len(longest_word)                      <span class="comment"># 正向扫描</span></span><br><span class="line">    <span class="keyword">return</span> word_list</span><br><span class="line"></span><br><span class="line">dic = load_dictionary()</span><br><span class="line">print(forward_segment(<span class="string">'就读北京大学'</span>, dic))</span><br><span class="line">print(forward_segment(<span class="string">'研究生命起源'</span>, dic))</span><br></pre></td></tr></table></figure></li><li><p>逆向最长匹配</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backward_segment</span><span class="params">(text, dic)</span>:</span></span><br><span class="line">    word_list = []</span><br><span class="line">    i = len(text) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &gt;= <span class="number">0</span>:                                   <span class="comment"># 扫描位置作为终点</span></span><br><span class="line">        longest_word = text[i]                      <span class="comment"># 扫描位置的单字</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, i):                       <span class="comment"># 遍历[0, i]区间作为待查询词语的起点</span></span><br><span class="line">            word = text[j: i + <span class="number">1</span>]                   <span class="comment"># 取出[j, i]区间作为待查询单词</span></span><br><span class="line">            <span class="keyword">if</span> word <span class="keyword">in</span> dic:</span><br><span class="line">                <span class="keyword">if</span> len(word) &gt; len(longest_word):   <span class="comment"># 越长优先级越高</span></span><br><span class="line">                    longest_word = word</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        word_list.insert(<span class="number">0</span>, longest_word)           <span class="comment"># 逆向扫描，所以越先查出的单词在位置上越靠后</span></span><br><span class="line">        i -= len(longest_word)</span><br><span class="line">    <span class="keyword">return</span> word_list</span><br><span class="line"></span><br><span class="line">dic = load_dictionary()</span><br><span class="line">print(backward_segment(<span class="string">'研究生命起源'</span>, dic))</span><br><span class="line">print(backward_segment(<span class="string">'项目的研究'</span>, dic))</span><br></pre></td></tr></table></figure></li><li><p>双向最长匹配<br>同时执行正向和逆向最长匹配，若两者的词数不同，则返回词数更少的那一个。否则，返回两者中单字更少的那一个。当单字数也相同时，优先返回逆向最长匹配的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_single_char</span><span class="params">(word_list: list)</span>:</span>  <span class="comment"># 统计单字成词的个数</span></span><br><span class="line">    <span class="keyword">return</span> sum(<span class="number">1</span> <span class="keyword">for</span> word <span class="keyword">in</span> word_list <span class="keyword">if</span> len(word) == <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bidirectional_segment</span><span class="params">(text, dic)</span>:</span></span><br><span class="line">    f = forward_segment(text, dic)</span><br><span class="line">    b = backward_segment(text, dic)</span><br><span class="line">    <span class="keyword">if</span> len(f) &lt; len(b):                                  <span class="comment"># 词数更少优先级更高</span></span><br><span class="line">        <span class="keyword">return</span> f</span><br><span class="line">    <span class="keyword">elif</span> len(f) &gt; len(b):</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> count_single_char(f) &lt; count_single_char(b):  <span class="comment"># 单字更少优先级更高</span></span><br><span class="line">            <span class="keyword">return</span> f</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> b                                     <span class="comment"># 都相等时逆向匹配优先级更高</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">print(bidirectional_segment(<span class="string">'研究生命起源'</span>, dic))</span><br><span class="line">print(bidirectional_segment(<span class="string">'项目的研究'</span>, dic))</span><br></pre></td></tr></table></figure></li><li><p>使用HanLP实现分词</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyhanlp <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不显示词性</span></span><br><span class="line">HanLP.Config.ShowTermNature = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可传入自定义字典 [dir1, dir2]</span></span><br><span class="line">segment = DoubleArrayTrieSegment()</span><br><span class="line"><span class="comment"># 激活数字和英文识别</span></span><br><span class="line">segment.enablePartOfSpeechTagging(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">print(segment.seg(<span class="string">"江西鄱阳湖干枯，中国最大淡水湖变成大草原"</span>))</span><br><span class="line">print(segment.seg(<span class="string">"上海市虹口区大连西路550号SISU"</span>))</span><br></pre></td></tr></table></figure></li></ol><p>去掉停用词：<br><a href="https://github.com/NLP-LOVE/Introduction-NLP/blob/master/data/dictionnary/stopwords.txt" target="_blank" rel="noopener">stopwords.txt</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_from_file</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    从词典文件加载DoubleArrayTrie</span></span><br><span class="line"><span class="string">    :param path: 词典路径</span></span><br><span class="line"><span class="string">    :return: 双数组trie树</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    map = JClass(<span class="string">'java.util.TreeMap'</span>)()  <span class="comment"># 创建TreeMap实例</span></span><br><span class="line">    <span class="keyword">with</span> open(path) <span class="keyword">as</span> src:</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> src:</span><br><span class="line">            word = word.strip()  <span class="comment"># 去掉Python读入的\n</span></span><br><span class="line">            map[word] = word</span><br><span class="line">    <span class="keyword">return</span> JClass(<span class="string">'com.hankcs.hanlp.collection.trie.DoubleArrayTrie'</span>)(map)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 去掉停用词</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_stopwords_termlist</span><span class="params">(termlist, trie)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [term.word <span class="keyword">for</span> term <span class="keyword">in</span> termlist <span class="keyword">if</span> <span class="keyword">not</span> trie.containsKey(term.word)]</span><br><span class="line"></span><br><span class="line">trie = load_from_file(<span class="string">'stopwords.txt'</span>)</span><br><span class="line">termlist = segment.seg(<span class="string">"江西鄱阳湖干枯了，中国最大的淡水湖变成了大草原"</span>)</span><br><span class="line">print(<span class="string">'去掉停用词前：'</span>, termlist)</span><br><span class="line">print(<span class="string">'去掉停用词后：'</span>, remove_stopwords_termlist(termlist, trie))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP任务-04-词性标注</title>
      <link href="/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-04-%E8%AF%8D%E6%80%A7%E6%A0%87%E6%B3%A8/"/>
      <url>/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-04-%E8%AF%8D%E6%80%A7%E6%A0%87%E6%B3%A8/</url>
      
        <content type="html"><![CDATA[<p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-01-%E8%AF%8D%E5%B5%8C%E5%85%A5/" target="_blank" rel="noopener">NLP任务-01-词嵌入</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-02-%E5%BA%8F%E5%88%97%E6%A0%87%E6%B3%A8/" target="_blank" rel="noopener">NLP任务-02-序列标注</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-03-%E5%88%86%E8%AF%8D/" target="_blank" rel="noopener">NLP任务-03-分词</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-04-%E8%AF%8D%E6%80%A7%E6%A0%87%E6%B3%A8/" target="_blank" rel="noopener">NLP任务-04-词性标注</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-05-%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%ABNER/" target="_blank" rel="noopener">NLP任务-05-命名实体识别</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-06-%E4%BE%9D%E5%AD%98%E5%8F%A5%E6%B3%95%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">NLP任务-06-依存句法分析</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-07-%E4%BF%A1%E6%81%AF%E6%8A%BD%E5%8F%96/" target="_blank" rel="noopener">NLP任务-07-信息抽取</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-08-%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB/" target="_blank" rel="noopener">NLP任务-08-文本分类</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-09-%E6%96%87%E6%9C%AC%E8%81%9A%E7%B1%BB/" target="_blank" rel="noopener">NLP任务-09-文本聚类</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-10-%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/" target="_blank" rel="noopener">NLP任务-10-自动补全</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-11-%E8%AF%AD%E4%B9%89%E6%B6%88%E6%AD%A7/" target="_blank" rel="noopener">NLP任务-11-语义消歧</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-12-%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/" target="_blank" rel="noopener">NLP任务-12-问答系统</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-13-%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/" target="_blank" rel="noopener">NLP任务-13-机器翻译</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-14-%E8%87%AA%E5%8A%A8%E6%91%98%E8%A6%81/" target="_blank" rel="noopener">NLP任务-14-自动摘要</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-15-%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">NLP任务-15-情感分析</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-16-%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/" target="_blank" rel="noopener">NLP任务-16-聊天机器人</a></p><p>不同的语料库采用了不同的词性标注集，一般都含有形容词、动词、名词等常见词性。</p><img src="https://i.loli.net/2020/07/29/pUrzawD8XRI2LJP.png" alt="词性标注" width="80%"><p>词性标注的作用：</p><ol><li>下游遇到OOV时，根据词性可以猜测用法</li><li>可以抽取信息，如描述一件物品的所有形容词</li><li>……</li></ol><p><code>词性标注</code>指的是为句子中每个单词预测一个词性标签的任务。它具有有以下两个难点:</p><ol><li>汉语中一个单词多个词性的现象很常见，但在具体语境下一定是唯一词性。</li><li>OOV 是任何自然语言处理任务的难题。</li></ol><p><code>词性标注模型</code>可以将中文分词中的汉字替换为词语，{B,M,E,S} 替换为“名词、动词、形容词等”，序列标注模型马上就可以用来做词性标注。</p><h3 id="基于HMM的词性标注"><a href="#基于HMM的词性标注" class="headerlink" title="基于HMM的词性标注"></a>基于HMM的词性标注</h3><p><a href="https://github.com/NLP-LOVE/Introduction-NLP/tree/master/code/ch07/hmm_pos.py" target="_blank" rel="noopener">代码</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span>  pyhanlp <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pyhanlp.static <span class="keyword">import</span> download, remove_file, HANLP_DATA_PATH</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_data_path</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取测试数据路径，位于$root/data/test，根目录由配置文件指定。</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    data_path = os.path.join(HANLP_DATA_PATH, <span class="string">'test'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(data_path):</span><br><span class="line">        os.mkdir(data_path)</span><br><span class="line">    <span class="keyword">return</span> data_path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 验证是否存在 MSR语料库，如果没有自动下载</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ensure_data</span><span class="params">(data_name, data_url)</span>:</span></span><br><span class="line">    root_path = test_data_path()</span><br><span class="line">    dest_path = os.path.join(root_path, data_name)</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(dest_path):</span><br><span class="line">        <span class="keyword">return</span> dest_path</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> data_url.endswith(<span class="string">'.zip'</span>):</span><br><span class="line">        dest_path += <span class="string">'.zip'</span></span><br><span class="line">    download(data_url, dest_path)</span><br><span class="line">    <span class="keyword">if</span> data_url.endswith(<span class="string">'.zip'</span>):</span><br><span class="line">        <span class="keyword">with</span> zipfile.ZipFile(dest_path, <span class="string">"r"</span>) <span class="keyword">as</span> archive:</span><br><span class="line">            archive.extractall(root_path)</span><br><span class="line">        remove_file(dest_path)</span><br><span class="line">        dest_path = dest_path[:-len(<span class="string">'.zip'</span>)]</span><br><span class="line">    <span class="keyword">return</span> dest_path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 指定 PKU 语料库</span></span><br><span class="line">PKU98 = ensure_data(<span class="string">"pku98"</span>, <span class="string">"http://file.hankcs.com/corpus/pku98.zip"</span>)</span><br><span class="line">PKU199801 = os.path.join(PKU98, <span class="string">'199801.txt'</span>)</span><br><span class="line">PKU199801_TRAIN = os.path.join(PKU98, <span class="string">'199801-train.txt'</span>)</span><br><span class="line">PKU199801_TEST = os.path.join(PKU98, <span class="string">'199801-test.txt'</span>)</span><br><span class="line">POS_MODEL = os.path.join(PKU98, <span class="string">'pos.bin'</span>)</span><br><span class="line">NER_MODEL = os.path.join(PKU98, <span class="string">'ner.bin'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## ===============================================</span></span><br><span class="line"><span class="comment">## 以下开始 HMM 词性标注</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HMMPOSTagger = JClass(<span class="string">'com.hankcs.hanlp.model.hmm.HMMPOSTagger'</span>)</span><br><span class="line">AbstractLexicalAnalyzer = JClass(<span class="string">'com.hankcs.hanlp.tokenizer.lexical.AbstractLexicalAnalyzer'</span>)</span><br><span class="line">PerceptronSegmenter = JClass(<span class="string">'com.hankcs.hanlp.model.perceptron.PerceptronSegmenter'</span>)</span><br><span class="line">FirstOrderHiddenMarkovModel = JClass(<span class="string">'com.hankcs.hanlp.model.hmm.FirstOrderHiddenMarkovModel'</span>)</span><br><span class="line">SecondOrderHiddenMarkovModel = JClass(<span class="string">'com.hankcs.hanlp.model.hmm.SecondOrderHiddenMarkovModel'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_hmm_pos</span><span class="params">(corpus, model)</span>:</span></span><br><span class="line">    tagger = HMMPOSTagger(model)  <span class="comment"># 创建词性标注器</span></span><br><span class="line">    tagger.train(corpus)  <span class="comment"># 训练</span></span><br><span class="line">    print(<span class="string">', '</span>.join(tagger.tag(<span class="string">"他"</span>, <span class="string">"的"</span>, <span class="string">"希望"</span>, <span class="string">"是"</span>, <span class="string">"希望"</span>, <span class="string">"上学"</span>)))  <span class="comment"># 预测</span></span><br><span class="line">    analyzer = AbstractLexicalAnalyzer(PerceptronSegmenter(), tagger)  <span class="comment"># 构造词法分析器，与感知机分词器结合，能同时进行分词和词性标注。</span></span><br><span class="line">    print(analyzer.analyze(<span class="string">"他的希望是希望上学"</span>))  <span class="comment"># 分词+词性标注</span></span><br><span class="line">    print(analyzer.analyze(<span class="string">"他的希望是希望上学"</span>).translateLabels())  <span class="comment"># 对词性进行翻译</span></span><br><span class="line">    print(analyzer.analyze(<span class="string">"李狗蛋的希望是希望上学"</span>).translateLabels())  <span class="comment"># 对词性进行翻译</span></span><br><span class="line">    <span class="keyword">return</span> tagger</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'一阶隐马尔可夫模型:'</span>)</span><br><span class="line">    tagger1 = train_hmm_pos(PKU199801_TRAIN, FirstOrderHiddenMarkovModel())   <span class="comment"># 一阶隐马</span></span><br><span class="line">    print(<span class="string">''</span>)</span><br><span class="line">    print(<span class="string">'二阶隐马尔可夫模型:'</span>)</span><br><span class="line">    tagger = train_hmm_pos(PKU199801_TRAIN, SecondOrderHiddenMarkovModel())  <span class="comment"># 二阶隐马</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">一阶隐马尔可夫模型:</span><br><span class="line">r, u, n, v, v, v</span><br><span class="line">他/r 的/u 希望/n 是/v 希望/v 上学/v</span><br><span class="line">他/代词 的/助词 希望/名词 是/动词 希望/动词 上学/动词</span><br><span class="line">李狗蛋/动词 的/动词 希望/动词 是/动词 希望/动词 上学/动词</span><br><span class="line"></span><br><span class="line">二阶隐马尔可夫模型:</span><br><span class="line">r, u, n, v, v, v</span><br><span class="line">他/r 的/u 希望/n 是/v 希望/v 上学/v</span><br><span class="line">他/代词 的/助词 希望/名词 是/动词 希望/动词 上学/动词</span><br><span class="line">李狗蛋/动词 的/动词 希望/动词 是/动词 希望/动词 上学/动词</span><br></pre></td></tr></table></figure><p>但是HMM模型进行词性标注存在OOV问题，它一步走错则会导致更多的错误，HMM模型只利用单词这特征，无法通过姓氏去预测人名。</p><h3 id="基于感知机的词性标注"><a href="#基于感知机的词性标注" class="headerlink" title="基于感知机的词性标注"></a>基于感知机的词性标注</h3><p><a href="https://github.com/NLP-LOVE/Introduction-NLP/tree/master/code/ch07/perceptron_pos.py" target="_blank" rel="noopener">代码</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span>  pyhanlp <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pyhanlp.static <span class="keyword">import</span> download, remove_file, HANLP_DATA_PATH</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_data_path</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取测试数据路径，位于$root/data/test，根目录由配置文件指定。</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    data_path = os.path.join(HANLP_DATA_PATH, <span class="string">'test'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(data_path):</span><br><span class="line">        os.mkdir(data_path)</span><br><span class="line">    <span class="keyword">return</span> data_path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 验证是否存在 MSR语料库，如果没有自动下载</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ensure_data</span><span class="params">(data_name, data_url)</span>:</span></span><br><span class="line">    root_path = test_data_path()</span><br><span class="line">    dest_path = os.path.join(root_path, data_name)</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(dest_path):</span><br><span class="line">        <span class="keyword">return</span> dest_path</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> data_url.endswith(<span class="string">'.zip'</span>):</span><br><span class="line">        dest_path += <span class="string">'.zip'</span></span><br><span class="line">    download(data_url, dest_path)</span><br><span class="line">    <span class="keyword">if</span> data_url.endswith(<span class="string">'.zip'</span>):</span><br><span class="line">        <span class="keyword">with</span> zipfile.ZipFile(dest_path, <span class="string">"r"</span>) <span class="keyword">as</span> archive:</span><br><span class="line">            archive.extractall(root_path)</span><br><span class="line">        remove_file(dest_path)</span><br><span class="line">        dest_path = dest_path[:-len(<span class="string">'.zip'</span>)]</span><br><span class="line">    <span class="keyword">return</span> dest_path</span><br><span class="line"></span><br><span class="line"><span class="comment">## 指定 PKU 语料库</span></span><br><span class="line">PKU98 = ensure_data(<span class="string">"pku98"</span>, <span class="string">"http://file.hankcs.com/corpus/pku98.zip"</span>)</span><br><span class="line">PKU199801 = os.path.join(PKU98, <span class="string">'199801.txt'</span>)</span><br><span class="line">PKU199801_TRAIN = os.path.join(PKU98, <span class="string">'199801-train.txt'</span>)</span><br><span class="line">PKU199801_TEST = os.path.join(PKU98, <span class="string">'199801-test.txt'</span>)</span><br><span class="line">POS_MODEL = os.path.join(PKU98, <span class="string">'pos.bin'</span>)</span><br><span class="line">NER_MODEL = os.path.join(PKU98, <span class="string">'ner.bin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## ===============================================</span></span><br><span class="line"><span class="comment">## 以下开始 感知机 词性标注</span></span><br><span class="line"></span><br><span class="line">AbstractLexicalAnalyzer = JClass(<span class="string">'com.hankcs.hanlp.tokenizer.lexical.AbstractLexicalAnalyzer'</span>)</span><br><span class="line">PerceptronSegmenter = JClass(<span class="string">'com.hankcs.hanlp.model.perceptron.PerceptronSegmenter'</span>)</span><br><span class="line">POSTrainer = JClass(<span class="string">'com.hankcs.hanlp.model.perceptron.POSTrainer'</span>)</span><br><span class="line">PerceptronPOSTagger = JClass(<span class="string">'com.hankcs.hanlp.model.perceptron.PerceptronPOSTagger'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_perceptron_pos</span><span class="params">(corpus)</span>:</span></span><br><span class="line">    trainer = POSTrainer()</span><br><span class="line">    trainer.train(corpus, POS_MODEL)  <span class="comment"># 训练感知机模型</span></span><br><span class="line">    tagger = PerceptronPOSTagger(POS_MODEL)  <span class="comment"># 加载</span></span><br><span class="line">    analyzer = AbstractLexicalAnalyzer(PerceptronSegmenter(), tagger)  <span class="comment"># 构造词法分析器，与感知机分词器结合，能同时进行分词和词性标注。</span></span><br><span class="line">    print(analyzer.analyze(<span class="string">"李狗蛋的希望是希望上学"</span>))  <span class="comment"># 分词+词性标注</span></span><br><span class="line">    print(analyzer.analyze(<span class="string">"李狗蛋的希望是希望上学"</span>).translateLabels())  <span class="comment"># 对词性进行翻译</span></span><br><span class="line">    <span class="keyword">return</span> tagger</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    train_perceptron_pos(PKU199801_TRAIN)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">李狗蛋/nr 的/u 希望/n 是/v 希望/v 上学/v</span><br><span class="line">李狗蛋/人名 的/助词 希望/名词 是/动词 希望/动词 上学/动词</span><br></pre></td></tr></table></figure><p>可见，这次的运行结果是完全正确的，可以正确的识别出OOV。</p><h3 id="基于CRF的词性标注"><a href="#基于CRF的词性标注" class="headerlink" title="基于CRF的词性标注"></a>基于CRF的词性标注</h3><p><a href="https://github.com/NLP-LOVE/Introduction-NLP/tree/master/code/ch07/crf_pos.py" target="_blank" rel="noopener">代码</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span>  pyhanlp <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pyhanlp.static <span class="keyword">import</span> download, remove_file, HANLP_DATA_PATH</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_data_path</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取测试数据路径，位于$root/data/test，根目录由配置文件指定。</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    data_path = os.path.join(HANLP_DATA_PATH, <span class="string">'test'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(data_path):</span><br><span class="line">        os.mkdir(data_path)</span><br><span class="line">    <span class="keyword">return</span> data_path</span><br><span class="line"></span><br><span class="line"><span class="comment">## 验证是否存在 MSR语料库，如果没有自动下载</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ensure_data</span><span class="params">(data_name, data_url)</span>:</span></span><br><span class="line">    root_path = test_data_path()</span><br><span class="line">    dest_path = os.path.join(root_path, data_name)</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(dest_path):</span><br><span class="line">        <span class="keyword">return</span> dest_path</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> data_url.endswith(<span class="string">'.zip'</span>):</span><br><span class="line">        dest_path += <span class="string">'.zip'</span></span><br><span class="line">    download(data_url, dest_path)</span><br><span class="line">    <span class="keyword">if</span> data_url.endswith(<span class="string">'.zip'</span>):</span><br><span class="line">        <span class="keyword">with</span> zipfile.ZipFile(dest_path, <span class="string">"r"</span>) <span class="keyword">as</span> archive:</span><br><span class="line">            archive.extractall(root_path)</span><br><span class="line">        remove_file(dest_path)</span><br><span class="line">        dest_path = dest_path[:-len(<span class="string">'.zip'</span>)]</span><br><span class="line">    <span class="keyword">return</span> dest_path</span><br><span class="line"></span><br><span class="line"><span class="comment">## 指定 PKU 语料库</span></span><br><span class="line">PKU98 = ensure_data(<span class="string">"pku98"</span>, <span class="string">"http://file.hankcs.com/corpus/pku98.zip"</span>)</span><br><span class="line">PKU199801 = os.path.join(PKU98, <span class="string">'199801.txt'</span>)</span><br><span class="line">PKU199801_TRAIN = os.path.join(PKU98, <span class="string">'199801-train.txt'</span>)</span><br><span class="line">PKU199801_TEST = os.path.join(PKU98, <span class="string">'199801-test.txt'</span>)</span><br><span class="line">POS_MODEL = os.path.join(PKU98, <span class="string">'pos.bin'</span>)</span><br><span class="line">NER_MODEL = os.path.join(PKU98, <span class="string">'ner.bin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## ===============================================</span></span><br><span class="line"><span class="comment">## 以下开始 CRF 词性标注</span></span><br><span class="line"></span><br><span class="line">AbstractLexicalAnalyzer = JClass(<span class="string">'com.hankcs.hanlp.tokenizer.lexical.AbstractLexicalAnalyzer'</span>)</span><br><span class="line">PerceptronSegmenter = JClass(<span class="string">'com.hankcs.hanlp.model.perceptron.PerceptronSegmenter'</span>)</span><br><span class="line">CRFPOSTagger = JClass(<span class="string">'com.hankcs.hanlp.model.crf.CRFPOSTagger'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_crf_pos</span><span class="params">(corpus)</span>:</span></span><br><span class="line">    <span class="comment"># 选项1.使用HanLP的Java API训练，慢</span></span><br><span class="line">    tagger = CRFPOSTagger(<span class="literal">None</span>)  <span class="comment"># 创建空白标注器</span></span><br><span class="line">    tagger.train(corpus, POS_MODEL)  <span class="comment"># 训练</span></span><br><span class="line">    tagger = CRFPOSTagger(POS_MODEL) <span class="comment"># 加载</span></span><br><span class="line">    <span class="comment"># 选项2.使用CRF++训练，HanLP加载。（训练命令由选项1给出）</span></span><br><span class="line">    <span class="comment"># tagger = CRFPOSTagger(POS_MODEL + ".txt")</span></span><br><span class="line">    analyzer = AbstractLexicalAnalyzer(PerceptronSegmenter(), tagger)  <span class="comment"># 构造词法分析器，与感知机分词器结合，能同时进行分词和词性标注。</span></span><br><span class="line">    print(analyzer.analyze(<span class="string">"李狗蛋的希望是希望上学"</span>))  <span class="comment"># 分词+词性标注</span></span><br><span class="line">    print(analyzer.analyze(<span class="string">"李狗蛋的希望是希望上学"</span>).translateLabels())  <span class="comment"># 对词性进行翻译</span></span><br><span class="line">    <span class="keyword">return</span> tagger</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    tagger = train_crf_pos(PKU199801_TRAIN)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">李狗蛋/nr 的/u 希望/n 是/v 希望/v 上学/v</span><br><span class="line">李狗蛋/人名 的/助词 希望/名词 是/动词 希望/动词 上学/动词</span><br></pre></td></tr></table></figure><p>可见，这次的运行结果是完全正确的，依然可以正确的识别出OOV。</p><h3 id="算法对比"><a href="#算法对比" class="headerlink" title="算法对比"></a>算法对比</h3><p>结构化感知机和条件随机场都要优于隐马尔可夫模型，判别式模型能够利用更多的特征来进行训练，从而提高更多的精度。</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP任务-05-命名实体识别</title>
      <link href="/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-05-%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%ABNER/"/>
      <url>/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-05-%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%ABNER/</url>
      
        <content type="html"><![CDATA[<p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-01-%E8%AF%8D%E5%B5%8C%E5%85%A5/" target="_blank" rel="noopener">NLP任务-01-词嵌入</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-02-%E5%BA%8F%E5%88%97%E6%A0%87%E6%B3%A8/" target="_blank" rel="noopener">NLP任务-02-序列标注</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-03-%E5%88%86%E8%AF%8D/" target="_blank" rel="noopener">NLP任务-03-分词</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-04-%E8%AF%8D%E6%80%A7%E6%A0%87%E6%B3%A8/" target="_blank" rel="noopener">NLP任务-04-词性标注</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-05-%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%ABNER/" target="_blank" rel="noopener">NLP任务-05-命名实体识别</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-06-%E4%BE%9D%E5%AD%98%E5%8F%A5%E6%B3%95%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">NLP任务-06-依存句法分析</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-07-%E4%BF%A1%E6%81%AF%E6%8A%BD%E5%8F%96/" target="_blank" rel="noopener">NLP任务-07-信息抽取</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-08-%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB/" target="_blank" rel="noopener">NLP任务-08-文本分类</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-09-%E6%96%87%E6%9C%AC%E8%81%9A%E7%B1%BB/" target="_blank" rel="noopener">NLP任务-09-文本聚类</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-10-%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/" target="_blank" rel="noopener">NLP任务-10-自动补全</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-11-%E8%AF%AD%E4%B9%89%E6%B6%88%E6%AD%A7/" target="_blank" rel="noopener">NLP任务-11-语义消歧</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-12-%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/" target="_blank" rel="noopener">NLP任务-12-问答系统</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-13-%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/" target="_blank" rel="noopener">NLP任务-13-机器翻译</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-14-%E8%87%AA%E5%8A%A8%E6%91%98%E8%A6%81/" target="_blank" rel="noopener">NLP任务-14-自动摘要</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-15-%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">NLP任务-15-情感分析</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-16-%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/" target="_blank" rel="noopener">NLP任务-16-聊天机器人</a></p><p>来自<a href="https://github.com/NLP-LOVE/Introduction-NLP/blob/master/chapter/8.%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB.md" target="_blank" rel="noopener">命名实体识别</a></p><p>文本中有一些描述实体的词汇。比如人名、地名、组织机构名、股票基金、医学术语等，称为命名实体。识别出句子中命名实体的边界与类别的任务称为命名实体识别。</p><p><code>命名实体识别</code>也可以转化为一个<code>序列标注问题</code>。具体做法是将命名实体识别附着到<code>{B,M,E,S}</code>标签，比如，构成地名的单词标注为“B/ME/S- 地名”，以此类推。对于那些命名实体边界之外的单词，则统一标注为0 ( Outside )。</p><h3 id="基于HMM的NER"><a href="#基于HMM的NER" class="headerlink" title="基于HMM的NER"></a>基于HMM的NER</h3><p><a href="https://github.com/NLP-LOVE/Introduction-NLP/tree/master/code/ch08/hmm_ner.py" target="_blank" rel="noopener">代码</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span>  pyhanlp <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pyhanlp.static <span class="keyword">import</span> download, remove_file, HANLP_DATA_PATH</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_data_path</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取测试数据路径，位于$root/data/test，根目录由配置文件指定。</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    data_path = os.path.join(HANLP_DATA_PATH, <span class="string">'test'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(data_path):</span><br><span class="line">        os.mkdir(data_path)</span><br><span class="line">    <span class="keyword">return</span> data_path</span><br><span class="line"></span><br><span class="line"><span class="comment">## 验证是否存在 MSR语料库，如果没有自动下载</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ensure_data</span><span class="params">(data_name, data_url)</span>:</span></span><br><span class="line">    root_path = test_data_path()</span><br><span class="line">    dest_path = os.path.join(root_path, data_name)</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(dest_path):</span><br><span class="line">        <span class="keyword">return</span> dest_path</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> data_url.endswith(<span class="string">'.zip'</span>):</span><br><span class="line">        dest_path += <span class="string">'.zip'</span></span><br><span class="line">    download(data_url, dest_path)</span><br><span class="line">    <span class="keyword">if</span> data_url.endswith(<span class="string">'.zip'</span>):</span><br><span class="line">        <span class="keyword">with</span> zipfile.ZipFile(dest_path, <span class="string">"r"</span>) <span class="keyword">as</span> archive:</span><br><span class="line">            archive.extractall(root_path)</span><br><span class="line">        remove_file(dest_path)</span><br><span class="line">        dest_path = dest_path[:-len(<span class="string">'.zip'</span>)]</span><br><span class="line">    <span class="keyword">return</span> dest_path</span><br><span class="line"></span><br><span class="line"><span class="comment">## 指定 PKU 语料库</span></span><br><span class="line">PKU98 = ensure_data(<span class="string">"pku98"</span>, <span class="string">"http://file.hankcs.com/corpus/pku98.zip"</span>)</span><br><span class="line">PKU199801 = os.path.join(PKU98, <span class="string">'199801.txt'</span>)</span><br><span class="line">PKU199801_TRAIN = os.path.join(PKU98, <span class="string">'199801-train.txt'</span>)</span><br><span class="line">PKU199801_TEST = os.path.join(PKU98, <span class="string">'199801-test.txt'</span>)</span><br><span class="line">POS_MODEL = os.path.join(PKU98, <span class="string">'pos.bin'</span>)</span><br><span class="line">NER_MODEL = os.path.join(PKU98, <span class="string">'ner.bin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## ===============================================</span></span><br><span class="line"><span class="comment">## 以下开始 HMM 命名实体识别</span></span><br><span class="line"></span><br><span class="line">HMMNERecognizer = JClass(<span class="string">'com.hankcs.hanlp.model.hmm.HMMNERecognizer'</span>)</span><br><span class="line">AbstractLexicalAnalyzer = JClass(<span class="string">'com.hankcs.hanlp.tokenizer.lexical.AbstractLexicalAnalyzer'</span>)</span><br><span class="line">PerceptronSegmenter = JClass(<span class="string">'com.hankcs.hanlp.model.perceptron.PerceptronSegmenter'</span>)</span><br><span class="line">PerceptronPOSTagger = JClass(<span class="string">'com.hankcs.hanlp.model.perceptron.PerceptronPOSTagger'</span>)</span><br><span class="line">Utility = JClass(<span class="string">'com.hankcs.hanlp.model.perceptron.utility.Utility'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(corpus)</span>:</span></span><br><span class="line">    recognizer = HMMNERecognizer()</span><br><span class="line">    recognizer.train(corpus)  <span class="comment"># data/test/pku98/199801-train.txt</span></span><br><span class="line">    <span class="keyword">return</span> recognizer</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(recognizer)</span>:</span></span><br><span class="line">    <span class="comment"># 包装了感知机分词器和词性标注器的词法分析器</span></span><br><span class="line">    analyzer = AbstractLexicalAnalyzer(PerceptronSegmenter(), PerceptronPOSTagger(), recognizer)</span><br><span class="line">    print(analyzer.analyze(<span class="string">"华北电力公司董事长谭旭光和秘书胡花蕊来到美国纽约现代艺术博物馆参观"</span>))</span><br><span class="line">    scores = Utility.evaluateNER(recognizer, PKU199801_TEST)</span><br><span class="line">    Utility.printNERScore(scores)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    recognizer = train(PKU199801_TRAIN)</span><br><span class="line">    test(recognizer)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">华北电力公司/nt 董事长/n 谭旭光/nr 和/c 秘书/n 胡花蕊/nr 来到/v 美国纽约/ns 现代/ntc 艺术/n 博物馆/n 参观/v</span><br></pre></td></tr></table></figure><p>其中地名“美国纽约现代艺术博物馆”则无法识别。有以下两个原因:</p><ul><li>PKU 语料库中没有出现过这个样本。</li><li>HMM无法利用词性特征。<br>对于第一个原因，只能额外标注一些语料。对于第二个原因可以通过切换到更强大的模型来解决。</li></ul><h3 id="基于感知机的NER"><a href="#基于感知机的NER" class="headerlink" title="基于感知机的NER"></a>基于感知机的NER</h3><p><a href="https://github.com/NLP-LOVE/Introduction-NLP/tree/master/code/ch08/perceptron_ner.py" target="_blank" rel="noopener">代码</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span>  pyhanlp <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pyhanlp.static <span class="keyword">import</span> download, remove_file, HANLP_DATA_PATH</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_data_path</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取测试数据路径，位于$root/data/test，根目录由配置文件指定。</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    data_path = os.path.join(HANLP_DATA_PATH, <span class="string">'test'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(data_path):</span><br><span class="line">        os.mkdir(data_path)</span><br><span class="line">    <span class="keyword">return</span> data_path</span><br><span class="line"></span><br><span class="line"><span class="comment">## 验证是否存在 MSR语料库，如果没有自动下载</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ensure_data</span><span class="params">(data_name, data_url)</span>:</span></span><br><span class="line">    root_path = test_data_path()</span><br><span class="line">    dest_path = os.path.join(root_path, data_name)</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(dest_path):</span><br><span class="line">        <span class="keyword">return</span> dest_path</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> data_url.endswith(<span class="string">'.zip'</span>):</span><br><span class="line">        dest_path += <span class="string">'.zip'</span></span><br><span class="line">    download(data_url, dest_path)</span><br><span class="line">    <span class="keyword">if</span> data_url.endswith(<span class="string">'.zip'</span>):</span><br><span class="line">        <span class="keyword">with</span> zipfile.ZipFile(dest_path, <span class="string">"r"</span>) <span class="keyword">as</span> archive:</span><br><span class="line">            archive.extractall(root_path)</span><br><span class="line">        remove_file(dest_path)</span><br><span class="line">        dest_path = dest_path[:-len(<span class="string">'.zip'</span>)]</span><br><span class="line">    <span class="keyword">return</span> dest_path</span><br><span class="line"></span><br><span class="line"><span class="comment">## 指定 PKU 语料库</span></span><br><span class="line">PKU98 = ensure_data(<span class="string">"pku98"</span>, <span class="string">"http://file.hankcs.com/corpus/pku98.zip"</span>)</span><br><span class="line">PKU199801 = os.path.join(PKU98, <span class="string">'199801.txt'</span>)</span><br><span class="line">PKU199801_TRAIN = os.path.join(PKU98, <span class="string">'199801-train.txt'</span>)</span><br><span class="line">PKU199801_TEST = os.path.join(PKU98, <span class="string">'199801-test.txt'</span>)</span><br><span class="line">POS_MODEL = os.path.join(PKU98, <span class="string">'pos.bin'</span>)</span><br><span class="line">NER_MODEL = os.path.join(PKU98, <span class="string">'ner.bin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## ===============================================</span></span><br><span class="line"><span class="comment">## 以下开始 感知机 命名实体识别</span></span><br><span class="line"></span><br><span class="line">NERTrainer = JClass(<span class="string">'com.hankcs.hanlp.model.perceptron.NERTrainer'</span>)</span><br><span class="line">PerceptronNERecognizer = JClass(<span class="string">'com.hankcs.hanlp.model.perceptron.PerceptronNERecognizer'</span>)</span><br><span class="line">PerceptronSegmenter = JClass(<span class="string">'com.hankcs.hanlp.model.perceptron.PerceptronSegmenter'</span>)</span><br><span class="line">PerceptronPOSTagger = JClass(<span class="string">'com.hankcs.hanlp.model.perceptron.PerceptronPOSTagger'</span>)</span><br><span class="line">Sentence = JClass(<span class="string">'com.hankcs.hanlp.corpus.document.sentence.Sentence'</span>)</span><br><span class="line">AbstractLexicalAnalyzer = JClass(<span class="string">'com.hankcs.hanlp.tokenizer.lexical.AbstractLexicalAnalyzer'</span>)</span><br><span class="line">Utility = JClass(<span class="string">'com.hankcs.hanlp.model.perceptron.utility.Utility'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(corpus, model)</span>:</span></span><br><span class="line">    trainer = NERTrainer()</span><br><span class="line">    <span class="keyword">return</span> PerceptronNERecognizer(trainer.train(corpus, model).getModel())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(recognizer)</span>:</span></span><br><span class="line">    <span class="comment"># 包装了感知机分词器和词性标注器的词法分析器</span></span><br><span class="line">    analyzer = AbstractLexicalAnalyzer(PerceptronSegmenter(), PerceptronPOSTagger(), recognizer)</span><br><span class="line">    print(analyzer.analyze(<span class="string">"华北电力公司董事长谭旭光和秘书胡花蕊来到美国纽约现代艺术博物馆参观"</span>))</span><br><span class="line">    scores = Utility.evaluateNER(recognizer, PKU199801_TEST)</span><br><span class="line">    Utility.printNERScore(scores)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    recognizer = train(PKU199801_TRAIN, NER_MODEL)</span><br><span class="line">    test(recognizer)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">## 支持在线学习</span></span><br><span class="line">    <span class="comment"># 创建了感知机词法分析器</span></span><br><span class="line">    analyzer = PerceptronLexicalAnalyzer(PerceptronSegmenter(), PerceptronPOSTagger(), recognizer)  <span class="comment"># ①</span></span><br><span class="line">    <span class="comment"># 根据标注样本的字符串形式创建等价的 Sentence对象</span></span><br><span class="line">    sentence = Sentence.create(<span class="string">"与/c 特朗普/nr 通/v 电话/n 讨论/v [太空/s 探索/vn 技术/n 公司/n]/nt"</span>)  <span class="comment"># ②</span></span><br><span class="line">    <span class="comment"># 测试词法分析器对样本的分析结果是否与标注一致，若不一致重复在线学习，直到两者一致。</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> analyzer.analyze(sentence.text()).equals(sentence):  <span class="comment"># ③</span></span><br><span class="line">        analyzer.learn(sentence)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">华北电力公司/nt 董事长/n 谭旭光/nr 和/c 秘书/n 胡花蕊/nr 来到/v [美国纽约/ns 现代/ntc 艺术/n 博物馆/n]/ns 参观/v</span><br></pre></td></tr></table></figure><p>与HMM相比，可以正确识别地名“美国纽约现代艺术博物馆”。</p><h3 id="基于CRF的NER"><a href="#基于CRF的NER" class="headerlink" title="基于CRF的NER"></a>基于CRF的NER</h3><p><a href="https://github.com/NLP-LOVE/Introduction-NLP/tree/master/code/ch08/crf_ner.py" target="_blank" rel="noopener">代码</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span>  pyhanlp <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pyhanlp.static <span class="keyword">import</span> download, remove_file, HANLP_DATA_PATH</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_data_path</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取测试数据路径，位于$root/data/test，根目录由配置文件指定。</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    data_path = os.path.join(HANLP_DATA_PATH, <span class="string">'test'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(data_path):</span><br><span class="line">        os.mkdir(data_path)</span><br><span class="line">    <span class="keyword">return</span> data_path</span><br><span class="line"></span><br><span class="line"><span class="comment">## 验证是否存在 MSR语料库，如果没有自动下载</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ensure_data</span><span class="params">(data_name, data_url)</span>:</span></span><br><span class="line">    root_path = test_data_path()</span><br><span class="line">    dest_path = os.path.join(root_path, data_name)</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(dest_path):</span><br><span class="line">        <span class="keyword">return</span> dest_path</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> data_url.endswith(<span class="string">'.zip'</span>):</span><br><span class="line">        dest_path += <span class="string">'.zip'</span></span><br><span class="line">    download(data_url, dest_path)</span><br><span class="line">    <span class="keyword">if</span> data_url.endswith(<span class="string">'.zip'</span>):</span><br><span class="line">        <span class="keyword">with</span> zipfile.ZipFile(dest_path, <span class="string">"r"</span>) <span class="keyword">as</span> archive:</span><br><span class="line">            archive.extractall(root_path)</span><br><span class="line">        remove_file(dest_path)</span><br><span class="line">        dest_path = dest_path[:-len(<span class="string">'.zip'</span>)]</span><br><span class="line">    <span class="keyword">return</span> dest_path</span><br><span class="line"></span><br><span class="line"><span class="comment">## 指定 PKU 语料库</span></span><br><span class="line">PKU98 = ensure_data(<span class="string">"pku98"</span>, <span class="string">"http://file.hankcs.com/corpus/pku98.zip"</span>)</span><br><span class="line">PKU199801 = os.path.join(PKU98, <span class="string">'199801.txt'</span>)</span><br><span class="line">PKU199801_TRAIN = os.path.join(PKU98, <span class="string">'199801-train.txt'</span>)</span><br><span class="line">PKU199801_TEST = os.path.join(PKU98, <span class="string">'199801-test.txt'</span>)</span><br><span class="line">POS_MODEL = os.path.join(PKU98, <span class="string">'pos.bin'</span>)</span><br><span class="line">NER_MODEL = os.path.join(PKU98, <span class="string">'ner.bin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## ===============================================</span></span><br><span class="line"><span class="comment">## 以下开始 CRF 命名实体识别</span></span><br><span class="line"></span><br><span class="line">CRFNERecognizer = JClass(<span class="string">'com.hankcs.hanlp.model.crf.CRFNERecognizer'</span>)</span><br><span class="line">AbstractLexicalAnalyzer = JClass(<span class="string">'com.hankcs.hanlp.tokenizer.lexical.AbstractLexicalAnalyzer'</span>)</span><br><span class="line">Utility = JClass(<span class="string">'com.hankcs.hanlp.model.perceptron.utility.Utility'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(corpus, model)</span>:</span></span><br><span class="line">    <span class="comment"># 零参数的构造函数代表加载配置文件默认的模型，必须用null None 与之区分。</span></span><br><span class="line">    recognizer = CRFNERecognizer(<span class="literal">None</span>)  <span class="comment"># 空白</span></span><br><span class="line">    recognizer.train(corpus, model)</span><br><span class="line">    <span class="keyword">return</span> recognizer</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(recognizer)</span>:</span></span><br><span class="line">    analyzer = AbstractLexicalAnalyzer(PerceptronSegmenter(), PerceptronPOSTagger(), recognizer)</span><br><span class="line">    print(analyzer.analyze(<span class="string">"华北电力公司董事长谭旭光和秘书胡花蕊来到美国纽约现代艺术博物馆参观"</span>))</span><br><span class="line">    scores = Utility.evaluateNER(recognizer, PKU199801_TEST)</span><br><span class="line">    Utility.printNERScore(scores)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    recognizer = train(PKU199801_TRAIN, NER_MODEL)</span><br><span class="line">    test(recognizer)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">华北电力公司/nt 董事长/n 谭旭光/nr 和/c 秘书/n 胡花蕊/nr 来到/v [美国纽约/ns 现代/ntc 艺术/n 博物馆/n]/ns 参观/v</span><br></pre></td></tr></table></figure><p>和基于感知机的NER得到的结果是相同的。</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP任务-06-依存语法分析</title>
      <link href="/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-06-%E4%BE%9D%E5%AD%98%E5%8F%A5%E6%B3%95%E5%88%86%E6%9E%90/"/>
      <url>/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-06-%E4%BE%9D%E5%AD%98%E5%8F%A5%E6%B3%95%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-01-%E8%AF%8D%E5%B5%8C%E5%85%A5/" target="_blank" rel="noopener">NLP任务-01-词嵌入</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-02-%E5%BA%8F%E5%88%97%E6%A0%87%E6%B3%A8/" target="_blank" rel="noopener">NLP任务-02-序列标注</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-03-%E5%88%86%E8%AF%8D/" target="_blank" rel="noopener">NLP任务-03-分词</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-04-%E8%AF%8D%E6%80%A7%E6%A0%87%E6%B3%A8/" target="_blank" rel="noopener">NLP任务-04-词性标注</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-05-%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%ABNER/" target="_blank" rel="noopener">NLP任务-05-命名实体识别</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-06-%E4%BE%9D%E5%AD%98%E5%8F%A5%E6%B3%95%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">NLP任务-06-依存句法分析</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-07-%E4%BF%A1%E6%81%AF%E6%8A%BD%E5%8F%96/" target="_blank" rel="noopener">NLP任务-07-信息抽取</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-08-%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB/" target="_blank" rel="noopener">NLP任务-08-文本分类</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-09-%E6%96%87%E6%9C%AC%E8%81%9A%E7%B1%BB/" target="_blank" rel="noopener">NLP任务-09-文本聚类</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-10-%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/" target="_blank" rel="noopener">NLP任务-10-自动补全</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-11-%E8%AF%AD%E4%B9%89%E6%B6%88%E6%AD%A7/" target="_blank" rel="noopener">NLP任务-11-语义消歧</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-12-%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/" target="_blank" rel="noopener">NLP任务-12-问答系统</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-13-%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/" target="_blank" rel="noopener">NLP任务-13-机器翻译</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-14-%E8%87%AA%E5%8A%A8%E6%91%98%E8%A6%81/" target="_blank" rel="noopener">NLP任务-14-自动摘要</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-15-%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">NLP任务-15-情感分析</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-16-%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/" target="_blank" rel="noopener">NLP任务-16-聊天机器人</a></p><p><code>语法分析</code>是分析句子的语法结构，将其转化为容易理解的结构（往往是树形结构）。</p><p>推荐阅读<a href="https://github.com/NLP-LOVE/Introduction-NLP/blob/master/chapter/12.%E4%BE%9D%E5%AD%98%E5%8F%A5%E6%B3%95%E5%88%86%E6%9E%90.md" target="_blank" rel="noopener">依存语法分析</a></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP任务-07-信息抽取</title>
      <link href="/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-07-%E4%BF%A1%E6%81%AF%E6%8A%BD%E5%8F%96/"/>
      <url>/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-07-%E4%BF%A1%E6%81%AF%E6%8A%BD%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-01-%E8%AF%8D%E5%B5%8C%E5%85%A5/" target="_blank" rel="noopener">NLP任务-01-词嵌入</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-02-%E5%BA%8F%E5%88%97%E6%A0%87%E6%B3%A8/" target="_blank" rel="noopener">NLP任务-02-序列标注</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-03-%E5%88%86%E8%AF%8D/" target="_blank" rel="noopener">NLP任务-03-分词</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-04-%E8%AF%8D%E6%80%A7%E6%A0%87%E6%B3%A8/" target="_blank" rel="noopener">NLP任务-04-词性标注</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-05-%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%ABNER/" target="_blank" rel="noopener">NLP任务-05-命名实体识别</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-06-%E4%BE%9D%E5%AD%98%E5%8F%A5%E6%B3%95%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">NLP任务-06-依存句法分析</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-07-%E4%BF%A1%E6%81%AF%E6%8A%BD%E5%8F%96/" target="_blank" rel="noopener">NLP任务-07-信息抽取</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-08-%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB/" target="_blank" rel="noopener">NLP任务-08-文本分类</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-09-%E6%96%87%E6%9C%AC%E8%81%9A%E7%B1%BB/" target="_blank" rel="noopener">NLP任务-09-文本聚类</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-10-%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/" target="_blank" rel="noopener">NLP任务-10-自动补全</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-11-%E8%AF%AD%E4%B9%89%E6%B6%88%E6%AD%A7/" target="_blank" rel="noopener">NLP任务-11-语义消歧</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-12-%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/" target="_blank" rel="noopener">NLP任务-12-问答系统</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-13-%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/" target="_blank" rel="noopener">NLP任务-13-机器翻译</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-14-%E8%87%AA%E5%8A%A8%E6%91%98%E8%A6%81/" target="_blank" rel="noopener">NLP任务-14-自动摘要</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-15-%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">NLP任务-15-情感分析</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-16-%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/" target="_blank" rel="noopener">NLP任务-16-聊天机器人</a></p><p>推荐阅读<a href="https://github.com/NLP-LOVE/Introduction-NLP/blob/master/chapter/9.%E4%BF%A1%E6%81%AF%E6%8A%BD%E5%8F%96.md" target="_blank" rel="noopener">信息抽取</a></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP任务-08-文本分类</title>
      <link href="/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-08-%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB/"/>
      <url>/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-08-%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-01-%E8%AF%8D%E5%B5%8C%E5%85%A5/" target="_blank" rel="noopener">NLP任务-01-词嵌入</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-02-%E5%BA%8F%E5%88%97%E6%A0%87%E6%B3%A8/" target="_blank" rel="noopener">NLP任务-02-序列标注</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-03-%E5%88%86%E8%AF%8D/" target="_blank" rel="noopener">NLP任务-03-分词</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-04-%E8%AF%8D%E6%80%A7%E6%A0%87%E6%B3%A8/" target="_blank" rel="noopener">NLP任务-04-词性标注</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-05-%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%ABNER/" target="_blank" rel="noopener">NLP任务-05-命名实体识别</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-06-%E4%BE%9D%E5%AD%98%E5%8F%A5%E6%B3%95%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">NLP任务-06-依存句法分析</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-07-%E4%BF%A1%E6%81%AF%E6%8A%BD%E5%8F%96/" target="_blank" rel="noopener">NLP任务-07-信息抽取</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-08-%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB/" target="_blank" rel="noopener">NLP任务-08-文本分类</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-09-%E6%96%87%E6%9C%AC%E8%81%9A%E7%B1%BB/" target="_blank" rel="noopener">NLP任务-09-文本聚类</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-10-%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/" target="_blank" rel="noopener">NLP任务-10-自动补全</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-11-%E8%AF%AD%E4%B9%89%E6%B6%88%E6%AD%A7/" target="_blank" rel="noopener">NLP任务-11-语义消歧</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-12-%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/" target="_blank" rel="noopener">NLP任务-12-问答系统</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-13-%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/" target="_blank" rel="noopener">NLP任务-13-机器翻译</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-14-%E8%87%AA%E5%8A%A8%E6%91%98%E8%A6%81/" target="_blank" rel="noopener">NLP任务-14-自动摘要</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-15-%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">NLP任务-15-情感分析</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-16-%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/" target="_blank" rel="noopener">NLP任务-16-聊天机器人</a></p><h3 id="文本分类方法"><a href="#文本分类方法" class="headerlink" title="文本分类方法"></a>文本分类方法</h3><p>例如，需求详细描述文档中哪一部分属于数据描述，哪一部分属于UI描述。将这些信息分类后，可以方便后续的文本理解任务(针对不同类别的部分，机器理解的模型是不同的)，这样可以明显提升文本理解与匹配的准确度。</p><p><strong>文本分类常用方法如下：</strong></p><ol><li>基于词典模板的规则分类</li><li>基于过往日志匹配（适用于搜索引擎）</li><li>基于传统机器学习模型(特征工程+算法，如NaiveBayes/SVM/LR/KNN……)</li><li>基于深度学习模型:词向量+模型(FastText/TextCNN/TextRNN/TextRCNN/DPCNN/BERT/VDCNN)</li></ol><p>这几种方式基本上是目前比较主流的方法，现在进行意图识别的难点主要是两点，一点是数据来源的匮乏，因为方法已经比较固定，基本都是有监督学习，需要很多的标记数据，现在我们常用的数据要么就是找专业标记团队去买，要么就是自己去爬。第二点是尽管是分类工作，但是意图识别分类种类很多，并且要求的准确性，拓展性都不是之前的分类可比的，这一点也是很困难的。</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">朴素贝叶斯</td><td align="left">朴素贝叶斯法( naive Bayes)可算是最简单常用的一种生成式模型。朴素贝叶斯法基于贝叶斯定理将联合概率转化为条件概率，然后利用特征条件独立假设简化条件概率的计算。</td></tr><tr><td align="left">SVM</td><td align="left">找出一个决策边界，使得边界到正负样本的最小距离都最远。</td></tr><tr><td align="left">fastText</td><td align="left">fastText原理是把句子中所有的词进行lookup得到词向量之后，对向量进行平均（某种意义上可以理解为只有一个avgpooling特殊CNN），然后直接接softmax层预测label。在label比较多的时候，为了降低计算量，论文最后一层采用了层次softmax的方法，既根据label的频次建立哈夫曼树，每个label对应一个哈夫曼编码，每个哈夫曼树节点具有一个向量作为参数进行更新，预测的时候隐层输出与每个哈夫曼树节点向量做点乘，根据结果决定向左右哪个方向移动，最终落到某个label对应的节点上。</td></tr><tr><td align="left">TextCNN</td><td align="left">首先，对句子做padding或者截断，保证句子长度为固定值s=7,单词embedding成d=5维度的向量，这样句子被表示为(s,d)(s,d)大小的矩阵（类比图像中的像素）。然后经过有filter_size=(2,3,4)的一维卷积层，每个filter_size有两个输出channel。第三层是一个1-maxpooling层，这样不同长度句子经过pooling层之后都能变成定长的表示了，最后接一层全连接的softmax层，输出每个类别的概率。</td></tr><tr><td align="left">TextRNN</td><td align="left">对于英文，都是基于词的。对于中文，首先要确定是基于字的还是基于词的。如果是基于词，要先对句子进行分词。之后，每个字/词对应RNN的一个时刻，隐层输出作为下一时刻的输入。最后时刻的隐层输出h_ThTcatch住整个句子的抽象特征，再接一个softmax进行分类。</td></tr><tr><td align="left">TextRNN+Attention</td><td align="left">在TextRNN的基础上加入了attention机制</td></tr><tr><td align="left">TextRCNN</td><td align="left">利用前向和后向RNN得到每个词的前向和后向上下文的表示，词的表示就变成词向量和前向后向上下文向量concat起来的形式，最后再接跟TextCNN相同卷积层，pooling层即可，唯一不同的是卷积层filter_size=1就可以了，不再需要更大filter_size获得更大视野，这里词的表示也可以只用双向RNN输出</td></tr><tr><td align="left">HAN</td><td align="left">HAN模型首先利用Bi-GRU捕捉单词级别的上下文信息。由于句子中的每个单词对于句子表示并不是同等的贡献，因此，作者引入注意力机制来提取对句子表示有重要意义的词汇，并将这些信息词汇的表征聚合起来形成句子向量。</td></tr><tr><td align="left">BERT</td><td align="left">BERT的模型架构是一个多层的双向Transformer编码器(Transformer的原理及细节可以参考Attentionisallyouneed)。作者采用两套参数分别生成BERTBASE模型和BERTLARGE模型(细节描述可以参考原论文)，所有下游任务可以在这两套模型进行微调。</td></tr><tr><td align="left">VDCNN</td><td align="left">目前NLP领域的模型，无论是机器翻译、文本分类、序列标注等问题大都使用浅层模型。VDCNN探究的是深层模型在文本分类任务中的有效性，最优性能网络达到了29层。</td></tr></tbody></table><h3 id="文本分类实践"><a href="#文本分类实践" class="headerlink" title="文本分类实践"></a>文本分类实践</h3><h4 id="朴素贝叶斯"><a href="#朴素贝叶斯" class="headerlink" title="朴素贝叶斯"></a>朴素贝叶斯</h4><p><a href="https://github.com/NLP-LOVE/Introduction-NLP/tree/master/code/ch11/text_classification.py" target="_blank" rel="noopener">代码</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyhanlp <span class="keyword">import</span> SafeJClass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pyhanlp.static <span class="keyword">import</span> download, remove_file, HANLP_DATA_PATH</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_data_path</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取测试数据路径，位于$root/data/test，根目录由配置文件指定。</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    data_path = os.path.join(HANLP_DATA_PATH, <span class="string">'test'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(data_path):</span><br><span class="line">        os.mkdir(data_path)</span><br><span class="line">    <span class="keyword">return</span> data_path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 验证是否存在 MSR语料库，如果没有自动下载</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ensure_data</span><span class="params">(data_name, data_url)</span>:</span></span><br><span class="line">    root_path = test_data_path()</span><br><span class="line">    dest_path = os.path.join(root_path, data_name)</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(dest_path):</span><br><span class="line">        <span class="keyword">return</span> dest_path</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> data_url.endswith(<span class="string">'.zip'</span>):</span><br><span class="line">        dest_path += <span class="string">'.zip'</span></span><br><span class="line">    download(data_url, dest_path)</span><br><span class="line">    <span class="keyword">if</span> data_url.endswith(<span class="string">'.zip'</span>):</span><br><span class="line">        <span class="keyword">with</span> zipfile.ZipFile(dest_path, <span class="string">"r"</span>) <span class="keyword">as</span> archive:</span><br><span class="line">            archive.extractall(root_path)</span><br><span class="line">        remove_file(dest_path)</span><br><span class="line">        dest_path = dest_path[:-len(<span class="string">'.zip'</span>)]</span><br><span class="line">    <span class="keyword">return</span> dest_path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sogou_corpus_path = ensure_data(<span class="string">'搜狗文本分类语料库迷你版'</span>, <span class="string">'http://file.hankcs.com/corpus/sogou-text-classification-corpus-mini.zip'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## ===============================================</span></span><br><span class="line"><span class="comment">## 以下开始朴素贝叶斯分类</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NaiveBayesClassifier = SafeJClass(<span class="string">'com.hankcs.hanlp.classification.classifiers.NaiveBayesClassifier'</span>)</span><br><span class="line">IOUtil = SafeJClass(<span class="string">'com.hankcs.hanlp.corpus.io.IOUtil'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_or_load_classifier</span><span class="params">()</span>:</span></span><br><span class="line">    model_path = sogou_corpus_path + <span class="string">'.ser'</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(model_path):</span><br><span class="line">        <span class="keyword">return</span> NaiveBayesClassifier(IOUtil.readObjectFrom(model_path))</span><br><span class="line">    classifier = NaiveBayesClassifier()                                <span class="comment"># 朴素贝叶斯分类器</span></span><br><span class="line">    classifier.train(sogou_corpus_path)</span><br><span class="line">    model = classifier.getModel()</span><br><span class="line">    IOUtil.saveObjectTo(model, model_path)</span><br><span class="line">    <span class="keyword">return</span> NaiveBayesClassifier(model)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(classifier, text)</span>:</span></span><br><span class="line">    print(<span class="string">"《%16s》\t属于分类\t【%s】"</span> % (text, classifier.classify(text)))</span><br><span class="line">    <span class="comment"># 如需获取离散型随机变量的分布，请使用predict接口</span></span><br><span class="line">    <span class="comment"># print("《%16s》\t属于分类\t【%s】" % (text, classifier.predict(text)))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    classifier = train_or_load_classifier()</span><br><span class="line">    predict(classifier, <span class="string">"C罗获2018环球足球奖最佳球员 德尚荣膺最佳教练"</span>)</span><br><span class="line">    predict(classifier, <span class="string">"英国造航母耗时8年仍未服役 被中国速度远远甩在身后"</span>)</span><br><span class="line">    predict(classifier, <span class="string">"研究生考录模式亟待进一步专业化"</span>)</span><br><span class="line">    predict(classifier, <span class="string">"如果真想用食物解压,建议可以食用燕麦"</span>)</span><br><span class="line">    predict(classifier, <span class="string">"通用及其部分竞争对手目前正在考虑解决库存问题"</span>)</span><br></pre></td></tr></table></figure><p>朴素贝叶斯法实现简单，但由于特征独立性假设过于强烈，有时会影响准确性.</p><h4 id="SVM"><a href="#SVM" class="headerlink" title="SVM"></a>SVM</h4><p><a href="https://github.com/NLP-LOVE/Introduction-NLP/tree/master/code/ch11/svm_text_classification.py" target="_blank" rel="noopener">代码</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyhanlp.static <span class="keyword">import</span> STATIC_ROOT, download</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pyhanlp.static <span class="keyword">import</span> download, remove_file, HANLP_DATA_PATH</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_data_path</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取测试数据路径，位于$root/data/test，根目录由配置文件指定。</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    data_path = os.path.join(HANLP_DATA_PATH, <span class="string">'test'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(data_path):</span><br><span class="line">        os.mkdir(data_path)</span><br><span class="line">    <span class="keyword">return</span> data_path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 验证是否存在 MSR语料库，如果没有自动下载</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ensure_data</span><span class="params">(data_name, data_url)</span>:</span></span><br><span class="line">    root_path = test_data_path()</span><br><span class="line">    dest_path = os.path.join(root_path, data_name)</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(dest_path):</span><br><span class="line">        <span class="keyword">return</span> dest_path</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> data_url.endswith(<span class="string">'.zip'</span>):</span><br><span class="line">        dest_path += <span class="string">'.zip'</span></span><br><span class="line">    download(data_url, dest_path)</span><br><span class="line">    <span class="keyword">if</span> data_url.endswith(<span class="string">'.zip'</span>):</span><br><span class="line">        <span class="keyword">with</span> zipfile.ZipFile(dest_path, <span class="string">"r"</span>) <span class="keyword">as</span> archive:</span><br><span class="line">            archive.extractall(root_path)</span><br><span class="line">        remove_file(dest_path)</span><br><span class="line">        dest_path = dest_path[:-len(<span class="string">'.zip'</span>)]</span><br><span class="line">    <span class="keyword">return</span> dest_path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sogou_corpus_path = ensure_data(<span class="string">'搜狗文本分类语料库迷你版'</span>, <span class="string">'http://file.hankcs.com/corpus/sogou-text-classification-corpus-mini.zip'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## ===============================================</span></span><br><span class="line"><span class="comment">## 以下开始 支持向量机SVM</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">install_jar</span><span class="params">(name, url)</span>:</span></span><br><span class="line">    dst = os.path.join(STATIC_ROOT, name)</span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(dst):</span><br><span class="line">        <span class="keyword">return</span> dst</span><br><span class="line">    download(url, dst)</span><br><span class="line">    <span class="keyword">return</span> dst</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">install_jar(<span class="string">'text-classification-svm-1.0.2.jar'</span>, <span class="string">'http://file.hankcs.com/bin/text-classification-svm-1.0.2.jar'</span>)</span><br><span class="line">install_jar(<span class="string">'liblinear-1.95.jar'</span>, <span class="string">'http://file.hankcs.com/bin/liblinear-1.95.jar'</span>)</span><br><span class="line"><span class="keyword">from</span> pyhanlp <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">LinearSVMClassifier = SafeJClass(<span class="string">'com.hankcs.hanlp.classification.classifiers.LinearSVMClassifier'</span>)</span><br><span class="line">IOUtil = SafeJClass(<span class="string">'com.hankcs.hanlp.corpus.io.IOUtil'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_or_load_classifier</span><span class="params">()</span>:</span></span><br><span class="line">    model_path = sogou_corpus_path + <span class="string">'.svm.ser'</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(model_path):</span><br><span class="line">        <span class="keyword">return</span> LinearSVMClassifier(IOUtil.readObjectFrom(model_path))</span><br><span class="line">    classifier = LinearSVMClassifier()</span><br><span class="line">    classifier.train(sogou_corpus_path)</span><br><span class="line">    model = classifier.getModel()</span><br><span class="line">    IOUtil.saveObjectTo(model, model_path)</span><br><span class="line">    <span class="keyword">return</span> LinearSVMClassifier(model)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(classifier, text)</span>:</span></span><br><span class="line">    print(<span class="string">"《%16s》\t属于分类\t【%s】"</span> % (text, classifier.classify(text)))</span><br><span class="line">    <span class="comment"># 如需获取离散型随机变量的分布，请使用predict接口</span></span><br><span class="line">    <span class="comment"># print("《%16s》\t属于分类\t【%s】" % (text, classifier.predict(text)))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    classifier = train_or_load_classifier()</span><br><span class="line">    predict(classifier, <span class="string">"C罗获2018环球足球奖最佳球员 德尚荣膺最佳教练"</span>)</span><br><span class="line">    predict(classifier, <span class="string">"潜艇具有很强的战略威慑能力与实战能力"</span>)</span><br><span class="line">    predict(classifier, <span class="string">"研究生考录模式亟待进一步专业化"</span>)</span><br><span class="line">    predict(classifier, <span class="string">"如果真想用食物解压,建议可以食用燕麦"</span>)</span><br><span class="line">    predict(classifier, <span class="string">"通用及其部分竞争对手目前正在考虑解决库存问题"</span>)</span><br></pre></td></tr></table></figure><h4 id="fastText"><a href="#fastText" class="headerlink" title="fastText"></a>fastText</h4><p>fastText是一个快速文本分类算法，FastText 算法能获得和深度模型相同的精度，但是计算时间却要远远小于深度学习模型。fastText 可以作为一个文本分类的 baseline 模型。fastText不需要训练好的词向量模型，它会自己训练词向量模型。fastText两个重要的优化：<code>Hierarchical Softmax</code>、<code>N-gram</code>。fastText模型架构和word2vec中的CBOW很相似， 不同之处是fastText预测标签而CBOW预测的是中间词，模型架构类似但是模型任务不同。</p><p>fastText模型架构:其中x1,x2,…,xN−1,xN表示一个文本中的<code>n-gram</code>向量，每个特征是词向量的平均值。这和前文中提到的cbow相似，cbow用上下文去预测中心词，而此处用全部的n-gram去预测指定类别。如下图所示：</p><img src="https://i.loli.net/2020/07/28/RLT4XoQv86d1Mif.png" alt="fastText" width="50%"><p><strong>为什么要使用层次softmax模型？</strong><br>在标准的softmax中，计算一个类别的softmax概率时，我们需要对所有类别概率做归一化，在这类别很大情况下非常耗时，因此提出了分层softmax(Hierarchical Softmax),思想是根据类别的频率构造霍夫曼树来代替标准softmax，通过分层softmax可以将复杂度从N降低到logN，下图给出分层softmax示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">这里补充一下什么是haffman树：</span><br><span class="line">给定N个权值作为N个叶子结点，构造一棵二叉树，若该树的带权路径长度达到最小，称这样的二叉树为最优二叉树，也称为哈夫曼树(Huffman Tree)。</span><br><span class="line"></span><br><span class="line">haffman树的构造过程：</span><br><span class="line">假设有n个权值，则构造出的哈夫曼树有n个叶子结点。 n个权值分别设为 w1、w2、…、wn，则哈夫曼树的构造规则为：</span><br><span class="line">(1) 将w1、w2、…，wn看成是有n 棵树的森林(每棵树仅有一个结点)；</span><br><span class="line">(2) 在森林中选出两个根结点的权值最小的树合并，作为一棵新树的左、右子树，且新树的根结点权值为其左、右子树根结点权值之和；</span><br><span class="line">(3)从森林中删除选取的两棵树，并将新树加入森林；</span><br><span class="line">(4)重复(2)、(3)步，直到森林中只剩一棵树为止，该树即为所求得的哈夫曼树。</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/07/28/HwRrnAq7vzYgX3a.png" alt="层次softmax" width="50%"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> fasttext <span class="keyword">as</span> ft</span><br><span class="line"><span class="keyword">from</span> skllearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">““</span><br><span class="line">分词</span><br><span class="line">去停用词</span><br><span class="line">把处理过后的词写入文本</span><br><span class="line">””</span><br><span class="line"><span class="comment"># 有监督的学习，训练分类器</span></span><br><span class="line">classifier = ft.supervised(filePath, <span class="string">"classifier.model"</span>)</span><br><span class="line">result = classifier.test(filePath)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测文档类别</span></span><br><span class="line">labels = classifier.predict(texts)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测类别+概率</span></span><br><span class="line">labelProb = classifier.predict_proba(texts)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到前k个类别</span></span><br><span class="line">labels = classifier.predict(texts, k=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到前k个类别+概率</span></span><br><span class="line">labelProb = classifier.predict_prob(texts, k=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h4 id="TextCNN"><a href="#TextCNN" class="headerlink" title="TextCNN"></a>TextCNN</h4><p>将卷积神经网络CNN应用到文本分类任务，利用多个不同size的kernel来提取句子中的关键信息（类似于多窗口大小的ngram），从而能够更好地捕捉局部相关性。</p><p>TextCNN的详细流程：</p><ul><li><code>Embedding</code>：第一层是图中最左边的7乘5的句子矩阵，每行是词向量，维度=5，这个可以类比为图像中的原始像素点。</li><li><code>Convolution</code>：然后经过 kernel_sizes=(2,3,4) 的一维卷积层，每个kernel_size 有两个输出 channel。</li><li><code>MaxPolling</code>：第三层是一个1-max pooling层，这样不同长度句子经过pooling层之后都能变成定长的表示。</li><li><code>FullConnection and Softmax</code>：最后接一层全连接的 softmax 层，输出每个类别的概率。</li></ul><p>TextCNN的模型结构如下：</p><img src="https://i.loli.net/2020/07/28/4zd5ngprFLqZoSO.png" alt="TextCNN" width="90%"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> Input</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Conv1D, MaxPool1D, Dense, Flatten, concatenate, Embedding</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Model</span><br><span class="line"><span class="keyword">from</span> keras.utils <span class="keyword">import</span> plot_model</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">textcnn</span><span class="params">(max_sequence_length, max_token_num, embedding_dim, output_dim, model_img_path=None, embedding_matrix=None)</span>:</span></span><br><span class="line">    <span class="string">""" TextCNN: 1. embedding layers, 2.convolution layer, 3.max-pooling, 4.softmax layer. """</span></span><br><span class="line">    x_input = Input(shape=(max_sequence_length,))</span><br><span class="line">    logging.info(<span class="string">"x_input.shape: %s"</span> % str(x_input.shape))  <span class="comment"># (?, 60)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> embedding_matrix <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        x_emb = Embedding(input_dim=max_token_num, output_dim=embedding_dim, input_length=max_sequence_length)(x_input)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        x_emb = Embedding(input_dim=max_token_num, output_dim=embedding_dim, input_length=max_sequence_length,</span><br><span class="line">                          weights=[embedding_matrix], trainable=<span class="literal">True</span>)(x_input)</span><br><span class="line">    logging.info(<span class="string">"x_emb.shape: %s"</span> % str(x_emb.shape))  <span class="comment"># (?, 60, 300)</span></span><br><span class="line"></span><br><span class="line">    pool_output = []</span><br><span class="line">    kernel_sizes = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>] </span><br><span class="line">    <span class="keyword">for</span> kernel_size <span class="keyword">in</span> kernel_sizes:</span><br><span class="line">        c = Conv1D(filters=<span class="number">2</span>, kernel_size=kernel_size, strides=<span class="number">1</span>)(x_emb)</span><br><span class="line">        p = MaxPool1D(pool_size=int(c.shape[<span class="number">1</span>]))(c)</span><br><span class="line">        pool_output.append(p)</span><br><span class="line">        logging.info(<span class="string">"kernel_size: %s \t c.shape: %s \t p.shape: %s"</span> % (kernel_size, str(c.shape), str(p.shape)))</span><br><span class="line">    pool_output = concatenate([p <span class="keyword">for</span> p <span class="keyword">in</span> pool_output])</span><br><span class="line">    logging.info(<span class="string">"pool_output.shape: %s"</span> % str(pool_output.shape))  <span class="comment"># (?, 1, 6)</span></span><br><span class="line"></span><br><span class="line">    x_flatten = Flatten()(pool_output)  <span class="comment"># (?, 6)</span></span><br><span class="line">    y = Dense(output_dim, activation=<span class="string">'softmax'</span>)(x_flatten)  <span class="comment"># (?, 2)</span></span><br><span class="line">    logging.info(<span class="string">"y.shape: %s \n"</span> % str(y.shape))</span><br><span class="line"></span><br><span class="line">    model = Model([x_input], outputs=[y])</span><br><span class="line">    <span class="keyword">if</span> model_img_path:</span><br><span class="line">        plot_model(model, to_file=model_img_path, show_shapes=<span class="literal">True</span>, show_layer_names=<span class="literal">False</span>)</span><br><span class="line">    model.summary()</span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure><h4 id="TextRNN"><a href="#TextRNN" class="headerlink" title="TextRNN"></a>TextRNN</h4><ol><li>结构1<br>流程：embedding—&gt;BiLSTM—&gt;concat final output/average all output—–&gt;softmax layer</li></ol><img src="https://i.loli.net/2020/07/28/vwRmjkPyd9n2rCc.png" alt="TextRNN1" width="60%"><ol start="2"><li>结构2<br>流程：embedding–&gt;BiLSTM—-&gt;(dropout)–&gt;concat ouput—&gt;UniLSTM—&gt;(droput)–&gt;softmax layer</li></ol><img src="https://i.loli.net/2020/07/28/kH46Et2SXnhgyKC.png" alt="TextRNN2" width="80%"><p><a href="https://www.cnblogs.com/Luv-GEM/p/10836454.html" target="_blank" rel="noopener">中文文本分类之TextRNN</a></p><h4 id="TextRNN-Attention"><a href="#TextRNN-Attention" class="headerlink" title="TextRNN+Attention"></a>TextRNN+Attention</h4><p>在textRNN的基础上，加入了attention机制，模型结构如下：</p><img src="https://i.loli.net/2020/07/28/DO7XyQK9RcYx5oC.png" alt="TextRNN+Attention" width="60%"><p>加入Attention之后最大的好处自然是能够直观的解释各个句子和词对分类类别的重要性。</p><h4 id="TextRCNN"><a href="#TextRCNN" class="headerlink" title="TextRCNN"></a>TextRCNN</h4><p>TextRCNN是TextRNN + CNN。结构如下：</p><img src="https://i.loli.net/2020/07/28/QfMCjdWyJ9Ht1zc.png" alt="TextRCNN" width="80%"><h4 id="HAN"><a href="#HAN" class="headerlink" title="HAN"></a>HAN</h4><p>HAN是Hierarchical Attention Network的简称，结构如下：</p><img src="https://i.loli.net/2020/07/28/4eENa93WGr7yoRz.png" alt="HAN1" width="60%"><img src="https://i.loli.net/2020/07/28/S8lkDgTtLbEsFvn.png" alt="HAN2" width="60%"><p>模型结构分为了以下四个部分：</p><ol><li>word encoder （BiGRU layer）<br>将每个单词转化为词向量，然后输入到双向的GRU网络中，获得该单词对应的隐藏输出</li><li>word attention （Attention layer）<br>根据重要性给单词赋予权重——定义一个随机上下文向量，计算其与句子中每个单词的相似度，然后经过一个softmax操作获得了一个归一化的attention权重矩阵</li><li>sentence encoder （BiGRU layer）<br>得到每个句子的向量表示，同理得到文档的向量表示</li><li>sentence attention （Attention layer）<br>将文档向量输入到softmax层进行分类</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HAN</span><span class="params">(object)</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, max_sentence_num, max_sentence_length, num_classes, vocab_size,  </span></span></span><br><span class="line"><span class="function"><span class="params">                 embedding_size, learning_rate, decay_steps, decay_rate,  </span></span></span><br><span class="line"><span class="function"><span class="params">                 hidden_size, l2_lambda, grad_clip, is_training=False,  </span></span></span><br><span class="line"><span class="function"><span class="params">                 initializer=tf.random_normal_initializer<span class="params">(stddev=<span class="number">0.1</span>)</span>)</span>:</span>  </span><br><span class="line">        self.vocab_size = vocab_size  </span><br><span class="line">        self.max_sentence_num = max_sentence_num  </span><br><span class="line">        self.max_sentence_length = max_sentence_length  </span><br><span class="line">        self.num_classes = num_classes  </span><br><span class="line">        self.embedding_size = embedding_size  </span><br><span class="line">        self.hidden_size = hidden_size  </span><br><span class="line">        self.learning_rate = learning_rate  </span><br><span class="line">        self.decay_rate = decay_rate  </span><br><span class="line">        self.decay_steps = decay_steps  </span><br><span class="line">        self.l2_lambda = l2_lambda  </span><br><span class="line">        self.grad_clip = grad_clip  </span><br><span class="line">        self.initializer = initializer  </span><br><span class="line">        self.global_step = tf.Variable(<span class="number">0</span>, trainable=<span class="literal">False</span>, name=<span class="string">'global_step'</span>)  </span><br><span class="line">        <span class="comment"># placeholder  </span></span><br><span class="line">        self.input_x = tf.placeholder(tf.int32, [<span class="literal">None</span>, max_sentence_num, max_sentence_length], name=<span class="string">'input_x'</span>)  </span><br><span class="line">        self.input_y = tf.placeholder(tf.int32, [<span class="literal">None</span>, num_classes], name=<span class="string">'input_y'</span>)  </span><br><span class="line">        self.dropout_keep_prob = tf.placeholder(tf.float32, name=<span class="string">'dropout_keep_prob'</span>)  </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_training:  </span><br><span class="line">            <span class="keyword">return</span>  </span><br><span class="line">        word_embedding = self.word2vec()  </span><br><span class="line">        sen_vec = self.sen2vec(word_embedding)  </span><br><span class="line">        doc_vec = self.doc2vec(sen_vec)  </span><br><span class="line">        self.logits = self.inference(doc_vec)  </span><br><span class="line">        self.loss_val = self.loss(self.input_y, self.logits)  </span><br><span class="line">        self.train_op = self.train()  </span><br><span class="line">        self.prediction = tf.argmax(self.logits, axis=<span class="number">1</span>, name=<span class="string">'prediction'</span>)  </span><br><span class="line">        self.pred_min = tf.reduce_min(self.prediction)  </span><br><span class="line">        self.pred_max = tf.reduce_max(self.prediction)  </span><br><span class="line">        self.pred_cnt = tf.bincount(tf.cast(self.prediction, dtype=tf.int32))  </span><br><span class="line">        self.label_cnt = tf.bincount(tf.cast(tf.argmax(self.input_y, axis=<span class="number">1</span>), dtype=tf.int32))  </span><br><span class="line">        self.accuracy = self.accuracy(self.logits, self.input_y)</span><br></pre></td></tr></table></figure><h4 id="BERT"><a href="#BERT" class="headerlink" title="BERT"></a>BERT</h4><p>详见<a href="https://iloveyou11.github.io/2020/07/16/Bert%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%85%B6%E5%8F%98%E7%A7%8D/" target="_blank" rel="noopener">Bert模型及其变种</a></p><p><a href="https://blog.csdn.net/qq_20989105/article/details/89492442" target="_blank" rel="noopener">NLP之BERT中文文本分类超详细教程</a></p><h4 id="VDCNN"><a href="#VDCNN" class="headerlink" title="VDCNN"></a>VDCNN</h4><p>VDCNN是<code>Very Deep Convolutional Networks for Text Classiﬁcation</code>的缩写，是一个非常深度的卷积神经网络，论文中给出的实现有<code>9 layer，17 layer， 29 layer 以及49 layer</code>，真的是很非常深了。</p><p>VDCNN参照VGG和ResNet网络的特征，构建的网络具有如下特征:</p><ol><li>Convolutional Block， 每个卷积块有两个卷积层，加上batchnorm、relu。卷积核尺寸size=3，池化步长pool_size=2；</li><li>经过池化层pooling后，filters翻倍，也就是说，filters是成2^n层次增长的</li></ol><p>VDCNN模型的结构如下：</p><img src="https://i.loli.net/2020/07/28/pQKLzkWH7intaEU.png" alt="VDCNN" width="100%"><p>使用keras搭建VDCNN模型实现的文本分类代码如下：<a href="https://github.com/yongzhuo/Keras-TextClassification/tree/master/keras_textclassification/m08_TextVDCNN" target="_blank" rel="noopener">Keras-TextClassification</a>，其中，VDCNN模型架构详见<a href="https://github.com/yongzhuo/Keras-TextClassification/blob/master/keras_textclassification/m08_TextVDCNN/graph.py" target="_blank" rel="noopener">graph.py</a></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP任务-09-文本聚类</title>
      <link href="/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-09-%E6%96%87%E6%9C%AC%E8%81%9A%E7%B1%BB/"/>
      <url>/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-09-%E6%96%87%E6%9C%AC%E8%81%9A%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-01-%E8%AF%8D%E5%B5%8C%E5%85%A5/" target="_blank" rel="noopener">NLP任务-01-词嵌入</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-02-%E5%BA%8F%E5%88%97%E6%A0%87%E6%B3%A8/" target="_blank" rel="noopener">NLP任务-02-序列标注</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-03-%E5%88%86%E8%AF%8D/" target="_blank" rel="noopener">NLP任务-03-分词</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-04-%E8%AF%8D%E6%80%A7%E6%A0%87%E6%B3%A8/" target="_blank" rel="noopener">NLP任务-04-词性标注</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-05-%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%ABNER/" target="_blank" rel="noopener">NLP任务-05-命名实体识别</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-06-%E4%BE%9D%E5%AD%98%E5%8F%A5%E6%B3%95%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">NLP任务-06-依存句法分析</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-07-%E4%BF%A1%E6%81%AF%E6%8A%BD%E5%8F%96/" target="_blank" rel="noopener">NLP任务-07-信息抽取</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-08-%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB/" target="_blank" rel="noopener">NLP任务-08-文本分类</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-09-%E6%96%87%E6%9C%AC%E8%81%9A%E7%B1%BB/" target="_blank" rel="noopener">NLP任务-09-文本聚类</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-10-%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/" target="_blank" rel="noopener">NLP任务-10-自动补全</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-11-%E8%AF%AD%E4%B9%89%E6%B6%88%E6%AD%A7/" target="_blank" rel="noopener">NLP任务-11-语义消歧</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-12-%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/" target="_blank" rel="noopener">NLP任务-12-问答系统</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-13-%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/" target="_blank" rel="noopener">NLP任务-13-机器翻译</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-14-%E8%87%AA%E5%8A%A8%E6%91%98%E8%A6%81/" target="_blank" rel="noopener">NLP任务-14-自动摘要</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-15-%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">NLP任务-15-情感分析</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-16-%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/" target="_blank" rel="noopener">NLP任务-16-聊天机器人</a></p><p>推荐阅读<a href="https://github.com/NLP-LOVE/Introduction-NLP/blob/master/chapter/10.%E6%96%87%E6%9C%AC%E8%81%9A%E7%B1%BB.md" target="_blank" rel="noopener">文本聚类</a></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP任务-10-自动补全</title>
      <link href="/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-10-%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/"/>
      <url>/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-10-%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-01-%E8%AF%8D%E5%B5%8C%E5%85%A5/" target="_blank" rel="noopener">NLP任务-01-词嵌入</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-02-%E5%BA%8F%E5%88%97%E6%A0%87%E6%B3%A8/" target="_blank" rel="noopener">NLP任务-02-序列标注</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-03-%E5%88%86%E8%AF%8D/" target="_blank" rel="noopener">NLP任务-03-分词</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-04-%E8%AF%8D%E6%80%A7%E6%A0%87%E6%B3%A8/" target="_blank" rel="noopener">NLP任务-04-词性标注</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-05-%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%ABNER/" target="_blank" rel="noopener">NLP任务-05-命名实体识别</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-06-%E4%BE%9D%E5%AD%98%E5%8F%A5%E6%B3%95%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">NLP任务-06-依存句法分析</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-07-%E4%BF%A1%E6%81%AF%E6%8A%BD%E5%8F%96/" target="_blank" rel="noopener">NLP任务-07-信息抽取</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-08-%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB/" target="_blank" rel="noopener">NLP任务-08-文本分类</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-09-%E6%96%87%E6%9C%AC%E8%81%9A%E7%B1%BB/" target="_blank" rel="noopener">NLP任务-09-文本聚类</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-10-%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/" target="_blank" rel="noopener">NLP任务-10-自动补全</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-11-%E8%AF%AD%E4%B9%89%E6%B6%88%E6%AD%A7/" target="_blank" rel="noopener">NLP任务-11-语义消歧</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-12-%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/" target="_blank" rel="noopener">NLP任务-12-问答系统</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-13-%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/" target="_blank" rel="noopener">NLP任务-13-机器翻译</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-14-%E8%87%AA%E5%8A%A8%E6%91%98%E8%A6%81/" target="_blank" rel="noopener">NLP任务-14-自动摘要</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-15-%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">NLP任务-15-情感分析</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-16-%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/" target="_blank" rel="noopener">NLP任务-16-聊天机器人</a></p><p>自动补全是个基于NLP的搜索任务，主要包括了以下几个方面：</p><ol><li>语言理解</li><li>文档召回和排序</li><li>文本生成辅助搜索</li></ol><h3 id="语言理解"><a href="#语言理解" class="headerlink" title="语言理解"></a>语言理解</h3><p>这块的任务都是以分类问题为准，所谓的理解，只是把语言抽象到某一个理解空间，将其进行标准化，以便进行批量化处理。主要步骤是：</p><ol><li>实体标注(即命名实体识别)</li><li>实体消歧或指代消歧(基于知识的预测)</li><li>意图识别(句子级别预测，甚至就是简单的文本分类)</li></ol><h4 id="命名实体识别（NER）"><a href="#命名实体识别（NER）" class="headerlink" title="命名实体识别（NER）"></a>命名实体识别（NER）</h4><p><code>实体标注方面</code>，传统的统计方法是HMM(隐马尔可夫)、MEMM(最大熵马尔可夫)、CRF(条件随机场)，基本就和命名实体识别类似了，而在深度学习引入后，形成了输入层、编码层、解码层的主要架构，同过预训练表征模型(如w2v)、深度学习结构(CNN、RNN等)以及输出层(CRF、softmax)等结构链接，完成最基本的结构。</p><p><strong>数据标注方式：</strong><br>主要有BIO和BIOES两种。BIOES如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">BIOES如下：</span><br><span class="line"></span><br><span class="line">B，即Begin，表示开始</span><br><span class="line">I，即Intermediate，表示中间</span><br><span class="line">E，即End，表示结尾</span><br><span class="line">S，即Single，表示单个字符</span><br><span class="line">O，即Other，表示其他，用于标记无关字符</span><br><span class="line"></span><br><span class="line">BIO如下：</span><br><span class="line"></span><br><span class="line">B，即Begin，表示开始</span><br><span class="line">I，即Intermediate，表示中间</span><br><span class="line">E，即End，表示结尾</span><br></pre></td></tr></table></figure><h5 id="HMM-隐马尔可夫"><a href="#HMM-隐马尔可夫" class="headerlink" title="HMM(隐马尔可夫)"></a>HMM(隐马尔可夫)</h5><p><strong>具体流程：</strong></p><img src="https://i.loli.net/2020/07/23/MPQpLulqTESiIna.png" alt="HMM参数" width="80%"><p>当获得了分好词的语料之后，三个概率<code>θ=(A,B,Π)</code>可以通过如下方式获得：<br>(1) 初始状态概率<code>Π</code>-<code>P(z1)</code><br>统计每个句子开头，序列标记分别为B，S的个数，最后除以总句子的个数，即得到了初始概率矩阵。<br>(2) 状态转移概率<code>A</code>-<code>(zi|zi-1)</code><br>根据语料，统计不同序列状态之间转化的个数，例如<code>count(yi=”E”|yi-1=”M”)</code>为语料中i-1时刻标为“M”时，i时刻标记为“E”出现的次数。得到一个<code>4*4</code>的矩阵，再将矩阵的每个元素除以语料中该标记字的个数，得到状态转移概率矩阵。<br>(3) 输出观测概率<code>B</code>-<code>P(xi|zi)</code><br>根据语料，统计由某个隐藏状态输出为某个观测状态的个数，例如<code>count(xi=”深”|yi=”B”)</code>为i时刻标记为“B”时，i时刻观测到字为“深”的次数。得到一个<code>4*N</code>的矩阵，再将矩阵的每个元素除以语料中该标记的个数，得到输出观测概率矩阵。</p><p>训练结束后，即可获得三个概率矩阵<code>θ=(A,B,Π)</code>，接下来需要使用维特比算法获得一个句子的最大概率分词标记序列。</p><img src="https://i.loli.net/2020/07/27/qPQNLlFvnzTyUHr.png" alt="NER-HMM" width="80%"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">第一个词为“我”，通过初始概率矩阵和输出观测概率矩阵分别计算delta1(&quot;B&quot;)=P(y1=”S”)P(x1=”我”|y1=”S”)，delta1(&quot;M&quot;)=P(y1=”B”)P(x1=”我”|y1=”B”)，delta1(&quot;E&quot;)=P(y1=”M”)P(x1=”我”|y1=”M”)，delta1(&quot;S&quot;)=P(y1=”E”)P(x1=”我”|y1=”E”)，并设kethe1(&quot;B&quot;)=kethe1(&quot;M&quot;)=kethe1(&quot;E&quot;)=kethe1(&quot;S&quot;)=0；</span><br><span class="line">同理利用公式分别计算：</span><br><span class="line">delta2(&quot;B&quot;)，delta2(&quot;M&quot;)，delta2(&quot;E&quot;)，delta2(&quot;S&quot;)。图中列出了delta2(&quot;S&quot;)的计算过程，就是计算：</span><br><span class="line">P(y2=”S”|y1=”B”)P(x2=”爱”|y2=”S”)</span><br><span class="line">P(y2=”S”|y1=”M”)P(x2=”爱”|y2=”S”)</span><br><span class="line">P(y2=”S”|y1=”E”)P(x2=”爱”|y2=”S”)</span><br><span class="line">P(y2=”S”|y1=”S”)P(x2=”爱”|y2=”S”)</span><br><span class="line">其中P(y2=”S”|y1=”S”)P(x2=”爱”|y2=”S”)的值最大，为0.034，因此delta2(&quot;S&quot;)，kethe2(&quot;S&quot;)=&quot;S&quot;，同理，可以计算出delta2(&quot;B&quot;)，delta2(&quot;M&quot;)，delta2(&quot;E&quot;)及kethe2(&quot;B&quot;)，kethe2(&quot;M&quot;)，kethe2(&quot;E&quot;)。</span><br><span class="line"></span><br><span class="line">同理可以获得第三个和第四个序列标记的delta和kethe。</span><br><span class="line">到最后一个序列，delta4(&quot;B&quot;)，delta4(&quot;M&quot;)，delta4(&quot;E&quot;)，delta4(&quot;S&quot;)中delta4(&quot;S&quot;)的值最大，因此，最后一个状态为”S”。</span><br><span class="line">最后，回退，</span><br><span class="line">i3 = kethe4(&quot;S&quot;) =&quot;B&quot;</span><br><span class="line">i2 =kethe3(&quot;B&quot;) = &quot;S&quot;</span><br><span class="line">i1 = kethe2(&quot;S&quot;) =&quot;S&quot;</span><br><span class="line">求得序列标记为：“SSBE”。</span><br></pre></td></tr></table></figure><p><strong>HMM解决序列标注问题的优势与不足：</strong><br>HMM时非常适合用于序列标注问题，但HMM引入了马尔科夫假设，即T时刻的状态仅仅与前一时刻的状态相关。但是，语言往往是前后文相互照应的，所以HMM可能会有它的局限和问题，我们可以思考一下，如何解决这个问题。</p><h5 id="CRF-条件随机场"><a href="#CRF-条件随机场" class="headerlink" title="CRF(条件随机场)"></a>CRF(条件随机场)</h5><p>NER任务特征提取的网路结构如下：</p><img src="https://i.loli.net/2020/07/27/7sqMkygxn83UYJO.png" alt="NER-CRF" width="80%"><p>句子经过双向LSTM进行特征提取之后，会得到一个特征输出。训练时，将这个特征和对应的label输入到条件随机场中，就可以计算损失了。预测时，将自然语言输入到该网络，经CRF就可以识别该句子中的实体了。</p><p><code>条件随机场(CRF)在现今NLP中序列标记任务中是不可或缺的存在。太多的实现基于此，例如LSTM+CRF，CNN+CRF，BERT+CRF。因此，这是一个必须要深入理解和吃透的模型。！！</code></p><h5 id="LSTM-CRF"><a href="#LSTM-CRF" class="headerlink" title="LSTM+CRF"></a>LSTM+CRF</h5><p>采用LSTM作为特征抽取器，再接一个CRF层来作为输出层，结构如下图所示：</p><img src="https://i.loli.net/2020/07/27/aBxdrj6Nos7SOWK.png" alt="NER-LSTM+CRF" width="80%"><h5 id="CNN-CRF"><a href="#CNN-CRF" class="headerlink" title="CNN+CRF"></a>CNN+CRF</h5><p>采用LSTM作为特征抽取器，再接一个CRF层来作为输出层，结构如下图所示：</p><img src="https://i.loli.net/2020/07/27/fu8t9FBAh6yQCHb.png" alt="NER-CNN+CRF" width="80%"><p>虽然CNN并不太擅长长序列的特征提取，但是CNN具有非常高效的并行运算能力，能够加快运算速度。</p><h5 id="BERT-（LSTM）-CRF"><a href="#BERT-（LSTM）-CRF" class="headerlink" title="BERT+（LSTM）+CRF"></a>BERT+（LSTM）+CRF</h5><p>利用预训练好的BERT模型，再用少量的标注数据进行fine tune，能够快速地实现NER任务。</p><img src="https://i.loli.net/2020/07/27/MC2DtKFon9jUhPz.png" alt="NER-BERT+CRF" width="80%"><h4 id="指代消歧"><a href="#指代消歧" class="headerlink" title="指代消歧"></a>指代消歧</h4><p><code>实体消歧或指代消歧</code>主要是解决在用户搜索的语句中出现的问题，例如”苹果”到底是水果还是手机等等，这个是依赖上下文信息和知识库合力完成的，例如一句话”我爱吃苹果”，这个”吃”其实就是一个上下文的信息，另一方面我们要通过这个”吃”推断出这个水果的含义，我们就需要借助知识库。</p><h5 id="基于二元分类的方法"><a href="#基于二元分类的方法" class="headerlink" title="基于二元分类的方法"></a>基于二元分类的方法</h5><p>共指消解需要考虑的特征主要分为以下几类：<code>词汇、距离、一致性、语法、语义等</code>。</p><ol><li>词汇特征主要考虑两个 Mention 的字符串的匹配程度，一般而言字符串相同程度越高的 Mention共指概率越大。</li><li>距离特征主要考察两个 Mention 的句子距离，这个主要依据是共指事实上也是一种局部性的替代关系， 越是临近的 Mention 之间共指概率越大。 一般而言，两个 Mention 相隔超过三个句子，共指的可能性就会很小了。</li><li>一致性特征详细可以分为性别、单复数、语义类别等是否一致。这组特征主要起到筛选的作用。</li><li>语法关系用来判断两个 Mention 的语法角色之间的关系，由于对句子深层的语法分析还很难办到，这里主要采用的是一些基于特定模板的方法，例如判断两个 Mention 之间是否被逗号格开或者相邻等来决定是否具有同位关系。</li><li>语义特征主要是考察两个 Mention 在语义类别不一致时是否满足上下位或者同义、近义关系。这种判断主要依赖于具体的语言学词典，例如英文上的 WordNet(Fellbaum, 1998)、中文上的 HowNet(董振东,董强, 2001)等。</li></ol><h5 id="端到端的神经共指消解"><a href="#端到端的神经共指消解" class="headerlink" title="端到端的神经共指消解"></a>端到端的神经共指消解</h5><blockquote><p>参考论文：Lee K, He L, Lewis M, et al. End-to-end Neural Coreference Resolution[J]. 2017:188-197.</p></blockquote><img src="https://i.loli.net/2020/07/27/smUq8pnOEoQVzPk.png" alt="指代消解" width="80%"><p>【具体步骤】</p><ol><li>计算每个span的向量表示，并以此对各潜在mention(同一实体)打分。具体的做法是：将编码信息切分成一组sentence，对每一个sentence独立地构建深度学习模型，将特征矩阵输入到深度学习模型（如LSTM、CNN）中，得到由sentence构成的篇章文本中每一个词的向量表示。对于每个span，将其中的每个词进行组合得到span的向量表示。然后对span的向量表示进行非线性映射，得到每个潜在mention的分数，并以该分数大小对mention进行修剪，得到一定数量的mention。</li><li>对每一对span的向量表示计算先行语得分。通过对两个span的mention score及它们的配对先行语得分求和，得到一对span最终的共指得分。</li></ol><h4 id="文本分类"><a href="#文本分类" class="headerlink" title="文本分类"></a>文本分类</h4><p><code>意图识别方面</code>，应该是这几块里面最简单的，就是一套深度学习，框架即可完成，fasttext、CNN以及BiRNN-Attention。这里详见<a href>NLP项目专题-01</a></p><h3 id="文档召回和排序"><a href="#文档召回和排序" class="headerlink" title="文档召回和排序"></a>文档召回和排序</h3><p>这个思路和推荐系统类似，我们先把有关的全都拿出来，然后再用更为精细的方法排好序展示给用户，此处就有两个大步，召回和排序。</p><h4 id="文档召回"><a href="#文档召回" class="headerlink" title="文档召回"></a>文档召回</h4><p><code>召回方面</code>，要求更全，此处又有句法召回和语义召回。句法召回说白了就是匹配，但这里面的学问可是非常多的，字符串匹配、倒排索引(搜索系统中非常关键的基础知识)、多路召回(多领域)，语义召回则是通过词向量近邻等方式扩大召回的内容。</p><p><strong>倒排表（Inverted Index）</strong>：有一个完整的词典库，分别记录每个单词出现在哪些文档中，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我们：[Doc1，Doc13]</span><br><span class="line">昨天：[Doc2]</span><br><span class="line">在：[Doc1，Doc4，Doc5]</span><br><span class="line">运动：[Doc1，Doc3，Doc5]</span><br><span class="line">什么：[Doc1，Doc6]</span><br></pre></td></tr></table></figure><p>这样可以快速找到哪个单词出现在哪个文档中（否则根据单词一个个去搜索文档时间复杂度非常高）</p><h4 id="文档排序"><a href="#文档排序" class="headerlink" title="文档排序"></a>文档排序</h4><p><code>排序方面</code>，LTR(learningtorank)其实是一个隐含在暗线但实际上已经非常经典的方向，就是为了研究排序的。</p><h5 id="TextRank"><a href="#TextRank" class="headerlink" title="TextRank"></a>TextRank</h5><p>TextRank是一种文本排序算法，是由网页排序算法PageRank发展而来。TextRank算法是利用局部词汇之间关系（共现窗口）对后续关键词进行排序，直接从文本本身抽取。TextRank可以进行文档排序、关键词提取、文本摘要提取等等。</p><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><p>要了解更多关于搜索引擎的排序算法，可参考<a href="https://cloud.tencent.com/developer/news/184638" target="_blank" rel="noopener">《回顾·搜索引擎算法体系简介——排序和意图篇》</a><br>如果是视频搜索排序，可以参考<a href="https://www.infoq.cn/article/RUlwIBXPmUKILgqiyR4I" target="_blank" rel="noopener">《阿里文娱搜索算法实践与思考》</a></p><img src="https://i.loli.net/2020/07/27/WUANVdqfYw28HPs.png" alt="排序算法" width="80%"><h3 id="文本生成辅助搜索"><a href="#文本生成辅助搜索" class="headerlink" title="文本生成辅助搜索"></a>文本生成辅助搜索</h3><p>这块主要用于辅助用户进行搜索，主要体现在下面三块功能上：</p><ol><li>自动补全。很好理解，大家在很多搜索引擎中都会看到，在百度下输入”自然语言”，他能给你预测出你可能要搜”自然语言处理”。这个使用js就可以直接解决。</li><li>搜索重构。举个例子吧，你输入的是吃鸡，实际上文档库的标题是”和平精英”，那要映射过去，其实就是一种同义词重构。这个使用同义词查询就可以解决。</li><li>拼写修正。英文有拼写问题，中文有错别字问题，不能保证用户100%输入正确，平时打字都可能手滑，为了更准确理解语义，我们必须在进行语义分析前修正这些错误。这个可以采用朴素贝叶斯方法解决。</li></ol>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP任务-11-语义消歧</title>
      <link href="/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-11-%E8%AF%AD%E4%B9%89%E6%B6%88%E6%AD%A7/"/>
      <url>/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-11-%E8%AF%AD%E4%B9%89%E6%B6%88%E6%AD%A7/</url>
      
        <content type="html"><![CDATA[<p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-01-%E8%AF%8D%E5%B5%8C%E5%85%A5/" target="_blank" rel="noopener">NLP任务-01-词嵌入</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-02-%E5%BA%8F%E5%88%97%E6%A0%87%E6%B3%A8/" target="_blank" rel="noopener">NLP任务-02-序列标注</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-03-%E5%88%86%E8%AF%8D/" target="_blank" rel="noopener">NLP任务-03-分词</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-04-%E8%AF%8D%E6%80%A7%E6%A0%87%E6%B3%A8/" target="_blank" rel="noopener">NLP任务-04-词性标注</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-05-%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%ABNER/" target="_blank" rel="noopener">NLP任务-05-命名实体识别</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-06-%E4%BE%9D%E5%AD%98%E5%8F%A5%E6%B3%95%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">NLP任务-06-依存句法分析</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-07-%E4%BF%A1%E6%81%AF%E6%8A%BD%E5%8F%96/" target="_blank" rel="noopener">NLP任务-07-信息抽取</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-08-%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB/" target="_blank" rel="noopener">NLP任务-08-文本分类</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-09-%E6%96%87%E6%9C%AC%E8%81%9A%E7%B1%BB/" target="_blank" rel="noopener">NLP任务-09-文本聚类</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-10-%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/" target="_blank" rel="noopener">NLP任务-10-自动补全</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-11-%E8%AF%AD%E4%B9%89%E6%B6%88%E6%AD%A7/" target="_blank" rel="noopener">NLP任务-11-语义消歧</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-12-%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/" target="_blank" rel="noopener">NLP任务-12-问答系统</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-13-%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/" target="_blank" rel="noopener">NLP任务-13-机器翻译</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-14-%E8%87%AA%E5%8A%A8%E6%91%98%E8%A6%81/" target="_blank" rel="noopener">NLP任务-14-自动摘要</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-15-%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">NLP任务-15-情感分析</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-16-%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/" target="_blank" rel="noopener">NLP任务-16-聊天机器人</a></p><h3 id="语义消歧方法"><a href="#语义消歧方法" class="headerlink" title="语义消歧方法"></a>语义消歧方法</h3><p>消歧任务主要分以下几种：</p><ol><li>分词的消歧</li><li>多义词的具体词义</li><li>词性的判断</li></ol><p>对于词性的判断，可以看做一个词性标注的问题，通常需要考虑邻近上下文。如果是词义判决，可能会有相隔很远的词语来决定其词性。因此大部分的词性标注模型简单地使用当前上下文，而语义消歧模型通常使用规模广泛一些的上下文中的实词。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">消歧方法分为以下几种：</span><br><span class="line">(1)有监督消歧</span><br><span class="line">(2)无监督消歧</span><br><span class="line">(3)基于词典的消歧</span><br></pre></td></tr></table></figure><h4 id="有监督消歧"><a href="#有监督消歧" class="headerlink" title="有监督消歧"></a>有监督消歧</h4><p>有监督消歧是采用已经消歧的语料库用来训练，在这个样本训练集中，歧义词<code>w</code>每次出现都被标注上一个语义标签，为有监督消歧提供了一个统计分类的实例，统计分类任务就是构建一个分类器，根据上下文<code>c</code>对新的歧义词进行分类。目前有两个已经用到语义消歧中的算法：一是贝叶斯分类，二是基于信息论的方法。贝叶斯分类是把上下文看成是一个无结构词集，整合了上下文窗口中众多的词汇信息。基于信息论方法仅仅考虑了上下文中的一个信息特征，此信息特征可以很灵敏地反映上下文结构。</p><h5 id="（1）贝叶斯分类的原理"><a href="#（1）贝叶斯分类的原理" class="headerlink" title="（1）贝叶斯分类的原理"></a>（1）贝叶斯分类的原理</h5><p>考虑一个上下文窗口中歧义词周围词的信息。通常我们这里使用一个特殊的分类器，即朴素贝叶斯分类器，这里使用朴素贝叶斯有两个假设：</p><ul><li>第一个是上下文中的所有结构和词语顺序都可以被忽略。</li><li>可有重复的单词集中出现的词独立于其他词。</li></ul><p>虽然这两个假设不太成立，但是朴素贝叶斯能在这个任务中取得一定的效果。s=argmaxp(Sk|c),Sk是W可能包含的语义，C是歧义词的上下文，而s是使该概率最大的语义，即消歧后确定的语义。</p><p>这里补充一下贝叶斯公式的原理（小插曲），它同样可以用来进行垃圾邮件分类和单词拼写纠错，以下是垃圾邮件分类的实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">贝叶斯公式为 P(A|B)=P(B|A)*P(A)/P(B)</span><br><span class="line">贝叶斯公式可以理解为 后验概率 = (似然度 * 先验概率)/标准化常量 ，即后验概率与先验概率和似然度的乘积成正比。</span><br><span class="line"></span><br><span class="line">使用“贝叶斯方法”过滤垃圾邮件，还具有自我学习能力，会根据新收到的邮件，不断调整。收到的垃圾邮件越多，它的准确率就越高。</span><br><span class="line">假定出现“发票”一词，此邮件定为垃圾邮件的概率如下：</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/07/28/o2Rfa6VNhkiOgH5.png" alt="贝叶斯-垃圾邮件分类" width="60%"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">我们继续计算，如果</span><br><span class="line">P（正常）= P（垃圾）=50%</span><br><span class="line">P(发票|垃圾)=5%</span><br><span class="line">P(发票|正常)=0.1%</span><br><span class="line">则 P(垃圾|发票)=(5%×50%) / (5%×50% + 0.1%×50%)=98%</span><br><span class="line">因此，这封新邮件是垃圾邮件的概率是98%。</span><br><span class="line"></span><br><span class="line">但是，我们仍然不能判断，这封邮件有98%的概率是垃圾邮件。因为：</span><br><span class="line">（1）P(发票|垃圾) 和 P(发票|正常)是我们假定的，怎样实际计算它们？</span><br><span class="line">（2）正常邮件也是可能含有“发票”这个词，误判了怎么办？</span><br><span class="line"></span><br><span class="line">此时，我们需要建立历史资料库，对过滤器进行&quot;训练&quot;。</span><br><span class="line">解析所有邮件，提取每一个词。然后，计算每个词语在正常邮件和垃圾邮件中的出现频率。</span><br><span class="line">有了这个初步的统计结果，概率值计算问题就解决了。过滤器就可以投入使用了。</span><br></pre></td></tr></table></figure><p>以下是贝叶斯用于单词拼写纠错的实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">用户输入词汇w，这个词汇w可能是是一个错误单词，系统需要猜测用户真正想要输入的词汇是什么，记猜测词汇为c。</span><br><span class="line"></span><br><span class="line">根据问题就是求 P(c|w) 的最大值，根据贝叶斯公式：P(c|w) = P(w|c)P(c) / P(w) ，因为对于不同的具体猜测c1,c2,c3...，P(w)都是一样的，所在在比较P(c1|w)和P(c2|w)时可以忽略P(w)这个参数，所以P(c|w) = P(w|c)P(c) / P(w) ∝ P(w|c)P(c)  ，这样就等价于求P(w|c)P(c)最大值。</span><br><span class="line"></span><br><span class="line">（1）P(c)是在词库中出现 c 的概率，为先验概率</span><br><span class="line">（2）P(w|c), 在用户输入词库中单词 c 的情况下敲成 w 的概率，即猜测生成我们观测数据的可能性的大小。</span><br><span class="line"></span><br><span class="line">这时，就需要使用到“编辑距离”的概念，编辑距离0表示不作变换，编辑距离n变换表示对单词做n次字母的增删改查。</span><br><span class="line">我们假设P(w|c, edit_0) &gt;&gt; P(w|c, edit_1) &gt;&gt; P(w|c, edit_2)</span><br><span class="line">如果edit_1_set为空再计算edit2情形，依次类推，一般的应用中，只计算到edit2即可。</span><br></pre></td></tr></table></figure><p>我们再回到有监督消歧算法，根据<code>P(A|B)=P(B|A)*P(A)/P(B)</code>贝叶斯公式，假设歧义词为<code>w</code>，P(w)为歧义词<code>w</code>出现的概率，<code>c</code>表示上下文，<code>P(w|c)</code>表示上下文c中出现w的概率，<code>P(c|w)</code>表示w出现时上下文为c的概率。因此我们使用到公式<code>P(c|w)=P(w|c)*P(c)/P(w)</code>来计算单词的意思，即<code>P(c|w)∝P(w|c)P(c)</code></p><h5 id="（2）基于信息论的方法"><a href="#（2）基于信息论的方法" class="headerlink" title="（2）基于信息论的方法"></a>（2）基于信息论的方法</h5><p>以W包含2个语义为例，基本思想是最大化互信息I(P,Q)，P是W的语义集，Q是W的指示器取值集（指示器即能区分W不同语义的关键邻近词）。例：法语“prendre”的含义是take或make，其指示器可以是decision,note,example,measure。P划分为p1={take，}和p2={make，}，Q分为Q1={note,example,measure,}和Q2={decision},如果W的指示器为note，出现在Q1中，那么W对应的语义应该对应地出现在P1中，即take。在这里，P和Q的集合划分的原则是最大化I(P,Q)。</p><h4 id="无监督消歧"><a href="#无监督消歧" class="headerlink" title="无监督消歧"></a>无监督消歧</h4><p>无监督消歧并不是没有一点人工的干预，无监督依然需要部分监督数据来完成。无监督消歧主要是使用EM算法对W的上下文C进行无监督的聚类，也就是对W的语义进行了分类。（当然，该分类的结果不见得就是和词典中对该词的定义分类是匹配的）。</p><p>EM算法是按照最大似然原理，先随便指定一个分布参数，根据分布归类到某一部分，根据归类重新统计数目，按照最大似然估计分布参数，再重新归类、调参、估计，最终得出最优解。</p><p>无监督词义消歧的方法包括以下几种：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 基于知识的无监督</span><br><span class="line">  1）基于机读词典的词义消歧</span><br><span class="line">  2）基于义类词典的词义消歧</span><br><span class="line">  3）基于结构化语义关系的图论式词义消歧</span><br><span class="line">2. 基于统计的无监督</span><br><span class="line">  1）基于聚类的词义消歧</span><br><span class="line">  2）基于双语语料的词义消歧</span><br><span class="line">  3）基于web的词义消歧</span><br></pre></td></tr></table></figure><h4 id="基于词典的消歧"><a href="#基于词典的消歧" class="headerlink" title="基于词典的消歧"></a>基于词典的消歧</h4><p>基于词典的消歧本质上也是无监督消歧的一种<br><code>基于语义定义的消歧</code><br>如果词典中对W的第i种定义包含词汇Ei，那么如果在一个包含W的句子中，同时也出现了Ei，那么就认为在该句子中W的语义应该取词典中的第i种定义。<br><code>基于类义辞典的消歧</code><br>词的每个语义都定义其对应的主题或范畴（如“网球”对应的主题是“运动”），多个语义即对应了多个主题。如果W的上下文C中的词汇包含多个主题，则取其频率最高的主题，作为W的主题，确定了W的主题后，也就能确定其对应的语义。<br><code>基于双语对比的消歧</code><br>这种方法比较有创意，即把一种语言作为另一种语言的定义。例如，为了确定“interest”在英文句子A中的含义，可以利用句子A的中文表达，因为interest的不同语义在中文的表达是不同的。如果句子A对应中文包含“存款利率”，那么“interest”在句子A的语义就是“利率”。如果句子A的对应中文是“我对英语没有兴趣”，</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP任务-12-问答系统</title>
      <link href="/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-12-%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/"/>
      <url>/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-12-%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-01-%E8%AF%8D%E5%B5%8C%E5%85%A5/" target="_blank" rel="noopener">NLP任务-01-词嵌入</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-02-%E5%BA%8F%E5%88%97%E6%A0%87%E6%B3%A8/" target="_blank" rel="noopener">NLP任务-02-序列标注</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-03-%E5%88%86%E8%AF%8D/" target="_blank" rel="noopener">NLP任务-03-分词</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-04-%E8%AF%8D%E6%80%A7%E6%A0%87%E6%B3%A8/" target="_blank" rel="noopener">NLP任务-04-词性标注</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-05-%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%ABNER/" target="_blank" rel="noopener">NLP任务-05-命名实体识别</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-06-%E4%BE%9D%E5%AD%98%E5%8F%A5%E6%B3%95%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">NLP任务-06-依存句法分析</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-07-%E4%BF%A1%E6%81%AF%E6%8A%BD%E5%8F%96/" target="_blank" rel="noopener">NLP任务-07-信息抽取</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-08-%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB/" target="_blank" rel="noopener">NLP任务-08-文本分类</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-09-%E6%96%87%E6%9C%AC%E8%81%9A%E7%B1%BB/" target="_blank" rel="noopener">NLP任务-09-文本聚类</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-10-%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/" target="_blank" rel="noopener">NLP任务-10-自动补全</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-11-%E8%AF%AD%E4%B9%89%E6%B6%88%E6%AD%A7/" target="_blank" rel="noopener">NLP任务-11-语义消歧</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-12-%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/" target="_blank" rel="noopener">NLP任务-12-问答系统</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-13-%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/" target="_blank" rel="noopener">NLP任务-13-机器翻译</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-14-%E8%87%AA%E5%8A%A8%E6%91%98%E8%A6%81/" target="_blank" rel="noopener">NLP任务-14-自动摘要</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-15-%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">NLP任务-15-情感分析</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-16-%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/" target="_blank" rel="noopener">NLP任务-16-聊天机器人</a></p><h4 id="待补充……"><a href="#待补充……" class="headerlink" title="待补充……"></a>待补充……</h4>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP任务-13-机器翻译</title>
      <link href="/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-13-%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/"/>
      <url>/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-13-%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-01-%E8%AF%8D%E5%B5%8C%E5%85%A5/" target="_blank" rel="noopener">NLP任务-01-词嵌入</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-02-%E5%BA%8F%E5%88%97%E6%A0%87%E6%B3%A8/" target="_blank" rel="noopener">NLP任务-02-序列标注</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-03-%E5%88%86%E8%AF%8D/" target="_blank" rel="noopener">NLP任务-03-分词</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-04-%E8%AF%8D%E6%80%A7%E6%A0%87%E6%B3%A8/" target="_blank" rel="noopener">NLP任务-04-词性标注</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-05-%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%ABNER/" target="_blank" rel="noopener">NLP任务-05-命名实体识别</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-06-%E4%BE%9D%E5%AD%98%E5%8F%A5%E6%B3%95%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">NLP任务-06-依存句法分析</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-07-%E4%BF%A1%E6%81%AF%E6%8A%BD%E5%8F%96/" target="_blank" rel="noopener">NLP任务-07-信息抽取</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-08-%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB/" target="_blank" rel="noopener">NLP任务-08-文本分类</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-09-%E6%96%87%E6%9C%AC%E8%81%9A%E7%B1%BB/" target="_blank" rel="noopener">NLP任务-09-文本聚类</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-10-%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/" target="_blank" rel="noopener">NLP任务-10-自动补全</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-11-%E8%AF%AD%E4%B9%89%E6%B6%88%E6%AD%A7/" target="_blank" rel="noopener">NLP任务-11-语义消歧</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-12-%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/" target="_blank" rel="noopener">NLP任务-12-问答系统</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-13-%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/" target="_blank" rel="noopener">NLP任务-13-机器翻译</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-14-%E8%87%AA%E5%8A%A8%E6%91%98%E8%A6%81/" target="_blank" rel="noopener">NLP任务-14-自动摘要</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-15-%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">NLP任务-15-情感分析</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-16-%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/" target="_blank" rel="noopener">NLP任务-16-聊天机器人</a></p><h4 id="待补充……"><a href="#待补充……" class="headerlink" title="待补充……"></a>待补充……</h4>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP任务-14-自动摘要</title>
      <link href="/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-14-%E8%87%AA%E5%8A%A8%E6%91%98%E8%A6%81/"/>
      <url>/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-14-%E8%87%AA%E5%8A%A8%E6%91%98%E8%A6%81/</url>
      
        <content type="html"><![CDATA[<p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-01-%E8%AF%8D%E5%B5%8C%E5%85%A5/" target="_blank" rel="noopener">NLP任务-01-词嵌入</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-02-%E5%BA%8F%E5%88%97%E6%A0%87%E6%B3%A8/" target="_blank" rel="noopener">NLP任务-02-序列标注</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-03-%E5%88%86%E8%AF%8D/" target="_blank" rel="noopener">NLP任务-03-分词</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-04-%E8%AF%8D%E6%80%A7%E6%A0%87%E6%B3%A8/" target="_blank" rel="noopener">NLP任务-04-词性标注</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-05-%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%ABNER/" target="_blank" rel="noopener">NLP任务-05-命名实体识别</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-06-%E4%BE%9D%E5%AD%98%E5%8F%A5%E6%B3%95%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">NLP任务-06-依存句法分析</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-07-%E4%BF%A1%E6%81%AF%E6%8A%BD%E5%8F%96/" target="_blank" rel="noopener">NLP任务-07-信息抽取</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-08-%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB/" target="_blank" rel="noopener">NLP任务-08-文本分类</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-09-%E6%96%87%E6%9C%AC%E8%81%9A%E7%B1%BB/" target="_blank" rel="noopener">NLP任务-09-文本聚类</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-10-%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/" target="_blank" rel="noopener">NLP任务-10-自动补全</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-11-%E8%AF%AD%E4%B9%89%E6%B6%88%E6%AD%A7/" target="_blank" rel="noopener">NLP任务-11-语义消歧</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-12-%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/" target="_blank" rel="noopener">NLP任务-12-问答系统</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-13-%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/" target="_blank" rel="noopener">NLP任务-13-机器翻译</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-14-%E8%87%AA%E5%8A%A8%E6%91%98%E8%A6%81/" target="_blank" rel="noopener">NLP任务-14-自动摘要</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-15-%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">NLP任务-15-情感分析</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-16-%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/" target="_blank" rel="noopener">NLP任务-16-聊天机器人</a></p><h4 id="待补充……"><a href="#待补充……" class="headerlink" title="待补充……"></a>待补充……</h4>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP任务-15-情感分析</title>
      <link href="/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-15-%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/"/>
      <url>/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-15-%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-01-%E8%AF%8D%E5%B5%8C%E5%85%A5/" target="_blank" rel="noopener">NLP任务-01-词嵌入</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-02-%E5%BA%8F%E5%88%97%E6%A0%87%E6%B3%A8/" target="_blank" rel="noopener">NLP任务-02-序列标注</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-03-%E5%88%86%E8%AF%8D/" target="_blank" rel="noopener">NLP任务-03-分词</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-04-%E8%AF%8D%E6%80%A7%E6%A0%87%E6%B3%A8/" target="_blank" rel="noopener">NLP任务-04-词性标注</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-05-%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%ABNER/" target="_blank" rel="noopener">NLP任务-05-命名实体识别</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-06-%E4%BE%9D%E5%AD%98%E5%8F%A5%E6%B3%95%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">NLP任务-06-依存句法分析</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-07-%E4%BF%A1%E6%81%AF%E6%8A%BD%E5%8F%96/" target="_blank" rel="noopener">NLP任务-07-信息抽取</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-08-%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB/" target="_blank" rel="noopener">NLP任务-08-文本分类</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-09-%E6%96%87%E6%9C%AC%E8%81%9A%E7%B1%BB/" target="_blank" rel="noopener">NLP任务-09-文本聚类</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-10-%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/" target="_blank" rel="noopener">NLP任务-10-自动补全</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-11-%E8%AF%AD%E4%B9%89%E6%B6%88%E6%AD%A7/" target="_blank" rel="noopener">NLP任务-11-语义消歧</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-12-%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/" target="_blank" rel="noopener">NLP任务-12-问答系统</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-13-%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/" target="_blank" rel="noopener">NLP任务-13-机器翻译</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-14-%E8%87%AA%E5%8A%A8%E6%91%98%E8%A6%81/" target="_blank" rel="noopener">NLP任务-14-自动摘要</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-15-%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">NLP任务-15-情感分析</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-16-%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/" target="_blank" rel="noopener">NLP任务-16-聊天机器人</a></p><h4 id="待补充……"><a href="#待补充……" class="headerlink" title="待补充……"></a>待补充……</h4>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP任务-16-聊天机器人</title>
      <link href="/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-16-%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
      <url>/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-16-%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-01-%E8%AF%8D%E5%B5%8C%E5%85%A5/" target="_blank" rel="noopener">NLP任务-01-词嵌入</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-02-%E5%BA%8F%E5%88%97%E6%A0%87%E6%B3%A8/" target="_blank" rel="noopener">NLP任务-02-序列标注</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-03-%E5%88%86%E8%AF%8D/" target="_blank" rel="noopener">NLP任务-03-分词</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-04-%E8%AF%8D%E6%80%A7%E6%A0%87%E6%B3%A8/" target="_blank" rel="noopener">NLP任务-04-词性标注</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-05-%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%ABNER/" target="_blank" rel="noopener">NLP任务-05-命名实体识别</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-06-%E4%BE%9D%E5%AD%98%E5%8F%A5%E6%B3%95%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">NLP任务-06-依存句法分析</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-07-%E4%BF%A1%E6%81%AF%E6%8A%BD%E5%8F%96/" target="_blank" rel="noopener">NLP任务-07-信息抽取</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-08-%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB/" target="_blank" rel="noopener">NLP任务-08-文本分类</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-09-%E6%96%87%E6%9C%AC%E8%81%9A%E7%B1%BB/" target="_blank" rel="noopener">NLP任务-09-文本聚类</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-10-%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/" target="_blank" rel="noopener">NLP任务-10-自动补全</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-11-%E8%AF%AD%E4%B9%89%E6%B6%88%E6%AD%A7/" target="_blank" rel="noopener">NLP任务-11-语义消歧</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-12-%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/" target="_blank" rel="noopener">NLP任务-12-问答系统</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-13-%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/" target="_blank" rel="noopener">NLP任务-13-机器翻译</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-14-%E8%87%AA%E5%8A%A8%E6%91%98%E8%A6%81/" target="_blank" rel="noopener">NLP任务-14-自动摘要</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-15-%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">NLP任务-15-情感分析</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E4%BB%BB%E5%8A%A1-16-%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/" target="_blank" rel="noopener">NLP任务-16-聊天机器人</a></p><h4 id="待补充……"><a href="#待补充……" class="headerlink" title="待补充……"></a>待补充……</h4>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP模型-01-预训练语言模型</title>
      <link href="/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-01-%E9%A2%84%E8%AE%AD%E7%BB%83%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/"/>
      <url>/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-01-%E9%A2%84%E8%AE%AD%E7%BB%83%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-01-%E9%A2%84%E8%AE%AD%E7%BB%83%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/" target="_blank" rel="noopener">NLP模型-01-预训练语言模型</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-02-HMM/" target="_blank" rel="noopener">NLP模型-02-HMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-03-GMM/" target="_blank" rel="noopener">NLP模型-03-GMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-04-CRF/" target="_blank" rel="noopener">NLP模型-04-CRF</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-05-transformer/" target="_blank" rel="noopener">NLP模型-05-transformer</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-06-Bert/" target="_blank" rel="noopener">NLP模型-06-Bert</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-07-LDA/" target="_blank" rel="noopener">NLP模型-07-LDA</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-08-fastText/" target="_blank" rel="noopener">NLP模型-08-fastText</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-09-Glove/" target="_blank" rel="noopener">NLP模型-09-Glove</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-10-textRNN%20&%20textCNN/" target="_blank" rel="noopener">NLP模型-10-textRNN &amp; textCNN</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-11-seq2seq/" target="_blank" rel="noopener">NLP模型-11-seq2seq</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-12-attention/" target="_blank" rel="noopener">NLP模型-12-attention</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-13-XLnet/" target="_blank" rel="noopener">NLP模型-13-XLnet</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-14-%E6%A0%B8%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">NLP模型-14-核方法</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-15-%E6%B7%B1%E5%BA%A6%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-15-深度玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-16-%E5%8F%97%E9%99%90%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-16-受限玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-17-%E6%B7%B1%E5%BA%A6%E4%BF%A1%E5%BF%B5%E7%BD%91%E7%BB%9C/" target="_blank" rel="noopener">NLP模型-17-深度信念网络</a></p><h3 id="什么是预训练模型"><a href="#什么是预训练模型" class="headerlink" title="什么是预训练模型"></a>什么是预训练模型</h3><p>预训练模型实际上就是已经训练过的模型或模型组件。它已经在大型训练集上经过了很好的训练，学习到了每个词的表示，并且保存下来所有的模型参数。</p><p>预训练模型的本质是用来文本特征提取，可以适用于迁移学习，减少前期训练词向量的成本。</p><p>预训练模型在word embedding就开始出现，相当于AlexNet在卷积神经网络的地位（雏形）。word embedding是将文字进行向量化，探索字词句的向量表示，如one-hot、tfidf等表示方法，但是这种表达方式非常稀疏，而且词的含义并没有得到表达，因此我们要探索稠密向量。</p><p>在自然语言处理领域的背景下，预训练技术通过使用大规模无标注的文本语料来训练深层网络结构，从而得到一组模型参数，这种深层网络结构通常被称为“预训练模型”;将预训练好的模型参数应用到后续的其他特定任务上，这些特定任务通常被称为“下游任务”。</p><p>预训练技术取得的巨大成功，很大程度上归功于其实现了<code>迁移学习</code>的概念。迁移学习本质上是在一个数据集上训练基础模型，通过微调等方式，使得模型可以在其他不同的数据集上处理不同的任务。预训练的过程如上文所述，是将预训练好的模型的相应结构和权重直接应用到下游任务上，从而实现“迁移学习”的概念，即将预训练模型“迁移”到下游任务。</p><p>词向量的表达应该符合以下特征：</p><ol><li>在分布空间中，含义越类似的词语应该距离越近（相同类型的词语应该在同一簇）</li><li>不同语言，相同含义的词语应该出现在分布空间的同一位置</li><li>词语应该支持加减法，如<code>king-queue=man-woman</code></li></ol><p><strong>预训练模型应该如何使用呢？</strong></p><ol><li>直接将预训练模型当做特征提取来使用</li><li>只采用预训练模型的结构，所有权重随机初始化，使用自己的数据集进行重新训练</li><li>Fine-tune，冻结一部分结构，重新训练剩下的层，或者加上一些层</li></ol><p><strong>预训练模型分为以下三类：</strong></p><ol><li>自回归语言模型，如GPT</li><li>去噪自编码DAE，如Bert</li><li>排列语言模型，如XLNet</li></ol><h3 id="分布式表示"><a href="#分布式表示" class="headerlink" title="分布式表示"></a>分布式表示</h3><p>以下是词向量表示法的分类：</p><img src="https://i.loli.net/2020/07/20/pJaOoIxtEYBemMW.png" alt="分布式表示" width="100%"><p>从上图可以看出，词语的分布式表示分为<code>欧式空间</code>和<code>非欧式空间</code>，其中<code>非欧式空间</code>常常是高维的表达，如黎曼空间、球形空间等等，距离计算也均不相同，我们常见的是欧式空间的表达。</p><p>欧式空间可以分为<code>global</code>方法和<code>local</code>方法，<code>global</code>方法会考虑整个句子词与词之间的相关性，从而衡量词语的向量表达，如MF（矩阵分解）、LDA（主题模型）。这些方法需要考虑到整个语料库的信息，但是有个缺点，就是在训练好词向量后，如果加入了新词或者改变了上下文，整个词向量矩阵均需要重新计算，这个计算量还是不容小觑的。因此，基于这个不足，后面衍生出了<code>local</code>的词向量表达——只考虑了一篇文档、一句话或者是上下文的几个词语，而不是完整的语料库，这样能加快更新的速度。</p><p><code>local</code>方法分为<code>基于LM的训练</code>和<code>基于非LM的训练</code>，其本质区分点在于是否使用了语言模型。这里通俗地解释一下语言模型——就是衡量一句话是否是人话的程度。<br><code>基于非LM的训练</code>包括了Skip-Gram、CBOW（连续词袋模型）、Bert、ALBert等等，CBOW是使用上下文的词语预测中心词语，Skip-Gram是使用中心词语预测上下文的词语。两者在训练的过程中，运用了一些小技巧，如层次softmax、Negative Sampling等等，后文会有详细解释。CBOW和Skip-Gram依然存在一些问题，例如碰到一词多义的情景就不知道该怎么办了，总不能用一个固定的词向量表示吧。</p><p>于是就有了<code>local&gt;基于非LM的训练&gt;考虑上下文</code>的模型，如Bert、ALBert等等。transformer是在LSTM之后效果最佳的特征提取器，模型中使用到了attention机制。Bert就是transformer中的Encoder。</p><p><code>local&gt;基于LM的训练</code>中考虑上下文的模型有EMLo、XLNet，不考虑上下文的模型有NNLM。</p><h4 id="EMLo"><a href="#EMLo" class="headerlink" title="EMLo"></a>EMLo</h4><p>EMLo能够很好地解决一词多义的问题，它的basic unit是LSTM，底层使用已经训练好的静态词向量（如Glove），再接上两层双向LSTM双向网络，通过多层进行特征抽取（如单词特征、句法特征、语义特征），最后每个词语都会得到3个向量，分别为底层、第一层LSTM、第二层LSTM，使用在任务中学习到的权重，对这三项进行加权平均，从而得到最终的词向量。</p><p>EMLo虽然指标做到了当时的SOTA，但是仍然存在一些问题：</p><ol><li>EMLo的LSTM抽取特征的能力是远低于如今的transformer的</li><li>使用拼接方式实现双向网络，特征融合的能力还是较弱的，其本质上还是利用了从左到右、从右到左的两个网络</li></ol><h4 id="GPT"><a href="#GPT" class="headerlink" title="GPT"></a>GPT</h4><p>GPT（Improving Language Understanding by Generative Pre-Training）就是Transformer的decoder，采用了masked self-attention的训练方式。它的核心思想，是利用<code>一个网络模型</code>去做<code>预训练任务</code>和<code>下游任务</code>，将下游任务的输入全部处理成满足预训练模型的输入格式，这样可以直接使用预训练模型去做任务了。我们只需要在一句话的前后添加两个token标志即可。</p><p>不同于EMLo的LSTM结构，GPT使用transformer能够捕捉到更长范围内的语义信息，且transformer的效果要优于LSTM。</p><p>GPT2相对于GPT来说，并没有太大实质性的改动，增加了更高质量、更广泛、数量更大的数据集，采用了更巨大的transformer结构，且对transformer结构做了一些微调。GPT2的目标，是<strong>使用一个大量和质量好的无标签数据，去完成NLP下游任务（使用无监督模型去做监督任务）</strong>。</p><p>GPT2是一种生成模型，拥有了15亿的参数，在阅读理解任务上能够获得惊人的效果，但是在文本摘要生成上并没有取得理想的效果。</p><h4 id="BERT"><a href="#BERT" class="headerlink" title="BERT"></a>BERT</h4><p>Bert是transformer结构的encoder，具体的详细解释见<a href="https://iloveyou11.github.io/2020/07/16/Bert%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%85%B6%E5%8F%98%E7%A7%8D/" target="_blank" rel="noopener">《Bert模型及其变种》</a></p><p>目前，Bert模型在诸多NLP任务中都取得了不错的效果，如：</p><ul><li>分类：文本分类、情感分类……</li><li>序列标注：分词、实体识别、语义标注……</li><li>句子关系：问答、推理……</li><li>生成任务：文本摘要、机器翻译……</li></ul><p>Bert仍然存在一些缺点：</p><ul><li>训练和测试的数据格式不一致（测试阶段没有mask token）</li><li>词语之间保持了独立</li><li>无法处理长文本</li></ul><h4 id="RoBERTa"><a href="#RoBERTa" class="headerlink" title="RoBERTa"></a>RoBERTa</h4><p>RoBERTa（a Robustly Optimized BERT Pretraining Approach）是Bert的一个强劲改进版本，它使用了更大的数据、更大的batch size、更长的训练时间、更大的学习率（超参数调整），并且将静态的mask改为了动态的mask，获得了不错的效果（超越了之前出现的模型，当时的SOTA）。</p><h4 id="ALBERT"><a href="#ALBERT" class="headerlink" title="ALBERT"></a>ALBERT</h4><p>在RoBERTa出现后的几天，ALBERT（A Lite BERT For Self-Supervised Learning Of Language Representations）就超越了RoBERTa成为当时最先进的算法。ALBERT有以下这些创新点：</p><ul><li>词嵌入向量参数的因式分解</li><li>跨层参数共享 </li><li>NSP 预训练任务</li><li>去掉dropout、LAMB优化器、更大的batch-size</li><li>N-gram mask</li></ul>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP模型-02-HMM</title>
      <link href="/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-02-HMM/"/>
      <url>/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-02-HMM/</url>
      
        <content type="html"><![CDATA[<p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-01-%E9%A2%84%E8%AE%AD%E7%BB%83%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/" target="_blank" rel="noopener">NLP模型-01-预训练语言模型</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-02-HMM/" target="_blank" rel="noopener">NLP模型-02-HMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-03-GMM/" target="_blank" rel="noopener">NLP模型-03-GMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-04-CRF/" target="_blank" rel="noopener">NLP模型-04-CRF</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-05-transformer/" target="_blank" rel="noopener">NLP模型-05-transformer</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-06-Bert/" target="_blank" rel="noopener">NLP模型-06-Bert</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-07-LDA/" target="_blank" rel="noopener">NLP模型-07-LDA</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-08-fastText/" target="_blank" rel="noopener">NLP模型-08-fastText</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-09-Glove/" target="_blank" rel="noopener">NLP模型-09-Glove</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-10-textRNN%20&%20textCNN/" target="_blank" rel="noopener">NLP模型-10-textRNN &amp; textCNN</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-11-seq2seq/" target="_blank" rel="noopener">NLP模型-11-seq2seq</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-12-attention/" target="_blank" rel="noopener">NLP模型-12-attention</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-13-XLnet/" target="_blank" rel="noopener">NLP模型-13-XLnet</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-14-%E6%A0%B8%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">NLP模型-14-核方法</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-15-%E6%B7%B1%E5%BA%A6%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-15-深度玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-16-%E5%8F%97%E9%99%90%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-16-受限玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-17-%E6%B7%B1%E5%BA%A6%E4%BF%A1%E5%BF%B5%E7%BD%91%E7%BB%9C/" target="_blank" rel="noopener">NLP模型-17-深度信念网络</a></p><h3 id="初识HMM"><a href="#初识HMM" class="headerlink" title="初识HMM"></a>初识HMM</h3><p>HMM是<code>Hidden Markov Model</code>的缩写，是一个时序类的模型，<code>x</code>是观测值，<code>z</code>是隐变量。<code>z</code>可以视为状态，每个状态<code>z</code>都可以产生一个观测值<code>x</code>。HMM是有方向的生成模型。HMM的基础结构如下：</p><img src="https://i.loli.net/2020/07/23/DJw7436Us1KPmcY.png" alt="HMM结构" width="80%"><p>HMM中三个不同的参数：<code>θ=(A,B,Π)</code>，其中：</p><ol><li><code>A</code>是<code>状态z到状态z的转移矩阵</code>，指从一个状态z转移到下一个状态z的概率。</li><li><code>B</code>是<code>状态z到结果x的生成矩阵</code>，表示从一个状态z下有多大概率生成某观测值x。但是只有在离散型随机变量的情况下，才能写成是矩阵的形式，如果为连续性随机变量，则需要使用到GMM（高斯混合模型）。</li><li><code>Π</code>是<code>状态z首次出现概率向量</code>，表示状态Z1到状态Zn出现在第一个位置的概率。</li></ol><p>如下图所示，<code>A</code>、<code>B</code>均为矩阵形式，<code>Π</code>为向量形式。</p><img src="https://i.loli.net/2020/07/23/MPQpLulqTESiIna.png" alt="HMM参数" width="80%"><p>针对此模型，主要有以下两大任务：</p><ol><li>给定模型的参数<code>θ</code>，找出最合适的<code>Z</code></li><li>估计模型的参数<code>θ</code></li></ol><h4 id="求解最好的z"><a href="#求解最好的z" class="headerlink" title="求解最好的z"></a>求解最好的z</h4><ol><li>方法1：列举出所有的可能序列，可能很容易去评估likelihood，直接计算<code>P(Z1)*P(Z2|Z1)*P(Z3|Z2)……P(Zn|Zn-1) * P(X1|Z1)*P(X2|Z2)*P(X3|Z3)……P(Xn|Zn)</code>即可。</li></ol><p>其中，<code>P(Z1)*P(Z2|Z1)*P(Z3|Z2)……P(Zn|Zn-1)</code>表示<code>状态z</code>序列转移的总概率，<code>P(X1|Z1)*P(X2|Z2)*P(X3|Z3)……P(Xn|Zn)</code>表示从<code>状态z1</code>到<code>状态zn</code>生成各个<code>x</code>的总概率。最后，对比穷举的所有可能<code>z</code>序列的概率，选择出最大的即可，结果就是最合适的<code>z</code>。</p><img src="https://i.loli.net/2020/07/23/SZCaVv1dRiUm94h.png" alt="穷举求解z" width="80%"><ol start="2"><li>方法2：使用维特比算法（Viterbi）解决——核心是动态规划的思想</li></ol><p>如何在无穷多的路径中去选择最优的路径？将大问题转化为小问题，使用动态规划解决——每一个状态z下的最佳路径，都是选取的上一个<code>z</code>的最佳路径加上新路径总和的最优值，即<code>DP(z)=max(DP(z-1)+P(z-1,z))</code>。如下图所示：</p><img src="https://i.loli.net/2020/07/22/Km61k5VhQCiFrbG.png" alt="Viterbi算法求解z1" width="80%"><img src="https://i.loli.net/2020/07/23/u2F3g6MdRLOlBpW.png" alt="Viterbi算法求解z2" width="80%"><h4 id="估计参数θ"><a href="#估计参数θ" class="headerlink" title="估计参数θ"></a>估计参数θ</h4><ol><li><strong>F/B算法</strong>：给定任何一个时间k，能计算出Zk属于某一个具体状态的概率的多少</li></ol><img src="https://i.loli.net/2020/07/23/FSLubr2DBfO7MU6.png" alt="FB1" width="80%"><img src="https://i.loli.net/2020/07/23/IiFvN2HzCuWtLVd.png" alt="FB2" width="80%"><img src="https://i.loli.net/2020/07/23/uempVrbYcNCqPSj.png" alt="FB3" width="80%"><ol start="2"><li><strong>Forward算法</strong>：给定1-k时刻所有x的值，得到隐变量Zk的值</li></ol><img src="https://i.loli.net/2020/07/23/OoeWsm4UqixM7QP.png" alt="forwrad" width="80%"><ol start="3"><li><strong>Backward算法</strong>：给定Zk，求出下一时刻X(k+1)的值</li></ol><img src="https://i.loli.net/2020/07/23/hKXt9uCsGLMUH4v.png" alt="backward" width="80%"><h3 id="三大参数计算"><a href="#三大参数计算" class="headerlink" title="三大参数计算"></a>三大参数计算</h3><p>分为以下两种情况：<code>complete case</code>和<code>incomplete case</code>，其中，<code>complete case</code>指x（观测值）和z（隐变量）均已知的情况，<code>incomplete case</code>指x（观测值）已知，但是z（隐变量）未知的情况，这时必须借助其他算法（如EM算法）来解决。</p><img src="https://i.loli.net/2020/07/23/wxigFXIh7uojKAQ.png" alt="complete vs incomplete" width="80%"><h4 id="complete-case"><a href="#complete-case" class="headerlink" title="complete case"></a>complete case</h4><p>Z和X均已知</p><img src="https://i.loli.net/2020/07/23/8WTsrduVnmjCowg.png" alt="complete case" width="80%"><ol><li>Π等于每个状态Z出现在第一个位置上的概率，直接通过图即可求解出来（因为Z已知），组成一个向量。</li><li>A矩阵是通过每个状态转化为另一个状态的概率计算出来的，矩阵的维度和状态个数相等。计算过程也是非常简单，直接计算有多少次从状态Zi转移到了状态Zj，再计算概率即可。</li><li>B矩阵是通过每个状态生成某个观测值的概率计算出来的。计算过程也是非常简单，直接计算有多少次从状态Zi生成了观测值Xi，再计算概率即可。</li></ol><h4 id="incomplete-case"><a href="#incomplete-case" class="headerlink" title="incomplete case"></a>incomplete case</h4><p>X已知，Z未知，需要使用到EM算法，均使用概率估计（不能确定每个观测值对应隐变量z出现的必然性，均使用概率值表示）</p><img src="https://i.loli.net/2020/07/23/9DTrp3KQRHw2uBS.png" alt="incomplete case" width="80%"><ol><li><strong>估计Π</strong></li></ol><p>解决的问题：计算每个状态z首次出现的概率</p><p>假定z共有3种状态1、2、3，则分别计算：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">P(z1=1|x1)  P(z1=2|x1)  P(z1=3|x1)</span><br><span class="line">P(z1=1|x2)  P(z1=2|x2)  P(z1=3|x2)</span><br><span class="line">P(z1=1|x3)  P(z1=2|x3)  P(z1=3|x3)</span><br></pre></td></tr></table></figure><p>再计算向量<code>T=[P(z1=1|x1)+P(z1=1|x2)+P(z1=1|x3),P(z1=2|x1)+P(z1=2|x2)+P(z1=2|x3),P(z1=3|x1)+P(z1=3|x2)+(z1=3|x3)]</code>，最后对T进行归一化得到向量<code>Π</code>。具体流程如下图所示：</p><img src="https://i.loli.net/2020/07/23/ZfL86wXR73Y1vdU.png" alt="估计PI2" width="80%"><ol start="2"><li><strong>估计B</strong></li></ol><p>解决的问题：计算每个状态z生成不同x的概率矩阵</p><p>假设z有3个状态1、2、3，x有3种可能观测值a、b、c，我们可以计算出1、2、3分别生成a、b、c的出现次数，构建3X3矩阵，最后进行行向量归一化操作，可以得到矩阵B</p><img src="https://i.loli.net/2020/07/22/hbC1jyBJRNe6DGo.png" alt="估计B" width="80%"><ol start="3"><li><strong>估计A</strong></li></ol><p>解决的问题：计算每个状态z之间的转移概率矩阵</p><p>如下图所示，可以计算得到每个隐变量中z的分布概率，因此我们可以得到z的不同变量之间转化的概率只和，最后进行归一化操作即可。</p><img src="https://i.loli.net/2020/07/23/yugKLJhUoPcrOaS.png" alt="估计A3" width="80%">]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP模型-03-GMM</title>
      <link href="/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-03-GMM/"/>
      <url>/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-03-GMM/</url>
      
        <content type="html"><![CDATA[<p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-01-%E9%A2%84%E8%AE%AD%E7%BB%83%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/" target="_blank" rel="noopener">NLP模型-01-预训练语言模型</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-02-HMM/" target="_blank" rel="noopener">NLP模型-02-HMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-03-GMM/" target="_blank" rel="noopener">NLP模型-03-GMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-04-CRF/" target="_blank" rel="noopener">NLP模型-04-CRF</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-05-transformer/" target="_blank" rel="noopener">NLP模型-05-transformer</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-06-Bert/" target="_blank" rel="noopener">NLP模型-06-Bert</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-07-LDA/" target="_blank" rel="noopener">NLP模型-07-LDA</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-08-fastText/" target="_blank" rel="noopener">NLP模型-08-fastText</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-09-Glove/" target="_blank" rel="noopener">NLP模型-09-Glove</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-10-textRNN%20&%20textCNN/" target="_blank" rel="noopener">NLP模型-10-textRNN &amp; textCNN</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-11-seq2seq/" target="_blank" rel="noopener">NLP模型-11-seq2seq</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-12-attention/" target="_blank" rel="noopener">NLP模型-12-attention</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-13-XLnet/" target="_blank" rel="noopener">NLP模型-13-XLnet</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-14-%E6%A0%B8%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">NLP模型-14-核方法</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-15-%E6%B7%B1%E5%BA%A6%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-15-深度玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-16-%E5%8F%97%E9%99%90%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-16-受限玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-17-%E6%B7%B1%E5%BA%A6%E4%BF%A1%E5%BF%B5%E7%BD%91%E7%BB%9C/" target="_blank" rel="noopener">NLP模型-17-深度信念网络</a></p><p>GMM是高斯混合模型（Gaussian Mixture Model）的简称。GMM模型是一种普遍使用的聚类算法，使用了高斯分布作为模型参数，EM算法进行训练。</p><h3 id="高斯分布"><a href="#高斯分布" class="headerlink" title="高斯分布"></a>高斯分布</h3><p>高斯分布也叫正态分布，是一种在自然界大量的存在的、最为常见的分布形式。高斯分布的概率密度函数公式如下：</p><img src="https://i.loli.net/2020/07/28/3NosgC6wS1nizJH.png" alt="正态分布公式" width="30%"><p>参数<code>μ</code>表示均值，参数<code>σ</code>表示标准差，<code>σ</code>越小则数据越集中，<code>σ</code>越大则数据越分散。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">这里做个小补充，数学中常见的分布：</span><br><span class="line">- 正态分布：代表了宇宙中大多数情况的运转状态，大量的随机变量被证明是正态分布。</span><br><span class="line">- 二项式分布：每次试验独立，每次试验只有两种结果（成功、失败）且概率相同，总共进行了n次试验。</span><br><span class="line">- 泊松分布：</span><br><span class="line">    泊松分布的条件如下：</span><br><span class="line">    1）任何一个成功的事件都不影响另一个成功的事件</span><br><span class="line">    2）在短时间内成功的概率必须等于在更长时间内成功的概率</span><br><span class="line">    3）在时间间隔很小时，在给定时间间隔中成功的概率趋向于零</span><br><span class="line">- 均匀分布：每时每刻发生的概率都是相同的</span><br><span class="line">- 卡方分布：</span><br><span class="line">    卡方分布：通过少数量的样本容量去预估总体容量的分布情况</span><br><span class="line">    卡方检验：统计样本的实际观测值与理论推断值之间的偏离程度</span><br><span class="line">- beta分布：beta分布可以看做是一个概率的概率分布，当你不知道一个东西的具体概率是多少时，它可以给出所有概率出现的概可能性大小。</span><br></pre></td></tr></table></figure><h3 id="期望最大与高斯训练"><a href="#期望最大与高斯训练" class="headerlink" title="期望最大与高斯训练"></a>期望最大与高斯训练</h3><p>用最直观的文字讲一下EM训练过程：</p><ol><li>通过观察采样的概率值和模型概率值的接近程度，来判断一个模型是否拟合良好。</li><li>通过调整模型以让新模型更适配采样的概率值。</li><li>反复迭代多次，直到两个概率值非常接近时，停止训练即可</li></ol><p>【核心】通过更新参数<code>μ</code>和<code>σ</code>来让期望值最大化。该过程和k-means的算法训练过程很相似（k-means不断更新类中心来让结果最大化），只不过在这里的高斯模型中，我们需要同时更新两个参数：<code>μ</code>和<code>σ</code>。</p><h3 id="高斯混合模型"><a href="#高斯混合模型" class="headerlink" title="高斯混合模型"></a>高斯混合模型</h3><p>GMM是通过多个高斯分布的叠加来刻画数据的分布特征。GMM的公式如下：</p><img src="https://i.loli.net/2020/07/28/fYFq56wDdbWPI3p.png" alt="GMM" width="30%"><p>分布概率是K个高斯分布的和，每个高斯分布有属于自己的<code>μ</code>和<code>σ</code>参数，以及对应的权重参数，所有权重的和必须等于1。</p><p>举个例子，如下图所示：</p><img src="https://i.loli.net/2020/07/28/j1m6lHBx3ouZiYe.png" alt="GMM身高例子" width="70%"><p>女生的平均身高要比男生矮，如果已知性别，是可以很方便地求解出身高的概率值的。但是如果我们事先并不知道具体的性别，则不仅要学出每种分布的参数，还需要生成性别的划分情况，当决定期望值时，需要将权重值分别生成男性和女性的相应身高概率值并相加。</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP模型-04-CRF</title>
      <link href="/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-04-CRF/"/>
      <url>/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-04-CRF/</url>
      
        <content type="html"><![CDATA[<p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-01-%E9%A2%84%E8%AE%AD%E7%BB%83%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/" target="_blank" rel="noopener">NLP模型-01-预训练语言模型</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-02-HMM/" target="_blank" rel="noopener">NLP模型-02-HMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-03-GMM/" target="_blank" rel="noopener">NLP模型-03-GMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-04-CRF/" target="_blank" rel="noopener">NLP模型-04-CRF</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-05-transformer/" target="_blank" rel="noopener">NLP模型-05-transformer</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-06-Bert/" target="_blank" rel="noopener">NLP模型-06-Bert</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-07-LDA/" target="_blank" rel="noopener">NLP模型-07-LDA</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-08-fastText/" target="_blank" rel="noopener">NLP模型-08-fastText</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-09-Glove/" target="_blank" rel="noopener">NLP模型-09-Glove</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-10-textRNN%20&%20textCNN/" target="_blank" rel="noopener">NLP模型-10-textRNN &amp; textCNN</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-11-seq2seq/" target="_blank" rel="noopener">NLP模型-11-seq2seq</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-12-attention/" target="_blank" rel="noopener">NLP模型-12-attention</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-13-XLnet/" target="_blank" rel="noopener">NLP模型-13-XLnet</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-14-%E6%A0%B8%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">NLP模型-14-核方法</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-15-%E6%B7%B1%E5%BA%A6%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-15-深度玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-16-%E5%8F%97%E9%99%90%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-16-受限玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-17-%E6%B7%B1%E5%BA%A6%E4%BF%A1%E5%BF%B5%E7%BD%91%E7%BB%9C/" target="_blank" rel="noopener">NLP模型-17-深度信念网络</a></p><h3 id="CRF简介"><a href="#CRF简介" class="headerlink" title="CRF简介"></a>CRF简介</h3><p>CRF是条件随机场（Conditional Random Fields）的简称，是给定一组输入序列条件下另一组输出序列的条件概率分布模型。</p><p>为什么要使用CRF模型？</p><p>举个例子，我们今有一项任务是“图像分类”，如果我们只是单纯看到了一个人闭着嘴的照片，其实很难去标记他到底在干什么，如果我们能够获得这张照片前一点点时间的照片的话，则很好标记，如在时间序列上前一张的照片里这个人在吃饭，那么这张闭嘴的照片很有可能是在吃饭咀嚼。而如果在时间序列上前一张的照片里这个人在唱歌，那么这张闭嘴的照片很有可能是在唱歌……</p><p>因此，为了使得分类器表现更好，我们可以考虑相邻数据的标记信息，这是CRF最擅长的地方。如词性标注(POS Tagging)就是很好的例子。</p><h3 id="随机场与马尔科夫随机场"><a href="#随机场与马尔科夫随机场" class="headerlink" title="随机场与马尔科夫随机场"></a>随机场与马尔科夫随机场</h3><p><strong>随机场</strong>：随机场是由若干个位置组成的整体，当给每一个位置中按照某种分布随机赋予一个值之后，其全体就叫做随机场。</p><p><strong>马尔科夫随机场</strong>：马尔科夫随机场是随机场的特例，它假设随机场中某一个位置的赋值仅仅与和它相邻的位置的赋值有关，和与其不相邻的位置的赋值无关。</p><p>马尔科夫随机场需要满足以下三个特征：</p><p><strong>1. 成对马尔科夫性</strong></p><img src="https://i.loli.net/2020/07/28/6KYFgUacSXeOlxz.png" alt="成对马尔科夫性" width="50%"><p>给定<code>o</code>，<code>u</code>和<code>v</code>是独立的，即<code>p(u,v|o)=p(u,o)*p(v,o)</code>。<br>对任意两个边没有直接相连的节点，当给定其他所有节点的时候，这两个随机变量是独立的。</p><p><strong>2. 局部马尔科夫性</strong></p><img src="https://i.loli.net/2020/07/28/jbDstNiPAg6WVZB.png" alt="局部/全局马尔科夫性" width="50%"><p>对无向图中随意一个节点<code>v</code>，和这个节点其他相连的所有节点即为<code>w</code>，其他所有节点记为<code>o</code>，则<code>v</code>与<code>o</code>是独立的。</p><p><strong>3. 全局马尔科夫性</strong></p><img src="https://i.loli.net/2020/07/28/jbDstNiPAg6WVZB.png" alt="局部/全局马尔科夫性" width="50%"><p>当给定C时，A和B是独立的。</p><p>这三个马尔科夫性是等价的，因为如果任意一个节点都满足成对马尔科夫性，则等价于任意一个节点都满足局部马尔科夫性，也等价于这些节点满足全局马尔科夫性。</p><p><strong>什么是概率无向图模型？</strong><br>设有联合概率分布P(Y)，由无向图G=(V,E)表示，在G中，节点表示随机变量，边表示随机变量之间的依赖关系。如果P(Y)满足<code>成对、局部、全局马尔科夫性</code>，就称此联合概率分布为概率无向图模型，或者马尔科夫随机场。</p><h3 id="条件随机场"><a href="#条件随机场" class="headerlink" title="条件随机场"></a>条件随机场</h3><p>CRF是马尔科夫随机场的特例，它假设马尔科夫随机场中只有X和Y两种变量，X一般是给定的，而Y一般是在给定X的条件下的输出。这样马尔科夫随机场就特化成了条件随机场。</p><p>可详细阅读<a href="https://zhuanlan.zhihu.com/p/29989121" target="_blank" rel="noopener">《条件随机场CRF》</a></p><h4 id="线性链条件随机场"><a href="#线性链条件随机场" class="headerlink" title="线性链条件随机场"></a>线性链条件随机场</h4><p>X和Y有相同的结构的CRF就构成了线性链条件随机场（linear-CRF）。基本结构如下：</p><img src="https://i.loli.net/2020/07/28/gUOt7YMwBsqP8ZL.png" alt="线性链条件随机场" width="50%"><p>linear-CRF的三个基本问题：</p><ol><li>评估问题。给定条件概率分布p(x,y),在给定输入序列x和输出序列y的情况下，计算条件概率p(yi,x)、p(yi-1,yi|x)、对应的期望。</li><li>学习问题。给定训练集X和Y，学习linear-CRF的模型参数Wk和条件概率Pw(y|x)。</li><li>解码问题。即给定 linear-CRF的条件概率分布p(y|x) ，和输入序列x，计算使条件概率最大的输出序列y。</li></ol>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP模型-06-Bert</title>
      <link href="/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-06-Bert/"/>
      <url>/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-06-Bert/</url>
      
        <content type="html"><![CDATA[<p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-01-%E9%A2%84%E8%AE%AD%E7%BB%83%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/" target="_blank" rel="noopener">NLP模型-01-预训练语言模型</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-02-HMM/" target="_blank" rel="noopener">NLP模型-02-HMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-03-GMM/" target="_blank" rel="noopener">NLP模型-03-GMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-04-CRF/" target="_blank" rel="noopener">NLP模型-04-CRF</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-05-transformer/" target="_blank" rel="noopener">NLP模型-05-transformer</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-06-Bert/" target="_blank" rel="noopener">NLP模型-06-Bert</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-07-LDA/" target="_blank" rel="noopener">NLP模型-07-LDA</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-08-fastText/" target="_blank" rel="noopener">NLP模型-08-fastText</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-09-Glove/" target="_blank" rel="noopener">NLP模型-09-Glove</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-10-textRNN%20&%20textCNN/" target="_blank" rel="noopener">NLP模型-10-textRNN &amp; textCNN</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-11-seq2seq/" target="_blank" rel="noopener">NLP模型-11-seq2seq</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-12-attention/" target="_blank" rel="noopener">NLP模型-12-attention</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-13-XLnet/" target="_blank" rel="noopener">NLP模型-13-XLnet</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-14-%E6%A0%B8%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">NLP模型-14-核方法</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-15-%E6%B7%B1%E5%BA%A6%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-15-深度玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-16-%E5%8F%97%E9%99%90%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-16-受限玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-17-%E6%B7%B1%E5%BA%A6%E4%BF%A1%E5%BF%B5%E7%BD%91%E7%BB%9C/" target="_blank" rel="noopener">NLP模型-17-深度信念网络</a></p><p>Bert（Bidirectional Encoder Representations from Transformers）说白了就是<code>transformer</code>中的<code>encoder</code>部分，就是怎么将transformer模型中的特征学习出来，是Word2Vec的替代者。</p><ol><li>使用了Transformer作为算法的主要框架，能更彻底的捕捉语句中的双向关系；</li><li>使用了Mask Language Model(MLM) 和 Next Sentence Prediction(NSP) 的多任务训练目标；</li><li>使用更强大的机器训练更大规模的数据，使BERT的结果达到了全新的高度，并且Google开源了BERT模型，用户可以直接使用BERT作为Word2Vec的转换矩阵并高效的将其应用到自己的任务中。</li></ol><p><strong>bert的缺点：</strong></p><ol><li>测试数据是没有mask token的，训练数据与测试数据不匹配</li><li>缺乏生成能力</li><li>针对每个mask预测时没有考虑相关性（互相独立）</li></ol><h4 id="什么是预训练模型"><a href="#什么是预训练模型" class="headerlink" title="什么是预训练模型"></a>什么是预训练模型</h4><p>假设我们有大量的维基百科数据，那么我们可以用这部分巨大的数据来训练一个泛化能力很强的模型，当我们需要在特定场景使用时，例如做文本相似度计算，那么，只需要简单的修改一些输出层，再用我们自己的数据进行一个增量训练，对权重进行一个轻微的调整。预训练的好处在于在特定场景使用时不需要用大量的语料来进行训练，节约时间效率高效，bert就是这样的一个泛化能力较强的预训练模型。</p><p>BERT预训练模型的输出结果，无非就是一个或多个向量。下游任务可以通过精调（改变预训练模型参数）或者特征抽取（不改变预训练模型参数，只是把预训练模型的输出作为特征输入到下游任务）两种方式进行使用。</p><h4 id="如何训练Bert"><a href="#如何训练Bert" class="headerlink" title="如何训练Bert"></a>如何训练Bert</h4><p>BERT是一个多任务模型，它的任务是由两个自监督任务组成，即MLM和NSP。</p><p><strong>任务1：Masked Language Model（MLM）</strong><br>在训练的时候随机从输入预料上mask掉一些单词（有15%的词汇被随机mask掉），然后通过的上下文预测该单词。交给模型自己去预测被mask的是什么，类似于完形填空。</p><p><strong>任务2：Next Sentence Prediction（NSP）</strong><br>预测两个句子是否应该连在一起，句子B是否是句子A的下文。训练数据的生成方式是从平行语料中随机抽取的连续两句话，其中50%保留抽取的两句话，它们符合IsNext关系，另外50%的第二句话是随机从预料中提取的，它们的关系是NotNext的。</p><img src="https://i.loli.net/2020/07/13/4HJVnyOFmdNA9Eh.png" width="80%" alt="bert-句子判断"><h4 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h4><p>例如阅读理解题，输入文章和问题看，输出答案的位置。</p><p>如何设计网络呢？需要分别计算答案的起始位置和终止位置，如下图所示：</p><img src="https://i.loli.net/2020/07/13/9wmjBbWXN5pTseY.png" width="80%" alt="bert-阅读"><h4 id="Bert模型如何使用"><a href="#Bert模型如何使用" class="headerlink" title="Bert模型如何使用"></a>Bert模型如何使用</h4><p>打开github/bert，下载pre-trained models，在此基础上做fine-tuning操作。</p><p>建议练手github/bert上列举的项目。</p><ol><li>download github/bert的代码，放入新建的项目文件夹（<code>git clone https://github.com/google-research/bert</code>）</li><li>根据不同的任务，选择下载预训练模型，放入checkpoint文件夹</li><li>下载数据集，如glue-data</li><li>开始训练</li><li>在output文件下面，可以找到对应模型参数文件，就是训练的结果</li></ol><h4 id="Bert模型的变种"><a href="#Bert模型的变种" class="headerlink" title="Bert模型的变种"></a>Bert模型的变种</h4><h5 id="XLNet"><a href="#XLNet" class="headerlink" title="XLNet"></a>XLNet</h5><p><code>先将句子打乱，再复原句子。</code>XLNet融合了GPT和Bert两个模型，等效为mask机制+序列预测的难度加强版。</p><ol><li>GPT是自编码模型， 通过双向LSTM编码提取语义。</li><li>Bert是自回归模型，不分顺序，用attention加强提取语义的效果。</li><li>XLNet融合了Bert的结构和GPT的有向预测。</li></ol><img src="https://i.loli.net/2020/07/16/wJriGV7cQYLtfNq.png" alt="XLNet" width="80%"><p>XLNet解决了Bert的以下缺点：</p><img src="https://i.loli.net/2020/07/17/iWoAPZ1TOuDqhnk.png" alt="XLNet改进" width="80%"><h5 id="SpanBert"><a href="#SpanBert" class="headerlink" title="SpanBert"></a>SpanBert</h5><p>对应论文：《Improving Pre-training by Representing and Predicting Spans》<br><code>预测一个范围内的所有词，而不是像Bert一样预测一个个的词。</code></p><ol><li>提出了更好的 <code>Span Mask</code> 方案，SpanBERT 不再对随机的单个 token 添加掩膜，而是对随机对邻接分词添加掩膜；</li><li>通过加入 Span Boundary Objective (SBO) 训练目标，通过使用分词边界的表示来预测被添加掩膜的分词的内容，不再依赖分词内单个 token 的表示，增强了 BERT 的性能，特别在一些与 Span 相关的任务，如抽取式问答；</li><li>用实验获得了和 XLNet 类似的结果，发现不加入 Next Sentence Prediction (NSP) 任务，直接用连续一长句训练效果更好。</li></ol><img src="https://i.loli.net/2020/07/16/t84cMzRsrFAhoJT.png" alt="SpanBert" width="80%"><h5 id="T5"><a href="#T5" class="headerlink" title="T5"></a>T5</h5><p>T5是text-to-text transfer transformer）的简称，其实T5简单的说就是将所有 NLP 任务都转化成 Text-to-Text （文本到文本）任务。</p><p><a href="https://arxiv.org/pdf/1910.10683.pdf" target="_blank" rel="noopener">Exploring the Limits of Transfer Learning with a Unified Text-to-Text Transformer</a><br><a href="https://github.com/google-research/text-to-text-transfer-transformer" target="_blank" rel="noopener">github地址</a><br><code>所有的任务都转化为序列到序列的任务</code></p><h5 id="StructBert"><a href="#StructBert" class="headerlink" title="StructBert"></a>StructBert</h5><p><a href="https://arxiv.org/pdf/1908.04577.pdf" target="_blank" rel="noopener">论文</a></p><p><code>打断某段词语顺序，预测时按正常输出，还能预测两个句子的关系（前后、后前、无关系）</code></p><p>StructBert在Bert原有的MaskLM的训练目标上，增加了两个基于语言结构的训练目标：词序(word-level ordering)和句序(sentence-level ordering)任务。</p><p>给定句子对(S1, S2)，判断S2是否是S1的下一个句子，或上一个句子，或毫无关联的句子（从NSP的0/1分类变成了三分类问题）。</p><img src="https://i.loli.net/2020/07/16/Y3ILtDFR7MkczoK.png" alt="StructBert" width="80%"><h5 id="FastBert"><a href="#FastBert" class="headerlink" title="FastBert"></a>FastBert</h5><p>在每层Transformer后都去预测样本标签，如果某样本预测结果的置信度很高，就不用继续计算了。论文把这个逻辑称为样本自适应机制（Sample-wise adaptive mechanism），就是自适应调整每个样本的计算量，容易的样本通过一两层就可以预测出来，较难的样本则需要走完全程。</p><p>以下是论文提出的FastBert模型：</p><img src="https://i.loli.net/2020/07/16/mgYp7IFyKun9OoD.png" alt="FastBert" width="100%"><p>具体流程：</p><ol><li>获取某一版的Pre-training Bert.</li><li>最后一层加上任务所需的分类网络，对Bert进行fine-tune。</li><li>开始蒸馏，固定Bert主干的参数。在每一层decoder后都加上分类网络，注意这些网络是不共享参数的，各分各的。利用最后一层输出的分类概率，作为中间每一层分类的目标分布，利用KL散度或JS散度做分布拟合。</li></ol><h5 id="VL-Bert"><a href="#VL-Bert" class="headerlink" title="VL-Bert"></a>VL-Bert</h5><p><a href="https://arxiv.org/abs/1908.08530" target="_blank" rel="noopener">论文</a></p><p>VL-Bert是一种新型的通用视觉-语言预训练模型（Visual-Linguistic BERT，简称 VL-BERT），该模型采用简单而强大的 Transformer 模型作为主干网络，并将其输入扩展为同时包含视觉与语言输入的多模态形式，适用于绝大多数视觉-语言下游任务。</p><img src="https://i.loli.net/2020/07/16/LDcEvnGglPxHiYO.png" alt="VL-Bert" width="80%"><blockquote><p>VL-BERT 的主干网络使用 TransformerAttention 模块，并将视觉与语言嵌入特征作为输入，其中输入的每个元素是来自句子中的单词、或图像中的感兴趣区域（RoIs）。在模型训练的过程中，每个元素均可以根据其内容、位置、类别等信息自适应地聚合来自所有其他元素的信息。在堆叠多层 TransformerAttention 模块后，其特征表示即具有更为丰富的聚合与对齐视觉和语言线索的能力。</p></blockquote><p>任务：</p><ol><li>屏蔽语言模型（Masked Language Modeling），即随机屏蔽掉语句中的一些词，并预测当前位置的词是什么；</li><li>屏蔽 RoI 分类（MaskedRoIClassification），即随机屏蔽掉视觉输入中的一些 RoIs，并预测此空间位置对应 RoI 的所属类别；</li><li>图像标题关联预测（Sentence-Image Relationship Prediction），即预测图像与标题是否属于同一对。</li></ol><h5 id="VideoBert"><a href="#VideoBert" class="headerlink" title="VideoBert"></a>VideoBert</h5><p><a href="https://arxiv.org/abs/1904.01766" target="_blank" rel="noopener">VideoBERT: A Joint Model for Video and Language Representation Learning</a></p><p>作者们借鉴了语言建模中十分成功的 BERT 模型，在它的基础上进行改进，从视频数据的向量量化和现有的语音识别输出结果上分别导出视觉 token 和语言学 token，然后在这些 token 的序列上学习双向联合分布。作者们在多项任务中测试了这个模型，包括动作分类和视频描述。</p><h5 id="DynaBERT"><a href="#DynaBERT" class="headerlink" title="DynaBERT"></a>DynaBERT</h5><p>论文：《DynaBERT: Dynamic BERT with Adaptive Width and Depth》</p><p>论文中作者提出了新的训练算法，同时对不同尺寸的子网络进行训练，通过该方法训练后可以在推理阶段直接对模型裁剪。依靠新的训练算法，本文在效果上超越了众多压缩模型，比如DistillBERT、TinyBERT以及LayerDrop后的模型。</p><p>论文对于BERT的压缩流程是这样的：</p><ul><li>训练时，对宽度和深度进行裁剪，训练不同的子网络</li><li>推理时，根据速度需要直接裁剪，用裁剪后的子网络进行预测</li></ul><h4 id="对于Bert的思考"><a href="#对于Bert的思考" class="headerlink" title="对于Bert的思考"></a>对于Bert的思考</h4><blockquote><p>BERT适用场景<br><code>第一，如果NLP任务偏向在语言本身中就包含答案，而不特别依赖文本外的其它特征，往往应用Bert能够极大提升应用效果。</code>典型的任务比如QA和阅读理解，正确答案更偏向对语言的理解程度，理解能力越强，解决得越好，不太依赖语言之外的一些判断因素，所以效果提升就特别明显。反过来说，对于某些任务，除了文本类特征外，其它特征也很关键，比如搜索的用户行为／链接分析／内容质量等也非常重要，所以Bert的优势可能就不太容易发挥出来。再比如，推荐系统也是类似的道理，Bert可能只能对于文本内容编码有帮助，其它的用户行为类特征，不太容易融入Bert中。<br><code>第二，Bert特别适合解决句子或者段落的匹配类任务。</code>就是说，Bert特别适合用来解决判断句子关系类问题，这是相对单文本分类任务和序列标注等其它典型NLP任务来说的，很多实验结果表明了这一点。而其中的原因，我觉得很可能主要有两个，一个原因是：很可能是因为Bert在预训练阶段增加了Next Sentence Prediction任务，所以能够在预训练阶段学会一些句间关系的知识，而如果下游任务正好涉及到句间关系判断，就特别吻合Bert本身的长处，于是效果就特别明显。第二个可能的原因是：因为Self Attention机制自带句子A中单词和句子B中任意单词的Attention效果，而这种细粒度的匹配对于句子匹配类的任务尤其重要，所以Transformer的本质特性也决定了它特别适合解决这类任务。<br><code>第三，Bert的适用场景，与NLP任务对深层语义特征的需求程度有关。</code>感觉越是需要深层语义特征的任务，越适合利用Bert来解决；而对有些NLP任务来说，浅层的特征即可解决问题，典型的浅层特征性任务比如分词，POS词性标注，NER，文本分类等任务，这种类型的任务，只需要较短的上下文，以及浅层的非语义的特征，貌似就可以较好地解决问题，所以Bert能够发挥作用的余地就不太大，有点杀鸡用牛刀，有力使不出来的感觉。<br>这很可能是因为Transformer层深比较深，所以可以逐层捕获不同层级不同深度的特征。于是，对于需要语义特征的问题和任务，Bert这种深度捕获各种特征的能力越容易发挥出来，而浅层的任务，比如分词／文本分类这种任务，也许传统方法就能解决得比较好，因为任务特性决定了，要解决好它，不太需要深层特征。<br><code>第四，Bert比较适合解决输入长度不太长的NLP任务，而输入比较长的任务，典型的比如文档级别的任务，Bert解决起来可能就不太好。</code>主要原因在于：Transformer的self attention机制因为要对任意两个单词做attention计算，所以时间复杂度是n平方，n是输入的长度。如果输入长度比较长，Transformer的训练和推理速度掉得比较厉害，于是，这点约束了Bert的输入长度不能太长。所以对于输入长一些的文档级别的任务，Bert就不容易解决好。结论是：Bert更适合解决句子级别或者段落级别的NLP任务。          出自<a href="https://blog.csdn.net/jiaowoshouzi/java/article/details/89073944" target="_blank" rel="noopener">《一文读懂BERT(原理篇)》</a></p></blockquote><h4 id="Bert的应用"><a href="#Bert的应用" class="headerlink" title="Bert的应用"></a>Bert的应用</h4><p>涵盖了Question Answer(QA，问答系统)与阅读理解、搜索与信息检索（IR）、对话系统／聊天机器人（Dialog System or Chatbot）、文本摘要、数据增强、文本分类、序列标注……详见<a href="https://mp.weixin.qq.com/s?__biz=MjM5ODkzMzMwMQ==&mid=2650410022&idx=1&sn=40fd5ec1b428073020af50bd6e991c32&scene=21#wechat_redirect" target="_blank" rel="noopener">《Bert时代的创新（应用篇）：Bert在NLP各领域的应用进展》</a></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP模型-05-transformer</title>
      <link href="/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-05-transformer/"/>
      <url>/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-05-transformer/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-01-%E9%A2%84%E8%AE%AD%E7%BB%83%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/" target="_blank" rel="noopener">NLP模型-01-预训练语言模型</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-02-HMM/" target="_blank" rel="noopener">NLP模型-02-HMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-03-GMM/" target="_blank" rel="noopener">NLP模型-03-GMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-04-CRF/" target="_blank" rel="noopener">NLP模型-04-CRF</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-05-transformer/" target="_blank" rel="noopener">NLP模型-05-transformer</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-06-Bert/" target="_blank" rel="noopener">NLP模型-06-Bert</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-07-LDA/" target="_blank" rel="noopener">NLP模型-07-LDA</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-08-fastText/" target="_blank" rel="noopener">NLP模型-08-fastText</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-09-Glove/" target="_blank" rel="noopener">NLP模型-09-Glove</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-10-textRNN%20&%20textCNN/" target="_blank" rel="noopener">NLP模型-10-textRNN &amp; textCNN</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-11-seq2seq/" target="_blank" rel="noopener">NLP模型-11-seq2seq</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-12-attention/" target="_blank" rel="noopener">NLP模型-12-attention</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-13-XLnet/" target="_blank" rel="noopener">NLP模型-13-XLnet</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-14-%E6%A0%B8%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">NLP模型-14-核方法</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-15-%E6%B7%B1%E5%BA%A6%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-15-深度玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-16-%E5%8F%97%E9%99%90%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-16-受限玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-17-%E6%B7%B1%E5%BA%A6%E4%BF%A1%E5%BF%B5%E7%BD%91%E7%BB%9C/" target="_blank" rel="noopener">NLP模型-17-深度信念网络</a></p><h3 id="什么是transformer"><a href="#什么是transformer" class="headerlink" title="什么是transformer"></a>什么是transformer</h3><p>一句话解释：<code>transformer</code>是带有<code>self-attention</code>的<code>seq2seq</code>，输出能同时计算，可以代替RNN结构（必须按输入的顺序计算），因此transformer对于sequence to sequence的应用场景更为高效。</p><p>transformer是首个完全抛弃RNN的recurrence，CNN的convolution，仅用attention来做特征抽取的模型。</p><p><strong>Transformer中抛弃了传统的CNN和RNN，整个网络结构完全是由Attention机制组成。</strong></p><!-- more --><h3 id="transformer结构解读"><a href="#transformer结构解读" class="headerlink" title="transformer结构解读"></a>transformer结构解读</h3><p>transformer的模型结构图如下：</p><img src="https://i.loli.net/2020/07/12/SdtenNQgPkjm6iJ.jpg" width="40%" alt="transformer计算流程1"><p>上图中，左半部分是Encoder，右半部分是Decoder。</p><ol><li>Encoder</li></ol><ul><li><code>input</code>会通过<code>input embedding layer</code>变成一个<code>vector</code></li><li>这个<code>vector</code>会加上<code>positional encoding</code></li><li><code>positional encoding</code>接下来会进入灰色的block（灰色block会重复N次）</li><li>其中，灰色block的第一层是<code>Muti-head Attention</code>，sequence通过此层会得到另一个sequence</li><li>接下来通过<code>Add &amp; Norm</code>，作用是将<code>Muti-Head Attention</code>的<code>output</code>和<code>Muti-head Attention</code>的<code>input</code>加起来再做layer normalization（和batch normalization不同）</li><li>接下来通过一个<code>Feed Forward layer</code>，会将sequence的每一个vector进行处理</li><li>然后再接上另一个<code>Add &amp; Norm</code></li></ul><ol start="2"><li>Decoder</li></ol><ul><li><code>outputs</code>会通过<code>output embedding layer</code>变成一个<code>vector</code></li><li>这个<code>vector</code>会加上<code>positional encoding</code></li><li><code>positional encoding</code>接下来会进入灰色的block（灰色block会重复N次）</li><li>其中，灰色block的第一层是<code>Masked Muti-head Attention</code>（masked：attend on the generated sequence），sequence通过此层会得到另一个sequence</li><li>接下来通过<code>Add &amp; Norm</code></li><li>再进入<code>Muti-Head Attention layer</code>接到之前<code>Encoder</code>部分的输出</li><li>接下来通过一个<code>Add &amp; Norm</code>、<code>Feed Forward layer</code>、<code>Add &amp; Norm</code></li><li>再经过<code>Linear</code>、<code>Softmax</code>得到注重的输出。</li></ul><p><strong>计算的具体流程如下图：</strong></p><p>第1步：根据Wq、Wk、Wv，计算每个vector对应的q、k、v，再根据右上角的公式计算αi</p><p>【PS】q、k、v分别代表Query向量（要去查询的，与每个词之间的关系），Key向量（等着被查的词）和Value向量（实际的特征信息），它们是通过3个不同的权值矩阵由嵌入向量X乘以三个不同的权值矩阵Wq、Wk、Wv得到</p><img src="https://i.loli.net/2020/07/12/2N6PSW1F5ORb4zD.png" width="50%" alt="transformer计算流程1"><p>第2步：对每个αi计算softmax值</p><img src="https://i.loli.net/2020/07/12/LvVNyuGleXH84ba.png" width="50%" alt="transformer计算流程2"><p>第3步：使用右上角的公式，计算每个vector对应的输出b</p><img src="https://i.loli.net/2020/07/12/NLS2CcavgdDGwUA.png" width="50%" alt="transformer计算流程3"><p>【注意】以上从x1到xn的运算是可以同时进行的，通过attention值的大小，可以与其他的vector产生上下文关联。</p><p><strong>transformer计算的范围</strong></p><p>Transformer的可处理文本长度定为512，而不是更大的值，一个很重要的因素是，在计算attention的过程中，需要计算（Multi-head attention并不会减少计算量），这也是为什么Transformer处理长距离依赖问题并不太好的原因之一。</p><h3 id="概念详解"><a href="#概念详解" class="headerlink" title="概念详解"></a>概念详解</h3><p><strong>multi-headed机制</strong>（通常都是多层，一层的不够的）</p><p>多组Q、K、V能得到多组表达（类似CNN中的filter），总综合多种特征提取方案，得到综合的特征表达</p><ul><li>通过不同的head得到多个特征表达（一般是8个）</li><li>将所有特征拼接在一起</li><li>可以通过再一层全连接来降维（乘上全连接矩阵）</li></ul><img src="https://i.loli.net/2020/07/13/FnO2htRbZYKJcux.png" width="90%" alt="multi-headed机制"><p><strong>位置信息如何表达？</strong></p><p>加入了位置信息的编码，每个词的位置发生变化，那就不同了。位置信息编码的方法非常多，常见的是加上一个周期信号。</p><p><strong>什么是layer normalization？</strong></p><img src="https://i.loli.net/2020/07/13/Wyf6jEcHhu5I9dQ.png" width="90%" alt="layer norm"><p>LN 是在每一个样本上计算均值和方差，而不是BN那种在批方向计算均值和方差。</p><p>Add &amp; Norm做了<strong>残差连接</strong>（多条路的选择给模型自己选择）</p><p><strong>decoder的特点</strong></p><ul><li>attention计算方式不同（不只有self-attention，还多了encoder-decoder attention）</li><li>加入了mask机制（decoder的输出只能一个个输出，需要依赖前面的vector，因此需要使用mask机制，就是不能预知未来输出的东西）</li><li>连softmax层，使用cross-entropy计算loss即可</li></ul><h3 id="transformer为何计算速度快"><a href="#transformer为何计算速度快" class="headerlink" title="transformer为何计算速度快"></a>transformer为何计算速度快</h3><p>我们可以将以上的计算过程使用一连串的矩阵乘法解决，而矩阵乘法可以轻易地使用GPU来加速。如下图所示：</p><p><strong>1. 每个vector的q、k、v的计算都可以使用矩阵相乘Wq<em>a、Wk</em>a、Wv*a加以计算：</strong></p><img src="https://i.loli.net/2020/07/12/cV5HT1NZDBjloUf.png" width="50%" alt="transformer矩阵计算1"><p><strong>2. α的计算也可以通过矩阵相乘表示不，如下图所示：</strong></p><p>（图一）</p><img src="https://i.loli.net/2020/07/12/HkTUR4qDAmXW3C8.png" width="50%" alt="transformer矩阵计算2"><p>（图二）</p><img src="https://i.loli.net/2020/07/12/KWYHyGko3eEFTmB.png" width="50%" alt="transformer矩阵计算3"><p>（图三）</p><img src="https://i.loli.net/2020/07/12/ryFezKHq2cv5TJl.png" width="50%" alt="transformer矩阵计算4"><p><strong>3. b的计算也可以通过矩阵相乘来解决：</strong></p><img src="https://i.loli.net/2020/07/12/oM3ZXHFuBzD67Wn.png" width="50%" alt="transformer矩阵计算5"><p>一下是综合矩阵运算的图解：</p><img src="https://i.loli.net/2020/07/12/UzZWQCG64Et9y5P.png" width="50%" alt="transformer矩阵计算6"><p>具体解析详见<a href="https://iloveyou11.github.io/2020/04/05/NLP-06/" target="_blank" rel="noopener">NLP-06</a>中的self-attention内容。</p><p><strong>attention整体计算流程：</strong></p><ol><li>每个词的Q会跟每个K计算得分（重要性越大，得分越高）</li><li>softmax后会得到整个加权结果（相当于归一化）</li><li>此时每个词看的不只是他前面的序列，而是整个输入序列</li><li>同一时间能计算出所有词的表达结果（利用矩阵乘法）</li></ol><h3 id="模型改进"><a href="#模型改进" class="headerlink" title="模型改进"></a>模型改进</h3><p>原始版的Transformer虽然并不成熟，层数固定不够灵活、算力需求过大导致的不适合处理超长序列等缺陷限制了其实际应用前景。但是其优秀的特征抽取能力吸引了很多学者的关注。很多人提出了不同的变种Transformer来改进或者规避它的缺陷。其中，Universal Transformer、Transformer-XL、Reformer就是典型的代表。 </p><h4 id="Universal-Transformer"><a href="#Universal-Transformer" class="headerlink" title="Universal Transformer"></a>Universal Transformer</h4><p>在Transformer中，输入经过Attention后，会进入全连接层进行运算，而Universal Transformer模型则会进入一个共享权重的transition function继续循环计算。这里Transition function可以和之前一样是全连接层，也可以是其他函数层。</p><p>为了控制循环的次数，模型引入了Adaptive Computation Time（ACT）机制。ACT可以调整计算步数，加入ACT机制的Universal transformer被称为Adaptive universal transformer。引入ACT机制后，模型对于文本中更重要的token会进行更多次数的循环，而对于相对不重要的单词会减少计算资源的投入。</p><img src="https://i.loli.net/2020/07/22/JXgR19pBNy7xior.png" alt="Universal Transformer" width="80%"><h4 id="Transformer-XL"><a href="#Transformer-XL" class="headerlink" title="Transformer-XL"></a>Transformer-XL</h4><p>Transformer通常会将本文分割成长度小于等于d（默认是512）的segment，每个segment之间互相独立，互不干涉。距离超过512的token之间的依赖关系就完全无法建模抽取。同时，这还会带来一个<code>context fragmentation</code>的问题，因为segment的划分并不是根据语义边界，而是根据长度进行划分的，可能会将一个完整的句子拆成两个。</p><p>Transformer-XL提出了<code>segment-level Recurrence</code>来解决这个问题。在对当前segment进行处理的时候，缓存并利用上一个segment中所有layer的隐向量，而且上一个segment的所有隐向量只参与前向计算，不再进行反向传播。</p><p>Transformer-XL在没有大幅度提高算力需求的情况下，一定程度上解决了长距离依赖问题。</p><h4 id="Reformer"><a href="#Reformer" class="headerlink" title="Reformer"></a>Reformer</h4><p>针对transformer处理文本长度过短（512）的问题，提出了两个机制分别解决这两个问题，它们是<code>locality-sensitve hashing(LSH) attention</code>和<code>Reversible transformer</code>。</p><p>首先用LSH来对每个segment进行分桶，将相似的部分放在同一个桶里面。然后我们将每一个桶并行化计算其中两两之间的点乘。还考虑到有一定的概率相似的向量会被分到不同的桶里，因此采用了多轮hashing来降低这个概率。Reformer在减少了attention计算量的情况下，还减少了模型的内存占用，为未来大型预训练模型的落地奠定了基础。</p><hr><p>推荐阅读：<a href="http://mantchs.com/2019/09/26/NLP/Transformer/" target="_blank" rel="noopener">【NLP】Transformer</a></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP模型-07-LDA</title>
      <link href="/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-07-LDA/"/>
      <url>/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-07-LDA/</url>
      
        <content type="html"><![CDATA[<p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-01-%E9%A2%84%E8%AE%AD%E7%BB%83%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/" target="_blank" rel="noopener">NLP模型-01-预训练语言模型</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-02-HMM/" target="_blank" rel="noopener">NLP模型-02-HMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-03-GMM/" target="_blank" rel="noopener">NLP模型-03-GMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-04-CRF/" target="_blank" rel="noopener">NLP模型-04-CRF</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-05-transformer/" target="_blank" rel="noopener">NLP模型-05-transformer</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-06-Bert/" target="_blank" rel="noopener">NLP模型-06-Bert</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-07-LDA/" target="_blank" rel="noopener">NLP模型-07-LDA</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-08-fastText/" target="_blank" rel="noopener">NLP模型-08-fastText</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-09-Glove/" target="_blank" rel="noopener">NLP模型-09-Glove</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-10-textRNN%20&%20textCNN/" target="_blank" rel="noopener">NLP模型-10-textRNN &amp; textCNN</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-11-seq2seq/" target="_blank" rel="noopener">NLP模型-11-seq2seq</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-12-attention/" target="_blank" rel="noopener">NLP模型-12-attention</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-13-XLnet/" target="_blank" rel="noopener">NLP模型-13-XLnet</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-14-%E6%A0%B8%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">NLP模型-14-核方法</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-15-%E6%B7%B1%E5%BA%A6%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-15-深度玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-16-%E5%8F%97%E9%99%90%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-16-受限玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-17-%E6%B7%B1%E5%BA%A6%E4%BF%A1%E5%BF%B5%E7%BD%91%E7%BB%9C/" target="_blank" rel="noopener">NLP模型-17-深度信念网络</a></p><h3 id="什么是LDA？"><a href="#什么是LDA？" class="headerlink" title="什么是LDA？"></a>什么是LDA？</h3><p>LDA（Latent Dirichlet Allocation）是一种文档主题生成模型，也称为一个三层贝叶斯概率模型，包含词、主题和文档三层结构。</p><p><strong>LDA的目的就是要识别主题，即把文档—词汇矩阵变成文档—主题矩阵（分布）和主题—词汇矩阵（分布）</strong></p><h3 id="生成过程"><a href="#生成过程" class="headerlink" title="生成过程"></a>生成过程</h3><p>LDA 的产生过程描述了文档以及文档中文字的生成过程。在原始的 LDA 论文中，作者们描述了对于每一个文档而言有这么一种生成过程：</p><img src="https://i.loli.net/2020/07/12/UDbg9mChKXN61YL.png" alt="LDA生成流程" width="60%"><ol><li>从一个全局的泊松（Poisson）参数为β的分布中生成一个文档的长度 N；</li><li>从一个全局的狄利克雷（Dirichlet）参数为α的分布中生成一个当前文档的θ；</li><li>然后对于当前文档长度 N 的每一个字执行以下两步：<ul><li>一是从以θ为参数的多项（Multinomial）分布中生成一个主题（Topic）的下标（Index）z_n</li><li>二是从以φ和 z 共同为参数的多项分布中产生一个字（Word）w_n。</li></ul></li></ol><p><strong>α-&gt;θ的生成、β-&gt;Fai的生成：</strong><br>需要满足条件<br>1）和为1 ；<br>2）大于0，采用Dirichlet分布生成</p><p><strong>θi-&gt;Zij的生成（在主题分布中进行主题采样）：</strong><br>使用multinomial分布进行采样</p><h3 id="PLSA与LDA区别"><a href="#PLSA与LDA区别" class="headerlink" title="PLSA与LDA区别"></a>PLSA与LDA区别</h3><p>PLSA确定了主题概率，LDA未确定固定的主题概率，只规定了主题概率服从Dirichlet分布<br><strong>PLSA</strong></p><ol><li>按照概率<code>P(di)</code>选择一篇文档<code>di</code></li><li>选定文档<code>di</code>后，确定文章的主题分布</li><li>从主题分布中按照概率<code>P(zk/di)</code>选择一个隐含的主题类别<code>zk</code></li><li>选定zk后，确定主题下的词分布</li><li>从词分布中按照概率<code>P(wj/zk)</code>选择一个词<code>wij</code></li></ol><img src="https://i.loli.net/2020/07/12/GHMkD4ofsBpxw7J.png" alt="PLSA与LDA" width="60%"><h3 id="LSA与LDA区别"><a href="#LSA与LDA区别" class="headerlink" title="LSA与LDA区别"></a>LSA与LDA区别</h3><p>LSA是latent semantic analysis，是一种信息检索模型，具体的流程如下：</p><ol><li>分析文档集合，建立词汇-文档矩阵（各词汇在各文档中的出现情况，矩阵非常稀疏）</li><li>对词汇-文档矩阵进性奇异值分解（提取稀疏矩阵的特征）</li><li>对SVD分解后的矩阵进行降维（提取这些特征中比较重要的特征）</li><li>使用降维后的矩阵构建潜在语义空间（用比较重要的特征来表征词或文本）</li></ol><p><strong>LDA</strong></p><ol><li>按照先验概率<code>P(di)</code>选择一篇文档<code>di</code></li><li>从Dirichlet分布<code>α</code>中采样生成文档<code>di</code>的主题分布<code>θi</code>（<code>θi</code>由超参数<code>α</code>的Dirichlet分布生成）</li><li>从主题分布<code>θi</code>中采j样生成文档<code>di</code>第j个词的主题<code>zij</code></li><li>从Dirichlet分布<code>β</code>中采样生成主题<code>zij</code>对应的词分布<code>FAIij</code>（<code>FAIij</code>由超参数<code>β</code>的Dirichlet分布生成）</li><li>从词分布中按照概率<code>FAIij</code>选择一个词<code>wij</code></li></ol><h3 id="LDA模型变种"><a href="#LDA模型变种" class="headerlink" title="LDA模型变种"></a>LDA模型变种</h3><p>扩展 LDA 的思路：</p><ol><li><strong>上游扩展法</strong>：依靠额外的信息去影响主题分布，进而影响文档字句的选择。</li><li><strong>下游扩展法</strong>：把其他信息都是放在主题变量的下游的，希望通过主题变量来施加影响。</li></ol><h4 id="作者LDA"><a href="#作者LDA" class="headerlink" title="作者LDA"></a>作者LDA</h4><p>“作者LDA”又称作“用于作者和文档信息的作者主题模型”。<br>每篇文档都会有一些作者信息，我们可以把这些作者编码成为一组下标（Index）。对于每一个文档来说，我们首先从这组作者数组中，选出一个当前的作者，然后假定这个作者有一组相对应的主题。这样，文档的主题就不是每个文档随机产生了，而是每个作者有一套主题。这个时候，我们从作者相对应的主题分布中取出当前的主题，然后再到相应的语言模型中，采样到当前的单词。<strong>主题分布不是每个文档有一个，而是每个作者有一个。</strong></p><h4 id="时间动态LDA"><a href="#时间动态LDA" class="headerlink" title="时间动态LDA"></a>时间动态LDA</h4><p>把文档放到时间的尺度上，希望去分析和了解文档在时间轴上的变化。<br>状态空间模型就是把不同时间点的狄利克雷分布的参数给串起来，使得这些分布的参数会随着时间的变化而变化，把一堆静态的参数用状态空间模型串接起来。</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP模型-08-fastText</title>
      <link href="/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-08-fastText/"/>
      <url>/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-08-fastText/</url>
      
        <content type="html"><![CDATA[<p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-01-%E9%A2%84%E8%AE%AD%E7%BB%83%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/" target="_blank" rel="noopener">NLP模型-01-预训练语言模型</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-02-HMM/" target="_blank" rel="noopener">NLP模型-02-HMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-03-GMM/" target="_blank" rel="noopener">NLP模型-03-GMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-04-CRF/" target="_blank" rel="noopener">NLP模型-04-CRF</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-05-transformer/" target="_blank" rel="noopener">NLP模型-05-transformer</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-06-Bert/" target="_blank" rel="noopener">NLP模型-06-Bert</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-07-LDA/" target="_blank" rel="noopener">NLP模型-07-LDA</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-08-fastText/" target="_blank" rel="noopener">NLP模型-08-fastText</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-09-Glove/" target="_blank" rel="noopener">NLP模型-09-Glove</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-10-textRNN%20&%20textCNN/" target="_blank" rel="noopener">NLP模型-10-textRNN &amp; textCNN</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-11-seq2seq/" target="_blank" rel="noopener">NLP模型-11-seq2seq</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-12-attention/" target="_blank" rel="noopener">NLP模型-12-attention</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-13-XLnet/" target="_blank" rel="noopener">NLP模型-13-XLnet</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-14-%E6%A0%B8%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">NLP模型-14-核方法</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-15-%E6%B7%B1%E5%BA%A6%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-15-深度玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-16-%E5%8F%97%E9%99%90%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-16-受限玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-17-%E6%B7%B1%E5%BA%A6%E4%BF%A1%E5%BF%B5%E7%BD%91%E7%BB%9C/" target="_blank" rel="noopener">NLP模型-17-深度信念网络</a></p><h4 id="fastText初始"><a href="#fastText初始" class="headerlink" title="fastText初始"></a>fastText初始</h4><p>fastText是一个快速文本分类算法，FastText 算法能获得和深度模型相同的精度，但是计算时间却要远远小于深度学习模型。fastText 可以作为一个文本分类的 baseline 模型。fastText不需要训练好的词向量模型，它会自己训练词向量模型。fastText两个重要的优化：<code>Hierarchical Softmax</code>、<code>N-gram</code>。fastText模型架构和word2vec中的CBOW很相似， 不同之处是fastText预测标签而CBOW预测的是中间词，模型架构类似但是模型任务不同。</p><p>使用fastText进行文本分类时，会产生单词的embedding，当然，我们也可以用预训练好的embedding来训练fastText模型。</p><p>【核心思想】将整篇文档的词及n-gram向量叠加平均得到文档向量，然后使用文档向量做softmax多分类。</p><h4 id="n-gram表示单词"><a href="#n-gram表示单词" class="headerlink" title="n-gram表示单词"></a>n-gram表示单词</h4><p>fastText模型架构:其中x1,x2,…,xN−1,xN表示一个文本中的<code>n-gram</code>向量，每个特征是词向量的平均值。这和前文中提到的cbow相似，cbow用上下文去预测中心词，而此处用全部的n-gram去预测指定类别。如下图所示：</p><img src="https://i.loli.net/2020/07/28/RLT4XoQv86d1Mif.png" alt="fastText" width="50%"><p>采用n-gram表示单词有以下几点好处：</p><ol><li>对于低频词生成的词向量效果会更好。因为它们的n-gram可以和其它词共享。</li><li>对于训练词库之外的单词，仍然可以构建它们的词向量。我们可以叠加它们的字符级n-gram向量。</li></ol><h4 id="层次softmax"><a href="#层次softmax" class="headerlink" title="层次softmax"></a>层次softmax</h4><p><strong>为什么要使用层次softmax模型？</strong><br>在标准的softmax中，计算一个类别的softmax概率时，我们需要对所有类别概率做归一化，在这类别很大情况下非常耗时，因此提出了分层softmax(Hierarchical Softmax),思想是根据类别的频率构造霍夫曼树来代替标准softmax，通过分层softmax可以将复杂度从N降低到logN，下图给出分层softmax示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">这里补充一下什么是haffman树：</span><br><span class="line">给定N个权值作为N个叶子结点，构造一棵二叉树，若该树的带权路径长度达到最小，称这样的二叉树为最优二叉树，也称为哈夫曼树(Huffman Tree)。</span><br><span class="line"></span><br><span class="line">haffman树的构造过程：</span><br><span class="line">假设有n个权值，则构造出的哈夫曼树有n个叶子结点。 n个权值分别设为 w1、w2、…、wn，则哈夫曼树的构造规则为：</span><br><span class="line">(1) 将w1、w2、…，wn看成是有n 棵树的森林(每棵树仅有一个结点)；</span><br><span class="line">(2) 在森林中选出两个根结点的权值最小的树合并，作为一棵新树的左、右子树，且新树的根结点权值为其左、右子树根结点权值之和；</span><br><span class="line">(3)从森林中删除选取的两棵树，并将新树加入森林；</span><br><span class="line">(4)重复(2)、(3)步，直到森林中只剩一棵树为止，该树即为所求得的哈夫曼树。</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/07/28/HwRrnAq7vzYgX3a.png" alt="层次softmax" width="50%"><h4 id="与CBOW的不同"><a href="#与CBOW的不同" class="headerlink" title="与CBOW的不同"></a>与CBOW的不同</h4><ol><li>CBOW的输入是目标单词的上下文，fastText的输入是多个单词及其n-gram特征，这些特征用来表示单个文档；</li><li>CBOW的输入单词被one-hot编码过，fastText的输入特征是被embedding过；</li><li>CBOW的输出是目标词汇，fastText的输出是文档对应的类标。</li></ol><h4 id="fastText优势"><a href="#fastText优势" class="headerlink" title="fastText优势"></a>fastText优势</h4><ol><li>适合于大型数据和高效快速计算的场景</li><li>支持多语言，如英语、德语、西班牙语、法语以及捷克语等多种语言，性能要比当下的word2vec工具好不少</li><li>专注于文本分类任务，如文本倾向性分析或标签预测方面都会得了当下最好的表现</li></ol>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP模型-09-Glove</title>
      <link href="/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-09-Glove/"/>
      <url>/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-09-Glove/</url>
      
        <content type="html"><![CDATA[<p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-01-%E9%A2%84%E8%AE%AD%E7%BB%83%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/" target="_blank" rel="noopener">NLP模型-01-预训练语言模型</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-02-HMM/" target="_blank" rel="noopener">NLP模型-02-HMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-03-GMM/" target="_blank" rel="noopener">NLP模型-03-GMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-04-CRF/" target="_blank" rel="noopener">NLP模型-04-CRF</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-05-transformer/" target="_blank" rel="noopener">NLP模型-05-transformer</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-06-Bert/" target="_blank" rel="noopener">NLP模型-06-Bert</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-07-LDA/" target="_blank" rel="noopener">NLP模型-07-LDA</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-08-fastText/" target="_blank" rel="noopener">NLP模型-08-fastText</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-09-Glove/" target="_blank" rel="noopener">NLP模型-09-Glove</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-10-textRNN%20&%20textCNN/" target="_blank" rel="noopener">NLP模型-10-textRNN &amp; textCNN</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-11-seq2seq/" target="_blank" rel="noopener">NLP模型-11-seq2seq</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-12-attention/" target="_blank" rel="noopener">NLP模型-12-attention</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-13-XLnet/" target="_blank" rel="noopener">NLP模型-13-XLnet</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-14-%E6%A0%B8%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">NLP模型-14-核方法</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-15-%E6%B7%B1%E5%BA%A6%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-15-深度玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-16-%E5%8F%97%E9%99%90%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-16-受限玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-17-%E6%B7%B1%E5%BA%A6%E4%BF%A1%E5%BF%B5%E7%BD%91%E7%BB%9C/" target="_blank" rel="noopener">NLP模型-17-深度信念网络</a></p><p>GloVe是<code>Global Vectors for Word Representation</code>的简称，是一个基于全局词频统计的词表征工具，可以将单词表示为向量，这些向量可以刻画单词的语义特征，通过向量之间的距离可以计算两个单词之间的予以相似度。</p><h4 id="Glove流程"><a href="#Glove流程" class="headerlink" title="Glove流程"></a>Glove流程</h4><ol><li>构建共现矩阵（就是文档中单词两两同时出现次数矩阵）</li></ol><img src="https://i.loli.net/2020/07/28/NxdB6MnUDhHlsik.png" alt="共现矩阵" width="50%"><p>根据语料库构建一个共现矩阵X，矩阵中的每一个元素<code>Xij</code>代表单词<code>i</code>和上下文单词<code>j</code>在特定大小的上下文窗口内共同出现的次数。一般而言，这个次数的最小单位是1，但是GloVe不这么认为：它根据两个单词在上下文窗口的距离<code>d</code>，提出了一个衰减函数<code>decay=1/d</code> 用于计算权重，也就是说距离越远的两个单词所占总计数的权重越小。</p><ol start="2"><li>计算词向量和共现矩阵的近似关系</li><li>构造损失函数</li><li>训练GloVe模型</li></ol><p>采用了AdaGrad的梯度下降算法，对矩阵 X 中的所有非零元素进行随机采样，学习曲率（learning rate）设为0.05，在vector size小于300的情况下迭代了50次，其他大小的vectors上迭代了100次，直至收敛。</p><h4 id="与其他词向量模型的区别"><a href="#与其他词向量模型的区别" class="headerlink" title="与其他词向量模型的区别"></a>与其他词向量模型的区别</h4><p>CBOW、SG（skip-gram）模型是一个<code>local context window</code>的方法，缺乏了整体的词和词的关系，负样本采用sample的方式会缺失词的关系信息。另外，直接训练SG类型的算法，很容易使得高曝光词汇得到过多的权重。<br>Glove融合了矩阵分解LSA的全局统计信息和<code>local context window</code>优势。融入全局的先验统计信息，可以加快模型的训练速度，又可以控制词的相对权重。<br>SG、CBOW每次都是用一个窗口中的信息更新出词向量，但是Glove则是用了全局的信息（共线矩阵），也就是多个窗口进行更新。</p><hr><p>关于Glove模型的详细内容参考<a href="http://mantchs.com/2019/08/24/NLP/GloVe/" target="_blank" rel="noopener">《【NLP】GloVe》</a></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP模型-10-textRNN&amp;textCNN</title>
      <link href="/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-10-textRNN%20&amp;%20textCNN/"/>
      <url>/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-10-textRNN%20&amp;%20textCNN/</url>
      
        <content type="html"><![CDATA[<p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-01-%E9%A2%84%E8%AE%AD%E7%BB%83%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/" target="_blank" rel="noopener">NLP模型-01-预训练语言模型</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-02-HMM/" target="_blank" rel="noopener">NLP模型-02-HMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-03-GMM/" target="_blank" rel="noopener">NLP模型-03-GMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-04-CRF/" target="_blank" rel="noopener">NLP模型-04-CRF</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-05-transformer/" target="_blank" rel="noopener">NLP模型-05-transformer</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-06-Bert/" target="_blank" rel="noopener">NLP模型-06-Bert</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-07-LDA/" target="_blank" rel="noopener">NLP模型-07-LDA</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-08-fastText/" target="_blank" rel="noopener">NLP模型-08-fastText</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-09-Glove/" target="_blank" rel="noopener">NLP模型-09-Glove</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-10-textRNN%20&%20textCNN/" target="_blank" rel="noopener">NLP模型-10-textRNN &amp; textCNN</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-11-seq2seq/" target="_blank" rel="noopener">NLP模型-11-seq2seq</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-12-attention/" target="_blank" rel="noopener">NLP模型-12-attention</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-13-XLnet/" target="_blank" rel="noopener">NLP模型-13-XLnet</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-14-%E6%A0%B8%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">NLP模型-14-核方法</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-15-%E6%B7%B1%E5%BA%A6%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-15-深度玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-16-%E5%8F%97%E9%99%90%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-16-受限玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-17-%E6%B7%B1%E5%BA%A6%E4%BF%A1%E5%BF%B5%E7%BD%91%E7%BB%9C/" target="_blank" rel="noopener">NLP模型-17-深度信念网络</a></p><h3 id="TextRNN"><a href="#TextRNN" class="headerlink" title="TextRNN"></a>TextRNN</h3><h4 id="模型结构"><a href="#模型结构" class="headerlink" title="模型结构"></a>模型结构</h4><p>TextRNN是利用RNN网络来解决文本分类问题，当然，也可以采用RNN的变种LSTM、GRU来实现……</p><p>文本分类的任务有：</p><ul><li>垃圾邮件分类</li><li>情感分析</li><li>新闻/报道主题分析</li><li>问答系统中的问句分类</li><li>……</li></ul><ol><li>结构1<br>流程：embedding—&gt;BiLSTM—&gt;concat final output/average all output—–&gt;softmax layer</li></ol><img src="https://i.loli.net/2020/07/28/vwRmjkPyd9n2rCc.png" alt="TextRNN1" width="60%"><p>取前向/反向LSTM在最后一步的隐藏状态进行拼接，经过softmax层进行多分类；或者是取前向/反向LSTM在每一步上的隐藏状态，对每一步的两个隐藏状态进行拼接，然后对所有步拼接后的隐藏状态取平均值，然后再经过softmax层进行多分类，</p><ol start="2"><li>结构2<br>流程：embedding–&gt;BiLSTM—-&gt;(dropout)–&gt;concat ouput—&gt;UniLSTM—&gt;(droput)–&gt;softmax layer</li></ol><img src="https://i.loli.net/2020/07/28/kH46Et2SXnhgyKC.png" alt="TextRNN2" width="80%"><p>与结构1不同，结构2是在双向LSTM的基础上又叠加了一个单向的LSTM，把双向LSTM在每一步上的两个隐藏状态进行拼接，再进行dropout操作，作为上层单向LSTM每一步长上的一个输入，最后取上层单向LSTM最后一步上的隐藏状态，再进行dropout操作，最后经过一个softmax层进行一个多分类。</p><p><a href="https://www.cnblogs.com/Luv-GEM/p/10836454.html" target="_blank" rel="noopener">中文文本分类之TextRNN</a></p><p>【总结】<br>textRNN的结构十分灵活，可以任意改变。如：</p><ul><li>把LSTM改为GRU</li><li>把双向改为单向</li><li>添加dropout/BN或者堆叠多层</li></ul><p>textRNN在文本分类任务上可以取得很好的效果。</p><h4 id="代码实战"><a href="#代码实战" class="headerlink" title="代码实战"></a>代码实战</h4><h5 id="数据集下载"><a href="#数据集下载" class="headerlink" title="数据集下载"></a>数据集下载</h5><p>使用THUCNews的一个<a href="https://www.lanzous.com/i5t0lsd" target="_blank" rel="noopener">子集</a>进行训练与测试，本次训练使用了其中的10个分类，每个分类6500条数据。类别分别为——体育, 财经, 房产, 家居, 教育, 科技, 时尚, 时政, 游戏, 娱乐。</p><p><strong>cnews_loader.py为数据的预处理文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">read_file(): 读取文件数据;</span><br><span class="line">build_vocab(): 构建词汇表，使用字符级的表示，这一函数会将词汇表存储下来，避免每一次重复处理;</span><br><span class="line">read_vocab(): 读取上一步存储的词汇表，转换为&#123;词：id&#125;表示;</span><br><span class="line">read_category(): 将分类目录固定，转换为&#123;类别: id&#125;表示;</span><br><span class="line">to_words(): 将一条由id表示的数据重新转换为文字;</span><br><span class="line">process_file(): 将数据集从文字转换为固定长度的id序列表示;</span><br><span class="line">batch_iter(): 为神经网络的训练准备经过shuffle的批次的数据。</span><br></pre></td></tr></table></figure><h5 id="textRNN模型和可配置的参数"><a href="#textRNN模型和可配置的参数" class="headerlink" title="textRNN模型和可配置的参数"></a>textRNN模型和可配置的参数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rnn_model <span class="keyword">import</span> TRNNConfig, TextRNN</span><br><span class="line"><span class="keyword">from</span> cnews_loader <span class="keyword">import</span> read_vocab, read_category, batch_iter, process_file, build_vocab</span><br><span class="line"></span><br><span class="line">base_dir = <span class="string">'cnews'</span></span><br><span class="line">train_dir = os.path.join(base_dir, <span class="string">'cnews.train.txt'</span>)</span><br><span class="line">test_dir = os.path.join(base_dir, <span class="string">'cnews.test.txt'</span>)</span><br><span class="line">val_dir = os.path.join(base_dir, <span class="string">'cnews.val.txt'</span>)</span><br><span class="line">vocab_dir = os.path.join(base_dir, <span class="string">'cnews.vocab.txt'</span>)</span><br><span class="line"></span><br><span class="line">save_dir = <span class="string">'checkpoints/textrnn'</span></span><br><span class="line">save_path = os.path.join(save_dir, <span class="string">'best_validation'</span>)  <span class="comment"># 最佳验证结果保存路径</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_time_dif</span><span class="params">(start_time)</span>:</span></span><br><span class="line">    <span class="string">"""获取已使用时间"""</span></span><br><span class="line">    end_time = time.time()</span><br><span class="line">    time_dif = end_time - start_time</span><br><span class="line">    <span class="keyword">return</span> timedelta(seconds=int(round(time_dif)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">feed_data</span><span class="params">(x_batch, y_batch, keep_prob)</span>:</span></span><br><span class="line">    feed_dict = &#123;</span><br><span class="line">        model.input_x: x_batch,</span><br><span class="line">        model.input_y: y_batch,</span><br><span class="line">        model.keep_prob: keep_prob</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> feed_dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate</span><span class="params">(sess, x_, y_)</span>:</span></span><br><span class="line">    <span class="string">"""评估在某一数据上的准确率和损失"""</span></span><br><span class="line">    data_len = len(x_)</span><br><span class="line">    batch_eval = batch_iter(x_, y_, <span class="number">128</span>)</span><br><span class="line">    total_loss = <span class="number">0.0</span></span><br><span class="line">    total_acc = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> x_batch, y_batch <span class="keyword">in</span> batch_eval:</span><br><span class="line">        batch_len = len(x_batch)</span><br><span class="line">        feed_dict = feed_data(x_batch, y_batch, <span class="number">1.0</span>)</span><br><span class="line">        loss, acc = sess.run([model.loss, model.acc], feed_dict=feed_dict)</span><br><span class="line">        total_loss += loss * batch_len</span><br><span class="line">        total_acc += acc * batch_len</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> total_loss / data_len, total_acc / data_len</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Configuring TensorBoard and Saver..."</span>)</span><br><span class="line">    <span class="comment"># 配置 Tensorboard，重新训练时，请将tensorboard文件夹删除，不然图会覆盖</span></span><br><span class="line">    tensorboard_dir = <span class="string">'tensorboard/textrnn'</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(tensorboard_dir):</span><br><span class="line">        os.makedirs(tensorboard_dir)</span><br><span class="line"></span><br><span class="line">    tf.summary.scalar(<span class="string">"loss"</span>, model.loss)</span><br><span class="line">    tf.summary.scalar(<span class="string">"accuracy"</span>, model.acc)</span><br><span class="line">    merged_summary = tf.summary.merge_all()</span><br><span class="line">    writer = tf.summary.FileWriter(tensorboard_dir)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 配置 Saver</span></span><br><span class="line">    saver = tf.train.Saver()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(save_dir):</span><br><span class="line">        os.makedirs(save_dir)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Loading training and validation data..."</span>)</span><br><span class="line">    <span class="comment"># 载入训练集与验证集</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    x_train, y_train = process_file(train_dir, word_to_id, cat_to_id, config.seq_length)</span><br><span class="line">    x_val, y_val = process_file(val_dir, word_to_id, cat_to_id, config.seq_length)</span><br><span class="line">    time_dif = get_time_dif(start_time)</span><br><span class="line">    print(<span class="string">"Time usage:"</span>, time_dif)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建session</span></span><br><span class="line">    session = tf.Session()</span><br><span class="line">    session.run(tf.global_variables_initializer())</span><br><span class="line">    writer.add_graph(session.graph)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'Training and evaluating...'</span>)</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    total_batch = <span class="number">0</span>  <span class="comment"># 总批次</span></span><br><span class="line">    best_acc_val = <span class="number">0.0</span>  <span class="comment"># 最佳验证集准确率</span></span><br><span class="line">    last_improved = <span class="number">0</span>  <span class="comment"># 记录上一次提升批次</span></span><br><span class="line">    require_improvement = <span class="number">1000</span>  <span class="comment"># 如果超过1000轮未提升，提前结束训练</span></span><br><span class="line"></span><br><span class="line">    flag = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(config.num_epochs):</span><br><span class="line">        print(<span class="string">'Epoch:'</span>, epoch + <span class="number">1</span>)</span><br><span class="line">        batch_train = batch_iter(x_train, y_train, config.batch_size)</span><br><span class="line">        <span class="keyword">for</span> x_batch, y_batch <span class="keyword">in</span> batch_train:</span><br><span class="line">            feed_dict = feed_data(x_batch, y_batch, config.dropout_keep_prob)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> total_batch % config.save_per_batch == <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 每多少轮次将训练结果写入tensorboard scalar</span></span><br><span class="line">                s = session.run(merged_summary, feed_dict=feed_dict)</span><br><span class="line">                writer.add_summary(s, total_batch)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> total_batch % config.print_per_batch == <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 每多少轮次输出在训练集和验证集上的性能</span></span><br><span class="line">                feed_dict[model.keep_prob] = <span class="number">1.0</span></span><br><span class="line">                loss_train, acc_train = session.run([model.loss, model.acc], feed_dict=feed_dict)</span><br><span class="line">                loss_val, acc_val = evaluate(session, x_val, y_val)  <span class="comment"># todo</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> acc_val &gt; best_acc_val:</span><br><span class="line">                    <span class="comment"># 保存最好结果</span></span><br><span class="line">                    best_acc_val = acc_val</span><br><span class="line">                    last_improved = total_batch</span><br><span class="line">                    saver.save(sess=session, save_path=save_path)</span><br><span class="line">                    improved_str = <span class="string">'*'</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    improved_str = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">                time_dif = get_time_dif(start_time)</span><br><span class="line">                msg = <span class="string">'Iter: &#123;0:&gt;6&#125;, Train Loss: &#123;1:&gt;6.2&#125;, Train Acc: &#123;2:&gt;7.2%&#125;,'</span> \</span><br><span class="line">                      + <span class="string">' Val Loss: &#123;3:&gt;6.2&#125;, Val Acc: &#123;4:&gt;7.2%&#125;, Time: &#123;5&#125; &#123;6&#125;'</span></span><br><span class="line">                print(msg.format(total_batch, loss_train, acc_train, loss_val, acc_val, time_dif, improved_str))</span><br><span class="line">            </span><br><span class="line">            feed_dict[model.keep_prob] = config.dropout_keep_prob</span><br><span class="line">            session.run(model.optim, feed_dict=feed_dict)  <span class="comment"># 运行优化</span></span><br><span class="line">            total_batch += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> total_batch - last_improved &gt; require_improvement:</span><br><span class="line">                <span class="comment"># 验证集正确率长期不提升，提前结束训练</span></span><br><span class="line">                print(<span class="string">"No optimization for a long time, auto-stopping..."</span>)</span><br><span class="line">                flag = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span>  <span class="comment"># 跳出循环</span></span><br><span class="line">        <span class="keyword">if</span> flag:  <span class="comment"># 同上</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Loading test data..."</span>)</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    x_test, y_test = process_file(test_dir, word_to_id, cat_to_id, config.seq_length)</span><br><span class="line"></span><br><span class="line">    session = tf.Session()</span><br><span class="line">    session.run(tf.global_variables_initializer())</span><br><span class="line">    saver = tf.train.Saver()</span><br><span class="line">    saver.restore(sess=session, save_path=save_path)  <span class="comment"># 读取保存的模型</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">'Testing...'</span>)</span><br><span class="line">    loss_test, acc_test = evaluate(session, x_test, y_test)</span><br><span class="line">    msg = <span class="string">'Test Loss: &#123;0:&gt;6.2&#125;, Test Acc: &#123;1:&gt;7.2%&#125;'</span></span><br><span class="line">    print(msg.format(loss_test, acc_test))</span><br><span class="line"></span><br><span class="line">    batch_size = <span class="number">128</span></span><br><span class="line">    data_len = len(x_test)</span><br><span class="line">    num_batch = int((data_len - <span class="number">1</span>) / batch_size) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    y_test_cls = np.argmax(y_test, <span class="number">1</span>)</span><br><span class="line">    y_pred_cls = np.zeros(shape=len(x_test), dtype=np.int32)  <span class="comment"># 保存预测结果</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_batch):  <span class="comment"># 逐批次处理</span></span><br><span class="line">        start_id = i * batch_size</span><br><span class="line">        end_id = min((i + <span class="number">1</span>) * batch_size, data_len)</span><br><span class="line">        feed_dict = &#123;</span><br><span class="line">            model.input_x: x_test[start_id:end_id],</span><br><span class="line">            model.keep_prob: <span class="number">1.0</span></span><br><span class="line">        &#125;</span><br><span class="line">        y_pred_cls[start_id:end_id] = session.run(model.y_pred_cls, feed_dict=feed_dict)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 评估</span></span><br><span class="line">    print(<span class="string">"Precision, Recall and F1-Score..."</span>)</span><br><span class="line">    print(metrics.classification_report(y_test_cls, y_pred_cls, target_names=categories))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 混淆矩阵</span></span><br><span class="line">    print(<span class="string">"Confusion Matrix..."</span>)</span><br><span class="line">    cm = metrics.confusion_matrix(y_test_cls, y_pred_cls)</span><br><span class="line">    print(cm)</span><br><span class="line"></span><br><span class="line">    time_dif = get_time_dif(start_time)</span><br><span class="line">    print(<span class="string">"Time usage:"</span>, time_dif)</span><br></pre></td></tr></table></figure><h5 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">type_ = <span class="string">'train'</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'Configuring RNN model...'</span>)</span><br><span class="line">config = TRNNConfig()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(vocab_dir):  <span class="comment"># 如果不存在词汇表，重建</span></span><br><span class="line">    build_vocab(train_dir, vocab_dir, config.vocab_size)</span><br><span class="line">categories, cat_to_id = read_category()</span><br><span class="line">words, word_to_id = read_vocab(vocab_dir)</span><br><span class="line">config.vocab_size = len(words)</span><br><span class="line">model = TextRNN(config)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> type_ == <span class="string">'train'</span>:</span><br><span class="line">    train()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure><h5 id="模型测试"><a href="#模型测试" class="headerlink" title="模型测试"></a>模型测试</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test()</span><br></pre></td></tr></table></figure><h3 id="TextCNN"><a href="#TextCNN" class="headerlink" title="TextCNN"></a>TextCNN</h3><h4 id="模型结构-1"><a href="#模型结构-1" class="headerlink" title="模型结构"></a>模型结构</h4><p>可以将⽂本当作⼀维图像，从而可以⽤⼀维卷积神经⽹络来捕捉临近词之间的关联。将卷积神经网络CNN应用到文本分类任务，利用多个不同size的kernel来提取句子中的关键信息（类似于多窗口大小的ngram），从而能够更好地捕捉局部相关性。</p><p>TextCNN的详细流程：</p><ul><li><code>Embedding</code>：第一层是图中最左边的7乘5的句子矩阵，每行是词向量，维度=5，这个可以类比为图像中的原始像素点。</li><li><code>Convolution</code>：然后经过 kernel_sizes=(2,3,4) 的一维卷积层，每个kernel_size 有两个输出 channel。</li><li><code>MaxPolling</code>：第三层是一个1-max pooling层，这样不同长度句子经过pooling层之后都能变成定长的表示。</li><li><code>FullConnection and Softmax</code>：最后接一层全连接的 softmax 层，输出每个类别的概率。</li></ul><p>TextCNN的模型结构如下：</p><img src="https://i.loli.net/2020/07/28/4zd5ngprFLqZoSO.png" alt="TextCNN" width="90%"><h4 id="代码实战-1"><a href="#代码实战-1" class="headerlink" title="代码实战"></a>代码实战</h4><h5 id="数据集下载-1"><a href="#数据集下载-1" class="headerlink" title="数据集下载"></a>数据集下载</h5><p>使用THUCNews的一个<a href="https://www.lanzous.com/i5t0lsd" target="_blank" rel="noopener">子集</a>进行训练与测试，本次训练使用了其中的10个分类，每个分类6500条数据。类别分别为——体育, 财经, 房产, 家居, 教育, 科技, 时尚, 时政, 游戏, 娱乐。</p><p><strong>cnews_loader.py为数据的预处理文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">read_file(): 读取文件数据;</span><br><span class="line">build_vocab(): 构建词汇表，使用字符级的表示，这一函数会将词汇表存储下来，避免每一次重复处理;</span><br><span class="line">read_vocab(): 读取上一步存储的词汇表，转换为&#123;词：id&#125;表示;</span><br><span class="line">read_category(): 将分类目录固定，转换为&#123;类别: id&#125;表示;</span><br><span class="line">to_words(): 将一条由id表示的数据重新转换为文字;</span><br><span class="line">process_file(): 将数据集从文字转换为固定长度的id序列表示;</span><br><span class="line">batch_iter(): 为神经网络的训练准备经过shuffle的批次的数据。</span><br></pre></td></tr></table></figure><h5 id="textCNN的模型和可配置的参数"><a href="#textCNN的模型和可配置的参数" class="headerlink" title="textCNN的模型和可配置的参数"></a>textCNN的模型和可配置的参数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> cnn_model <span class="keyword">import</span> TCNNConfig, TextCNN</span><br><span class="line"><span class="keyword">from</span> cnews_loader <span class="keyword">import</span> read_vocab, read_category, batch_iter, process_file, build_vocab</span><br><span class="line"></span><br><span class="line">base_dir = <span class="string">'cnews'</span></span><br><span class="line">train_dir = os.path.join(base_dir, <span class="string">'cnews.train.txt'</span>)</span><br><span class="line">test_dir = os.path.join(base_dir, <span class="string">'cnews.test.txt'</span>)</span><br><span class="line">val_dir = os.path.join(base_dir, <span class="string">'cnews.val.txt'</span>)</span><br><span class="line">vocab_dir = os.path.join(base_dir, <span class="string">'cnews.vocab.txt'</span>)</span><br><span class="line"></span><br><span class="line">save_dir = <span class="string">'checkpoints/textcnn'</span></span><br><span class="line">save_path = os.path.join(save_dir, <span class="string">'best_validation'</span>)  <span class="comment"># 最佳验证结果保存路径</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_time_dif</span><span class="params">(start_time)</span>:</span></span><br><span class="line">    <span class="string">"""获取已使用时间"""</span></span><br><span class="line">    end_time = time.time()</span><br><span class="line">    time_dif = end_time - start_time</span><br><span class="line">    <span class="keyword">return</span> timedelta(seconds=int(round(time_dif)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">feed_data</span><span class="params">(x_batch, y_batch, keep_prob)</span>:</span></span><br><span class="line">    feed_dict = &#123;</span><br><span class="line">        model.input_x: x_batch,</span><br><span class="line">        model.input_y: y_batch,</span><br><span class="line">        model.keep_prob: keep_prob</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> feed_dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate</span><span class="params">(sess, x_, y_)</span>:</span></span><br><span class="line">    <span class="string">"""评估在某一数据上的准确率和损失"""</span></span><br><span class="line">    data_len = len(x_)</span><br><span class="line">    batch_eval = batch_iter(x_, y_, <span class="number">128</span>)</span><br><span class="line">    total_loss = <span class="number">0.0</span></span><br><span class="line">    total_acc = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> x_batch, y_batch <span class="keyword">in</span> batch_eval:</span><br><span class="line">        batch_len = len(x_batch)</span><br><span class="line">        feed_dict = feed_data(x_batch, y_batch, <span class="number">1.0</span>)</span><br><span class="line">        loss, acc = sess.run([model.loss, model.acc], feed_dict=feed_dict)</span><br><span class="line">        total_loss += loss * batch_len</span><br><span class="line">        total_acc += acc * batch_len</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> total_loss / data_len, total_acc / data_len</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Configuring TensorBoard and Saver..."</span>)</span><br><span class="line">    <span class="comment"># 配置 Tensorboard，重新训练时，请将tensorboard文件夹删除，不然图会覆盖</span></span><br><span class="line">    tensorboard_dir = <span class="string">'tensorboard/textcnn'</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(tensorboard_dir):</span><br><span class="line">        os.makedirs(tensorboard_dir)</span><br><span class="line"></span><br><span class="line">    tf.summary.scalar(<span class="string">"loss"</span>, model.loss)</span><br><span class="line">    tf.summary.scalar(<span class="string">"accuracy"</span>, model.acc)</span><br><span class="line">    merged_summary = tf.summary.merge_all()</span><br><span class="line">    writer = tf.summary.FileWriter(tensorboard_dir)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 配置 Saver</span></span><br><span class="line">    saver = tf.train.Saver()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(save_dir):</span><br><span class="line">        os.makedirs(save_dir)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Loading training and validation data..."</span>)</span><br><span class="line">    <span class="comment"># 载入训练集与验证集</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    x_train, y_train = process_file(train_dir, word_to_id, cat_to_id, config.seq_length)</span><br><span class="line">    x_val, y_val = process_file(val_dir, word_to_id, cat_to_id, config.seq_length)</span><br><span class="line">    time_dif = get_time_dif(start_time)</span><br><span class="line">    print(<span class="string">"Time usage:"</span>, time_dif)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建session</span></span><br><span class="line">    session = tf.Session()</span><br><span class="line">    session.run(tf.global_variables_initializer())</span><br><span class="line">    writer.add_graph(session.graph)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'Training and evaluating...'</span>)</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    total_batch = <span class="number">0</span>  <span class="comment"># 总批次</span></span><br><span class="line">    best_acc_val = <span class="number">0.0</span>  <span class="comment"># 最佳验证集准确率</span></span><br><span class="line">    last_improved = <span class="number">0</span>  <span class="comment"># 记录上一次提升批次</span></span><br><span class="line">    require_improvement = <span class="number">1000</span>  <span class="comment"># 如果超过1000轮未提升，提前结束训练</span></span><br><span class="line"></span><br><span class="line">    flag = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(config.num_epochs):</span><br><span class="line">        print(<span class="string">'Epoch:'</span>, epoch + <span class="number">1</span>)</span><br><span class="line">        batch_train = batch_iter(x_train, y_train, config.batch_size)</span><br><span class="line">        <span class="keyword">for</span> x_batch, y_batch <span class="keyword">in</span> batch_train:</span><br><span class="line">            feed_dict = feed_data(x_batch, y_batch, config.dropout_keep_prob)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> total_batch % config.save_per_batch == <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 每多少轮次将训练结果写入tensorboard scalar</span></span><br><span class="line">                s = session.run(merged_summary, feed_dict=feed_dict)</span><br><span class="line">                writer.add_summary(s, total_batch)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> total_batch % config.print_per_batch == <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 每多少轮次输出在训练集和验证集上的性能</span></span><br><span class="line">                feed_dict[model.keep_prob] = <span class="number">1.0</span></span><br><span class="line">                loss_train, acc_train = session.run([model.loss, model.acc], feed_dict=feed_dict)</span><br><span class="line">                loss_val, acc_val = evaluate(session, x_val, y_val)  <span class="comment"># todo</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> acc_val &gt; best_acc_val:</span><br><span class="line">                    <span class="comment"># 保存最好结果</span></span><br><span class="line">                    best_acc_val = acc_val</span><br><span class="line">                    last_improved = total_batch</span><br><span class="line">                    saver.save(sess=session, save_path=save_path)</span><br><span class="line">                    improved_str = <span class="string">'*'</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    improved_str = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">                time_dif = get_time_dif(start_time)</span><br><span class="line">                msg = <span class="string">'Iter: &#123;0:&gt;6&#125;, Train Loss: &#123;1:&gt;6.2&#125;, Train Acc: &#123;2:&gt;7.2%&#125;,'</span> \</span><br><span class="line">                      + <span class="string">' Val Loss: &#123;3:&gt;6.2&#125;, Val Acc: &#123;4:&gt;7.2%&#125;, Time: &#123;5&#125; &#123;6&#125;'</span></span><br><span class="line">                print(msg.format(total_batch, loss_train, acc_train, loss_val, acc_val, time_dif, improved_str))</span><br><span class="line"></span><br><span class="line">            feed_dict[model.keep_prob] = config.dropout_keep_prob</span><br><span class="line">            session.run(model.optim, feed_dict=feed_dict)  <span class="comment"># 运行优化</span></span><br><span class="line">            total_batch += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> total_batch - last_improved &gt; require_improvement:</span><br><span class="line">                <span class="comment"># 验证集正确率长期不提升，提前结束训练</span></span><br><span class="line">                print(<span class="string">"No optimization for a long time, auto-stopping..."</span>)</span><br><span class="line">                flag = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span>  <span class="comment"># 跳出循环</span></span><br><span class="line">        <span class="keyword">if</span> flag:  <span class="comment"># 同上</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Loading test data..."</span>)</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    x_test, y_test = process_file(test_dir, word_to_id, cat_to_id, config.seq_length)</span><br><span class="line"></span><br><span class="line">    session = tf.Session()</span><br><span class="line">    session.run(tf.global_variables_initializer())</span><br><span class="line">    saver = tf.train.Saver()</span><br><span class="line">    saver.restore(sess=session, save_path=save_path)  <span class="comment"># 读取保存的模型</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">'Testing...'</span>)</span><br><span class="line">    loss_test, acc_test = evaluate(session, x_test, y_test)</span><br><span class="line">    msg = <span class="string">'Test Loss: &#123;0:&gt;6.2&#125;, Test Acc: &#123;1:&gt;7.2%&#125;'</span></span><br><span class="line">    print(msg.format(loss_test, acc_test))</span><br><span class="line"></span><br><span class="line">    batch_size = <span class="number">128</span></span><br><span class="line">    data_len = len(x_test)</span><br><span class="line">    num_batch = int((data_len - <span class="number">1</span>) / batch_size) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    y_test_cls = np.argmax(y_test, <span class="number">1</span>)</span><br><span class="line">    y_pred_cls = np.zeros(shape=len(x_test), dtype=np.int32)  <span class="comment"># 保存预测结果</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_batch):  <span class="comment"># 逐批次处理</span></span><br><span class="line">        start_id = i * batch_size</span><br><span class="line">        end_id = min((i + <span class="number">1</span>) * batch_size, data_len)</span><br><span class="line">        feed_dict = &#123;</span><br><span class="line">            model.input_x: x_test[start_id:end_id],</span><br><span class="line">            model.keep_prob: <span class="number">1.0</span></span><br><span class="line">        &#125;</span><br><span class="line">        y_pred_cls[start_id:end_id] = session.run(model.y_pred_cls, feed_dict=feed_dict)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 评估</span></span><br><span class="line">    print(<span class="string">"Precision, Recall and F1-Score..."</span>)</span><br><span class="line">    print(metrics.classification_report(y_test_cls, y_pred_cls, target_names=categories))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 混淆矩阵</span></span><br><span class="line">    print(<span class="string">"Confusion Matrix..."</span>)</span><br><span class="line">    cm = metrics.confusion_matrix(y_test_cls, y_pred_cls)</span><br><span class="line">    print(cm)</span><br><span class="line"></span><br><span class="line">    time_dif = get_time_dif(start_time)</span><br><span class="line">    print(<span class="string">"Time usage:"</span>, time_dif)</span><br></pre></td></tr></table></figure><h5 id="开始训练-1"><a href="#开始训练-1" class="headerlink" title="开始训练"></a>开始训练</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">type_ = <span class="string">'train'</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'Configuring CNN model...'</span>)</span><br><span class="line">config = TCNNConfig()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(vocab_dir):  <span class="comment"># 如果不存在词汇表，重建</span></span><br><span class="line">    build_vocab(train_dir, vocab_dir, config.vocab_size)</span><br><span class="line">categories, cat_to_id = read_category()</span><br><span class="line">words, word_to_id = read_vocab(vocab_dir)</span><br><span class="line">config.vocab_size = len(words)</span><br><span class="line">model = TextCNN(config)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> type_ == <span class="string">'train'</span>:</span><br><span class="line">    train()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure><h5 id="模型测试-1"><a href="#模型测试-1" class="headerlink" title="模型测试"></a>模型测试</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP模型-11-seq2seq</title>
      <link href="/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-11-seq2seq/"/>
      <url>/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-11-seq2seq/</url>
      
        <content type="html"><![CDATA[<p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-01-%E9%A2%84%E8%AE%AD%E7%BB%83%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/" target="_blank" rel="noopener">NLP模型-01-预训练语言模型</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-02-HMM/" target="_blank" rel="noopener">NLP模型-02-HMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-03-GMM/" target="_blank" rel="noopener">NLP模型-03-GMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-04-CRF/" target="_blank" rel="noopener">NLP模型-04-CRF</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-05-transformer/" target="_blank" rel="noopener">NLP模型-05-transformer</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-06-Bert/" target="_blank" rel="noopener">NLP模型-06-Bert</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-07-LDA/" target="_blank" rel="noopener">NLP模型-07-LDA</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-08-fastText/" target="_blank" rel="noopener">NLP模型-08-fastText</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-09-Glove/" target="_blank" rel="noopener">NLP模型-09-Glove</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-10-textRNN%20&%20textCNN/" target="_blank" rel="noopener">NLP模型-10-textRNN &amp; textCNN</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-11-seq2seq/" target="_blank" rel="noopener">NLP模型-11-seq2seq</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-12-attention/" target="_blank" rel="noopener">NLP模型-12-attention</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-13-XLnet/" target="_blank" rel="noopener">NLP模型-13-XLnet</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-14-%E6%A0%B8%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">NLP模型-14-核方法</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-15-%E6%B7%B1%E5%BA%A6%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-15-深度玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-16-%E5%8F%97%E9%99%90%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-16-受限玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-17-%E6%B7%B1%E5%BA%A6%E4%BF%A1%E5%BF%B5%E7%BD%91%E7%BB%9C/" target="_blank" rel="noopener">NLP模型-17-深度信念网络</a></p><h3 id="seq2seq初识"><a href="#seq2seq初识" class="headerlink" title="seq2seq初识"></a>seq2seq初识</h3><p>当输入和输出都是不定长序列时，则可以使用<code>编码器-解码器</code>或<code>seq2seq模型</code>解决。</p><p><code>seq2seq</code>属于<code>encoder-decoder</code>结构的一种，常见是<code>encoder-decoder</code>结构，基本思想就是利用两个RNN，一个RNN作为encoder，另一个RNN作为decoder，两个RNN网络是共同训练的。encoder负责将输入序列压缩成指定长度的向量，这个向量就可以看成是这个序列的语义，这个过程称为编码，获取语义向量最简单的方式就是直接将最后一个输入的隐状态作为语义向量C。也可以对最后一个隐含状态做一个变换得到语义向量，还可以将输入序列的所有隐含状态做一个变换得到语义变量。</p><p>而decoder则负责根据语义向量生成指定的序列，这个过程也称为解码，如下图，最简单的方式是将encoder得到的语义变量作为初始状态输入到decoder的RNN中，得到输出序列。可以看到上一时刻的输出会作为当前时刻的输入，而且其中语义向量C只作为初始状态参与运算，后面的运算都与语义向量C无关。</p><p>seq2seq的应用场景如下：</p><ol><li>机器翻译（当前最为著名的Google翻译，就是完全基于Seq2Seq+Attention机制开发出来的）。</li><li>聊天机器人（小爱，微软小冰等也使用了Seq2Seq的技术（不是全部））。</li><li>文本摘要自动生成（今日头条等使用了该技术）。</li><li>图片描述自动生成。</li><li>机器写诗歌、代码补全、生成 commit message、故事风格改写等。</li></ol><h4 id="编码器"><a href="#编码器" class="headerlink" title="编码器"></a>编码器</h4><p>编码器的作⽤是把⼀个不定⻓的输⼊序列变换成⼀个定⻓的背景变量<code>c</code>，并在该背景变量中编码输⼊序列信息，常用的编码器是RNN网络。</p><p>编码器可以使用单向的RNN，也可以使用双向的RNN，单向RNN的每个时间步的隐藏状态只取决于该时间步及之前的输⼊⼦序列，双向RNN的每个时间步的隐藏状态同时取决于该时间步之前和之后的⼦序列。</p><h4 id="解码器"><a href="#解码器" class="headerlink" title="解码器"></a>解码器</h4><p>将上⼀时间步的输出<code>Yt-1</code>以及背景<code>x</code>作为输⼊，将上一步的隐藏状态<code>St-1</code>转化为当前时间步的隐藏状态<code>St</code>。基于<code>St-1</code>、<code>St</code>、<code>c</code>，使⽤⾃定义的输出层和softmax运算来计算当前时间步输出<code>y</code>的概率分布。</p><h3 id="seq2seq与VAE-AE的区别"><a href="#seq2seq与VAE-AE的区别" class="headerlink" title="seq2seq与VAE/AE的区别"></a>seq2seq与VAE/AE的区别</h3><h4 id="seq2seq"><a href="#seq2seq" class="headerlink" title="seq2seq"></a>seq2seq</h4><p>主流的Seq2Seq都是基于Encoder-Decoder来实现的，Encoder-Decoder也不只是能用于Seq2Seq场景。s2s是具体的模型，encoder-decoder是模型设计“范式”。</p><h4 id="AE"><a href="#AE" class="headerlink" title="AE"></a>AE</h4><p>AE是AutoEncoder（自编码器）的简称，自动编码器是一种数据的压缩算法，<code>自编码器（Autoencoder）是神经网络的一种，经过训练后能尝试将输入复制到输出（先将输入转化为隐层，再将隐层转化为输出）。</code></p><p>自编码内部有一个隐藏层 h，可以产生编码（code）表示输入。该网络可以看作由两部分组成：一个由函数 h = f(x) 表示的编码器和一个生成重构的解码器 r = g(h)。如果一个自编码器只是简单地学会将处处设置为 g(f(x)) = x，那么这个自编码器就没什么特别的用处。</p><h4 id="VAE"><a href="#VAE" class="headerlink" title="VAE"></a>VAE</h4><p>VAE是变分自编码器，相比于自编码器，VAE更倾向于数据生成。只要训练好了decoder，我们就可以从标准正态分布生成数据作为解码器的输入，来生成类似但不同于训练数据的新样本，作用类似GAN。</p><p><code>VAE相当于针对隐层h加了noise，variance应用了noise的大小。</code></p><h3 id="实战演练"><a href="#实战演练" class="headerlink" title="实战演练"></a>实战演练</h3><p>通过sin与con进行叠加变形生成无规律的模拟曲线，使用Seq2Seq模式对其进行学习，拟合特征，从而达到可以预测下一时刻数据的效果。</p><p>定义两个曲线sin和con，通过随机值将其变形偏移，将两个曲线叠加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">        </span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_generate_x_y</span><span class="params">(isTrain, batch_size, seqlen)</span>:</span></span><br><span class="line">    batch_x = []</span><br><span class="line">    batch_y = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(batch_size):</span><br><span class="line">        offset_rand = random.random() * <span class="number">2</span> * math.pi</span><br><span class="line">        freq_rand = (random.random() - <span class="number">0.5</span>) / <span class="number">1.5</span> * <span class="number">15</span> + <span class="number">0.5</span></span><br><span class="line">        amp_rand = random.random() + <span class="number">0.1</span></span><br><span class="line"></span><br><span class="line">        sin_data = amp_rand * np.sin(np.linspace(</span><br><span class="line">            seqlen / <span class="number">15.0</span> * freq_rand * <span class="number">0.0</span> * math.pi + offset_rand,</span><br><span class="line">            seqlen / <span class="number">15.0</span> * freq_rand * <span class="number">3.0</span> * math.pi + offset_rand, seqlen * <span class="number">2</span>)  )</span><br><span class="line"></span><br><span class="line">        offset_rand = random.random() * <span class="number">2</span> * math.pi</span><br><span class="line">        freq_rand = (random.random() - <span class="number">0.5</span>) / <span class="number">1.5</span> * <span class="number">15</span> + <span class="number">0.5</span></span><br><span class="line">        amp_rand = random.random() * <span class="number">1.2</span></span><br><span class="line"></span><br><span class="line">        sig_data = amp_rand * np.cos(np.linspace(</span><br><span class="line">            seqlen / <span class="number">15.0</span> * freq_rand * <span class="number">0.0</span> * math.pi + offset_rand,</span><br><span class="line">            seqlen / <span class="number">15.0</span> * freq_rand * <span class="number">3.0</span> * math.pi + offset_rand, seqlen * <span class="number">2</span>)) + sin_data</span><br><span class="line"></span><br><span class="line">        batch_x.append(np.array([ sig_data[:seqlen] ]).T)</span><br><span class="line">        batch_y.append(np.array([ sig_data[seqlen:] ]).T)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># shape: (batch_size, seq_length, output_dim)</span></span><br><span class="line">    batch_x = np.array(batch_x).transpose((<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>))</span><br><span class="line">    batch_y = np.array(batch_y).transpose((<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>))</span><br><span class="line">    <span class="comment"># shape: (seq_length, batch_size, output_dim)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> batch_x, batch_y</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成15个连续序列，将con和sin随机偏移变化后的值叠加起来</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_data</span><span class="params">(isTrain, batch_size)</span>:</span></span><br><span class="line">    seq_length =<span class="number">15</span></span><br><span class="line">    <span class="keyword">if</span> isTrain :</span><br><span class="line">        <span class="keyword">return</span> do_generate_x_y(isTrain, batch_size, seq_length)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> do_generate_x_y(isTrain, batch_size, seq_length*<span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line">sample_now, sample_f = generate_data(isTrain=<span class="literal">True</span>, batch_size=<span class="number">3</span>)</span><br><span class="line">print(<span class="string">"training examples : "</span>)</span><br><span class="line">print(sample_now.shape)</span><br><span class="line">print(<span class="string">"(seq_length, batch_size, output_dim)"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">seq_length = sample_now.shape[<span class="number">0</span>]</span><br><span class="line">batch_size = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">output_dim = input_dim = sample_now.shape[<span class="number">-1</span>]</span><br><span class="line">hidden_dim = <span class="number">12</span>  </span><br><span class="line">layers_num = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Optmizer:</span></span><br><span class="line">learning_rate =<span class="number">0.04</span></span><br><span class="line">nb_iters = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">lambda_l2_reg = <span class="number">0.003</span>  <span class="comment"># L2 regularization of weights - avoids overfitting</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">tf.reset_default_graph()</span><br><span class="line"></span><br><span class="line">encoder_input = []</span><br><span class="line">expected_output = []</span><br><span class="line">decode_input =[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(seq_length):</span><br><span class="line">    encoder_input.append( tf.placeholder(tf.float32, shape=( <span class="literal">None</span>, input_dim)) )</span><br><span class="line">    expected_output.append( tf.placeholder(tf.float32, shape=( <span class="literal">None</span>, output_dim)) )</span><br><span class="line">    decode_input.append( tf.placeholder(tf.float32, shape=( <span class="literal">None</span>, input_dim)) )</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">tcells = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(layers_num):</span><br><span class="line">    tcells.append(tf.contrib.rnn.GRUCell(hidden_dim))</span><br><span class="line">Mcell = tf.contrib.rnn.MultiRNNCell(tcells)</span><br><span class="line"></span><br><span class="line">dec_outputs, dec_memory = tf.contrib.legacy_seq2seq.basic_rnn_seq2seq(encoder_input,decode_input,Mcell)</span><br><span class="line"></span><br><span class="line">reshaped_outputs = []</span><br><span class="line"><span class="keyword">for</span> ii <span class="keyword">in</span> dec_outputs :</span><br><span class="line">    reshaped_outputs.append( tf.contrib.layers.fully_connected(ii,output_dim,activation_fn=<span class="literal">None</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># L2 loss</span></span><br><span class="line">output_loss = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _y, _Y <span class="keyword">in</span> zip(reshaped_outputs, expected_output):</span><br><span class="line">    output_loss += tf.reduce_mean( tf.pow(_y - _Y, <span class="number">2</span>) )</span><br><span class="line">   </span><br><span class="line"><span class="comment"># generalization capacity)</span></span><br><span class="line">reg_loss = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> tf_var <span class="keyword">in</span> tf.trainable_variables():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> (<span class="string">"fully_connected"</span> <span class="keyword">in</span> tf_var.name ):</span><br><span class="line">        <span class="comment">#print(tf_var.name)</span></span><br><span class="line">        reg_loss += tf.reduce_mean(tf.nn.l2_loss(tf_var))</span><br><span class="line"></span><br><span class="line">loss = output_loss + lambda_l2_reg * reg_loss</span><br><span class="line">train_op = tf.train.AdamOptimizer(learning_rate).minimize(loss)   </span><br><span class="line"></span><br><span class="line">sess = tf.InteractiveSession()</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_batch</span><span class="params">(batch_size)</span>:</span></span><br><span class="line"></span><br><span class="line">    X, Y = generate_data(isTrain=<span class="literal">True</span>, batch_size=batch_size)</span><br><span class="line">    feed_dict = &#123;encoder_input[t]: X[t] <span class="keyword">for</span> t <span class="keyword">in</span> range(len(encoder_input))&#125;</span><br><span class="line">    feed_dict.update(&#123;expected_output[t]: Y[t] <span class="keyword">for</span> t <span class="keyword">in</span> range(len(expected_output))&#125;)</span><br><span class="line"></span><br><span class="line">    c =np.concatenate(( [np.zeros_like(Y[<span class="number">0</span>])],Y[:<span class="number">-1</span>]),axis = <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    feed_dict.update(&#123;decode_input[t]: c[t] <span class="keyword">for</span> t <span class="keyword">in</span> range(len(c))&#125;)</span><br><span class="line"></span><br><span class="line">    _, loss_t = sess.run([train_op, loss], feed_dict)</span><br><span class="line">    <span class="keyword">return</span> loss_t</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_batch</span><span class="params">(batch_size)</span>:</span></span><br><span class="line">    X, Y = generate_data(isTrain=<span class="literal">True</span>, batch_size=batch_size)</span><br><span class="line">    feed_dict = &#123;encoder_input[t]: X[t] <span class="keyword">for</span> t <span class="keyword">in</span> range(len(encoder_input))&#125;</span><br><span class="line">    feed_dict.update(&#123;expected_output[t]: Y[t] <span class="keyword">for</span> t <span class="keyword">in</span> range(len(expected_output))&#125;)</span><br><span class="line">    c =np.concatenate(( [np.zeros_like(Y[<span class="number">0</span>])],Y[:<span class="number">-1</span>]),axis = <span class="number">0</span>)<span class="comment">#来预测最后一个序列</span></span><br><span class="line">    feed_dict.update(&#123;decode_input[t]: c[t] <span class="keyword">for</span> t <span class="keyword">in</span> range(len(c))&#125;)    </span><br><span class="line">    output_lossv,reg_lossv,loss_t = sess.run([output_loss,reg_loss,loss], feed_dict)</span><br><span class="line">    print(<span class="string">"-----------------"</span>)    </span><br><span class="line">    print(output_lossv,reg_lossv)</span><br><span class="line">    <span class="keyword">return</span> loss_t</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Training</span></span><br><span class="line">train_losses = []</span><br><span class="line">test_losses = []</span><br><span class="line"></span><br><span class="line">sess.run(tf.global_variables_initializer())</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> range(nb_iters + <span class="number">1</span>):</span><br><span class="line">    train_loss = train_batch(batch_size)</span><br><span class="line">    train_losses.append(train_loss)</span><br><span class="line">    <span class="keyword">if</span> t % <span class="number">50</span> == <span class="number">0</span>:</span><br><span class="line">        test_loss = test_batch(batch_size)</span><br><span class="line">        test_losses.append(test_loss)</span><br><span class="line">        print(<span class="string">"Step &#123;&#125;/&#123;&#125;, train loss: &#123;&#125;, \tTEST loss: &#123;&#125;"</span>.format(t,nb_iters, train_loss, test_loss))</span><br><span class="line">print(<span class="string">"Fin. train loss: &#123;&#125;, \tTEST loss: &#123;&#125;"</span>.format(train_loss, test_loss))        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment"># Plot loss over time:</span></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">6</span>))</span><br><span class="line">plt.plot(np.array(range(<span class="number">0</span>, len(test_losses))) /</span><br><span class="line">    float(len(test_losses) - <span class="number">1</span>) * (len(train_losses) - <span class="number">1</span>),</span><br><span class="line">    np.log(test_losses),label=<span class="string">"Test loss"</span>)</span><br><span class="line">    </span><br><span class="line">plt.plot(np.log(train_losses),label=<span class="string">"Train loss"</span>)</span><br><span class="line">plt.title(<span class="string">"Training errors over time (on a logarithmic scale)"</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Iteration'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'log(Loss)'</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'best'</span>)</span><br><span class="line">plt.show()        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment"># Test</span></span><br><span class="line">nb_predictions = <span class="number">5</span></span><br><span class="line">print(<span class="string">"visualize &#123;&#125; predictions data:"</span>.format(nb_predictions))</span><br><span class="line"></span><br><span class="line">preout =[]</span><br><span class="line">X, Y = generate_data(isTrain=<span class="literal">False</span>, batch_size=nb_predictions)</span><br><span class="line">print(np.shape(X),np.shape(Y))</span><br><span class="line"><span class="keyword">for</span> tt <span class="keyword">in</span>  range(seq_length):</span><br><span class="line">    feed_dict = &#123;encoder_input[t]: X[t+tt] <span class="keyword">for</span> t <span class="keyword">in</span> range(seq_length)&#125;</span><br><span class="line">    feed_dict.update(&#123;expected_output[t]: Y[t+tt] <span class="keyword">for</span> t <span class="keyword">in</span> range(len(expected_output))&#125;)</span><br><span class="line">    c =np.concatenate(( [np.zeros_like(Y[<span class="number">0</span>])],Y[tt:seq_length+tt<span class="number">-1</span>]),axis = <span class="number">0</span>)  <span class="comment">#从前15个的最后一个开始预测  </span></span><br><span class="line"></span><br><span class="line">    feed_dict.update(&#123;decode_input[t]: c[t] <span class="keyword">for</span> t <span class="keyword">in</span> range(len(c))&#125;)</span><br><span class="line">    outputs = np.array(sess.run([reshaped_outputs], feed_dict)[<span class="number">0</span>])</span><br><span class="line">    preout.append(outputs[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">print(np.shape(preout))<span class="comment">#将每个未知预测值收集起来准备显示出来。</span></span><br><span class="line">preout =np.reshape(preout,[seq_length,nb_predictions,output_dim])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(nb_predictions):</span><br><span class="line">    plt.figure(figsize=(<span class="number">12</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(output_dim):</span><br><span class="line">        past = X[:, j, k]</span><br><span class="line">        expected = Y[seq_length<span class="number">-1</span>:, j, k]<span class="comment">#对应预测值的打印</span></span><br><span class="line"></span><br><span class="line">        pred = preout[:, j, k]</span><br><span class="line"></span><br><span class="line">        label1 = <span class="string">"past"</span> <span class="keyword">if</span> k == <span class="number">0</span> <span class="keyword">else</span> <span class="string">"_nolegend_"</span></span><br><span class="line">        label2 = <span class="string">"future"</span> <span class="keyword">if</span> k == <span class="number">0</span> <span class="keyword">else</span> <span class="string">"_nolegend_"</span></span><br><span class="line">        label3 = <span class="string">"Pred"</span> <span class="keyword">if</span> k == <span class="number">0</span> <span class="keyword">else</span> <span class="string">"_nolegend_"</span></span><br><span class="line">        plt.plot(range(len(past)), past, <span class="string">"o--b"</span>, label=label1)</span><br><span class="line">        plt.plot(range(len(past), len(expected) + len(past)),</span><br><span class="line">                 expected, <span class="string">"x--b"</span>, label=label2)</span><br><span class="line">        plt.plot(range(len(past), len(pred) + len(past)),</span><br><span class="line">                 pred, <span class="string">"o--y"</span>, label=label3)</span><br><span class="line"></span><br><span class="line">    plt.legend(loc=<span class="string">'best'</span>)</span><br><span class="line">    plt.title(<span class="string">"Predictions vs. future"</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP模型-12-attention</title>
      <link href="/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-12-attention/"/>
      <url>/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-12-attention/</url>
      
        <content type="html"><![CDATA[<p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-01-%E9%A2%84%E8%AE%AD%E7%BB%83%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/" target="_blank" rel="noopener">NLP模型-01-预训练语言模型</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-02-HMM/" target="_blank" rel="noopener">NLP模型-02-HMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-03-GMM/" target="_blank" rel="noopener">NLP模型-03-GMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-04-CRF/" target="_blank" rel="noopener">NLP模型-04-CRF</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-05-transformer/" target="_blank" rel="noopener">NLP模型-05-transformer</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-06-Bert/" target="_blank" rel="noopener">NLP模型-06-Bert</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-07-LDA/" target="_blank" rel="noopener">NLP模型-07-LDA</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-08-fastText/" target="_blank" rel="noopener">NLP模型-08-fastText</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-09-Glove/" target="_blank" rel="noopener">NLP模型-09-Glove</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-10-textRNN%20&%20textCNN/" target="_blank" rel="noopener">NLP模型-10-textRNN &amp; textCNN</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-11-seq2seq/" target="_blank" rel="noopener">NLP模型-11-seq2seq</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-12-attention/" target="_blank" rel="noopener">NLP模型-12-attention</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-13-XLnet/" target="_blank" rel="noopener">NLP模型-13-XLnet</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-14-%E6%A0%B8%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">NLP模型-14-核方法</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-15-%E6%B7%B1%E5%BA%A6%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-15-深度玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-16-%E5%8F%97%E9%99%90%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-16-受限玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-17-%E6%B7%B1%E5%BA%A6%E4%BF%A1%E5%BF%B5%E7%BD%91%E7%BB%9C/" target="_blank" rel="noopener">NLP模型-17-深度信念网络</a></p><h3 id="何为Attention"><a href="#何为Attention" class="headerlink" title="何为Attention"></a>何为Attention</h3><img width="60%" src="https://i.loli.net/2020/03/31/NF5q9JroSgapxTt.png" alt="attention"><p><code>Attention</code>是一种用于提升基于RNN（LSTM或GRU）的<code>Encoder + Decoder</code>模型的效果的的机制。<code>Attention</code>目前非常流行，广泛应用于机器翻译、语音识别、图像标注等很多领域，之所以它这么受欢迎，是因为<code>Attention</code>给模型赋予了区分辨别的能力，例如，在机器翻译、语音识别应用中，为句子中的每个词赋予不同的权重，使神经网络模型的学习变得更加灵活。</p><p><code>Attention</code> 机制的本质来自于人类视觉注意力机制。人们视觉在感知东西的时候一般不会是一个场景从到头看到尾每次全部都看，而往往是根据需求观察注意特定的一部分。而且当人们发现一个场景经常在某部分出现自己想观察的东西时，人们会进行学习在将来再出现类似场景时把注意力放到该部分上。</p><p>仍然以循环神经⽹络为例，注意⼒机制通过对编码器所有时间步的隐藏状态做加权平均来得到背景变量。解码器在每⼀时间步调整这些权重，即注意⼒权重，从而能够在不同时间步分别关注输⼊序列中的不同部分并编码进相应时间步的背景变量。</p><p>在计算 <code>Attention</code> 时主要分为三步：</p><ol><li>第一步是将 query 和每个 key 进行相似度计算得到权重，常用的相似度函数有点积，拼接，感知机等</li><li>第二步一般是使用一个 softmax 函数对这些权重进行归一化</li><li>最后将权重和相应的键值 value 进行加权求和得到最后的 <code>Attention</code></li></ol><p><strong>Attention机制的基本思想是</strong>，打破了传统编码器-解码器结构在编解码时都依赖于内部一个固定长度向量的限制。Attention机制的实现是通过保留LSTM编码器对输入序列的中间输出结果，然后训练一个模型来对这些输入进行选择性的学习并且在模型输出时将输出序列与之进行关联。换一个角度而言，输出序列中的每一项的生成概率取决于在输入序列中选择了哪些项。</p><h3 id="self-attention"><a href="#self-attention" class="headerlink" title="self-attention"></a>self-attention</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p><code>self attention</code>也经常被称为intra Attention（内部Attention），最近一年也获得了比较广泛的使用，比如Google最新的机器翻译模型内部大量采用了<code>self attention</code>模型。</p><p><code>self-attention</code> 可以是一般 <code>Attention</code> 的一种特殊情况，在 <code>self-attention</code> 中，Q=K,V 每个序列中的单元和该序列中所有单元进行 <code>Attention</code> 计算。</p><p>Google 提出的多头 <code>Attention</code> 通过计算多次来捕获不同子空间上的相关信息。<code>self-attention</code> 的特点在于无视词之间的距离直接计算依赖关系，能够学习一个句子的内部结构，实现也较为简单并行可以并行计算。<br>从一些论文中看到，<code>self-attention</code> 可以当成一个层和 RNN，CNN，FNN 等配合使用，成功应用于其他 NLP 任务。</p><h4 id="计算流程"><a href="#计算流程" class="headerlink" title="计算流程"></a>计算流程</h4><ol><li><p>首先，<code>self-attention</code>会计算出三个新的向量，在论文中，向量的维度是512维，我们把这三个向量分别称为Query、Key、Value，这三个向量是用embedding向量与一个矩阵相乘得到的结果，这个矩阵是随机初始化的，维度为（64，512）注意第二个维度需要和embedding的维度一样，其值在BP的过程中会一直进行更新，得到的这三个向量的维度是64。</p><img width="60%" src="https://i.loli.net/2020/03/31/UEuWVo8qeidIX4h.jpg" alt="self attention1"></li><li><p>计算<code>self-attention</code>的分数值，该分数值决定了当我们在某个位置encode一个词时，对输入句子的其他部分的关注程度。这个分数值的计算方法是Query与Key做点成，以下图为例，首先我们需要针对Thinking这个词，计算出其他词对于该词的一个分数值，首先是针对于自己本身即q1·k1，然后是针对于第二个词即q1·k2。</p><img width="60%" src="https://i.loli.net/2020/03/31/t1CbX8recRGfVpv.jpg" alt="self attention2"></li><li><p>接下来，把点成的结果除以一个常数，这里我们除以8，这个值一般是采用上文提到的矩阵的第一个维度的开方即64的开方8，当然也可以选择其他的值，然后把得到的结果做一个softmax的计算。得到的结果即是每个词对于当前位置的词的相关性大小，当然，当前位置的词相关性肯定会会很大。</p><img width="60%" src="https://i.loli.net/2020/03/31/Un4A5FkGJ6BDChs.jpg" alt="self attention3"></li><li><p>下一步就是把Value和softmax得到的值进行相乘，并相加，得到的结果即是self-attetion在当前节点的值。在实际的应用场景，为了提高计算速度，我们采用的是矩阵的方式，直接计算出Query, Key, Value的矩阵，然后把embedding的值与三个矩阵直接相乘，把得到的新矩阵 Q 与 K 相乘，乘以一个常数，做softmax操作，最后乘上 V 矩阵。</p><img width="60%" src="https://i.loli.net/2020/03/31/xDhEYdRyCwU97NG.jpg" alt="self attention4"></li></ol><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><p>引入<code>self-attention</code>后会更容易捕获句子中长距离的相互依赖的特征，因为如果是RNN或者LSTM，需要依次序序列计算，对于远距离的相互依赖的特征，要经过若干时间步步骤的信息累积才能将两者联系起来，而距离越远，有效捕获的可能性越小。</p><p>但是<code>self-attention</code>在计算过程中会直接将句子中任意两个单词的联系通过一个计算步骤直接联系起来，所以远距离依赖特征之间的距离被极大缩短，有利于有效地利用这些特征。除此外，<code>self-attention</code>对于增加计算的并行性也有直接帮助作用。这是为何<code>self-attention</code>逐渐被广泛使用的主要原因。</p><p>含注意⼒机制的变换器的编码结构在后来的BERT预训练模型中得以应⽤并令后者⼤放异彩：微调后的模型在多达11项⾃然语⾔处理任务中取得了当时最先进的结果。除了⾃然语⾔处理领域，注意⼒机制还被⼴泛⽤于图像分类、⾃动图像描述、唇语解读以及语⾳识别。</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP模型-13-XLNet</title>
      <link href="/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-13-XLnet/"/>
      <url>/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-13-XLnet/</url>
      
        <content type="html"><![CDATA[<p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-01-%E9%A2%84%E8%AE%AD%E7%BB%83%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/" target="_blank" rel="noopener">NLP模型-01-预训练语言模型</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-02-HMM/" target="_blank" rel="noopener">NLP模型-02-HMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-03-GMM/" target="_blank" rel="noopener">NLP模型-03-GMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-04-CRF/" target="_blank" rel="noopener">NLP模型-04-CRF</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-05-transformer/" target="_blank" rel="noopener">NLP模型-05-transformer</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-06-Bert/" target="_blank" rel="noopener">NLP模型-06-Bert</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-07-LDA/" target="_blank" rel="noopener">NLP模型-07-LDA</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-08-fastText/" target="_blank" rel="noopener">NLP模型-08-fastText</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-09-Glove/" target="_blank" rel="noopener">NLP模型-09-Glove</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-10-textRNN%20&%20textCNN/" target="_blank" rel="noopener">NLP模型-10-textRNN &amp; textCNN</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-11-seq2seq/" target="_blank" rel="noopener">NLP模型-11-seq2seq</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-12-attention/" target="_blank" rel="noopener">NLP模型-12-attention</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-13-XLnet/" target="_blank" rel="noopener">NLP模型-13-XLnet</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-14-%E6%A0%B8%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">NLP模型-14-核方法</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-15-%E6%B7%B1%E5%BA%A6%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-15-深度玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-16-%E5%8F%97%E9%99%90%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-16-受限玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-17-%E6%B7%B1%E5%BA%A6%E4%BF%A1%E5%BF%B5%E7%BD%91%E7%BB%9C/" target="_blank" rel="noopener">NLP模型-17-深度信念网络</a></p><h3 id="XLNet初识"><a href="#XLNet初识" class="headerlink" title="XLNet初识"></a>XLNet初识</h3><p>XLNet 是一个类似 BERT 的模型，而不是完全不同的模型。<code>先将句子打乱，再复原句子。</code>XLNet融合了GPT和Bert两个模型，等效为mask机制+序列预测的难度加强版。</p><p>XLNet在2019年6月发布，在20个任务上超过了BERT的表现，并在18个任务上取得了SOA，包括机器问答、自然语言推断、情感分析和文档排序。</p><ol><li>GPT是自编码模型， 通过双向LSTM编码提取语义。</li><li>Bert是自回归模型，不分顺序，用attention加强提取语义的效果。</li><li>XLNet融合了Bert的结构和GPT的有向预测。</li></ol><img src="https://i.loli.net/2020/07/16/wJriGV7cQYLtfNq.png" alt="XLNet" width="80%"><p>XLNet解决了Bert的以下缺点：</p><ol><li>第一个预训练阶段因为采取引入[Mask]标记来Mask掉部分单词的训练模式，而Fine-tuning阶段是看不到这种被强行加入的Mask标记的，所以两个阶段存在使用模式不一致的情形，这可能会带来一定的性能损失</li><li>Bert在第一个预训练阶段，假设句子中多个单词被Mask掉，这些被Mask掉的单词之间没有任何关系，是条件独立的，而有时候这些单词之间是有关系的</li></ol><img src="https://i.loli.net/2020/07/17/iWoAPZ1TOuDqhnk.png" alt="XLNet改进" width="80%"><p>详细模型解释见<a href="http://mantchs.com/2019/09/30/NLP/XLNet/" target="_blank" rel="noopener">《XLNet》</a></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP模型-14-核方法</title>
      <link href="/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-14-%E6%A0%B8%E6%96%B9%E6%B3%95/"/>
      <url>/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-14-%E6%A0%B8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-01-%E9%A2%84%E8%AE%AD%E7%BB%83%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/" target="_blank" rel="noopener">NLP模型-01-预训练语言模型</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-02-HMM/" target="_blank" rel="noopener">NLP模型-02-HMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-03-GMM/" target="_blank" rel="noopener">NLP模型-03-GMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-04-CRF/" target="_blank" rel="noopener">NLP模型-04-CRF</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-05-transformer/" target="_blank" rel="noopener">NLP模型-05-transformer</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-06-Bert/" target="_blank" rel="noopener">NLP模型-06-Bert</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-07-LDA/" target="_blank" rel="noopener">NLP模型-07-LDA</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-08-fastText/" target="_blank" rel="noopener">NLP模型-08-fastText</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-09-Glove/" target="_blank" rel="noopener">NLP模型-09-Glove</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-10-textRNN%20&%20textCNN/" target="_blank" rel="noopener">NLP模型-10-textRNN &amp; textCNN</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-11-seq2seq/" target="_blank" rel="noopener">NLP模型-11-seq2seq</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-12-attention/" target="_blank" rel="noopener">NLP模型-12-attention</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-13-XLnet/" target="_blank" rel="noopener">NLP模型-13-XLnet</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-14-%E6%A0%B8%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">NLP模型-14-核方法</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-15-%E6%B7%B1%E5%BA%A6%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-15-深度玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-16-%E5%8F%97%E9%99%90%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-16-受限玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-17-%E6%B7%B1%E5%BA%A6%E4%BF%A1%E5%BF%B5%E7%BD%91%E7%BB%9C/" target="_blank" rel="noopener">NLP模型-17-深度信念网络</a></p><h3 id="核方法-kernal-method"><a href="#核方法-kernal-method" class="headerlink" title="核方法(kernal method)"></a>核方法(kernal method)</h3><p>核方法是把低维空间的非线性可分问题，转化为高维空间的线性可分问题的方法。当然,核方法不仅仅适用于SVM，还适用于其他数据为非线性可分的场景。对于非线性可分的训练集，可以大概率通过将其非线性映射到一个高维空间来转化成线性可分的训练集。</p><h3 id="核技巧-kernal-trick"><a href="#核技巧-kernal-trick" class="headerlink" title="核技巧(kernal trick)"></a>核技巧(kernal trick)</h3><p>核技巧是一种利用核函数直接计算<code>φ(x),φ(z)</code>，以避开分别计算<code>φ(x)</code>和<code>φ(z)</code>，从而加速核方法计算的技巧。得益于SVM对偶问题的表现形式，核技巧可以应用于SVM。</p><h3 id="核函数-kernal-function"><a href="#核函数-kernal-function" class="headerlink" title="核函数(kernal function)"></a>核函数(kernal function)</h3><p>核函数就是低维空间中的内积的某个函数，即核函数就等于就是高维空间的内积。</p><p>常用的核函数如下：</p><img src="https://i.loli.net/2020/07/29/dEgFYhmB1cz6eUH.png" alt="核函数" width="60%"><p>推荐观看大神的视频<a href="https://www.bilibili.com/video/av34731384/?p=1" target="_blank" rel="noopener">《机器学习-白板推导系列-核方法》</a><br>推荐阅读大神的github笔记<a href="https://github.com/shuhuai007/Machine-Learning-Session" target="_blank" rel="noopener">Machine-Learning-Session</a></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP模型-15-深度玻尔兹曼机</title>
      <link href="/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-15-%E6%B7%B1%E5%BA%A6%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/"/>
      <url>/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-15-%E6%B7%B1%E5%BA%A6%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-01-%E9%A2%84%E8%AE%AD%E7%BB%83%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/" target="_blank" rel="noopener">NLP模型-01-预训练语言模型</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-02-HMM/" target="_blank" rel="noopener">NLP模型-02-HMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-03-GMM/" target="_blank" rel="noopener">NLP模型-03-GMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-04-CRF/" target="_blank" rel="noopener">NLP模型-04-CRF</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-05-transformer/" target="_blank" rel="noopener">NLP模型-05-transformer</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-06-Bert/" target="_blank" rel="noopener">NLP模型-06-Bert</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-07-LDA/" target="_blank" rel="noopener">NLP模型-07-LDA</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-08-fastText/" target="_blank" rel="noopener">NLP模型-08-fastText</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-09-Glove/" target="_blank" rel="noopener">NLP模型-09-Glove</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-10-textRNN%20&%20textCNN/" target="_blank" rel="noopener">NLP模型-10-textRNN &amp; textCNN</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-11-seq2seq/" target="_blank" rel="noopener">NLP模型-11-seq2seq</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-12-attention/" target="_blank" rel="noopener">NLP模型-12-attention</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-13-XLnet/" target="_blank" rel="noopener">NLP模型-13-XLnet</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-14-%E6%A0%B8%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">NLP模型-14-核方法</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-15-%E6%B7%B1%E5%BA%A6%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-15-深度玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-16-%E5%8F%97%E9%99%90%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-16-受限玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-17-%E6%B7%B1%E5%BA%A6%E4%BF%A1%E5%BF%B5%E7%BD%91%E7%BB%9C/" target="_blank" rel="noopener">NLP模型-17-深度信念网络</a></p><p>波尔兹曼机是1986年提出的一种根植于统计力学的随机神经网络。这种网络中的神经元是随机神经元，神经元的输出只有两种状态（未激活、激活）。BM是由随机神经元全连接组成的反馈神经网络，且对称连接，无自反馈：包含一个可见层和一个隐层。</p><p>BM具有强大的无监督学习能力，能够学习数据中复杂的规则。但是，拥有这种学习能力的代价是其训练（学习）时间非常长。但是，我们无法准确地计算BM所表示的分布，也很难得到服从BM所表示分布的随机样本。为了克服这个问题，后来引入了限制的波尔兹曼机(Restricted Boltzman Machine , RBM)，RBM具有一个可见层，一个隐层，层内无连接。</p><img src="https://i.loli.net/2020/07/29/nWK7rfZRzETbICx.png" alt="玻尔兹曼机结构图比较" width="80%"><p>加深RBM的层数后，就变成了DBM（深度玻尔兹曼机），结构图如下：</p><img src="https://i.loli.net/2020/07/29/UAyvSprifc2kV1o.png" alt="DBM" width="80%">]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP模型-16-受限玻尔兹曼机</title>
      <link href="/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-16-%E5%8F%97%E9%99%90%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/"/>
      <url>/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-16-%E5%8F%97%E9%99%90%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-01-%E9%A2%84%E8%AE%AD%E7%BB%83%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/" target="_blank" rel="noopener">NLP模型-01-预训练语言模型</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-02-HMM/" target="_blank" rel="noopener">NLP模型-02-HMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-03-GMM/" target="_blank" rel="noopener">NLP模型-03-GMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-04-CRF/" target="_blank" rel="noopener">NLP模型-04-CRF</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-05-transformer/" target="_blank" rel="noopener">NLP模型-05-transformer</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-06-Bert/" target="_blank" rel="noopener">NLP模型-06-Bert</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-07-LDA/" target="_blank" rel="noopener">NLP模型-07-LDA</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-08-fastText/" target="_blank" rel="noopener">NLP模型-08-fastText</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-09-Glove/" target="_blank" rel="noopener">NLP模型-09-Glove</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-10-textRNN%20&%20textCNN/" target="_blank" rel="noopener">NLP模型-10-textRNN &amp; textCNN</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-11-seq2seq/" target="_blank" rel="noopener">NLP模型-11-seq2seq</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-12-attention/" target="_blank" rel="noopener">NLP模型-12-attention</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-13-XLnet/" target="_blank" rel="noopener">NLP模型-13-XLnet</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-14-%E6%A0%B8%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">NLP模型-14-核方法</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-15-%E6%B7%B1%E5%BA%A6%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-15-深度玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-16-%E5%8F%97%E9%99%90%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-16-受限玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-17-%E6%B7%B1%E5%BA%A6%E4%BF%A1%E5%BF%B5%E7%BD%91%E7%BB%9C/" target="_blank" rel="noopener">NLP模型-17-深度信念网络</a></p><p>受限玻尔兹曼机的全名为Restricted Boltzmann Machines（RBM），是一类具有两层结构、对称连接且无自反馈的随机神经网络模型，层间全连接，层内无连接。</p><p>以下图中，左边为玻尔兹曼机的结构，右边为受限玻尔兹曼机的结构：</p><img src="https://i.loli.net/2020/07/29/nWK7rfZRzETbICx.png" alt="玻尔兹曼机结构图比较" width="80%"><h3 id="RBM基本模型"><a href="#RBM基本模型" class="headerlink" title="RBM基本模型"></a>RBM基本模型</h3><img src="https://i.loli.net/2020/07/29/FTnJv8ESALpWd1k.png" alt="RBM基本结构" width="80%"><p> RBM是一个无向图模型，<code>v</code>为可见层表示观测数据，<code>h</code>为隐层表示特征提取，<code>w</code>为两层之间的连接权重。BM中的隐单元和可见单元可以为任意的指数族单元（如softmax单元、高斯单元、泊松单元等）。常用的RBM一般是二值的，即不管是隐藏层还是可见层，它们的神经元的取值只为0或者1。</p><p> RBM模型结构的结构：主要是权重矩阵<code>w</code>, 偏倚系数向量<code>a</code>和<code>b</code>，隐藏层神经元状态向量<code>h</code>和可见层神经元状态向量<code>v</code>。</p><p> <strong>RBM损失函数：</strong></p><p> 虽然说梯度下降从理论上可以用来优化RBM模型，但实际中是很难求得<code>P(v)</code>的概率分布的（<code>P(v)</code>表示可见层节点的联合概率）。计算复杂度非常大，因此采用一些随机采样的方法来得到近似的解。看这三个梯度的第二项实际上都是求期望，而我们知道，样本的均值是随机变量期望的无偏估计。因此一般都是基于对比散度方法来求解。</p><p><strong>RBM训练算法：</strong></p><p>对比散度算法（CD）</p> <img src="https://i.loli.net/2020/07/29/Ki9XE8lzwShRM1m.png" alt="RBM训练算法" width="80%">]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP知识体系-大图</title>
      <link href="/2020/07/28/NLP%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB-%E5%A4%A7%E5%9B%BE/"/>
      <url>/2020/07/28/NLP%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB-%E5%A4%A7%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/07/28/3r7ApEkh4Cwfq5O.png" alt="NLP思维导图.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP模型-17-深度信念网络</title>
      <link href="/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-17-%E6%B7%B1%E5%BA%A6%E4%BF%A1%E5%BF%B5%E7%BD%91%E7%BB%9C/"/>
      <url>/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-17-%E6%B7%B1%E5%BA%A6%E4%BF%A1%E5%BF%B5%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<p><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-01-%E9%A2%84%E8%AE%AD%E7%BB%83%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/" target="_blank" rel="noopener">NLP模型-01-预训练语言模型</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-02-HMM/" target="_blank" rel="noopener">NLP模型-02-HMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-03-GMM/" target="_blank" rel="noopener">NLP模型-03-GMM</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-04-CRF/" target="_blank" rel="noopener">NLP模型-04-CRF</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-05-transformer/" target="_blank" rel="noopener">NLP模型-05-transformer</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-06-Bert/" target="_blank" rel="noopener">NLP模型-06-Bert</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-07-LDA/" target="_blank" rel="noopener">NLP模型-07-LDA</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-08-fastText/" target="_blank" rel="noopener">NLP模型-08-fastText</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-09-Glove/" target="_blank" rel="noopener">NLP模型-09-Glove</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-10-textRNN%20&%20textCNN/" target="_blank" rel="noopener">NLP模型-10-textRNN &amp; textCNN</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-11-seq2seq/" target="_blank" rel="noopener">NLP模型-11-seq2seq</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-12-attention/" target="_blank" rel="noopener">NLP模型-12-attention</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-13-XLnet/" target="_blank" rel="noopener">NLP模型-13-XLnet</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-14-%E6%A0%B8%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">NLP模型-14-核方法</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-15-%E6%B7%B1%E5%BA%A6%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-15-深度玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-16-%E5%8F%97%E9%99%90%E7%8E%BB%E5%B0%94%E5%85%B9%E6%9B%BC%E6%9C%BA/" target="_blank" rel="noopener">NLP模型-16-受限玻尔兹曼机</a><br><a href="https://iloveyou11.github.io/2020/07/28/NLP%E6%A8%A1%E5%9E%8B-17-%E6%B7%B1%E5%BA%A6%E4%BF%A1%E5%BF%B5%E7%BD%91%E7%BB%9C/" target="_blank" rel="noopener">NLP模型-17-深度信念网络</a></p><p>2006年，Hinton等人提出了一种深度信念网络(Deep BeliefNets,DBN)，并给出了该模型的一个高效学习算法，成为了其后至今深度学习算法的主要框架。在该算法中，一个DBN模型<code>被视为由若干个RBM堆叠在一起</code>：训练时可通过从低到高逐层训练这些RBM来实现。</p><p>深度信念网络既可以用于非监督学习，类似于一个自编码机；也可以用于监督学习，作为分类器来使用。DBN由若干层神经元构成，组成元件是受限玻尔兹曼机（RBM）。</p><p>将若干个RBM“串联”起来则构成了一个DBN，其中，上一个RBM的隐层即为下一个RBM的显层，上一个RBM的输出即为下一个RBM的输入。训练过程中，需要充分训练上一层的RBM后才能训练当前层的RBM，直至最后一层。</p><img src="https://i.loli.net/2020/07/29/2xcQ47lTqS5aN16.png" alt="DBN结构" width="80%"><p>DBN 在训练模型的过程中主要分为两步:</p><ol><li>分别单独无监督地训练每一层 RBM 网络,确保特征向量映射到不同特征空间时,都尽可能多地保留特征信息（预训练）</li><li>在 DBN 的最后一层设置 BP 网络,接收 RBM 的输出特征向量作为它的输入特征向量,有监督地训练实体关系分类器（微调）</li></ol>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据增强</title>
      <link href="/2020/07/22/%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA/"/>
      <url>/2020/07/22/%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="何为数据增强"><a href="#何为数据增强" class="headerlink" title="何为数据增强"></a>何为数据增强</h3><p>数据增强是通过已经获得的数据来产生更多的数据，等质量训练样本的增强会提高模型的精度。这种处理手段常被用于数据不足的场景中。</p><p>模型需要大量的数据才可能在许多任务中获得较为满意的结果，但是，现实生活中，很多场景无法获得大量的样本数据（如医学图像等），这时，使用数据增强可以解决这个问题，提高样本数据的数量和质量。有一些机器学习库实现了数据增强，如<a href="https://github.com/aleju/imgaug" target="_blank" rel="noopener">imgaug</a>对计算机视觉的图像数据进行了增强。</p><p>但是在自然语言处理领域中，由于自然语言本身是离散的抽象符号，微小的变化就可能会导致含义的巨大偏差，所以数据增强算法并不常用。很多自然语言处理任务在真正落地的时候，往往会遇到数据量不足的问题，自然语言的数据增强算法值得我们深入研究。</p><h3 id="CV领域图像数据增强"><a href="#CV领域图像数据增强" class="headerlink" title="CV领域图像数据增强"></a>CV领域图像数据增强</h3><p>图像处理的数据增强方法：</p><ul><li>几何变换：克服训练数据中存在的位置偏差</li><li>颜色变换：在色彩通道空间将某种颜色通道关闭，或者改变亮度值</li><li>旋转反射变换：旋转一个角度（需慎重，1-20°较合适），或者改变内容朝向</li><li>缩放变换：按照一定的比例进行放大和缩小</li><li>移动变换：向左，向右，向上或向下移动图像</li><li>翻转变换：水平或者竖直的轴进行图像翻转操作</li><li>裁剪：直接裁剪部分图片</li><li>随机擦除：随机选取图片中的一部分，将这部分图片删除（类似mask）</li><li>噪声注入：从高斯分布中采样出的随机值矩阵加入到图像的RGB像素中</li><li>内核过滤器：将特定功能的内核滤镜与图像进行卷积操作（如锐化和模糊）</li><li>混合图像：通过平均图像像素值将图像混合在一起（每个像素点混合像素值、非线性方法混合图像、随机图像裁剪和拼接来混合图像……）</li><li>特征空间增强：在特征空间（将图像这种高维向量映射为低维向量）进行数据增强操作，如SMOTE算法</li><li>对抗生成：使用对抗生成样本，提高样本质量</li><li>基于GAN的数据增强：使用GAN生成模型生成数据</li><li>神经风格转换：神经网络风格迁移来生成不同风格的数据</li></ul><h3 id="NLP领域文本数据增强"><a href="#NLP领域文本数据增强" class="headerlink" title="NLP领域文本数据增强"></a>NLP领域文本数据增强</h3><p>NLP领域被验证为有效的数据增强方法不多，常见方法如下：</p><ul><li>同义词词典：将单词替换为它的同义词，可在短时间内生成大量数据</li><li>随机插入：随机选择一个单词，选择它的一个同义词，插入原句子中的随机位置</li><li>随机交换：随机选择一对单词，交换位置</li><li>随机删除：随机删除句子中的单词</li><li>语法树结构替换：通过语法树结构，精准地替换单词</li><li>加噪：类似于图像领域的加噪，NoiseMix提供9种单词级别和2种句子级别的扰动来生成更多的句子</li><li>情境增强：用于文本分类任务的独立于域的数据扩充，通过用标签条件的双向语言模型预测的其他单词替换单词</li><li>生成对抗网络：利用生成对抗网络的方法来生成和原数据同分布的数据</li><li>回译技术：是机器翻译中经常使用的一个数据增强的方法，通过快速产生一些翻译结果达到增加数据的目的。有时可以改变句法结构等，并保留语义信息</li><li>扩句-缩句-句法：先将句子压缩，得到句子的缩写，然后再扩写，通过这种方法生成的句子和原句子具有相似的结构，但是可能会带来语义信息的损失。</li><li>无监督数据扩增：UDA方法生成无监督数据与原始无监督数据具备分布的一致性</li></ul>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>学术前沿ACL2020研究</title>
      <link href="/2020/07/11/%E5%AD%A6%E6%9C%AF%E5%89%8D%E6%B2%BFACL2020%E7%A0%94%E7%A9%B6/"/>
      <url>/2020/07/11/%E5%AD%A6%E6%9C%AF%E5%89%8D%E6%B2%BFACL2020%E7%A0%94%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="Knowledge-Embedding多跳知识图谱"><a href="#Knowledge-Embedding多跳知识图谱" class="headerlink" title="Knowledge Embedding多跳知识图谱"></a>Knowledge Embedding多跳知识图谱</h4><p>论文：<a href="https://arxiv.org/abs/1910.03262v1" target="_blank" rel="noopener">Improving Multi-hop Question Answering over Knowledge Graphs using Knowledge Base Embeddings</a><br>多跳知识图谱问答指的是，该问答系统需要通过知识图谱上的多条边执行推理，以获得正确答案。</p><h4 id="BERT文本纠错"><a href="#BERT文本纠错" class="headerlink" title="BERT文本纠错"></a>BERT文本纠错</h4><p>原生的 BERT 在一些NLP任务如error detection、NER中表现欠佳，说明预训练阶段的学习目标中对相关模式的捕获非常有限，需要根据任务进行一定改造。为了提高错误检测能力，本文在SOTA方法的基础上又添加了一个错误检测网络。分错误检测和纠正两步走。先检测每一个字的错误概率，然后根据检测结果将可能的错别字 soft-mask,再输给基于Bert的修正网络。这样就强制修正网络学习了错别字的上下文。</p><p><a href="https://arxiv.org/pdf/2005.07421.pdf" target="_blank" rel="noopener">论文链接</a></p><h4 id="ransformer突破瓶颈"><a href="#ransformer突破瓶颈" class="headerlink" title="ransformer突破瓶颈(*)"></a>ransformer突破瓶颈(*)</h4><p><code>推荐阅读</code><br>针对Multi-Head Attention中可能存在建模瓶颈，提出了不同的方案来改进Multi-Head Attention</p><ol><li>再小也不能小key_size<br>如果固定一个比较大的key_size（比如128），那么我们可以调整模型的hidden_size和head数，使得参数量可以跟原始的BERT设计一致，但是效果更优！</li><li>再缺也不能缺Talking<br>当前的Multi-Head Attention每个head的运算是相互孤立的，而通过将它们联系（Talking）起来，则可以得到更强的Attention设计</li></ol><h4 id="Deformer：让笨重的BERT问答匹配模型变快"><a href="#Deformer：让笨重的BERT问答匹配模型变快" class="headerlink" title="Deformer：让笨重的BERT问答匹配模型变快"></a>Deformer：让笨重的BERT问答匹配模型变快</h4><p><a href="https://awk.ai/assets/deformer.pdf" target="_blank" rel="noopener">《Deformer：Decomposing Pre-trained Transformers for Faster Question Answering》</a><br>这篇文章提主要提出了一种变形的计算方式DeFormer，使问题和文档编码在低层独立编码再在高层交互，从而使得可以离线计算文档编码来加速QA推理和节省内存。</p><h4 id="GPT-3的诞生"><a href="#GPT-3的诞生" class="headerlink" title="GPT-3的诞生"></a>GPT-3的诞生</h4><p><a href="https://arxiv.org/abs/2005.14165" target="_blank" rel="noopener">《Language Models are Few-Shot Learners》</a><br>GPT-3主要聚焦于更通用的NLP模型，解决当前BERT类模型的两个缺点：</p><ul><li>对领域内有标签数据的过分依赖：虽然有了预训练+精调的两段式框架，但还是少不了一定量的领域标注数据，否则很难取得不错的效果，而标注数据的成本又是很高的。</li><li>对于领域数据分布的过拟合：在精调阶段，因为领域数据有限，模型只能拟合训练数据分布，如果数据较少的话就可能造成过拟合，致使模型的泛化能力下降，更加无法应用到其他领域。</li></ul><h4 id="DynaBERT模型"><a href="#DynaBERT模型" class="headerlink" title="DynaBERT模型(*)"></a>DynaBERT模型(*)</h4><p><code>推荐阅读</code><br><a href>《DynaBERT: Dynamic BERT with Adaptive Width and Depth》</a><br>提出了新的训练算法，同时对不同尺寸的子网络进行训练，通过该方法训练后可以在推理阶段直接对模型裁剪。依靠新的训练算法，本文在效果上超越了众多压缩模型，比如DistillBERT、TinyBERT以及LayerDrop后的模型。</p><p>说到模型压缩，常用的方法有以下几种：</p><ol><li>量化</li><li>低轶近似／权重共享</li><li>剪枝</li><li>蒸馏</li></ol><p>论文对于BERT的压缩流程是这样的：</p><ul><li>训练时，对宽度和深度进行裁剪，训练不同的子网络</li><li>推理时，根据速度需要直接裁剪，用裁剪后的子网络进行预测</li></ul><h4 id="FastBERT提高BERT的推理速度"><a href="#FastBERT提高BERT的推理速度" class="headerlink" title="FastBERT提高BERT的推理速度(*)"></a>FastBERT提高BERT的推理速度(*)</h4><p><code>推荐阅读</code><br>《FastBERT: a Self-distilling BERT with Adaptive Inference Time》<br>提出了一种新的inference速度提升方式，相比单纯的student蒸馏有更高的确定性，且可以自行权衡效果与速度，简单实用。</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端智能化方向思考与解读</title>
      <link href="/2020/07/03/%E5%89%8D%E7%AB%AF%E6%99%BA%E8%83%BD%E5%8C%96%E6%96%B9%E5%90%91%E6%80%9D%E8%80%83%E4%B8%8E%E8%A7%A3%E8%AF%BB/"/>
      <url>/2020/07/03/%E5%89%8D%E7%AB%AF%E6%99%BA%E8%83%BD%E5%8C%96%E6%96%B9%E5%90%91%E6%80%9D%E8%80%83%E4%B8%8E%E8%A7%A3%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>为了更深入地理解和思考<strong>前端</strong>和<strong>智能化</strong>两个方向的结合，首先需要了解这两个概念：</p><ol><li>前端：最接近用户的那一层，开发网站、开机端web应用和移动端应用程序等</li><li>智能化：指人工智能，主要包括机器学习，其中涉及到深度学习、计算机视觉、自然语言处理等领域，也是近些年发展较快且前景较好的方向</li></ol><h4 id="前端结合AI的必要性"><a href="#前端结合AI的必要性" class="headerlink" title="前端结合AI的必要性"></a>前端结合AI的必要性</h4><p><strong>前端开发者为什么要学习人工智能呢？</strong></p><ol><li>未来的前端工作，将大量使用AI自动生成UI代码，从而在很大程度上减少了人力开发页面的成本，能节约大量的时间专注于核心业务实现、系统架构升级、技术沉淀。</li><li>在如今的互联网世界中，流行着“大前端”这个词，它区别于传统的前端在以下几个方面：一是端的扩展，新增了iOS、Android、webapp、小程序、原生app等领域，通过前端技术来完成传统其他端的开发工作；二是服务的扩展，异军突起的nodejs打开了前端连接后端的大门，使用nodejs可以操作实现后端的服务，在企业内部更偏向于实现连接前后端的中间件服务。在大前端时代，前端开发者将从事更多的终端开发、智能化、工程化等方向的工作，而不仅仅只是传统意义上的开发Web页面。未来的前端发展有这些方向：前端+node、前端+移动端、前端+数据可视化、前端+图形、前端+AI……因此，面对如今技术要求越来越高的压力，前端开发者可以尝试在AI领域拓展能力，提高竞争力。</li><li>人工智能是大势所趋。回想如今互联网的发展趋势，越来越多的应用、业务场景、服务趋向于智能化，技术在迭代升级，产品的服务也在逐步升级，紧跟时代的潮流，何乐而不为呢？</li></ol><h4 id="前端智能化发展回顾"><a href="#前端智能化发展回顾" class="headerlink" title="前端智能化发展回顾"></a>前端智能化发展回顾</h4><p>目前，市场上出现了很多适合前端开发者学习的机器学习框架、前端智能化应用，并投入了实际生产。如Google团队在成熟的tensorflow框架的基础上，推出了tensorflow.js框架，其他还有keras.js、deeplearning.js等框架，方便前端开发者的快速掌握和使用。阿里前端智能化团队也已经开源了如下的产品：imgcook（将视觉稿转化为多端UI代码，将sketchup和photoshop的图片转化为代码）、pipcook（支持图像识别、图像分类的js库，可以在后端完成模型训练，实现了python能完成的机器学习的全部功能）……</p><blockquote><p>imgcook 从设计稿（sketch、psd、静态图片）一键智能生成高可维护的代码</p></blockquote><p>目前阿里使用imgcook工具自动生成UI代码，但是这部分仍然不包括业务逻辑实现，逻辑部分仍然需要自己完成。</p><blockquote><p>pipcook 以“前端工程师0门槛应用机器学习能力”为使命，以“引领前端技术领域走向智能化”为愿景, 发展成为了从处理数据、训练模型到服务部署的一站式前端算法工程平台。Pipcook 将专注在前端领域，始终秉持着“站在前端工程师视角开发，对前端工程师友好”的原则，最终推动机器学习赋能前端行业向前发展。</p></blockquote><p>pipcook偏向于机器学习算法工程。</p><p>未来，前端还有很长很长的路要走，我相信从以前单纯地使用前端开发业务、服务，到现在与AI结合，能有效地扩展我们的技术领域，视野会越来越宽阔。当然，在这个方向还需要更加深入下去。不仅需要花时间补齐前端所需要的技术栈，还需要巩固机器学习、CV、NLP等领域的知识，深入探索两者之间的有趣结合，构建出更智能更聪明的应用和服务，加速前端向AI领域的飞进。</p><h4 id="哪些应用场景"><a href="#哪些应用场景" class="headerlink" title="哪些应用场景"></a>哪些应用场景</h4><p>有哪些前端可以涉及的AI场景呢？我大致总结了以下几个方面：</p><ol><li>AI小功能实现：如自动裁切素材、调整图片大小、修正图片白平衡、将手绘草稿转化为网页代码、利用简笔画自动生成视觉元素（icon或是简笔画图片），帮助前端开发者减少重复劳动时间</li><li>现有产品中加入AI互动元素：商城应用的AI/AR技术融入，如智能搭配、智能着装、智能试妆等等</li><li>智能化产品开发：如D2C（design to code），根据页面设计图智能生成UI代码，目前这个领域已经较为成熟；还有数据自动标注平台等等</li><li>智能化平台建设：如数据可视化、模型可视化（注意这里不同于数据可视化，模型可视化是用可视化的手段去解释模型，跟踪训练过程，辅助算法同学调参。因此需要开发者对算法、前端、AI都有所了解，通过各种可视化手段去剖析模型，帮助算法同学更好地去调参去理解模型。tensorflow配套的tensorboard就是一套可视化分析工具，但是还远远不够。）</li><li>AI算法开发：可以在前端做AI算法，如物体跟踪、图像处理、特征检测等等，可以在生产环境中落地实践</li><li>当然，还有很多很多的应用场景……</li></ol><p><strong>参考阅读</strong></p><ul><li><a href="https://zhuanlan.zhihu.com/p/47555659" target="_blank" rel="noopener">前端与人工智能</a></li><li><a href="https://zhuanlan.zhihu.com/p/33153262?utm_source=qq" target="_blank" rel="noopener">前端与AI</a></li></ul><blockquote><p>另一个技术是我比较关注的是 AI 领域和前端的结合，我们的 AI 领域，今天虽然炒得非常火热，但是在我看来，真正应用的比较好的场景，就是视觉和推荐这两个领域。我觉得智能研发的领域是整个学术界非常少关注的，那么我们的前端应该把这个责任背起来。我在淘宝已经看到很多这个方面的努力了，我觉得在业界，这个东西在 2019 年产量应该也会越来越成熟，毕竟切图工作是一个机械性的劳动，机械性的劳动最终一定会被机器取代。所以，我认为未来，我们前端的工作是不应该包含切图这项工作的。我也比较期待这方面能够尽快地产生一些成绩。   ——程劭非（winter）| 前手机淘宝前端负责人</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git基础</title>
      <link href="/2020/06/15/git%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/06/15/git%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>对于git做深入地了解，总结了在实际工作过程中git进行版本管理和团队协作的基本操作方法。</p><a id="more"></a><h3 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h3><p>git是什么？git是一款分布式版本控制软件。</p><p><strong>三种状态</strong><br>  现在请注意，如果你希望后面的学习更顺利，请记住下面这些关于 Git 的概念。 Git 有三种状态，你的文件可能处于其中之一： 已提交（committed）、已修改（modified） 和 已暂存（staged）。</p><ol><li>已修改表示修改了文件，但还没保存到数据库中。</li><li>已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li><li>已提交表示数据已经安全地保存在本地数据库中。</li></ol><p><strong>三大区域：</strong></p><ol><li>工作区</li><li>暂存区</li><li>版本库</li></ol><img width="100%" src="https://i.loli.net/2020/04/07/tUqNBwiuPGcDCRX.jpg" alt="git"><p><strong>基本的 Git 工作流程如下：</strong></p><ol><li>在工作区中修改文件。</li><li>将你想要下次提交的更改选择性地暂存，这样只会将更改的部分添加到暂存区。</li><li>提交更新，找到暂存区的文件，将快照永久性存储到 Git 目录。</li></ol><p>如果 Git 目录中保存着特定版本的文件，就属于 <code>已提交</code> 状态。 如果文件已修改并放入暂存区，就属于 <code>已暂存</code> 状态。 如果自上次检出后，作了修改但还没有放到暂存区域，就是 <code>已修改</code> 状态。</p><p>安装 Git 后，初次运行 Git 前的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;John Doe&quot;</span><br><span class="line">$ git config --global user.email johndoe@example.com</span><br></pre></td></tr></table></figure><p><strong>检查配置信息:</strong><br>如果想要检查你的配置，可以使用 git config –list 命令来列出所有 Git 当时能找到的配置。</p><h3 id="二、实战"><a href="#二、实战" class="headerlink" title="二、实战"></a>二、实战</h3><p>1、在家里上传代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin [github@git]</span><br><span class="line">git push -u origin</span><br></pre></td></tr></table></figure><p>2、到公司新电脑上第一次获取代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone [github@git]</span><br><span class="line">git checkout [branch]</span><br></pre></td></tr></table></figure><p>3、在公司进行开发</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev 切换到分支进行开发</span><br><span class="line">git merge master 把master分支合并到dev【仅一次】</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;xx&quot;</span><br><span class="line">git push origin dev</span><br></pre></td></tr></table></figure><p>4、回家后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev</span><br><span class="line">git pull origin dev</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;xx&quot;</span><br><span class="line">git push origin dev</span><br></pre></td></tr></table></figure><p>5、开发完毕，上线</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1）将dev分支合并到master并推送到远程</span><br><span class="line">git checkout master # 切换到master分支</span><br><span class="line">git merge dev # 合并dev分支</span><br><span class="line">git push origin master # 将当前master的代码推送到远程master分支</span><br><span class="line"></span><br><span class="line">2）把dev分支也推送到远程</span><br><span class="line">git checkout dev # 切换回dev分支</span><br><span class="line">git merge master # 这里保证了dev与master分支相同</span><br><span class="line">git push origin dev # 将dev分支推送到远程</span><br></pre></td></tr></table></figure><p><strong>git rebase（变基，使git提交记录更简洁）应用场景：</strong><br>1、帮助你将你的多个提交记录整合成一个提交记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i [commitID] 将现在提交版本号和commitID提交版本号中间所有的提交做合并</span><br><span class="line">git rebase -i HEAD=3 将最近的3条记录做合并（s代表合并到上个版本提交）</span><br></pre></td></tr></table></figure><p>【注意】如果某条记录已经提交到远程仓库了，最好不要把它也做上rebase合并，尽量合并尚未提交到远程仓库的记录。尽量不要在已push至远程库后在使用变基操作。</p><p>2、master分支在向前开发，dev分支也在向前开发，如果要merge到master中时，会产生以下的记录：</p><img width="60%" src="https://i.loli.net/2020/04/07/w2YBGI7OArlQgv6.jpg" alt="rebase场景2"><p>如果想要简化记录，使C3插入到C2和C4中间（归并到一条记录，减少分叉log记录）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev</span><br><span class="line">git rebase master</span><br><span class="line">git checkout master</span><br><span class="line">git merge dev</span><br></pre></td></tr></table></figure><p>3、在公司写代码忘记了推送到远程，回家后接着开发其他功能并推送至远程，回公司后需要拉取代码并做合并，这种情况下会产生log记录分叉（使用git pull直接拉取代码的话）。这时，使用<code>git fetch origin dev</code>+<code>git rebase origin/dev</code>可以解决，不会再产生分叉记录。</p><p><strong>注意事项：</strong><code>git rebase</code>可能会产生冲突，则需要解决冲突，再往下进行</p><p><strong>总结</strong><br>1、添加远程连接<br><code>git remote add origin [git地址]</code><br>2、推送代码<br><code>git push origin dev</code><br>3、下载代码<br><code>git clone</code><br>4、拉取代码<br><code>git pull origin dev</code><br>等价于<code>git fetch origin dev</code>+<code>git merge origin/dev</code><br>5、变基（保持代码提交简洁）<br><code>git rebase [分支]</code><br>6、记录图形展示<br><code>git log --graph --pretty=format:&quot;%h %s&quot;</code></p><h3 id="三、协同开发gitflow工作流"><a href="#三、协同开发gitflow工作流" class="headerlink" title="三、协同开发gitflow工作流"></a>三、协同开发gitflow工作流</h3><img width="100%" src="https://i.loli.net/2020/04/07/WCM8znSdlYiOZPH.jpg" alt="git工作流思路"><ol><li>现有master分支V1版本（master分支只放公司线上正在运行的代码）</li><li>创建分支dev，并拆分出所有的子功能分支（A、B、C……）</li><li>A子分支功能开发完成后，进行code review后合并到dev分支（使用pull request），其他子功能分支开发完同理。子功能开发完成后对应的分支可予以删除。</li><li>创建release分支专门做测试，测试dev分支上的代码，发现bug要进行修复，修复完成后提交回dev分支，无bug后才能合并至master上线</li><li>如果在各子功能都在开发的过程中，线上出现紧急bug，应该额外创建bug分支，修复完bug后合并回master</li></ol><h3 id="四、命令汇总"><a href="#四、命令汇总" class="headerlink" title="四、命令汇总"></a>四、命令汇总</h3><p><strong>1. 获取 Git 仓库</strong><br>通常有两种获取 Git 项目仓库的方式：</p><ul><li>将尚未进行版本控制的本地目录转换为 Git 仓库；</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">$ git add *.c</span><br><span class="line">$ git add LICENSE</span><br><span class="line">$ git commit -m &apos;initial project version&apos;</span><br></pre></td></tr></table></figure><ul><li>从其它服务器 克隆 一个已存在的 Git 仓库。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/libgit2/libgit2</span><br><span class="line">$ git clone https://github.com/libgit2/libgit2 mylibgit</span><br></pre></td></tr></table></figure><p><strong>常见操作：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">git init | 仓库的初始化  </span><br><span class="line">git clone [url] | 从某个远程仓库拷贝  </span><br><span class="line">git status | 显示工作目录的状态</span><br><span class="line">git add [file1] [file2] [file3] | 跟踪新文件、已修改的文件添加到暂存区</span><br><span class="line">git commit -m [msg]| 提交文件 </span><br><span class="line">git rm [file] | 将已跟踪的文件从工作目录、暂存区移除，注意是已跟踪的</span><br><span class="line">git mv | 将已跟踪的文件重新命名，或者将文件从一个目录移动到另一个目录</span><br><span class="line">git diff  --cached | 暂存区与仓库之间的差异</span><br><span class="line">git diff [file] | 查看指定的文件差异</span><br><span class="line">git diff [commitId_1] [commitId_2] | 查看2个指定版本的差异</span><br><span class="line">git log (--graph)  | 查看历史记录 </span><br><span class="line">git reflog | 查看历史提交记录，包括你没有更新的提交</span><br><span class="line">git reset --hard   HEAD~ |  将本地仓库、暂存区、工作目录恢复到上一个版本（所有的修改将会失去）</span><br><span class="line">git reset --mixed HEAD~ | 将本地仓库、暂存区恢复到上一个版本，工作目录保存着修改</span><br><span class="line">git reset --soft HEAD~ | 将本地仓库、上一个版本，暂存区、工作目录保存着修改</span><br><span class="line">git reset HEAD~2 [path] | 带文件路径，默认是--mixed，只将暂存区，路径path下的文件恢复到之前2个版本</span><br><span class="line">git checkout [file] | 撤销工作区中已修改的文件</span><br><span class="line">git commit  --amend | 覆盖上一次的提交。</span><br></pre></td></tr></table></figure><p><strong>远程仓库相关命令：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git clone &lt;url&gt;   克隆远程仓库到本地</span><br><span class="line">git remote  列出每个远程仓库的简短名字</span><br><span class="line">git remote -v    列出每个远程仓库的简短名字与其对应的 URL</span><br><span class="line">git remote show [remote-name]   查看某个远程仓库的详细信息</span><br><span class="line">git remote rename [old name] [new name]  重命名远程仓库</span><br><span class="line">git remote rm [remote-name]   移除某个远程仓库</span><br><span class="line">git remote add &lt;shortname&gt; &lt;url&gt;  添加一个远程仓库</span><br><span class="line">git fetch [remote-name]  从远程仓库数据拉取最新到本地，但不自动合并本地的修改</span><br><span class="line">git  pull   [remote-name] [branch-name]  把远程仓库数据拉到本地，并自行合并</span><br><span class="line">git pull 的魔法经常令人困惑所以通常单独显式地使用 fetch 与 merge 命令会更好一些。</span><br><span class="line">git  push [remote-name] [branch-name]    把本地代码推送到远程仓库，一般先执行git pull、在执行git push  确</span><br></pre></td></tr></table></figure><p><strong>分支相关命令：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">git branch   查看分支（当前工作分支前面会标一个*号）</span><br><span class="line">git branch -v  查看每一个分支的最后一次提交</span><br><span class="line">git branch -vv  查看每一个分支的详细信息，如每一个分支正在跟踪哪个远程分支与本地分支是否是领先、落后</span><br><span class="line">git show-branch   详细查看的分支记录</span><br><span class="line"></span><br><span class="line">git  branch &lt;branchname&gt;       创建分支， HEAD 的特殊指针也会移到当前分支</span><br><span class="line">git checkout  &lt;branchname&gt;   切换分支</span><br><span class="line">git checkout  -b &lt;branchname&gt; 创建分支，并切换到该分支，即合并上面2步  </span><br><span class="line"></span><br><span class="line">git mergr  &lt;branchname&gt; ：合并分支，如果需要合并到master分支，那么需要先切换到master分支，再进行整合 (该合并分支，是Fast forward模式，在服务器中是没有记录的)</span><br><span class="line">git merge --no-ff -m &quot;merge with no-ff&quot; &lt;branchname&gt;     合并分支（禁用Fast forward模式，能看到分支记录）</span><br><span class="line"></span><br><span class="line">git branch --merged   查看已经合并到当前分支的分支。 </span><br><span class="line">git branch --no-merged  查看尚未合并到当前分支的分支。 </span><br><span class="line">git branch -d  &lt;branchname&gt;        删除已经合并的分支</span><br><span class="line">git branch -D  &lt;branchname&gt;      可强制删除尚未合并的分支 </span><br><span class="line">git push origin --delete serverfix    删除某个远程分支</span><br><span class="line"></span><br><span class="line">git checkout -m &lt;branchname&gt;  将本地的修改加入到新的分支上</span><br><span class="line"></span><br><span class="line">git checkout -b branch-name  origin/branch-name 在本地创建和远程分支对应的分支，本地和远程分支的名称最好一致</span><br></pre></td></tr></table></figure><h3 id="五、其他"><a href="#五、其他" class="headerlink" title="五、其他"></a>五、其他</h3><p><strong>给开源软件贡献代码：</strong><br>1、fork源代码（拷贝源代码到自己的仓库）<br>2、在自己的仓库修改代码<br>3、给源代码作者提交修复bug的申请（pull request）</p><p><strong>免密登录：</strong></p><img width="60%" src="https://i.loli.net/2020/04/07/soaVlvdKjBwp3yT.jpg" alt="git免密登录"><p><strong>任务管理相关：</strong></p><ol><li>issues（文档、big修复等任务管理）</li><li>wiki（写项目介绍）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jenkins实战</title>
      <link href="/2020/06/02/jenkins%E5%AE%9E%E6%88%98/"/>
      <url>/2020/06/02/jenkins%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="持续集成、持续交付、持续部署"><a href="#持续集成、持续交付、持续部署" class="headerlink" title="持续集成、持续交付、持续部署"></a>持续集成、持续交付、持续部署</h3><p><strong>1. 持续集成（CI）</strong><br>持续集成是指软件个人研发的部分向软件整体部分交付，频繁进行集成以便更快地发现其中的错误。<br>持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。<br><code>好处：</code></p><ul><li>快速发现错误。每完成一点更新，就集成到主干，可以快速发现错误，定位错误也比较容易。</li><li>防止分支大幅偏离主干。如果不是经常集成，主干又在不断更新，会导致以后集成的难度变大，甚至难以集成。</li></ul><p><code>如何选择CI工具：</code><br>整体而言，Jenkins过去一直是大部分公司的选择，但这个现象正在发生改变，随着公有云服务、Docker，SaaS 的普及，越来越多的企业开始选择 Hosted CI，也就是托管型持续集成系统。<br>另外，在选择合适的持续集成服务时，还需要考量系统的灵活度以适应公司不同阶段的开发测试需求。<br>选择持续集成系统只是持续集成应用的其中一步，还需要建立合适的持续集成文化比如代码质量管控、测试文化等。做好持续集成，可为持续交付与持续部署打好坚实基础。</p><p><strong>2. 持续交付（CD）</strong><br>持续交付在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境的「类生产环境」中。给质量团队或者用户，以供评审。如果评审通过，代码就进入生产阶段。持续交付优先于整个产品生命周期的软件部署，建立在高水平自动化持续集成之上。<br><code>持续交付可以看作持续集成的下一步。它强调的是，不管怎么更新，软件是随时随地可以交付的。</code><br>当然，持续交付并不是指软件每一个改动都要尽快部署到产品环境中，它指的是任何的代码修改都可以在任何时候实施部署。</p><p><strong>3. 持续部署</strong><br> 持续部署(continuous deployment)是持续交付的下一步或者说更高阶段，指的是代码通过评审以后（或者是通过自动化测试以后），自动部署到生产环境。持续部署是持续交付的最高阶段。这意味着，所有通过了一系列的自动化测试的改动都将自动部署到生产环境。它也可以被称为“Continuous Release”。 大多数的公司如果没有制度的约束或其它条件的影响，都应该以持续部署为目标。<br>持续部署(continuous deployment)是持续交付的下一步，指的是代码通过评审以后，自动部署到生产环境。<br>持续部署的目标是，代码在任何时刻都是可部署的，可以进入生产阶段。</p><p><code>「持续集成（ContinuousIntegration）」</code>、<code>「持续交付（Continuous Delivery）」</code>和<code>「持续部署（Continuous Deployment）」</code>提供了一个优秀的 DevOps 环境，对于整个团队来说，好处与挑战并行。无论如何，频繁部署、快速交付以及开发测试流程自动化都将成为未来软件工程的重要组成部分。</p><h3 id="主流网站部署流程"><a href="#主流网站部署流程" class="headerlink" title="主流网站部署流程"></a>主流网站部署流程</h3><p>目前主流网站部署方法，通过Hudson/Jenkins工具平台实现全自动部署+测试，是一个可扩展的持续集成引擎，是一个开源软件项目，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。Jenkins非常易于安装和配置。<br>1）开发人员：写好代码，不需要自己进行源码编译、打包等工作，直接将代码分支存放在SVN、GIT仓库即可。<br>2）运维人员：减轻人工干预的错误率，同时解放运维人员繁杂的上传代码、手动备份和更新。<br>3）测试人员：可以通过jenkins进行简单的代码及网站测试。</p><h3 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h3><p>原文地址：<a href="https://juejin.im/post/5ad1980e6fb9a028c42ea1be" target="_blank" rel="noopener">实战笔记：Jenkins打造强大的前端自动化工作流</a></p><p>其他优秀教程如下：<br><a href="https://juejin.im/post/5b371678f265da599f68dfa2" target="_blank" rel="noopener">Jenkins +nginx 搭建前端构建环境</a><br><a href="https://juejin.im/post/5bfe2e61f265da614d08e223#heading-15" target="_blank" rel="noopener">jenkins使用</a></p><h4 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h4><p>Jenkins 是一款业界流行的开源持续集成工具，广泛用于项目开发，具有自动化构建、测试和部署等功能。</p><h4 id="持续集成组件"><a href="#持续集成组件" class="headerlink" title="持续集成组件"></a>持续集成组件</h4><ol><li>一个自动构建过程，包括自动编译、分发、部署和测试</li><li>一个代码存储库，需要版本控制软件来保障代码的可维护性，同时作为构建过程的素材库，例如SVN、GIT代码库</li><li>一个jenkins持续集成服务器</li></ol><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>linux下：<a href="https://blog.csdn.net/fenglailea/article/details/25919367" target="_blank" rel="noopener">ubuntu 14.04中安装Jenkins</a><br>windows下：1）从Jenkins官网下载最新war文件。2）运行java -jar jenkins.war即可。</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><ol><li>jenkins的默认端口是8080,启动成功后在浏览器打开。</li><li>进入后会让我们输管理员密码，打开网页上提示路径下的文件，复制密码粘贴输入即可。</li><li>然后会让安装需要的插件，此处选默认即可，等待安装完成。</li><li>创建一个管理员账户。</li><li>上面都完成后会看到就绪界面。</li></ol><h4 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h4><ol><li>点击创建一个新任务</li><li>选择自由风格的软件项目，并起一个名字</li></ol><p>至此，基础准备工作已经完成，我们在服务器上安装了Jenkins并启动，然后进行了初始化配置，建立了一个新任务。</p><h4 id="实现git钩子功能"><a href="#实现git钩子功能" class="headerlink" title="实现git钩子功能"></a>实现git钩子功能</h4><h4 id="实现自动化构建"><a href="#实现自动化构建" class="headerlink" title="实现自动化构建"></a>实现自动化构建</h4><h4 id="实现自动化部署"><a href="#实现自动化部署" class="headerlink" title="实现自动化部署"></a>实现自动化部署</h4>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP系列6：词向量与文本生成</title>
      <link href="/2020/05/20/NLP-06/"/>
      <url>/2020/05/20/NLP-06/</url>
      
        <content type="html"><![CDATA[<p>核心内容：词向量、xgboost、RNN、LSTM、GRU、attention机制、self-attention、good-representation、seq2seq、看图说话、深度文本匹配、BERT、LDA、transform</p><a id="more"></a><p><a href="https://iloveyou11.github.io/2020/03/22/NLP-01/" target="_blank" rel="noopener">NLP系列1：NLP简介</a><br>[NLP系列2：分词与文本表示](<a href="https://iloveyou11.github.io/2020/04/02/NLP-02/" target="_blank" rel="noopener">https://iloveyou11.github.io/2020/04/02/NLP-02/</a><br><a href="https://iloveyou11.github.io/2020/04/21/NLP-03/" target="_blank" rel="noopener">NLP系列3：语言系统与NLP基础</a><br><a href="https://iloveyou11.github.io/2020/05/02/NLP-04/" target="_blank" rel="noopener">NLP系列4：NLP核心任务</a><br><a href="https://iloveyou11.github.io/2020/05/10/NLP-05/" target="_blank" rel="noopener">NLP系列5：重要模型与算法</a><br><a href="https://iloveyou11.github.io/2020/05/20/NLP-06/" target="_blank" rel="noopener">NLP系列6：词向量与文本生成</a></p><h3 id="词向量（wordvector）"><a href="#词向量（wordvector）" class="headerlink" title="词向量（wordvector）"></a>词向量（wordvector）</h3><img width="100%" src="https://i.loli.net/2020/03/25/lxXWp9yaeIjfq8Y.jpg" alt="词向量"><p>在NLP领域中，为了能表示人类的语言符号，一般会把这些符号转成一种数学向量形式以方便处理，我们把语言单词嵌入到向量空间中就叫<code>词嵌入（word embedding）</code>。<br>比如有比较流行的谷歌开源的 word2vec ，它能生成词向量，通过该词向量在一定程度上还可以用来度量词与词之间的相似性。word2vec采用的模型包含了连续词袋模型（CBOW）和Skip-Gram模型，并通过神经网络来训练。</p><ol><li>one-hot形式的词向量<br>one-hot形式的维数通常会很大，因为词数量一般在10W级别，这会导致训练时难度大大增加，造成维数灾难。另外这么多维只以顺序信息并且只用1和0来表示单词，很浪费空间。再一个是这种方式的任意两个词都是孤立的，没法看出两个词之间的相似性。</li><li>分布式词向量<br>鉴于one-hot形式词向量的缺点，出现了另外一种词向量表示方式——分布式词向量(distributed word representation)。 分布式词向量则干脆直接用普通的向量来表示词向量，而元素的值为任意实数，该向量的维数可以在事前确定，一般可以为50维或100维。<h4 id="CBow（连续词袋模型）"><a href="#CBow（连续词袋模型）" class="headerlink" title="CBow（连续词袋模型）"></a>CBow（连续词袋模型）</h4>该方法就是将{“The”，“cat”，“over”，“the”，“puddle”}当做一个上下文（或语义背景），然后根据这些单词，预测并产生中心单词“jumped”，这种模型我们称作为CBow模型。<h4 id="Skip-Gram"><a href="#Skip-Gram" class="headerlink" title="Skip-Gram"></a>Skip-Gram</h4>这种方法就是通过给出的中心词“jumped”来创建一个模型，来预测和产生周围词汇（或者中心词的上下文）“The”,“cat”,”over,“the”,“puddle”。这里我们称之为“跳跃”的上下文，将这种类型的模型称为Skip-Gram模型。<br>与CBOW相比，初始化时大部分是相同的，只是我们需要将x和y，就是在CBOW中的x现在是y，反之亦然。我将输入one hot向量记为x，输出向量记为y(c)，V、U和CBOW模型一样。<h4 id="subword"><a href="#subword" class="headerlink" title="subword"></a>subword</h4>解决痛点：低频词、OOV（新词不存在已有此库中）</li></ol><p>Subword 背后的思想: 大多数现有方法都用一个分离的 vector 来表示一个 word, 这就忽视了 word 的内在结构, 而它可能蕴含丰富的词意. 这对于拉丁语系的语言可能是很有帮助的. 这样做的一个好处是, 对于 corpus 中出现频率极低的, 或者从未出现过的 word, 利用 character level information, 能更好地表示它们.<br>在一个 word 前后加上 &lt; 与 &gt;, 然后将单词分成 n-gram 的词袋, 此处前后缀能起到区别于其他单词序列的作用. 比如使用 3-gram, where 被表示成 &lt;wh, whe, her, ere, re&gt;. 英文单词 her 的词袋是 &lt;he, her, er&gt;, 因此不应将 where 中的 3-gram her 与单词 her 搞混. 另外, 将带前后缀的原单词 <where> 也加入词袋. 最后 word vector 就用 n-gram vectors 的和表示.<br>Subwords 模型允许在 word 间共享表示, 因此对于低频单词, 能学到更可靠的表示.</where></p><h4 id="ELMo"><a href="#ELMo" class="headerlink" title="ELMo"></a>ELMo</h4><p><code>ELMO</code>是<code>Embedding from Language Models</code>的简称，其实这个名字并没有反应它的本质思想，提出ELMO的论文题目：“Deep contextualized word representation”更能体现其精髓，而精髓在哪里？在deep contextualized这个短语，一个是deep，一个是context，其中context更关键。<br>在此之前的Word Embedding本质上是个静态的方式，所谓静态指的是训练好之后每个单词的表达就固定住了，以后使用的时候，不论新句子上下文单词是什么，这个单词的Word Embedding不会跟着上下文场景的变化而改变，所以对于比如Bank这个词，它事先学好的Word Embedding中混合了几种语义 ，在应用中来了个新句子，即使从上下文中（比如句子包含money等词）明显可以看出它代表的是“银行”的含义，但是对应的Word Embedding内容也不会变，它还是混合了多种语义。这是为何说它是静态的，这也是问题所在。<br><strong>ELMO的本质思想是：</strong>我事先用语言模型学好一个单词的Word Embedding，此时多义词无法区分，不过这没关系。在我实际使用Word Embedding的时候，单词已经具备了特定的上下文了，这个时候我可以根据上下文单词的语义去调整单词的Word Embedding表示，这样经过调整后的Word Embedding更能表达在这个上下文中的具体含义，自然也就解决了多义词的问题了。所以ELMO本身是个根据当前上下文对Word Embedding动态调整的思路。<br>ELMO采用了典型的两阶段过程，第一个阶段是利用语言模型进行预训练；第二个阶段是在做下游任务时，从预训练网络中提取对应单词的网络各层的Word Embedding作为新特征补充到下游任务中。</p><p><strong>ELMO有什么值得改进的缺点呢？</strong></p><ul><li>首先，一个非常明显的缺点在特征抽取器选择方面，ELMO使用了LSTM而不是新贵Transformer，Transformer是谷歌在17年做机器翻译任务的“Attention is all you need”的论文中提出的，引起了相当大的反响，很多研究已经证明了Transformer提取特征的能力是要远强于LSTM的。如果ELMO采取Transformer作为特征提取器，那么估计Bert的反响远不如现在的这种火爆场面。</li><li>另外一点，ELMO采取双向拼接这种融合特征的能力可能比Bert一体化的融合特征方式弱，但是，这只是一种从道理推断产生的怀疑，目前并没有具体实验说明这一点。</li></ul><h3 id="xgboost"><a href="#xgboost" class="headerlink" title="xgboost"></a>xgboost</h3><p><a href="https://juejin.im/entry/5c89afd8e51d4559d83387a6" target="_blank" rel="noopener">机器学习算法之XGBoost</a><br>XGBoost相比于GBDT加入了正则化项(Regularization)</p><blockquote><p>我们使用损失函数优化是为了避免欠拟合，而使用正则化项就是为了避免过拟合。正则化项与损失函数共同组成了我们的目标函数。XGBoost比GBDT多添加了以树复杂度构成的正则化项，也是XGBoost实际表现更为优秀的原因之一</p></blockquote><p>XGBoost 所应用的算法就是 gradient boosting decision tree，既可以用于分类也可以用于回归问题中。那什么是 Gradient Boosting？Gradient boosting 是 boosting 的其中一种方法。所谓 Boosting ，就是将弱分离器 f_i(x) 组合起来形成强分类器 F(x) 的一种方法。</p><ul><li><code>决策树（Decision Tree）：</code>每个 HR 都有一系列标准，比如学历、工作年份、面试表现等。一个决策树就类似于一个 HR 基于他的这些标准来筛选候选人。</li><li><code>Bagging：</code>假设现在不只有一个面试官，而是有一个面试小组，组中每个面试官都有投票权。Bagging 和 Bootstrap 就是通过一个民主投票的过程，将所有面试官的输入聚合起来，得到一个最终的决定。</li><li><code>随机森林（Random Forest）：</code>它是一种基于 Bagging 的算法，关键点在于随机森林会随机使用特征的子集。换句话说，就是每个面试官都只会用一些随机选择的标准来考验候选人的任职资格（比如，技术面值考察编程技能，行为面只考察非技术相关的技能）。</li><li><code>Boosting：</code>这是一种替代方法，每个面试官都会根据上一个面试官的面试结果来改变自己的评价标准。通过利用更加动态的评估过程，可以提升（boost）面试过程的效率。</li><li><code>梯度提升（Gradient Boosting）：</code>Boosting 的特例，用梯度下降算法来将误差最小化。比如，咨询公司用案例面试来剔除不太合格的候选人。</li><li><code>XGBoost：</code>可以认为 XGBoost 就是“打了兴奋剂”的梯度提升（因此它全称是“Extreme Gradient Boosting” —— 极端梯度提升）。它是软件和硬件优化技术的完美结合，可以在最短的时间内用较少的计算资源得到出色的结果。</li></ul><h3 id="RNN"><a href="#RNN" class="headerlink" title="RNN"></a>RNN</h3><p><a href="https://juejin.im/entry/5b97e36cf265da0aa81be239" target="_blank" rel="noopener">循环神经网络（Recurrent Neural Network，RNN）</a><br><strong>为什么使用序列模型（sequence model）？</strong><br>标准的全连接神经网络（fully connected neural network）处理序列会有两个问题：1）全连接神经网络输入层和输出层长度固定，而不同序列的输入、输出可能有不同的长度，选择最大长度并对短序列进行填充（pad）不是一种很好的方式；2）全连接神经网络同一层的节点之间是无连接的，当需要用到序列之前时刻的信息时，全连接神经网络无法办到，一个序列的不同位置之间无法共享特征。而循环神经网络（Recurrent Neural Network，RNN）可以很好地解决问题。</p><p>优秀文章：<br><a href="https://juejin.im/post/59f0c5b0f265da43085d3e94" target="_blank" rel="noopener">RNN 循环神经网络系列 1：基本 RNN 与 CHAR-RNN</a><br><a href="https://juejin.im/post/59f0c6b3f265da4319557de4" target="_blank" rel="noopener">RNN 循环神经网络系列 2：文本分类</a><br><a href="https://juejin.im/post/59fc1616f265da432b4a2d44" target="_blank" rel="noopener">RNN 循环神经网络系列 3：编码、解码器</a><br><a href="https://github.com/xitu/gold-miner/blob/master/TODO/recurrent-neural-network-rnn-part-4-attentional-interfaces.md" target="_blank" rel="noopener">RNN 循环神经网络系列 4：注意力机制</a><br><a href="https://github.com/xitu/gold-miner/blob/master/TODO/recurrent-neural-network-rnn-part-5-custom-cells.md" target="_blank" rel="noopener">RNN 循环神经网络系列 5：自定义单元</a></p><p>RNN的类型：<br>（1）one to one：其实和全连接神经网络并没有什么区别，这一类别算不得是 RNN。<br>（2）one to many：输入不是序列，输出是序列。<br>（3）many to one：输入是序列，输出不是序列。<br>（4）many to many：输入和输出都是序列，但两者长度可以不一样。<br>（5）many to many：输出和输出都是序列，两者长度一样。</p><blockquote><p>“需要特别指出，理论上循环神经网络可以支持任意长度的序列，然而在实际中，如果序列过长会导致优化时出现梯度消散的问题（the vanishing gradient problem），所以实际中一般会规定一个最大长度，当序列长度超过规定长度之后会对序列进行截断。”　</p></blockquote><p>RNN 面临的一个技术挑战是长期依赖（long-term dependencies）问题，即当前时刻无法从序列中间隔较大的那个时刻获得需要的信息。在理论上，RNN 完全可以处理长期依赖问题，但实际处理过程中，RNN 表现得并不好。</p><p>但是 <strong>GRU</strong> 和 <strong>LSTM</strong> 可以处理梯度消散问题和长期依赖问题。　　</p><h3 id="LSTM与GRU"><a href="#LSTM与GRU" class="headerlink" title="LSTM与GRU"></a>LSTM与GRU</h3><p><a href="https://juejin.im/entry/58f1e59ba0bb9f006a93ea53" target="_blank" rel="noopener">详解 LSTM</a><br><a href="https://juejin.im/entry/5b97e36cf265da0aa81be239" target="_blank" rel="noopener">循环神经网络（Recurrent Neural Network，RNN）</a><br>长短时记忆网络（Long Short Term Memory，LSTM）<br>相比于基础的RNN，GRU 和 LSTM 与之不同的地方在于循环体 A 的网络结构。<br>GRU 和 LSTM 都引入了一个的概念，门（gate）。<strong>GRU 有两个“门”（“更新门”和“重置门”），而 LSTM 有三个“门”（“遗忘门”、“输入门”和“输出门”）。</strong></p><p>之所以叫“门”结构，是因为使用 sigmoid 作为激活函数的全连接神经网络层会输出一个 0 到 1 之间的数值，描述当前输入有多少信息量可以通过这个结构。于是这个结构的功能就类似于一扇门，当门打开时（sigmoid 全连接层输出为 1 时），全部信息可以通过；当门关上时（sigmoid 神经网络层输出为 0 时），任何信息都无法通过。</p><p>LSTM 有三个门，分别是<code>“遗忘门”（forget gate）</code>、<code>“输入门”（input gate）</code>和<code>“输出门”（output gate）</code>。“遗忘门”的作用是让循环神经网络“忘记”之前没有用的信息。“输入门”决定哪些信息进入当前时刻的状态。通过“遗忘门”和“输入门”，LSTM 结构可以很有效地决定哪些信息应该被遗忘，哪些信息应该得到保留。LSTM 在得到当前时刻状态 Ct C t之后，需要产生当前时刻的输出，该过程通过“输出门”完成。</p><img width="60%" style="display:block" src="https://i.loli.net/2020/03/31/jLSIayud5rCKP2U.png" alt="LSTM"><p>GRU是门控循环单元（Gated Recurrent Unit，GRU），GRU有两个门：一个是“更新门”（update gate），它将 LSTM 的“遗忘门”和“输入门”融合成了一个“门”结构；另一个是“重置门”（reset gate）。从直观上来说，‘重置门’决定了如何将新的输入信息与前面的记忆相结合，‘更新门’定义了前面记忆保存到当前时刻的量。那些学习捕捉短期依赖关系的单元将趋向于激活‘重置门’，而那些捕获长期依赖关系的单元将常常激活‘更新门’。</p><img width="30%" src="https://i.loli.net/2020/03/31/5TFp4cjqemtVD1N.png" alt="GRU"><h3 id="attention机制"><a href="#attention机制" class="headerlink" title="attention机制"></a>attention机制</h3><img width="60%" src="https://i.loli.net/2020/03/31/NF5q9JroSgapxTt.png" alt="attention"><p>Attention是一种用于提升基于RNN（LSTM或GRU）的Encoder + Decoder模型的效果的的机制（Mechanism），一般称为Attention Mechanism。Attention Mechanism目前非常流行，广泛应用于机器翻译、语音识别、图像标注（Image Caption）等很多领域，之所以它这么受欢迎，是因为Attention给模型赋予了区分辨别的能力，例如，在机器翻译、语音识别应用中，为句子中的每个词赋予不同的权重，使神经网络模型的学习变得更加灵活（soft），同时Attention本身可以做为一种对齐关系，解释翻译输入/输出句子之间的对齐关系，解释模型到底学到了什么知识，为我们打开深度学习的黑箱，提供了一个窗口。</p><p>Attention 机制的本质来自于人类视觉注意力机制。人们视觉在感知东西的时候一般不会是一个场景从到头看到尾每次全部都看，而往往是根据需求观察注意特定的一部分。而且当人们发现一个场景经常在某部分出现自己想观察的东西时，人们会进行学习在将来再出现类似场景时把注意力放到该部分上。</p><p>仍然以循环神经⽹络为例，注意⼒机制通过对编码器所有时间步的隐藏状态做加权平均来得到背景变量。解码器在每⼀时间步调整这些权重，即注意⼒权重，从而能够在不同时间步分别关注输⼊序列中的不同部分并编码进相应时间步的背景变量。</p><p>在计算 Attention 时主要分为三步，第一步是将 query 和每个 key 进行相似度计算得到权重，常用的相似度函数有点积，拼接，感知机等；然后第二步一般是使用一个 softmax 函数对这些权重进行归一化；最后将权重和相应的键值 value 进行加权求和得到最后的 Attention。</p><p><strong>长输入序列带来的问题</strong>: 输入序列不论长短都会被编码成一个固定长度的向量表示，而解码则受限于该固定长度的向量表示。这个问题限制了模型的性能，尤其是当输入序列比较长时，模型的性能会变得很差（在文本翻译任务上表现为待翻译的原始文本长度过长时翻译质量较差）。</p><p><strong>Attention机制的基本思想是</strong>，打破了传统编码器-解码器结构在编解码时都依赖于内部一个固定长度向量的限制。Attention机制的实现是通过保留LSTM编码器对输入序列的中间输出结果，然后训练一个模型来对这些输入进行选择性的学习并且在模型输出时将输出序列与之进行关联。换一个角度而言，输出序列中的每一项的生成概率取决于在输入序列中选择了哪些项。</p><p><strong>Attention在序列预测中的5大应用:</strong></p><ol><li>Attention在文本翻译任务上的应用<br>给定一个法语的句子作为输入序列，需要输出翻译为英语的句子。Attention机制被用在输出输出序列中的每个词时会专注考虑输入序列中的一些被认为比较重要的词。</li><li>Attention在图片描述上的应用<br>给定一张图片作为输入，输出对应的英文文本描述。Attention机制被用在输出输出序列的每个词时会专注考虑图片中不同的局部信息。</li><li>Attention在语义蕴涵 (Entailment) 中的应用<br>给定一个用英文描述的前提和假设作为输入，输出假设与前提是否矛盾、是否相关或者是否成立。</li><li>Attention在语音识别上的应用<br>给定一个英文的语音片段作为输入，输出对应的音素序列。Attention机制被用于对输出序列的每个音素和输入语音序列中一些特定帧进行关联。</li><li>Attention在文本摘要上的应用<br>给定一篇英文文章作为输入序列，输出一个对应的摘要序列。Attention机制被用于关联输出摘要中的每个词和输入中的一些特定词。</li></ol><h3 id="self-attention"><a href="#self-attention" class="headerlink" title="self-attention"></a>self-attention</h3><p><a href="https://juejin.im/post/5d8c6337f265da5b9603bcfb" target="_blank" rel="noopener">Transformer各层网络结构详解</a><br>Self-Attention 可以是一般 Attention 的一种特殊情况，在 Self-Attention 中，Q=K,V 每个序列中的单元和该序列中所有单元进行 Attention 计算。</p><p>Google 提出的多头 Attention 通过计算多次来捕获不同子空间上的相关信息。Self-Attention 的特点在于无视词之间的距离直接计算依赖关系，能够学习一个句子的内部结构，实现也较为简单并行可以并行计算。<br>从一些论文中看到，Self-Attention 可以当成一个层和 RNN，CNN，FNN 等配合使用，成功应用于其他 NLP 任务。</p><p>self-attention思想和attention类似，但是self-attention是Transformer用来将其他相关单词的“理解”转换成我们正在处理的单词的一种思路，我们看个例子：<br>The animal didn’t cross the street because it was too tired<br>这里的 it 到底代表的是 animal 还是 street 呢，对于我们来说能很简单的判断出来，但是对于机器来说，是很难判断的，self-attention就能够让机器把 it 和 animal 联系起来，接下来我们看下详细的处理过程。</p><ol><li><p>首先，self-attention会计算出三个新的向量，在论文中，向量的维度是512维，我们把这三个向量分别称为Query、Key、Value，这三个向量是用embedding向量与一个矩阵相乘得到的结果，这个矩阵是随机初始化的，维度为（64，512）注意第二个维度需要和embedding的维度一样，其值在BP的过程中会一直进行更新，得到的这三个向量的维度是64。</p><img width="60%" src="https://i.loli.net/2020/03/31/UEuWVo8qeidIX4h.jpg" alt="self attention1"></li><li><p>计算self-attention的分数值，该分数值决定了当我们在某个位置encode一个词时，对输入句子的其他部分的关注程度。这个分数值的计算方法是Query与Key做点成，以下图为例，首先我们需要针对Thinking这个词，计算出其他词对于该词的一个分数值，首先是针对于自己本身即q1·k1，然后是针对于第二个词即q1·k2。</p><img width="60%" src="https://i.loli.net/2020/03/31/t1CbX8recRGfVpv.jpg" alt="self attention2"></li><li><p>接下来，把点成的结果除以一个常数，这里我们除以8，这个值一般是采用上文提到的矩阵的第一个维度的开方即64的开方8，当然也可以选择其他的值，然后把得到的结果做一个softmax的计算。得到的结果即是每个词对于当前位置的词的相关性大小，当然，当前位置的词相关性肯定会会很大。</p><img width="60%" src="https://i.loli.net/2020/03/31/Un4A5FkGJ6BDChs.jpg" alt="self attention3"></li><li><p>下一步就是把Value和softmax得到的值进行相乘，并相加，得到的结果即是self-attetion在当前节点的值。在实际的应用场景，为了提高计算速度，我们采用的是矩阵的方式，直接计算出Query, Key, Value的矩阵，然后把embedding的值与三个矩阵直接相乘，把得到的新矩阵 Q 与 K 相乘，乘以一个常数，做softmax操作，最后乘上 V 矩阵。</p><img width="60%" src="https://i.loli.net/2020/03/31/xDhEYdRyCwU97NG.jpg" alt="self attention4"></li></ol><h3 id="good-representation"><a href="#good-representation" class="headerlink" title="good-representation"></a>good-representation</h3><p>1、    smoothness——平滑函数更容易优化，找到最优解<br>2、    multiple explanatory factors——具有强大的可解释性<br>3、  hierarchical representation——设计层次结构，方便迁移学习，越底层特征越基础，越高层特征越具体化<br>4、    shared factors across tasks——参数共享<br>5、    low dimensional manifold——低维空间得到更好表示，经过降维操作<br>6、    temporal/spatial coherence——时间/空间上一致性，使用正则项保持<br>7、    sparsity——稀疏性，提高可解释性</p><h3 id="seq2seq"><a href="#seq2seq" class="headerlink" title="seq2seq"></a>seq2seq</h3><p>seq2seq属于encoder-decoder结构的一种，常见是encoder-decoder结构，基本思想就是利用两个RNN，一个RNN作为encoder，另一个RNN作为decoder。encoder负责将输入序列压缩成指定长度的向量，这个向量就可以看成是这个序列的语义，这个过程称为编码，获取语义向量最简单的方式就是直接将最后一个输入的隐状态作为语义向量C。也可以对最后一个隐含状态做一个变换得到语义向量，还可以将输入序列的所有隐含状态做一个变换得到语义变量。</p><p>而decoder则负责根据语义向量生成指定的序列，这个过程也称为解码，如下图，最简单的方式是将encoder得到的语义变量作为初始状态输入到decoder的RNN中，得到输出序列。可以看到上一时刻的输出会作为当前时刻的输入，而且其中语义向量C只作为初始状态参与运算，后面的运算都与语义向量C无关。</p><p>seq2seq的应用场景如下：</p><ol><li>机器翻译（当前最为著名的Google翻译，就是完全基于Seq2Seq+Attention机制开发出来的）。</li><li>聊天机器人（小爱，微软小冰等也使用了Seq2Seq的技术（不是全部））。</li><li>文本摘要自动生成（今日头条等使用了该技术）。</li><li>图片描述自动生成。</li><li>机器写诗歌、代码补全、生成 commit message、故事风格改写等。</li></ol><h3 id="主题模型（LDA）"><a href="#主题模型（LDA）" class="headerlink" title="主题模型（LDA）"></a>主题模型（LDA）</h3><p><strong>PLSA和LDA的区别：</strong>PLSA确定了主题概率，LDA未确定固定的主题概率，只规定了主题概率服从Dirichlet分布<br><strong>PLSA</strong>：</p><ol><li>按照概率p(di)选择一篇文档di</li><li>选择文档di后，确定文章的主题分布</li><li>从主题分布中按照概率p(zk|di)选择一个隐含的主题类型zk</li><li>选定zk后，确定主题下的词分布</li><li>从词分布中按照概率p(wj|zk)选择一个词wj </li></ol><p><strong>LDA</strong>：</p><ol><li>按照先验概率p(di)选择一篇文档di</li><li>从Dirichlet分布中取样生成di的主题分布θi，</li><li>从主题的多项式分布θi中取样生成文档di第j个词的主题zij</li><li>从Dirichlet分布中取样生成主题zij对应的词语分布FAIzij</li><li>从词语的多项式分布FAIzij中采样最终生成的词语wij</li></ol><p><code>α-&gt;θ的生成、β-&gt;Fai的生成：</code><br>需要满足条件<br>1）和为1 ；<br>2）大于0，采用Dirichlet分布生成</p><p><code>θi-&gt;Zij的生成（在主题分布中进行主题采样）：</code><br>使用multinomial分布进行采样</p><p><code>gibbs采样</code>：一个一个参数进行采样，剩下的参数当作是已知的</p><h3 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h3><p><a href="https://juejin.im/post/5d8c6337f265da5b9603bcfb" target="_blank" rel="noopener">Transformer各层网络结构详解</a><br><code>《Attention Is All You Need》</code>是一篇Google提出的将Attention思想发挥到极致的论文。这篇论文中提出一个全新的模型，叫 Transformer，抛弃了以往深度学习任务里面使用到的 CNN 和 RNN。目前大热的Bert就是基于Transformer构建的，这个模型广泛应用于NLP领域，例如机器翻译，问答系统，文本摘要和语音识别等等方向。</p><p>Transformer的结构和Attention模型一样，Transformer模型中也采用了 encoer-decoder 架构。但其结构相比于Attention更加复杂，论文中encoder层由6个encoder堆叠在一起，decoder层也一样。</p><img width="60%" src="https://i.loli.net/2020/03/31/snFX5OGP2TV9aRv.jpg" alt="transformer"><ol><li>encoder，包含两层，一个self-attention层和一个前馈神经网络，self-attention能帮助当前节点不仅仅只关注当前的词，从而能获取到上下文的语义。</li><li>decoder也包含encoder提到的两层网络，但是在这两层中间还有一层attention层，帮助当前节点获取到当前需要关注的重点内容。</li></ol>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP系列5：重要模型与算法</title>
      <link href="/2020/05/10/NLP-05/"/>
      <url>/2020/05/10/NLP-05/</url>
      
        <content type="html"><![CDATA[<p>核心内容：HMM、隐变量模型、EM算法、k-means算法、GMM、CRF</p><a id="more"></a><p><a href="https://iloveyou11.github.io/2020/03/22/NLP-01/" target="_blank" rel="noopener">NLP系列1：NLP简介</a><br>[NLP系列2：分词与文本表示](<a href="https://iloveyou11.github.io/2020/04/02/NLP-02/" target="_blank" rel="noopener">https://iloveyou11.github.io/2020/04/02/NLP-02/</a><br><a href="https://iloveyou11.github.io/2020/04/21/NLP-03/" target="_blank" rel="noopener">NLP系列3：语言系统与NLP基础</a><br><a href="https://iloveyou11.github.io/2020/05/02/NLP-04/" target="_blank" rel="noopener">NLP系列4：NLP核心任务</a><br><a href="https://iloveyou11.github.io/2020/05/10/NLP-05/" target="_blank" rel="noopener">NLP系列5：重要模型与算法</a><br><a href="https://iloveyou11.github.io/2020/05/20/NLP-06/" target="_blank" rel="noopener">NLP系列6：词向量与文本生成</a></p><h4 id="隐马尔可夫模型（HMM）"><a href="#隐马尔可夫模型（HMM）" class="headerlink" title="隐马尔可夫模型（HMM）"></a>隐马尔可夫模型（HMM）</h4><p>隐马尔可夫模型是关于时序的概率模型，描述由一个隐藏的马尔可夫链随机生成不可观测的状态随机序列，再由各个状态生成一个观测而产生观测随机序列的过程。隐藏的马尔可夫链随机生成的状态的序列，称为状态序列（state sequence);每个状态生成一个观测，而由此产生的观测的随机序列，称为观测序列（observation sequence)。序列的每一个位置又可以看作是一个时刻。</p><p><strong>区分——马尔可夫网络、马尔可夫模型、马尔可夫过程、贝叶斯网络</strong><br>将随机变量作为结点，若两个随机变量相关或者不独立，则将二者连接一条边；若给定若干随机变量，则形成一个有向图，即构成一个<code>网络</code>。<br>如果该网络是有向无环图，则这个网络称为<code>贝叶斯网络</code>。<br>如果这个图退化成线性链的方式，则得到马尔可夫模型；因为每个结点都是随机变量，将其看成各个时刻(或空间)的相关变化，以随机过程的视角，则可以看成是<code>马尔可夫过程</code>。<br>若上述网络是无向的，则是无向图模型，又称<code>马尔可夫随机场</code>或者<code>马尔可夫网络</code>。<br>如果在给定某些条件的前提下，研究这个马尔可夫随机场，则得到<code>条件随机场</code>。<br>如果使用条件随机场解决标注问题，并且进一步将条件随机场中的网络拓扑变成线性的，则得到<code>线性链条件随机场</code>。</p><img width="70%" src="https://i.loli.net/2020/03/25/b5IxdG8yp4LZJA2.jpg" alt="HMM等概念区别"><ol><li>给定模型，如何有效计算产生观测序列的概率？换言之，如何评估模型与观测序列之间的匹配程度？<br>——向前算法(Forward Algorithm)、向后算法(Backward Algorithm)</li><li>给定模型和观测序列，如何找到与此观测序列最匹配的状态序列？换言之，如何根据观测序列推断出隐藏的模型状态？<br>——维特比算法(Viterbi Algorithm)</li><li>给定观测序列，如何调整模型参数使得该序列出现的概率最大？换言之，如何训练模型使其能最好地描述观测数据？<br>——鲍姆-韦尔奇算法(Baum-Welch Algorithm) (约等于EM算法)</li></ol><h5 id="生成模型-vs-判别模型"><a href="#生成模型-vs-判别模型" class="headerlink" title="生成模型 vs 判别模型"></a>生成模型 vs 判别模型</h5><p>本质的区别：生成模型是使用联合概率的形式p(x,y)来构造目标函数，判别模型一般是写为p(y|x)条件概率的形式</p><ol><li>生成模型：由数据学习联合概率密度分布P(X,Y),（概率密度分布函数用于采样，产生更多该数据集的数据），然后再根据贝叶斯公式P(Y|X)求出作为预测模型，即生成模型：P(Y|X)=P(X,Y)/P(X)生成模型需要无穷多的样本才可以达到理论是的预测，因为对于P(X)，需要很多的样本才可以使得其比较可靠。典型的生成模型有朴素贝叶斯，隐马尔可夫模型等。生成模型关注与数据本身，而不像判别模型，关注于最优的分类界面。生成模型还可以用于带有隐层的的模型中，此时的判别模型是无法使用的。</li><li>判别模型：由数据直接学习得到一个判别函数P(Y|X)。典型的判别模型主要有：KNN，SVM，决策树。判别模型只关注于如何分类（如何对给定的数据空间进行特征映射和区分，找到最优的分类面）。模型主要反应的是不同类别之间的差异性。判别模型直接对预测进行建模，效率高，效果比较好。</li></ol><h5 id="EM算法、HMM、CRF的比较"><a href="#EM算法、HMM、CRF的比较" class="headerlink" title="EM算法、HMM、CRF的比较"></a>EM算法、HMM、CRF的比较</h5><p><code>EM算法</code>是用于含有隐变量模型的极大似然估计或者极大后验估计，有两步组成：1)求期望（expectation）；2)求极大值（maxmization）。本质上EM算法还是一个迭代算法，通过不断用上一代参数对隐变量的估计来对当前变量进行计算，直到收敛。注意：EM算法是对初值敏感的，而且EM是不断求解下界的极大化逼近求解对数似然函数的极大化的算法，也就是说EM算法不能保证找到全局最优值。</p><p><code>隐马尔可夫模型</code>是用于标注问题的生成模型。有几个参数（π，A，B）：初始状态概率向量π，状态转移矩阵A，观测概率矩阵B。称为马尔科夫模型的三要素。马尔科夫三个基本问题：<br>1、<strong>概率计算问题</strong>：给定模型和观测序列，计算模型下观测序列输出的概率。-&gt;<code>前向后向算法</code><br>2、<strong>学习问题</strong>：已知观测序列，估计模型参数，即用极大似然估计来估计参数。-&gt;<code>Baum-Welch</code>(也就是EM算法)和极大似然估计。<br>3、<strong>预测问题</strong>：已知模型和观测序列，求解对应的状态序列。-&gt;<code>近似算法（贪心算法）和维比特算法</code>（动态规划求最优路径）</p><p><code>条件随机场CRF</code>，给定一组输入随机变量的条件下另一组输出随机变量的条件概率分布密度。条件随机场假设输出变量构成马尔科夫随机场，而我们平时看到的大多是线性链条随机场，也就是由输入对输出进行预测的判别模型。求解方法为极大似然估计或正则化的极大似然估计。</p><p>之所以总把HMM和CRF进行比较，主要是因为CRF和HMM都利用了图的知识，但是CRF利用的是马尔科夫随机场（无向图），而HMM的基础是贝叶斯网络（有向图）。而且CRF也有：概率计算问题、学习问题和预测问题。大致计算方法和HMM类似，只不过不需要EM算法进行学习问题。</p><p><code>HMM和CRF对比</code>，其根本还是在于基本的理念不同，一个是生成模型，一个是判别模型，这也就导致了求解方式的不同。</p><h5 id="HMM参数含义"><a href="#HMM参数含义" class="headerlink" title="HMM参数含义"></a>HMM参数含义</h5><p>三大参数：<code>{A,B,π}</code>（π是数学中的圆周率PI），括号里的三个变量称为隐马尔可夫模型的三要素。加上一个具体的状态集合Q和观测序列V，则构成了HMM的五元组。</p><p>状态转移概率矩阵<code>A</code>与初始状态概率向量<code>π</code>确定了隐藏的马尔可夫链，生成不可观测的状态序列。观测概率矩阵<code>B</code>确定了如何从状态生成观测，与状态序列综合确定了如何产生观测序列。<br>从定义可知，隐马尔可夫模型作了两个基本假设：<br>(1)齐次马尔可夫性假设，即假设隐藏的马尔可夫链在任意时刻t的状态只依赖于其前一时刻的状态，与其他时刻的状态及观测无关。<br>(2)观测独立性假设，即假设任意时刻的观测只依赖于该时刻的马尔可夫链的状态，与其他观测及状态无关。</p><img width="60%" src="https://i.loli.net/2020/03/24/M5wWB41rdexCZ3o.jpg" alt="HMM参数"><h5 id="如何寻找最好的Z"><a href="#如何寻找最好的Z" class="headerlink" title="如何寻找最好的Z"></a>如何寻找最好的Z</h5><img width="60%" src="https://i.loli.net/2020/03/24/Wq9GAhPxlNLUH4s.jpg" alt="寻找最好的Z"><h5 id="相关算法"><a href="#相关算法" class="headerlink" title="相关算法"></a>相关算法</h5><ul><li>F/B算法：给定任何一个时间k，能计算出Zk属于某一个具体状态的概率的多少</li><li>Forward算法：给定1-k时刻所有x的值，得到隐变量Zk的值</li><li>Backward算法：给定Zk，求出下一时刻X(k+1)的值</li></ul><img width="100%" src="https://i.loli.net/2020/03/24/M4DBICx9nz7LuPa.jpg" alt="相关算法"><h5 id="如何计算三大参数"><a href="#如何计算三大参数" class="headerlink" title="如何计算三大参数"></a>如何计算三大参数</h5><img width="50%" src="https://i.loli.net/2020/03/24/VUt2E8bqDZJg1zQ.jpg" alt="参数求解1"><img width="100%" src="https://i.loli.net/2020/03/25/cJGAVw3gyXpRuEi.jpg" alt="参数求解2"><img width="100%" src="https://i.loli.net/2020/03/24/vYWyflk58AwnqEU.jpg" alt="参数求解3"><h4 id="隐变量模型"><a href="#隐变量模型" class="headerlink" title="隐变量模型"></a>隐变量模型</h4><h5 id="SVD"><a href="#SVD" class="headerlink" title="SVD"></a>SVD</h5><p>在物品推荐系统中，<br>1）随着人和物品的增加，系统的推荐效果并不是线性增加的<br>2）矩阵中元素稀疏，在计算过程中，随机的增减一个维度，对结果影响很大<br>为了解决上面的问题，于是就有人发明了<code>矩阵分解</code>的方法：<br>假设用户物品的评分矩阵 A 是 m 乘以 n 维，即一共有 m 个用户，n 个物品。我们选一个相对 m 和 n 很小的数 k，通过一套算法得到两个矩阵 U 和 V，矩阵 U 的维度是 m 乘以 k，矩阵 V 的维度是 n 乘以 k。</p><h5 id="FM"><a href="#FM" class="headerlink" title="FM"></a>FM</h5><p>上面这种方法的问题是：我们无法对用户和物品显性特征的建模，譬如我们已经得到了用户的用户画像，或者物品的物品画像，但是我们不能融合进入我们的模型，我们如果要对这些显性特征进行建模的话，一个可行的方案就是逻辑回归，于是有人就对矩阵分解和逻辑回归进行了结合，提出了”分解机”的模型.</p><p>分解机FM的<code>基本原理</code>是：不仅对显性变量建模，而且对显性变量之间的关系进行建模，在对显性变量关系建模的过程中使用了隐变量的方法。</p><p>另外分解机的一个优势是可以部分解决冷启动问题，因为即使没有用户的反馈数据，我们也能够通过显性变量来预测出一个评分来,更多的关于FM的资料可以看我之前的文章CTR 预估之 FM。</p><h4 id="EM算法"><a href="#EM算法" class="headerlink" title="EM算法"></a>EM算法</h4><p><code>期望极大算法</code>(expectation maximization algorithm)，简称<code>EM算法</code>，是一种迭代算法，可以用于含义隐变量(hidden variable) 的概率模型参数的极大似然估计，或极大后验概率估计.</p><p>假设训练集 <code>{x^(1),x^(2),...,x^(m)}</code>是由m个独立的无标记样本构成。我们有这个训练集的概率分布模型 <code>p(x,z;θ)</code> ，但是我们只能观察到 x 。我们需要使参数 θ 的对数似然性最大化，即：</p><img width="40%" src="https://i.loli.net/2020/03/25/5hIdumScX4TJHtk.jpg" alt="EM"><p>具体来说，我们需要每次为函数<code>log P(x;θ)</code>上的点<code>θ</code>，找到一个凹函数<code>g(θ) &lt;=P(x;θ)</code>， 每次取 g(θ) 的最大值点为下一个 θ，迭代直到目标函数 <code>logP(x;θ)</code>达到局部最大值.</p><img width="40%" src="https://i.loli.net/2020/03/25/4V6YnvTFdoz5wXa.jpg" alt="EM2"><h4 id="k-means算法"><a href="#k-means算法" class="headerlink" title="k-means算法"></a>k-means算法</h4><p>根据给定的K值和K个初始质心将样本中每个点都分到距离最近的类簇中，当所有点分配完后根据每个类簇的所有点重新计算质心，一般是通过平均值计算，然后再将每个点分到距离最近的新类簇中，不断循环此操作，直到质心不再变化或达到一定的迭代次数。数学上可以证明k-means是收敛的。</p><img width="60%" src="https://i.loli.net/2020/03/25/5zEHtFvjQcOTuYK.jpg" alt="k-means"><p>除了K-means 聚类算法外，还有其他聚类算法：Mean-Shift、DBSCAN、GMM、凝聚层次聚类</p><ul><li><strong>DBSCAN</strong>——基于密度的带噪声的空间聚类的应用</li></ul><p>有点类似于“传销”，不断发展“下线”，将周围的点纳入同一类。</p><img width="50%" src="https://i.loli.net/2020/03/25/y6mPZ3IndWJBcMk.jpg" alt="DBSCAN"><p>相较于其他聚类算法，DBSCAN 提出了一些很棒的优点。首先，它根本不需要预置集群的数量。它还将离群值认定为噪声，不像 mean-shift 中仅仅是将它们扔到一个集群里，甚至即使该数据点的差异性很大也这么做。另外，这个算法还可以很好的找到任意尺寸核任意形状的集群。</p><p>SBSCAN 最大的缺点是当集群的密度变化时，它表现的不像其他算法那样好。这是因为当密度变化时，距离的阈值 ε 和用于确定邻居点的 minPoints 也将会随之改变。这个缺点也会发生在很高为的数据中，因为距离阈值 ε 变得很难被估计。</p><ul><li><strong>GMM</strong>——基于高斯混合模型(GMM)的期望最大化（EM）聚类</li></ul><p>高斯混合模型（GMM）具有更好的灵活性比K-means。使用GMMs，我们需要假设数据点是高斯分布，相对于环形的数据而言，这个假设的严格程度与均值相比弱很多。这样的话，我们有两个参数来描述簇的形状：均值和标准差。以二维为例，意味簇可以是任何一种椭圆形（因为我们有两个标准差在x和y方向）。因此，每个高斯分布会被分配到单一的聚类簇。</p><p>为了在每个聚类簇中找到这两个高斯参数（e.g均值和标准差），我们将使用的优化算法称为expectation–maximization（EM）。请看下面的图片，以说明将高斯拟合聚类簇。然后，我们可以处理EM聚类过程使用GMM。</p><h4 id="高斯混合模型（GMM）"><a href="#高斯混合模型（GMM）" class="headerlink" title="高斯混合模型（GMM）"></a>高斯混合模型（GMM）</h4><p>高斯混合模型（Gaussian Mixture Model）通常简称GMM，是一种业界广泛使用的聚类算法，该方法使用了高斯分布作为参数模型，并使用了期望最大（Expectation Maximization，简称EM）算法进行训练。</p><p>GMM是高斯混合模型，属于<code>soft clustering</code>，而k-means是<code>hard clustering</code>，将多个高斯分布叠加在一起，拟合数据的能力更强。example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">k-means：一个人-&gt;体育</span><br><span class="line">GMM：一个人-&gt;概率分布，体育（30%），科技（50%），音乐（20%）</span><br></pre></td></tr></table></figure><p>高斯分布（Gaussian distribution）有时也被称为正态分布（normal distribution），是一种在自然界大量的存在的、最为常见的分布形式。</p><p>模型的<code>EM训练过程</code>，直观的来讲是这样：我们通过观察采样的概率值和模型概率值的接近程度，来判断一个模型是否拟合良好。然后我们通过调整模型以让新模型更适配采样的概率值。反复迭代这个过程很多次，直到两个概率值非常接近时，我们停止更新并完成模型训练。</p><p>现在我们要将这个过程用算法来实现，所使用的方法是模型生成的数据来决定似然值，即通过模型来计算数据的期望值。通过更新参数μ和σ来让期望值最大化。这个过程可以不断迭代直到两次迭代中生成的参数变化非常小为止。该过程和k-means的算法训练过程很相似（k-means不断更新类中心来让结果最大化），只不过在这里的高斯模型中，我们需要同时更新两个参数：分布的均值和标准差。</p><p><strong>高斯混合模型是对高斯模型进行简单的扩展，GMM使用多个高斯分布的组合来刻画数据分布。</strong></p><img width="60%" src="https://i.loli.net/2020/03/25/zyU6rQ9qwuvjgl2.jpg" alt="GMM"><p><code>K-means算法可以被视为高斯混合模型（GMM）的一种特殊形式。</code>整体上看，高斯混合模型能提供更强的描述能力，因为聚类时数据点的从属关系不仅与近邻相关，还会依赖于类簇的形状。n维高斯分布的形状由每个类簇的协方差来决定。在协方差矩阵上添加特定的约束条件后，可能会通过GMM和k-means得到相同的结果。</p><p>整体来看，所有无监督机器学习算法都遵循一条简单的模式：给定一系列数据，训练出一个能描述这些数据规律的模型（并期望潜在过程能生成数据）。训练过程通常要反复迭代，直到无法再优化参数获得更贴合数据的模型为止。</p><h4 id="条件随机场（CRF）"><a href="#条件随机场（CRF）" class="headerlink" title="条件随机场（CRF）"></a>条件随机场（CRF）</h4><p>Log-Linear Model for Sequential Data</p><p><code>CRF即条件随机场</code>（Conditional Random Fields），是在给定一组输入随机变量条件下另外一组输出随机变量的条件概率分布模型，它是一种判别式的概率无向图模型，既然是判别式，那就是对条件概率分布建模。<br>CRF较多用在自然语言处理和图像处理领域，在NLP中，它是用于标注和划分序列数据的概率化模型，根据CRF的定义，相对序列就是给定观测序列X和输出序列Y，然后通过定义条件概率<code>P(Y|X)</code>来描述模型。<br><code>CRF的输出随机变量假设是一个无向图模型或者马尔科夫随机场，而输入随机变量作为条件不假设为马尔科夫随机场</code>，CRF的图模型结构理论上可以任意给定，但我们常见的是定义在线性链上的特殊的条件随机场，称为线性链条件随机场。</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP系列4：NLP核心任务</title>
      <link href="/2020/05/02/NLP-04/"/>
      <url>/2020/05/02/NLP-04/</url>
      
        <content type="html"><![CDATA[<p>核心内容：文本摘要、命名实体识别、关系抽取、实体消歧、实体统一、指代消解、句法分析、CKY算法</p><a id="more"></a><p><a href="https://iloveyou11.github.io/2020/03/22/NLP-01/" target="_blank" rel="noopener">NLP系列1：NLP简介</a><br>[NLP系列2：分词与文本表示](<a href="https://iloveyou11.github.io/2020/04/02/NLP-02/" target="_blank" rel="noopener">https://iloveyou11.github.io/2020/04/02/NLP-02/</a><br><a href="https://iloveyou11.github.io/2020/04/21/NLP-03/" target="_blank" rel="noopener">NLP系列3：语言系统与NLP基础</a><br><a href="https://iloveyou11.github.io/2020/05/02/NLP-04/" target="_blank" rel="noopener">NLP系列4：NLP核心任务</a><br><a href="https://iloveyou11.github.io/2020/05/10/NLP-05/" target="_blank" rel="noopener">NLP系列5：重要模型与算法</a><br><a href="https://iloveyou11.github.io/2020/05/20/NLP-06/" target="_blank" rel="noopener">NLP系列6：词向量与文本生成</a></p><p>本系列内容：</p><img width="60%" src="https://i.loli.net/2020/03/24/ctd87JmD9RPTUq4.jpg" alt="系列4知识点"><h4 id="文本摘要"><a href="#文本摘要" class="headerlink" title="文本摘要"></a>文本摘要</h4><ol><li>抽取式文本摘要<br>从文档中抽取其中一句话或者几句话构成摘要。</li><li>生成式文本摘要<br>因为生成式文本摘要是一个端到端的过程，这种技术方案，近似于翻译任务和对话任务，从而可以吸收、借鉴翻译任务和对话任务的成过经验。<br>主要方法有：</li></ol><ul><li>早期的LSTM</li><li>早期的seq2seq</li><li>seq2seq+attention模型</li><li>self-attention和transform</li><li>预训练+微调，如Bert与xlnet</li></ul><h4 id="命名实体识别（NER）"><a href="#命名实体识别（NER）" class="headerlink" title="命名实体识别（NER）"></a>命名实体识别（NER）</h4><p>识别实体名称，如产品名、任命、公司名、组织名、机构名、学名等等</p><p>NER方法：</p><ul><li>利用规则（比如正则匹配)</li><li>投票模型</li><li>利用分类模型（如时序模型：逻辑回归、SVM……时序模型：HMM、CRF、LSTM-CRF……）</li></ul><h4 id="关系抽取"><a href="#关系抽取" class="headerlink" title="关系抽取"></a>关系抽取</h4><p>方法有：</p><ul><li>基于规则</li><li>监督学习</li><li>bootstrap（原始）</li><li>bootstrap（snowball）</li><li>distant supervision</li><li>无监督学习</li></ul><h5 id="bootstrap算法"><a href="#bootstrap算法" class="headerlink" title="bootstrap算法"></a>bootstrap算法</h5><p>bootstrap算法：“生成规则-生成tuple-生成规则-生成tuple”……迭代</p><img width="60%" src="https://i.loli.net/2020/03/24/2vM8jmxgluOXybi.jpg" alt="bootstrap"><p>bootstrap算法缺点：error accumulation（准确率不断下降）</p><img width="40%" src="https://i.loli.net/2020/03/24/Xb15FAvrT64o9sK.jpg" alt="bootstrap缺点"><h5 id="snowball算法"><a href="#snowball算法" class="headerlink" title="snowball算法"></a>snowball算法</h5><p>在1）生成规则 2）生成tuple的基础上加了两步：3）评估规则准确率，过滤 4）评估tuple准确率，过滤</p><p>bootstrap是精准匹配，snowball是近似匹配</p><img width="80%" src="https://i.loli.net/2020/03/24/TbWa6Gi3oCdM2wF.jpg" alt="snowball1"><img width="80%" src="https://i.loli.net/2020/03/24/ug7yz5xT3fLhEJs.jpg" alt="snowball2"><img width="80%" src="https://i.loli.net/2020/03/24/KVJ9qkF8pocTI3t.jpg" alt="snowball3"><h4 id="实体消歧"><a href="#实体消歧" class="headerlink" title="实体消歧"></a>实体消歧</h4><p>同一单词或词语，在不同的上下文中，可能有不同的含义。</p><h4 id="实体统一"><a href="#实体统一" class="headerlink" title="实体统一"></a>实体统一</h4><p>如何判断两个对象属于同一个实体？<br>方法：</p><ol><li>基于规则</li><li>监督学习</li><li>基于图的实体统一</li></ol><h4 id="指代消解"><a href="#指代消解" class="headerlink" title="指代消解"></a>指代消解</h4><p>他她它代表谁？代表哪个实体？还没有被解决的核心问题</p><h4 id="句法分析"><a href="#句法分析" class="headerlink" title="句法分析"></a>句法分析</h4><h5 id="CKY算法"><a href="#CKY算法" class="headerlink" title="CKY算法"></a>CKY算法</h5><p>CKY算法是一种使用动态规划对<code>上下文无关文法（CFG）</code>进行<code>语法分析（parsing）</code>的算法。</p><img width="50%" src="https://i.loli.net/2020/03/24/Xty6sNZ3CnIRfjh.jpg" alt="CKY">]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP系列3：语言系统与NLP基础</title>
      <link href="/2020/04/21/NLP-03/"/>
      <url>/2020/04/21/NLP-03/</url>
      
        <content type="html"><![CDATA[<p>核心内容：专家系统、基于概率的系统、正则项、正则项的运用、正则参数搜索策略、MLE/MAP、lasso、set-coverage、SVM</p><a id="more"></a><p><a href="https://iloveyou11.github.io/2020/03/22/NLP-01/" target="_blank" rel="noopener">NLP系列1：NLP简介</a><br>[NLP系列2：分词与文本表示](<a href="https://iloveyou11.github.io/2020/04/02/NLP-02/" target="_blank" rel="noopener">https://iloveyou11.github.io/2020/04/02/NLP-02/</a><br><a href="https://iloveyou11.github.io/2020/04/21/NLP-03/" target="_blank" rel="noopener">NLP系列3：语言系统与NLP基础</a><br><a href="https://iloveyou11.github.io/2020/05/02/NLP-04/" target="_blank" rel="noopener">NLP系列4：NLP核心任务</a><br><a href="https://iloveyou11.github.io/2020/05/10/NLP-05/" target="_blank" rel="noopener">NLP系列5：重要模型与算法</a><br><a href="https://iloveyou11.github.io/2020/05/20/NLP-06/" target="_blank" rel="noopener">NLP系列6：词向量与文本生成</a></p><h4 id="专家系统"><a href="#专家系统" class="headerlink" title="专家系统"></a>专家系统</h4><p><strong>专家系统=推理引擎+知识</strong>，利用知识和推理来解决决策问题<br>专家系统与基于概率的系统的区别：</p><ol><li><p>专家系统适合于没有数据源或数据源很少的情况，根据专家的经验拟定一条条规则进行匹配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if condition1:</span><br><span class="line">do something1</span><br><span class="line">else if condition12</span><br><span class="line">do something2</span><br><span class="line">else if ...</span><br></pre></td></tr></table></figure></li><li><p>基于概率的系统是根据给定的数据D={X,Y}，学习x到y的映射关系，通常适用于有大量数据源的情况</p></li></ol><p>基本流程如下：<br><img width="70%" src="https://i.loli.net/2020/03/24/l2oDvsh93ZQbF7G.jpg" alt="专家系统"></p><h4 id="基于概率的系统"><a href="#基于概率的系统" class="headerlink" title="基于概率的系统"></a>基于概率的系统</h4><p>使用机器学习方法解决问题</p><p><strong>监督学习常用方法：</strong></p><ul><li>线性回归</li><li>逻辑回归</li><li>朴素贝叶斯</li><li>神经网络</li><li>SVM</li><li>随机森林</li><li>Adaboost</li><li>CNN</li></ul><p><strong>非监督学习常用方法：</strong></p><ul><li>k-means（聚类）</li><li>PCA（主成分分析）</li><li>ICA</li><li>MF（矩阵分解）</li><li>LSA（latent semantic analysis）</li><li>LDA（latent Dirichlet analysis）</li></ul><h4 id="正则项"><a href="#正则项" class="headerlink" title="正则项"></a>正则项</h4><ul><li>L0：一般不用</li><li>L1：sparse参数，会将一些参数变为0，稀疏参数（相当于激活部分神经元）</li><li>L2：减小参数，但不会减为0</li></ul><p>关于模型：</p><ul><li>好的模型拥有高的泛化能力</li><li>越复杂的模型越容易过拟合</li><li>添加正则项是防止过拟合的一种手段，其他还有dropout、early-stopping等等</li><li>L1正则会带来稀疏特性</li><li>选择超参数时使用交叉验证</li><li>参数搜索过程最耗费资源</li></ul><h4 id="关于正则项的灵活应用"><a href="#关于正则项的灵活应用" class="headerlink" title="关于正则项的灵活应用"></a>关于正则项的灵活应用</h4><ol><li>场景：模拟大脑（某一个区域只有少部分神经元被激活，在空间上相邻的神经元作用类似）</li></ol><img width="60%" src="https://i.loli.net/2020/03/24/4aM9FzKUIkf2Qyq.jpg" alt="正则场景1"><ol start="2"><li>场景：动态推荐系统（U/V矩阵参数不能过大，而且相近时间用户特征和商品特征不会改变太大）</li></ol><img width="60%" src="https://i.loli.net/2020/03/24/NQPwGg37RjSTEA4.jpg" alt="正则场景2"><h4 id="参数搜索策略"><a href="#参数搜索策略" class="headerlink" title="参数搜索策略"></a>参数搜索策略</h4><p>如何选择正则项中的超参数<code>λ</code>呢？</p><ol start="0"><li>grid search</li></ol><img width="50%" src="https://i.loli.net/2020/03/24/LrgJGIixyaWVPE5.jpg" alt="grid search"><ol><li>随机搜索<br>λ1区间[a,b]，λ2区间[c,d]，随机抽取值</li><li>遗传算法<br>尽量往好的方向去搜索，抛弃不太好的区间（好的个体更倾向于产生的个体）。<br>尝试λ效果不错的话，不断产生子枝，生成与原来λ有关的新λ，池虚繁殖后代，如果表现不好就直接舍弃</li><li>贝叶斯优化<br>不断调整先验，使后验概率不断变化，和遗传算法核心思想类似，但是采用的手段不同</li></ol><h4 id="MLE-MAP"><a href="#MLE-MAP" class="headerlink" title="MLE/MAP"></a>MLE/MAP</h4><p><strong>MLE：</strong>最大似然估计（仅仅考虑数据本身）<br><strong>MAP：</strong>最大后验估计（需要考虑先验知识）</p><p>MLE与MAP的直观理解：<br>1、MLE（最大似然估计）：扔硬币，仅仅通过观测值2/3来预测正/反面向上的概率<br>2、MAP（最大后验估计）：扔硬币，仍然会得到观测值2/3，但拥有这个硬币的主人告诉我，出现正面的概率大概是80%，会与我的观测值2/3出现偏差（可能我观测到的样本不够多），这时计算正/反面向上的概率应结合先验概率（主人的想法）为66.7%~80%之间</p><p>随着样本数杨的增大，先验所起到的作用会越来越小。当样本数N趋近于无穷大时，MAP的解趋近于MLE的解。</p><p><code>adding prior is equivalent to regularization！</code><br><code>Gaussian Prior is L2 regularization</code>——高斯先验相当于加了L2正则项</p><img src="https://i.loli.net/2020/07/17/wxysWkM3ESdbqKY.png" alt="L2" width="80%"><p><code>Laplace Prior is L1 regularization</code>——拉普拉斯先验相当于加了L1正则项</p><img src="https://i.loli.net/2020/07/17/Z1ncrgqLazU5sHM.png" alt="L1" width="80%"><h4 id="lasso"><a href="#lasso" class="headerlink" title="lasso"></a>lasso</h4><p><strong>特征选择策略：</strong></p><ol><li>exhausted search：考虑所有可能的特征组合，评估各自准确率</li><li>greedy approach：贪心算法，前向或后向选择特征，计算组合特征的准确率</li><li>via regularization：lasso算法，通过目标函数的方法构建特征组合，包括L1、L2正则</li></ol><p><strong>为什么偏向于稀疏特征？</strong></p><ol><li>如果维度太高，计算量也变得很高</li><li>在稀疏性条件下，计算量只依赖于非0项的个数</li><li>提高可解释性</li></ol><p>使用L1正则化稀疏变量，但是存在导数不存在的点，使用SGD不容易进行梯度下降。L1正则的导数不是连续的，需要使用<code>coordinate descent</code>进行梯度下降：核心思想是，先固定其他w，只调整一个维度的w寻找最优解，依次找到各个维度w的最优解。lasso objective一定会收敛。</p><p>怎么选择下一个coordinate ？</p><ol><li>依次选择dimension</li><li>random select</li></ol><h4 id="set-coverage-problem"><a href="#set-coverage-problem" class="headerlink" title="set-coverage problem"></a>set-coverage problem</h4><p>问题描述：</p><img width="60%" src="https://i.loli.net/2020/03/24/FiHomXwWTuxqYfd.jpg" alt="set-coverage"><p>方法：</p><ol><li>穷举（最笨的方法，但是可以求解）</li><li>贪心算法（并不能保证找到的就是最优解）</li><li>最优化</li></ol><img width="100%" src="https://i.loli.net/2020/03/24/7ZxLw4ldUJKfchr.jpg" alt="set-coverage-solution"><h4 id="SVM"><a href="#SVM" class="headerlink" title="SVM"></a>SVM</h4><img style="display:block" width="40%" src="https://i.loli.net/2020/03/24/4w97WlatRuHb85G.jpg" alt="SVM"><img width="40%" src="https://i.loli.net/2020/03/24/gDfd3BVZvr68kQX.jpg" alt="SVM目标函数"><ul><li><p>什么是KKT条件？（等式条件、不等式条件）<br>我们之前学习过，针对满足等式条件的最优解问题，采用Lagrange乘子法解决，而需要满足不等式条件或不等式、等式组合条件的称为KKT条件</p></li><li><p>什么是Primal-Dual Problem？<br><a href="https://blog.csdn.net/zuzhiang/article/details/103293545" target="_blank" rel="noopener">优化方法：原问题和拉格朗日对偶问题（primal-dual）</a></p></li><li><p>什么是kernal trick？<br>将原来的特征映射到更高维度的空间中，使其更容易分类，但是计算量不会随之增加。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP系列2：分词与文本表示</title>
      <link href="/2020/04/02/NLP-02/"/>
      <url>/2020/04/02/NLP-02/</url>
      
        <content type="html"><![CDATA[<p>核心内容：中文分词、拼写错误纠正、停用词过滤、stemming操作、文本表示、文本相似度计算、倒排表、语言模型LM、masked LM、平滑算法</p><a id="more"></a><p><a href="https://iloveyou11.github.io/2020/03/22/NLP-01/" target="_blank" rel="noopener">NLP系列1：NLP简介</a><br>[NLP系列2：分词与文本表示](<a href="https://iloveyou11.github.io/2020/04/02/NLP-02/" target="_blank" rel="noopener">https://iloveyou11.github.io/2020/04/02/NLP-02/</a><br><a href="https://iloveyou11.github.io/2020/04/21/NLP-03/" target="_blank" rel="noopener">NLP系列3：语言系统与NLP基础</a><br><a href="https://iloveyou11.github.io/2020/05/02/NLP-04/" target="_blank" rel="noopener">NLP系列4：NLP核心任务</a><br><a href="https://iloveyou11.github.io/2020/05/10/NLP-05/" target="_blank" rel="noopener">NLP系列5：重要模型与算法</a><br><a href="https://iloveyou11.github.io/2020/05/20/NLP-06/" target="_blank" rel="noopener">NLP系列6：词向量与文本生成</a></p><p>以下是NLP相关模型的发展历程：</p><img src="https://i.loli.net/2020/07/16/kCRwasGEUoS8qzK.png" alt="NLP模型发展" width="80%"><h4 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h4><ol><li>最大匹配算法（贪心算法）<br>包括前向最大匹配和后向最大匹配，缺点是不能考虑语义，可能是局部最优</li><li>考虑语义<br>基本思想：根据输入的句子，生成所有可能的分割，根据LM（语言模型，用来评估句子的合理程度，后面会讲到）选择其中最好的分割方式，但是效率低下。</li><li>维特比算法</li></ol><p><strong>如何解决效率问题？</strong><br>——根据词典概率，构建连接图，使用DP动态规划</p><img width="70%" src="https://i.loli.net/2020/03/24/wEi7GCpbOzsnx38.jpg" alt="维特比算法"><p>核心问题变为：如何找到最短的路径</p><p><strong>总结：</strong></p><ol><li>基于匹配规则的方法（max-matching）</li><li>基于概率的方法（LM,HMM,CRF）</li><li>分词可以认为是已经解决的问题，基本不会涉及到重新设计分词，可能会根据业务需求有小的修改</li></ol><h4 id="拼写错误纠正"><a href="#拼写错误纠正" class="headerlink" title="拼写错误纠正"></a>拼写错误纠正</h4><ol><li>计算出与用户输入单词编辑距离为1、2的所有单词，过滤掉无用单词；</li><li>使用贝叶斯算法计算p，<code>p(s|c)=p(c|s)*p(c)/p(s)</code>，p(s)是定值，只需求出<code>p(c|s)*p(c)</code>的最大值即可</li></ol><img width="50%" src="https://i.loli.net/2020/03/24/iHqoPMawrx7Ehd8.jpg" alt="拼写错误纠正1"><p><strong>为什么选择编辑距离为1、2的字符串？</strong><br>因为这样可以覆盖99%以上的场景。<br><strong>如何选择？</strong></p><img width="60%" src="https://i.loli.net/2020/03/24/6wJX5nP7zlx9MoL.jpg" alt="拼写错误纠正2"><p><strong>最小编辑距离算法是怎么样的？</strong><br>最小编辑距离是指一个单词通过新增、替换、删除三种操作方法，变为另一个单词的最小操作数。使用DP动态规划解决，算法如下：</p><img width="60%" src="https://i.loli.net/2020/03/24/YErL8jTKQIHk95w.jpg" alt="最小编辑距离"><h4 id="停用词过滤、stemming"><a href="#停用词过滤、stemming" class="headerlink" title="停用词过滤、stemming"></a>停用词过滤、stemming</h4><p>停用词过滤：去掉停用词——出现频率很低、不重要的词汇<br>stemming：标准化操作，将不同状态的词转化为统一状态，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">went,go,going-&gt;go</span><br><span class="line">fly,flies-&gt;fli</span><br><span class="line">fast,faster,fastest-&gt;fast</span><br></pre></td></tr></table></figure><p>Porter Stemmer:</p><img width="60%" src="https://i.loli.net/2020/03/24/A2sqw457hxynt1K.jpg" alt="stemmer"><p>Stemmer的操作要依赖于语言学家的经验</p><h4 id="文本表示"><a href="#文本表示" class="headerlink" title="文本表示"></a>文本表示</h4><ol><li><strong>one-hot表示法</strong><br>one-hot有以下三种形式</li></ol><ul><li>boolean-based representation（考虑是否出现，出现是1，否则是0）</li><li>count-based representation（考虑单词的计数）</li><li>tfidf-based representation（考虑了单词重要性，不是出现次数越多代表越重要！不是出现次数越少代表越不重要！）</li></ul><p><strong>tf-idf</strong>的计算公式为： <code>tfidf(w)=tf(d,w)*idf(w)</code>，其中<code>tf(d,w)</code>表示文档d中w单词出现的词频，<code>idf(w)</code>表示单词的重要性，<code>idf(w)=log(N/N(w))</code><br>其中，TF是指计算词的词频，即某一个词出现在文本中的频率，注意需要进行归一化处理；IDF是指逆向文件频率，是一个词普遍重要性的度量。</p><ol start="2"><li><strong>词向量表示法</strong>（考虑了单词的语义）<br>使用词向量word vector表示单词，称为分布式表示法。常见的深度学习模型有<code>skip-gram</code>、<code>glove</code>(global vectors for word representation)、<code>CBow</code>、<code>RNN/LSTM</code>、<code>MF</code>（矩阵分解）……</li></ol><img width="60%" src="https://i.loli.net/2020/03/24/1nK8ShFtClQ9mE3.png" alt="词向量可视化"><p>使用深度学习训练词向量模型，很多大公司利用丰富的语料库已经训练好了词向量，我们需要知道有哪些词向量模型，并加以利用。但是如果我们像用于特定的使用场景，如金融、医疗、法律等等，我们需要特殊的语料库并自己训练模型。<br>词向量可以代表单词的含义。</p><h4 id="文本相似度计算"><a href="#文本相似度计算" class="headerlink" title="文本相似度计算"></a>文本相似度计算</h4><ol><li>欧氏距离</li><li>余弦相似度</li></ol><h4 id="倒排表"><a href="#倒排表" class="headerlink" title="倒排表"></a>倒排表</h4><p>问答系统需要进性相似度匹配，然后返回相似度最高的。时间复杂度为<code>o(n)*o(相似度计算)</code>，非常大，完全不能满足时间的要求。</p><p>使用“层次过滤”思想，给定输入，先抛掉最不可能是答案的样本，再抛掉最不可能是答案的样本……一直到最后剩下的样本量就不大了，再计算相似度即可（余弦相似度）。过滤器的时间复杂度是层层递增的。</p><img width="60%" src="https://i.loli.net/2020/03/24/UOtBQIfdwMDNJnq.jpg" alt="倒排表"><p>过滤器如何实现呢？需要引入倒排表：<br><strong>倒排表（Inverted Index）</strong>：有一个完整的词典库，分别记录每个单词出现在哪些文档中，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我们：[Doc1，Doc13]</span><br><span class="line">昨天：[Doc2]</span><br><span class="line">在：[Doc1，Doc4，Doc5]</span><br><span class="line">运动：[Doc1，Doc3，Doc5]</span><br><span class="line">什么：[Doc1，Doc6]</span><br></pre></td></tr></table></figure><p>这样可以快速找到哪个单词出现在哪个文档中（否则根据单词一个个去搜索文档时间复杂度非常高）</p><h4 id="语言模型LM"><a href="#语言模型LM" class="headerlink" title="语言模型LM"></a>语言模型LM</h4><p>是否一句话从语法上通顺<br>unigram<br><code>p(w1,w2,w3,w4,w5)=p(w1)+p(w2)+p(w3)+p(w4)+p(w5)</code><br>bigram:<br><code>p(w1,w2,w3,w4,w5)= p(w1)+p(w2|w1)+p(w3|w2)+p(w4|w3)+p(w5|w4)</code><br>trigram:<br><code>p(w1,w2,w3,w4,w5)= p(w1)+p(w2|w1)+p(w3|w1w2)+p(w4|w2w3)+p(w5|w3w4)</code><br>依此类推可得n-gram</p><p>N-Gram语言模型的评价方法：</p><ol><li>实用方法<br>通过查看该模型在实际应用中（如拼写检查、机器翻译）中的标显来评价，非常直观实用，但是缺乏针对性、不够客观</li><li>理论方法<br>perplexity（迷惑度）计算，基本思想是给测试集赋予较高概率值的语言模型较好</li></ol><p>评价LM的质量（计算perplexity）：<br><code>perplexity=2^(-x)   x是最大似然估计</code></p><img width="70%" src="https://i.loli.net/2020/03/24/rkECxu3j9W6UPKO.jpg" alt="perplexity"><p>perplexity（衡量语言模型的好坏）计算方法：<code>perplexity=2*(-x)</code>，perplexity越小越好。<br>每个likelihood都要计算（后一个词相对前一个词出现的概率），然后分别求对数，再求解平均值，即可得到x。</p><p>例如，训练的三个模型unigram、bigram、trigram，perplexity分别为300、200、100，可知此次训练的trigram模型最好。</p><h4 id="masked-LM"><a href="#masked-LM" class="headerlink" title="masked LM"></a>masked LM</h4><p>把部分单词“挖掉”，再来做预测（增加噪声，提高模型稳定性）</p><h4 id="平滑算法"><a href="#平滑算法" class="headerlink" title="平滑算法"></a>平滑算法</h4><p>解决的问题：有些单词会未存在语料库中（新单词），如何评判它的重要程度？</p><ol><li>add-one smoothing</li><li>add-k smoothing</li><li>interpolation</li><li>good-turning smoothing（考虑了新的单词）<br>算法具体计算方法如下：</li></ol><img width="100%" src="https://i.loli.net/2020/03/24/9EfpiKge6r3mxZF.jpg" alt="平滑算法"><p>其中，<code>add-k smoothing</code>的分母加V是为了确保概率和为1，<code>interpolation</code>是使用unigram、bigram、trigram分别做加权平均，<code>good-turning smoothing</code>方法存在一个问题，就是Nc有数据，但Nc依赖于Nc+1，而Nc+1可能不存在（仅出现过c+1次的单词不存在），这时应该采用曲线拟合来解决。<br><strong>思考：</strong>为什么这些算法会成立呢？</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP系列1：NLP简介</title>
      <link href="/2020/03/22/NLP-01/"/>
      <url>/2020/03/22/NLP-01/</url>
      
        <content type="html"><![CDATA[<p>核心内容：NLP简介、应用场景、关键技术、研究难点、NLP系统举例</p><a id="more"></a><p><a href="https://iloveyou11.github.io/2020/03/22/NLP-01/" target="_blank" rel="noopener">NLP系列1：NLP简介</a><br><a href="https://iloveyou11.github.io/2020/04/02/NLP-02/" target="_blank" rel="noopener">NLP系列2：分词与文本表示</a><br><a href="https://iloveyou11.github.io/2020/04/21/NLP-03/" target="_blank" rel="noopener">NLP系列3：语言系统与NLP基础</a><br><a href="https://iloveyou11.github.io/2020/05/02/NLP-04/" target="_blank" rel="noopener">NLP系列4：NLP核心任务</a><br><a href="https://iloveyou11.github.io/2020/05/10/NLP-05/" target="_blank" rel="noopener">NLP系列5：重要模型与算法</a><br><a href="https://iloveyou11.github.io/2020/05/20/NLP-06/" target="_blank" rel="noopener">NLP系列6：词向量与文本生成</a></p><h4 id="NLP简介"><a href="#NLP简介" class="headerlink" title="NLP简介"></a>NLP简介</h4><blockquote><p><strong>自然语言处理</strong>是计算机科学领域与人工智能领域中的一个重要方向。它研究能实现人与计算机之间用自然语言进行有效通信的各种理论和方法。自然语言处理是一门融语言学、计算机科学、数学于一体的科学。因此，这一领域的研究将涉及自然语言，即人们日常使用的语言，所以它与语言学的研究有着密切的联系，但又有重要的区别。自然语言处理并不是一般地研究自然语言，而在于研制能有效地实现自然语言通信的计算机系统，特别是其中的软件系统。</p></blockquote><p><strong>NLP=NLU（理解语言意思）+NLG（根据意思生成语言）</strong></p><ol><li><strong>NLU</strong><br>NLU 是要理解给定文本的含义。本内每个单词的特性与结构需要被理解。在理解结构上，NLU 要理解自然语言中的以下几个歧义性：</li></ol><ul><li>词法歧义性：单词有多重含义</li><li>句法歧义性：语句有多重解析树</li><li>语义歧义性：句子有多重含义</li><li>回指歧义性（Anaphoric Ambiguity）：之前提到的短语或单词在后面句子中有不同的含义。</li></ul><ol start="2"><li><strong>NLG</strong><br>NLG 是从结构化数据中以可读地方式自动生成文本的过程。难以处理是自然语言生成的主要问题。<br>自然语言生成可被分为三个阶段：</li></ol><ul><li>文本规划：完成结构化数据中基础内容的规划。</li><li>语句规划：从结构化数据中组合语句，来表达信息流。</li><li>实现：产生语法通顺的语句来表达文本。</li></ul><p><strong>相关论文：</strong></p><ol><li>顶级会议论文</li></ol><ul><li>机器学习顶级会议：NIPS,ICML,UAI,AISTATS，期刊：JMLR,ML,Trends inML,IEEE T-NN</li><li>计算机视觉和图像识别：ICCV,CVPR,ECCV，期刊：IEEE T-PAMI,IJCV,IEEE T-IP</li><li>人工智能：IJCAI,AAAI，期刊：AI</li></ul><ol start="2"><li>搜索引擎</li></ol><ul><li>百度学术、谷歌学术、知乎、谷歌、bing</li></ul><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>文本朗读（Text to speech）/语音合成（Speech synthesis）</li><li>语音识别（Speech recognition）</li><li>中文自动分词（Chinese word segmentation）</li><li>词性标注（Part-of-speech tagging）</li><li>句法分析（Parsing）</li><li>自然语言生成（Natural language generation）</li><li>文本分类（Text categorization）</li><li>信息检索（Information retrieval）</li><li>信息抽取（Information extraction）</li><li>文字校对（Text-proofing）</li><li>问答系统（Question answering）</li><li>机器翻译（Machine translation）</li><li>自动摘要（Automatic summarization）</li><li>文字蕴涵（Textual entailment）</li><li>情感分析（Emotion Analysis）</li><li>聊天机器人（Chatbot）</li></ul><p><strong>NLP种深度学习的常见任务：</strong></p><ul><li>神经网络：词性标记、分词、实体命名识别、目的提取……</li><li>循环神经网络：机器翻译、问答系统、图像描述、句子解析、情感分析、关系分类……</li><li>卷积神经网络：句子/文本分析、关系抽取、垃圾邮件检测、搜索词条归类、语义关系提取……</li></ul><h4 id="关键技术"><a href="#关键技术" class="headerlink" title="关键技术"></a>关键技术</h4><p>以下仅列举课程中讲到的几种算法，相关技术还要很多很多，详见以后系列博客</p><ul><li>Add-one（Laplace） Smoothing<br>加一平滑法，又称拉普拉斯定律，其保证每个n-gram在训练语料中至少出现1次</li><li>Good-Turing Smoothing<br>其基本思想是利用频率的类别信息对频率进行平滑。调整出现频率为c的n-gram频率为c*</li><li>InterpolationSmoothing<br>不管是Add-one，还是Good Turing平滑技术，对于未出现的n-gram都一视同仁，难免存在不合理（事件发生概率存在差别），所以这里再介绍一种线性插值平滑技术，其基本思想是将高阶模型和低阶模型作线性组合，利用低元n-gram模型对高元n-gram模型进行线性插值。因为在没有足够的数据对高元n-gram模型进行概率估计时，低元n-gram模型通常可以提供有用的信息。<br>……</li></ul><h4 id="研究难点"><a href="#研究难点" class="headerlink" title="研究难点"></a>研究难点</h4><ul><li>单词的边界界定（分词，如何写分词算法，目前有分词库可以直接分词）</li><li>词义消歧</li><li>词性分析</li><li>命名实体识别</li><li>依存分析</li><li>句法模糊性</li><li>有瑕疵或不规范的输入</li><li>语言行为与计划</li><li>数据稀疏与平滑技术</li><li>……</li></ul><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><ol><li><strong>搭建问答系统流程</strong></li></ol><p><strong>核心思想：</strong>假设预先有一个知识库，存储了很多（question-answer），根据用户输入的问题，返回相似度最高的问题对应的答案。<strong>基本流程：</strong>分词——预处理——文本转为向量——计算相似度——排序——返回结果</p><ol start="2"><li><strong>文本处理流程</strong></li></ol><img width="100%" src="https://i.loli.net/2020/03/24/7MFanwmNT25ofqb.jpg" alt="文本处理流程"><p><strong>基本流程：</strong>分词——数据清洗——标准化——特征提取——建模——模型评估</p><p>以上流程的详细步骤如下：</p><ul><li>分词：包括中文分词和英文分词，英文根据已有的空白符可以实现分词，中文则更加困难一些，需要结合语法、词库、语义等进行中文分词</li><li>清洗：进一步处理原文本，包括</li></ul>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日语口语</title>
      <link href="/2020/03/20/%E6%97%A5%E8%AF%AD/"/>
      <url>/2020/03/20/%E6%97%A5%E8%AF%AD/</url>
      
        <content type="html"><![CDATA[<p>日语基础口语整理，多多练习就能进步啦！</p><a id="more"></a><h3 id="一、基础"><a href="#一、基础" class="headerlink" title="一、基础"></a>一、基础</h3><p><strong>平假名/片假名</strong></p><img src="https://i.loli.net/2020/04/02/sIu6ozWbTjF3MCS.jpg" alt="平假名/片假名"><p><strong>打招呼</strong><br>おはようございます　/ おはよう　　<br>こんにちは<br>こんばんは　<br>おやすみなさい / おやすみ<br><strong>称呼</strong><br>おとうさん / ぱぱ<br>おかあさん / まま<br>おじいちゃん<br>おばあちゃん<br>おにいちゃん　<br>おとうと<br>おねえちゃん<br>いもうと<br>わたし<br><strong>自我介绍</strong><br>你好，我叫〇〇。我是中国人，请多关照。<br>初めまして。私は小百合（さゆり）です。私は中国から来ました。 私は中国人　　です。よろしくお願いします。<br>こんにちは。わたしは〇〇です。わたしはちゅうごくじんです。よろしくお願いします。<br>はじめまして。わたしはまるこです。きゅうさいです。よろしくおねがいします。<br><strong>关于吃</strong><br>朝ご飯　昼ご飯　晩ご飯<br>食べる　食べます    食べています 食べました<br>美味しい  美味しそう  おいしかった<br>頂きます（いただきます）<br>御馳走様でした（ごちそうさまでした）<br>朝ごはん  を   食べます。<br>朝ごはん を  食べています。<br>朝ご飯　を　食べました。<br>朝ごはん　を　食べましたか。<br>はい。おいしかったです。<br>いいえ。まだです。<br><strong>出门/回家</strong><br>行ってきます（出门）<br>いってらっしゃい<br>ただいま （回来）<br>お帰りなさい<br><strong>日期/时间</strong><br>きょう　　　きのう　　あした<br>今日　　　　昨日　　　明日<br><strong>月份的说法</strong><br>月⇔がつ/月/gatsu<br>1月⇔いちがつ/一月/ichigatsu<br>2月⇔にがつ/二月/nigatsu<br>3月⇔さんがつ/三月/sangatsu<br>4月⇔しがつ/四月/shigatsu<br>5月⇔ごがつ/五月/gogatsu<br>6月⇔ろくがつ/六月/rokugatsu<br>7月⇔しちがつ/七月/shichigatsu<br>8月⇔はちがつ/八月/hachigatsu<br>9月⇔くがつ/九月/kugatsu<br>10月⇔じゅうがつ/十月/juugatsu<br>11月⇔じゅういちがつ/十一月/juuichigatsu<br>12月⇔じゅうにがつ/十二月/juunigatsu<br><strong>1. 日的说法</strong><br>日⇔にち/日/nichi<br>1号⇔ついたち/一日/tsuitachi<br>2号⇔ふつか/二日/futsuka<br>3号⇔みっか/三日/mikka<br>4号⇔よっか/四日/yokka<br>5号⇔いつか/五日/itsuka<br>6号⇔むいか/六日/muika<br>7号⇔なのか/七日/nanoka<br>8号⇔ようか/八日/youka<br>9号⇔ここのか/九日/kokonoka<br>10号⇔とおか/十日/tooka<br>11号⇔じゅういちにち/十一日/juuichinichi<br>12号⇔じゅうににち/十二日/juninichi<br>14号⇔じゅうよっか/十四日/juuyokka<br>20号⇔はつか/二十日/hatsuka<br>☆彡：1到10号，14号，20号，24号的说法特殊，要多练习。其他日的说法→直接数字加日的读法。<br>比如15号⇔じゅうご　にち　<br>23号⇔にじゅうさん　にち　</p><p><strong>2. 时间的说法</strong><br>点⇔じ/時/ji<br>1点⇔いちじ/一時/ichiji<br>2点⇔にじ/二時/niji<br>3点⇔さんじ/三時/sanji<br>4点⇔よじ/四時/yoji<br>5点⇔ごじ/五時/goji<br>6点⇔ろくじ/六時/rokuji<br>7点⇔しちじ/七時/shichiji<br>8点⇔はちじ/八時/hachiji<br>9点⇔くじ/九時/kuji<br>10点⇔じゅうじ/十時/juuji<br>11点⇔じゅういちじ/十一時/juuichiji<br>12点⇔じゅうにじ/十二時/juuniji<br>零点⇔れいじ/零時/reiji</p><p><strong>3. 分钟的说法</strong><br>1分：いっぷん/一分/ippun<br>2分：にふん/二分/nifun<br>3分：さんぷん/三分/sanppun<br>4分：よんぷん/四分/yonpun<br>5分：ごふん/五分/gofun<br>6分：ろっぷん/六分/roppun<br>7分：ななふん/七分/nanafun<br>8分：はっぷん/八分/happun<br>9分：きゅうふん/九分/kyu^fun<br>10分：じっぷん/十分/jippun<br>20分：にじっぷん/二十分/nijippun<br>30分：さんじっぷん/三十分/sanjippun<br>40分：よんじっぷん/四十分/yonjippun<br>50分：ごじっぷん/五十分/gojippun<br>半：はん/半/han<br>上午：ごぜん/午前/gozen<br>下午：ごご/午後/gogo<br>傍晚：ゆうがた/夕方/yu^gata晚上：よる/夜/yoru或者ばん/晩/ban</p><p><strong>4. 个数</strong><br>几个：いくつ/幾つ/ikutsu<br>一个：ひとつ/一つ/hitotsu<br>二个：ふたつ/二つ/futatsu<br>三个：みっつ/三つ/mittsu<br>四个：よっつ/四つ/yottsu<br>五个：いつつ/五つ/itsutsu<br>六个：むっつ/六つ/muttsu<br>七个：ななつ/七つ/nanatsu<br>八个：やっつ/八つ/yattsu<br>九个：ここのつ/九つ/kokonotsu<br>十个：とお/十/too</p><h3 id="二、单词"><a href="#二、单词" class="headerlink" title="二、单词"></a>二、单词</h3><p>筷子⇒おはし/お箸/OHASHI<br>杯子⇒こっぷ/コップKOPPU<br>圆珠笔⇒ぼおるぺん/ボールペン/BOORUPEN<br>自动铅笔⇒しゃあぺん/シャーペン/SYAAPEN<br>书⇒ほん/本/hon<br>电视⇒てれび/テレビ/terebi<br>时钟⇒とけい/時計/tokei<br>尺子⇒ものさし/物差し/monosashi<br>胶水⇒のり/nori<br>笔记本⇒のおと/ノート/nooto<br>书⇒ほん/本/hon<br>透明胶⇒せろてえぷ/セロテープ/seroteepu<br>订书机⇒ほっちきす/ホッチキス/hocchikisu<br>包⇒かばん/鞄/kaban<br>围裙⇒えぷろん/エプロン/epuron<br>眼镜⇒めがね/眼鏡/megane<br>书包⇒らんどせる/ランドセル/randoseru<br>伞⇒かさ/傘/kasa<br>雨靴⇒れいんぶうつ/レインブーツ/reinbuutsu<br>雨衣⇒れいんこおと/レインコート/reinkooto<br>帽子⇒ぼうし/帽子/boushi<br>糖⇒さとう/砂糖/satou<br>盐⇒しお/塩/sio<br>味淋⇒みりん/味醂/mirin<br>料理酒⇒りょうりしゅ/料理酒/ryourishu<br>客厅⇒りびんぐ/リビング/ribingu<br>厨房⇒だいどころ/台所/daidokoro<br>阳台⇒べらんだあ/ベランダー/berandaa<br>音乐室⇒おんがくしつ/音楽室/ongakushitsu<br>美术室⇒ずこうしつ/図工室/zukoushitsu<br>三年2班的教室<br>⇒さんねんにくみのきょうしつ<br>/三年二組の教室<br>/sannennikuminokyousitsu<br>体育馆⇒たいいくかん/体育館/taiikukan<br>药妆店⇒やっきょく/薬局/yakkyoku<br>区役所⇒くやくしょ/区役所/kuyakusho<br>市役所⇒しやくしょ/市役所/shiyakusho（区役所和市役所是区，市政府办公所在地）<br>中学⇒ちゅうがっこう/中学校/chuugakkou<br>机场⇒くうこう/空港/KUUKOU<br>自动取款机⇒ATM<br>酒店⇒ほてる/ホテル/hoteru<br>女性理发店⇒びようしつ/美容室/biyousitsu<br>男性理发店⇒りようしつ/理容室/riyousitsu<br>便宜⇒やすい/安い/yasui<br>酸⇒すっぱい/酸っぱい/suppai<br>小⇒ちいさい/小さい/chiisai<br>袜子⇒くつした/靴下/kutsushita<br>柠檬⇒れもん/レモン/remon<br>公共厕所⇒こうしゅうといれ/公衆トイレ/koushuutoire<br>好吃：おいしい/美味しい/oishii<br>⇔不好吃：まずい/不味い/mazui<br>有意思 ：おもしろい/面白い/omoshiroi<br>⇔没意思：つまらない/tsumaranai高：たかい/高い/takai<br>⇔矮：ひくい/低い/hikui<br>好：いい/良い/ii⇔坏：わるい/悪い/warui<br>重：おもい/重い/omoi⇔轻：かるい/軽い/karui<br>快：はやい/速い/hayai⇔慢：おそい/遅い/osoi<br>热：あつい/暑い/atsui⇔冷：さむい/寒い/samui (天气)<br>热：あつい/熱い/atsui⇔冰：つめたい/冷たい/tsumetai（食物）<br>新：あたらしい/新しい/atarashi⇔旧：ふるい/古い/furui<br>游泳⇔すいえい/水泳/suiei<br>羽毛球⇔ばどみんとん/バドミントン/badominton<br>乒乓球⇔たっきゅう/卓球/takkyuu<br>足球⇔ふっとぼーる/フットボール/futtobooru<br>跑步⇔らんにんぐ/ランニング/ranningu<br>意大利面⇔すぱげってぃ/スパゲッティ/supagett(e)i<br>黄酱汤⇔みそしる/味噌汁/misoshiru<br>泡菜⇔きむち/キムチ/kimuchi<br>牛肉饭⇔ぎゅうどん/牛丼/gyuudon<br>超市：スーパー/su^pa^<br>午睡：ひるね/昼寝/hirune<br>便利店：こんびに/コンビニ/konbini<br>自行车：じてんしゃ/自転車/jitensha<br>电车：でんしゃ/電車/でんしゃ<br>公交车/巴士：ばす/バス/basu<br>出租车：たくしい/タクシー/takushi^<br>飞机：ひこうき/飛行機/hiko^ki<br>轮船：ふね/船/fune<br>新干线：しんかんせん/新幹線/sinkansen<br>东京：とうきょう/東京/to^kyo^<br>迪斯尼乐园：ディズニーランド/dizuni^rando<br>神户：こうべ/神戸/ko^be<br>博物馆：はくぶつかん/博物館/hakubutsukan<br>夜间大巴：やこうばす/夜行バス/yako^basu<br>机场专线大巴：くうこうりむじんばす<br>/空港リムジンバス/ku^ko^rimujinmasu<br>车：くるま/車/kuruma<br>摩托车：オートバイ/ootobai<br>训练场：じむ/ジム/jimu<br>轮椅：くるまいす/車椅子/kurumaisu<br>艺术中心：げいじゅつせんたあ/芸術センター<br>                  /geijutsusentaa(i长音念e)<br>市场：いちば/市場/ichiba<br>小诊所：しんりょうしょ/診療所/shinryo^sho<br>喝：のむ/飲む/nomu（字典形）<br>飲みます(一般；习惯)　飲みました（动作已完成）<br>吃：たべる/食べる/taberu(字典形)　<br>食べます　食べました<br>牛奶：ぎゅうにゅう/牛乳/gyuunyuu<br>牛奶：みるく/ミルク/miruku<br>药：くすり/薬 /kusuri<br>果汁：ジュース/juusu<br>啤酒：ビール/biiru<br>起床：おきる/起きる/okiru（字典形）<br>起きます　起きました<br>洗：あらう/洗う/arau(字典形)　<br>洗います　洗いました<br>今天早上：けさ/今朝/kesa<br>脸：かお/顔/kao<br>牙齿：は/歯/ha<br>头发：かみのけ/髪の毛/kaminoke<br>手：て/手/te<br>脚：あし/足/ashi<br>刷：みがく/磨く/migaku(字典形)<br>磨きます　磨きました（动作已过去）<br>睡觉：ねる/寝る/neru（字典形）<br>寝ます　　寝ました(动作已过去)<br>报纸：しんぶん/新聞/shinbun<br>电视：てれび/テレビ/terebi<br>广播：らじお/ラジオ/rajio<br>读：よむ/読む/yomu（字典形）<br>読みます　　読みました（动作已过去）<br>看：みる/見る/miru（字典形）<br>見ます　見ました（动作已过去）<br>听：きく/聴く/kiku(字典形)<br>聴きます　聴きました（动作已过去）<br>家：うち/家/uchi<br>作业：しゅくだい/宿題/shukudai<br>回来：かえる/帰る/kaeru（字典形）<br>帰ります　帰りました（动作已过去）<br>做、干：する/suru（字典形）<br>します　　しました（动作已过去）　<br>做、干、搞：やる/yaru（字典形）<br>やります　やりました（动作已过去）　<br>休息：やすむ/休む/yasumu（字典形）<br>休みます　休みません（礼貌否定式）<br>工作：はたらく/働く/hataraku（字典形）<br>働きます　働きません（礼貌否定式）<br>写：かく/書く/kaku（字典形）<br>書きます　書きません（礼貌否定式）<br>日记：にっき/日記/nikki<br>工作：しごと/仕事/shigoto<br>公园：こうえん/公園/ko^en<br>秋千：ぶらんこ/ブランコ/buranko<br>滑梯：すべりだい/滑り台/suberidai<br>单杠：てつぼう/鉄棒/tetsubo^<br>玩：あそぶ/遊ぶ/asobu（字典形）<br>遊びます　遊びません（礼貌否定式）　<br>遊びました　遊びませんでした（礼貌否定过去式）　<br>荡；划；摇：こぐ/漕ぐ/kogu字典形） 漕ぎます 漕ぎません（礼貌否定式） 漕ぎました　漕ぎませんでした（礼貌否定过去式）<br>午餐：らんち/ランチ/ranchi<br>菜单：メニュー/menyuu<br>套餐：ていしょく/定食/teishoku<br>米饭：ごはん/ご飯/gohan<br>米饭：らいす/ライス/raisu<br>寿司：すし/寿司/sushi<br>饭团：おにぎり/お握り/onigiri<br>乌冬面：うどん/udon<br>天妇罗：てんぷら/天ぷら/tenpura<br>炸鱼：さかなのふらい/魚のフライ/sakananofurai<br>炸虾：えびふらい/エビフライ/ebifurai<br>生菜沙拉：さらだ/サラダ/sarada<br>腌渍小菜：つけもの/漬物/tsukemono<br>カレーライス　そば　ラーメン　味噌汁<br>周末：しゅうまつ/週末/shuumatsu<br>下周：らいしゅう/来週/raishuu<br>上周：せんしゅう/先週/senshuu<br>一起：いっしょに/一緒に/isshoni<br>说：はなす　話す　話します<br>　　　話しました　話しましょう<br>吃饭：しょくじをする　食事をする　<br>   食事をします  食事をしましょう<br>※用于建议，劝诱的时候， 把动词后面的ます变成ましょう。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">起床 起きましょう　</span><br><span class="line">刷 磨きましょう　</span><br><span class="line">洗 洗いましょう</span><br><span class="line">吃 食べましょう</span><br><span class="line">去 行きましょう　</span><br><span class="line">玩 遊びましょう</span><br><span class="line">读 読みましょう　</span><br><span class="line">说 話しましょう　</span><br><span class="line">做 やりましょう</span><br><span class="line">看 見ましょう　　</span><br><span class="line">写 書きましょう　</span><br><span class="line">听 聞きましょう　</span><br><span class="line">回 帰りましょう　</span><br><span class="line">喝 飲みましょう　</span><br><span class="line">睡 寝ましょう　</span><br><span class="line">坐 乗りましょう　</span><br><span class="line">散步 散歩しましょう</span><br></pre></td></tr></table></figure><p>日式料理：わしょく/和食/washoku<br>炸猪排：とんかつ/トンカツ/tonkatsu<br>杂样煎菜饼：<br>おこのみやき/お好み焼き/okonomiyaki<br>涮羊肉（牛肉，猪肉）：<br>しゃぶしゃぶ/shabushabu<br>鸡素烧：すきやき/鋤焼き/sukiyaki<br>卤煮菜：おでん/oden<br>想吃：たべたい/食べたい/tabetai<br>※　たべる食べる　食べます　<br>ます换成たい就变成想吃了。<br>比如 想洗　洗いたい　 想去 行きたい　<br>想坐　乗りたい<br>买：かう/買う/kau<br>买 買います　不买 買いません　<br>买了 買いました　想买 買いたい　<br>买吧 買いましょう<br>卖：うる/売る/uru<br>卖 売ります　不卖 売りません　<br>卖了 売りました　想卖 売りたい<br>卖吧 売りましょう<br>见面：あう/会う/au<br>见 会います　不见 会いません<br>见过了 会いました　想见 会いたい<br>见面吧 会いましょう<br>水果：くだもの/果物/kudamono<br>零食：おかし/お菓子/okashi</p><p><strong>※　～に行きます</strong><br>前一个动词把 ます 去掉连接  に行きます，<br>表示 去干～<br>比如 去看　去买　 去洗<br>見に行きます　<br>買いに行きます　<br>洗いに行きます</p><p>水果：くだもの/果物/kudamono<br>菠萝：ぱいなっぷる/パイナップル/painappuru<br>桔子：みかん/ミカン/mikan<br>香蕉：ばなな/バナナ/banana<br>柿子：かき/柿/kaki<br>苹果：りんご/林檎/ringo<br>柚子：グレープフルーツ/gureepufuruutsu<br>梨：なし/梨/nashi<br>草莓：いちご/ichigo<br>ストロベリー/sutoroberii<br>蓝莓：ブルーベリー/buruuberii<br>早晨采摘：あさどり/朝採り/asadori<br>个：こ/個/ko<br>克：ぐらむ/グラム/guramu<br>多少钱：いくら/ikura<br>洗碗：さらをあらう/皿を洗う/sara o arau<br>淋浴：シャワー/shawaa<br>洗，浇：あびる/浴びる/abiru<br>浴びます　浴びました　浴びましょう　<br>浴びたい<br>养育孩子：こそだて/子育て/kosodate<br>院子，庭园：にわ/庭/niwa<br>感恩节：かんしゃさい/感謝祭/kanshasai<br>书架：ほんだな/本棚/hondana<br>字典：じしょ/辞書/jisho<br>电子词典：でんしじしょ/電子辞書/denshijisho<br>花瓶：かびん/花瓶/kabin<br>钱包：さいふ/財布/saifu<br>信用卡：クレジットカード/kurejittokaado<br>钱：おかね/お金/okane<br>包：かばん/鞄/kaban<br>购物小票：レシート/reshiito<br>积分卡：ポイントカード/pointokaado<br>保险证：ほけんしょう/保険証/hokensho^<br>动物园：どうぶつえん/動物園/do^butsuen<br>老虎：とら/虎/tora<br>狮子：らいおん/ライオン/raion<br>企鹅：ぺんぎん/ペンギン/pengin<br>小猫：こねこ/子猫/koneko<br>医生：いしゃ/医者/isha<br>前面：まえ/前/mae<br>后面：うしろ/後ろ/ushiro<br>上面：うえ/上/ue<br>下面：した/下/shita<br>里面：なか/中/naka<br>旁边（左右，水平方向）：よこ/横/yoko<br>邻近：となり/隣/tonari<br>附近：ちかく/近く/chikaku<br>什么样：どんな/donna<br>和式房间：わしつ/和室/washitsu<br>洋式房间：ようしつ/洋室/yo^shitsu<br>书桌：がくしゅうづくえ/学習机/gakushu^dukue<br>电钢琴：でんしぴあの/電子ピアノ/denshipiano<br>床：ベッド/beddo<br>空气净化器：くうきせいじょうき<br>/空気清浄機/kuukiseijo^ki<br>电热器：でんきヒーター<br>/電気ヒーター/denkihiitaa<br>等等：など/nado<br>木地板：フローリング/furooringu<br>榻榻米：たたみ/畳/tatami<br>各：ずつ/zutsu<br>富士：ふじ/富士/fuji<br>王林：おうりん/王林/o^rin<br>浴室：よくしつ/浴室/yokushitsu<br>浴室：バスルーム/basuruumu<br>浴缸：よくそう/浴槽/yokuso^<br>浴缸：ゆぶね/湯船/yubune<br>汤：おゆ/お湯/oyu<br>漂亮：きれい/綺麗/kirei<br>少：すくない/少ない/sukunai<br>冰冷：つめたい/冷たい/tsumetai<br>温热:ぬくい/温い/nukui<br>非常：とても/totemo<br>变：なる/naru<br>なります　なりました　なりましょう<br>なりません　なりませんでした</p><p><strong>~（な形容词）になります</strong><br>变化的结果<br>い形容词把最后的い去掉变成く＋なります。</p><p>春：はる/春/haru<br>夏：なつ/夏/natsu<br>秋：あき/秋/aki<br>冬：ふゆ/冬/fuyu<br>温暖：あたたかい/暖かい/atatakai<br>闷热：むしあつい/蒸し暑い/mushiatsui<br>凉爽：さわやか/爽やか/sawayaka<br>寒冷：さむい/寒い/samui<br>完全：すっかり/sukkari<br>生活；度过：すごす/過ごす/sugosu<br>過ごします　過ごしました　過ごしましょう<br>過ごしません　過ごしませんでした<br>老师：せんせい/先生/sensei<br>法国人：ふらんすじん/フランス人/furansujin<br>小孩子：こども/子ども/kodomo<br>纸张：かみ/紙/kami<br>粉笔：チョーク/cho^ku<br>字：じ/字/ji<br>筷子：はし/箸/hashi<br>叉子：フォーク/fo^ku<br>刀：ナイフ/naifu<br>汤匙：スプーン/supuun<br>吸管：ストロー/sutoro^<br>裁纸刀：カッター/kattaa<br>剪；切：切る　切ります　切りましょう<br>切りません　切りませんでした<br>圣诞老人：サンタさん/santasan<br>圣诞节蛋糕：クリスマスケーキ/<br>kurisumasukeeki<br>平安夜：クリスマスイブ/kurisumasuibu<br>圣诞歌：クリスマスソング/kurisumasusongu<br>本（书的量词）：さつ/冊/satsu<br>零花钱：おこづかい/お小遣い/okozukai<br>建议：アドバイス/adobaisu<br>男朋友：かれし/彼氏/kareshi<br>支持；鼓励：おうえん/応援/o^en<br>留言卡：メッセージカード/messeejikaado<br>公文包：ビジネスバッグ/bijinesubaggu<br>获得；得到：もらう　もらいます　<br>もらいました    もらいません　<br>もらいませんでした<br>明信片：はがき/葉書/hagaki<br>贺年明信片：ねんがはがき/年賀はがき/nengahagaki<br>贺年卡：ねんがじょう/年賀状/nengajo^<br>往返：おうふく/往復/o^fuku<br>往返明信片：おうふくはがき/往復はがき/o^fukuhagaki<br>张（明信片，纸张等的量词）：まい/枚/mai<br>自己；本人：じぶん/自分/jibun<br>能；会：できる　できます　できません<br>できました　できませんでした<br>寄；送：おくる/送る/okuru<br>送ります    送りません　送りましょう<br>送りました　送りませんでした<br>寄送；发：だす/出す/dasu<br>出します　出しました<br>出しません　出しませんでした<br>做：つくる/作る/tsukuru<br>作ります　作りません<br>作りました　作りませんでした<br>明けましておめでとうございます<br>/あけましておめでとうございます<br>/akemashite omedeto^gozaimasu<br>【新年快乐】<br>今年もよろしくお願いします<br>/ことしもよろしくおねがいします<br>/kotoshimoyoroshikuonegaishimasu<br>【今年还请多多关照】<br>新年/しんねん/shinnen【新年】<br>元旦/がんたん/gantan【元旦】<br>元日/がんじつ/ganjitsu【元旦】<br>お節料理/おせちりょうり/osechiryo^ri<br>【年节菜】<br>初詣/はつもうで/hatsumo^de<br>【元旦期间参拜神社】<br>初売/はつうり/hatsuuri【新春开卖】<br>寝正月/ねしょうがつ/nesho^gatsu<br>【睡觉度过正月】<br>ご馳走/ごちそう/gochiso^【好吃的东西】<br>福袋/ふくぶくろ/fukubukuro【福袋】<br>痛い/いたい/itai【疼；痛】<br>軽い/かるい/karui【轻】<br>疲れる/つかれる/tsukareru【疲倦】<br>疲れます　疲れました　<br>疲れません　疲れませんでした<br>過ぎる/すぎる/sugiru【过】<br>過ぎます　過ぎません　過ぎました　過ぎて<br>すみません/sumimasen<br>【对不起，谢谢，请问】<br>ちょっと/chotto【一会儿；一点儿；请问】<br>行き/ゆき/yuki【去；往】<br>乗り場/のりば/noriba<br>【乘车地点；车站；码头】<br>トイレ/toire【洗手间】<br>男子/だんし/danshi【男性】<br>女子/じょし/joshi【女性】<br>エスカレーター/esukareetaa【自动扶梯】<br>ホーム/ho^mu【站台；月台】<br>新快速/しんかいそく/shinkaisoku【新快速】<br>快速/かいそく/kaisoku【快速】<br>普通/ふつう/futsuu【普通】<br>乗る/のる/noru【乘坐】<br>乗ります　乗りました　乗りましょう　乗って<br>調べる/しらべる/shiraberu【查询；调查】<br>調べます　調べました　調べて<br>持つ/もつ/motsu【拿；带；有】　<br>持ちます　持ちましょう　持って<br>待つ/まつ/matsu【等】<br>待ちます　待ちました　待って<br>道/みち/michi【道路】<br>案内板/あんないばん/annaiban【引导牌】<br>出口/でぐち/deguchi【出口】<br>東/ひがし/higashi【东】<br>西/にし/nishi【西】<br>南/みなみ/minami【南】<br>北/きた/kita【北】<br>中央/ちゅうおう/chuuo^【中央】<br>通路/つうろ/tsuuro【通道】<br>突き当り/つきあたり/tsukiatari【尽头】<br>前/まえ/mae【前面】<br>市/し/shi【市】<br>ターミナル/taaminaru【始发站；终点站】<br>近く/ちかく/chikaku【附近】<br>降りる/おりる/oriru【下】<br>降ります　降りました　降りた 降りて<br>分かる/わかる/wakaru【知道；明白】<br>分かります　分かりました　分かった 分かって　<br>曲がります　曲がった 曲がって<br>もしもし/moshimoshi【喂】<br>予約/よやく/yoyaku【预约】<br>客/きゃく/kyaku【客人；客户】<br>様/さま/sama【跟在名字后面表示尊敬或信件的收或启】<br>空室/くうしつ/kuushitsu【空房间】<br>満室/まんしつ/manshitsu【房间满了】<br>宿泊/しゅくはく/shukuhaku【住宿】<br>料金/りょうきん/ryo^kin【费用】<br>ダブルルーム/dabururuumu【双人床房】<br>セミダブルルーム/semidabururuumu【小双人床房】<br>シングルルーム/shingururuumu【单人房；单人床房】<br>ツインルーム/tsuinruumu【双人房；2张单人床房】<br>ビジネスルーム/bijinesuruumu【商务房】<br>スイートルーム/suiitoruumu【套间】<br>相部屋/あいべや/aibeya【与别人同住一房】<br>チェックイン/chekkuin【住宿登记】<br>チェックアウト/chekkuauto【退房】<br>キャンセル//kyanseruryo^kin【取消】<br>付き/つき/tsuki【附带；带】<br>泊/はく/haku【晚；夜】<br>希望/きぼう/kibo^【希望；愿望；期待；要求】<br>希望する/きぼうする/kibo^suru【期待】<br>宜しい/よろしい/yoroshii【好；恰好；适当；没关系】<br>伺う/うかがう/ukagau【请教；打听；问】<br>伺います　伺いました　伺った　伺って<br>申す/もうす/mo^su【说；讲；叫做】<br>申します　申しました　申して<br>願う/ねがう/negau【请求；希望；愿望】<br>願います　願って　願った　<br>席/せき/seki【座位】<br>テーブル席/テーブルせき/teeburuseki【桌子座位】<br>相席/あいせき/aiseki【与别人同坐一桌】<br>カウンター席/かうんたあせき/kauntaaseki【吧台座位】<br>禁煙席/きんえんせき/kinenseki【禁烟席】<br>喫煙席/きつえんせき/kitsuenseki【吸烟席】<br>満席/まんせき/manseki【座位满了】<br>呼び出しボタン/よびだしぼたん/yobidashibotan【服务铃】<br>注文/ちゅうもん/chuumon【点菜】<br>おすすめ/osusume【招牌菜】<br>料理/りょうり/ryo^ri【烹调；肴】<br>神戸牛/こうべぎゅう/ko^begyuu【神户牛】<br>ランチ/ranchi/【午餐】<br>ロース/roosu【里脊肉】<br>グラム/guramu【克】<br>焼き具合/やきぐあい/yakiguai【烤的程度】<br>ウェルダン/werudan【烧得透；煮得透】<br>ミディアム/midiamu【五分熟】<br>以上/いじょう/ijo^【以上；超过】<br>決まる/きまる/kimaru【决定】<br>決まります　決まりました　<br>決まった　決まって<br>付く/つく/tsuku【附带；带】<br>付きます　付いて　付いた<br>構う/かまう/kamau【管；介意；理睬】<br>構います 構いません　構って　構った<br>会計/かいけい/kaikei【结账】<br>支払/しはらい/shiharai【算钱】<br>レジ/reji【收银台】<br>現金/げんきん/genkin【现金】<br>クレジットカード/kurejittokaado【信用卡】<br>合計/ごうけい/go^kei【共计】<br>暗証番号/あんしょうばんごう/ansho^bango^【密码】<br>入力/にゅうりょく/nyuuryoku【输入】<br>サイン/sain【签字】<br>控え/ひかえ/hikae【留底】<br>お返し/おかえし/okaeshi【回礼；找回的钱】<br>レシート/reshiito【收据】<br>また/mata【再次；又】<br>お越し/おこし/okoshi【光临】<br>預かる/あずかる/azukaru【保管】<br>預かります 預かって　預かった<br>アパレル/apareru【服装】<br>セーター/seetaa【毛衣】<br>ズボン/zubon【裤子】<br>スーツ/suutsu【西装】<br>スカート/sukaato【裙子】<br>ワイシャツ/waishatsu【西式衬衫】<br>ウール/uuru【羊毛】<br>パーセント/paasento【百分率】<br>綿/めん/men【棉】<br>ナイロン/nairon【尼龙】<br>裾上げ/すそあげ/susoage【下摆或裤脚缩短】<br>試着/しちゃく/shichaku【试穿】<br>試着室/しちゃくしつ/shichakushitsu【试衣间】<br>案内/あんない/annai【引导；传达；通知】<br>どうぞ/do^zo【请；可以】<br>サイズ/saizu【号码】<br>似合い/にあい/niai【合适】<br>合う/あう/au【搭配；适合】<br>丈/たけ/take【尺寸；长短；长度】<br>上下/じょうげ/jo^ge【上下】<br>合わせる/あわせる/awaseru【配在一起】<br>合わせます　合わせて　合わせた<br>探す/さがす/sagasu【找；寻找】<br>探します　探して　探した<br>免税/めんぜい/menzei【免税】<br>普通/ふつう/futsuu【普通】<br>風邪/かぜ/kaze【感冒】<br>薬/くすり/kusuri【药】<br>全部/ぜんぶ/zenbu【全部】<br>咳止め/せきどめ/sekidome【止咳】<br>スキンケア/sukinkea【护肤】<br>化粧品/けしょうひん/kesho^hin【化妆品】<br>買い上げ/かいあげ/kaiage【购买】<br>商品/しょうひん/sho^hin【商品】<br>書類/しょるい/shorui【资料】<br>手続き/てつづき/tetsudsuki【手续】<br>貼る/はる/haru【贴】<br>貼ります　貼って　貼った<br>書斎/しょさい/shosai【书房】<br>囲碁/いご/igo【围棋】<br>自分/じぶん/jibun【自己】<br>座禅/ざぜん/zazen【打坐】<br>おじさん/ojisan【叔；伯；舅】<br>居る/いる/iru【在；有；居住】<br>います　いて　いた<br>出かける/でかける/dekakeru【出门；出去】<br>出かけます　出かけて　出かけた<br>打つ/うつ/utsu【敲打；击撞；打】<br>打ちます　打って　打った<br>組む/くむ/kumu【交叉到一起】<br>組みます　組んで　組んだ<br>雨/あめ/ame【下雨】<br>しとしと/shitoshito【淅淅沥沥】<br>ずっと/zutto【一直】<br>取り敢えず/とりあえず/toriaezu【先；暂时；赶忙】<br>降る/ふる/furu【下；降】<br>降ります　降って　降った<br>止む/やむ/yamu【停止；终止】<br>止みます　止んで　止んだ<br>サボる/さぼる/saboru【怠工；缺勤；逃学】<br>サボります　サボって　サボった<br>籠る/こもる/komoru【闭门不出】<br>籠ります　こもって　こもった<br>気持ち/きもち/kimochi【心情；情绪】<br>長い/ながい/nagai【长的】<br>行列/ぎょうれつ/gyo^retsu【队伍】<br>素敵/すてき/suteki【漂亮】<br>所/ところ/tokoro【地方；场所】<br>一杯/いっぱい/ippai【很多】<br>たくさん/takusan【很多】<br>すっかり/sukkari【完全】<br>京都/きょうと/kyo^to【京都】<br>世界遺産/せかいいさん/sekaiisan【世界遗产】<br>香川/かがわ/kagawa【香川】<br>広島/ひろしま/hiroshima【广岛】<br>東京/とうきょう/to^kyo^【东京】<br>昔/むかし/mukashi【以前】<br>覚える/おぼえる/oboeru【记住】<br>覚えます　覚えて　覚えた<br>忘れる/わすれる/wasureru【忘记】<br>忘れます　忘れて　忘れた<br>並ぶ/ならぶ/narabu【排；列队】<br>並びます　並んで　並んだ<br>マスク/masuku【口罩】<br>濡れる/ぬれる/nureru【淋湿；沾湿】<br>濡れます　濡れて　濡れた<br>濡れマスク/ぬれますく/nuremasuku【加湿口罩】<br>セットする/settosuru【调好】<br>セットします　セットして　セットした<br>咳/せき/seki【咳嗽】<br>止まる/とまる/tomaru【止住；停顿】<br>止まります　止まって　止まった<br>ぐっすり/gussuri【酣睡；熟睡】<br>水筒/すいとう/suito^【水壶】<br>飲む/のむ/nomu【喝】<br>飲みます　飲んで　飲んだ<br>苺/いちご/ichigo【草莓】<br>ビタミン/bitamin【维生素】<br>取る/とる/toru【摄取】<br>取ります　取って　取った<br>絵本/えほん/ehon【绘本】<br>読書会/どくしょかい/dokushokai【读书会】<br>当然/とうぜん/to^zen【当然】<br>一度/いちど/ichido【一次；一回】<br>大人/おとな/otona【大人】<br>達/たち/tachi【们；等】<br>間/あいだ/aida【当中】<br>ばかり/bakari【净；都是】<br>人気/にんき/ninki【人气】<br>届く/とどく/todoku【到；收到】<br>届きます　届いて　届いた<br>知らせる/しらせる/shiraseru【通知】<br>知らせます　知らせて　知らせた<br>送る/おくる/okuru【寄；送】<br>送ります　送って　送った<br>少し/すこし/sukoshi【一点儿】<br>だけ/dake【只有】<br>アイス/aisu【冰激凌】<br>アイスクリーム<br>どろどろ/dorodoro【泥泞不堪；黏糊】<br>駄目/だめ/dame【不行；不可以】<br>残る/のこる/nokoru【剩下】<br>残ります　残って　残った<br>アイススケート/aisusukeeto【滑冰；溜冰】<br>フィギュア/figyua【花样；图形；娃娃】<br>フィギュアスケート/dake【花样滑冰】<br>リンク/rinku【溜冰场】<br>氷/こおり/koori【冰】<br>何回/なんかい/nankai【几次】<br>数える/かぞえる/kazoeru【计算；数】<br>数えます　数えて　数えた<br>選手/せんしゅ/senshu【选手】<br>試合/shiai【比赛】<br>ジャンプ/janpu【跳跃】<br>ジャンプします　ジャンプして　ジャンプした<br>転ける/こける/kokeru【跌跤；摔倒】<br>転けます　転けて　転けた<br>買い物/かいもの/kaimono【要买的东西】<br>沢山/たくさん/takusan【很多】<br>付く/つく/tsuku【跟随；跟着】<br>付きます　付いて　付いた<br>序に/ついでに/tsuideni【顺便】<br>遅い/おそい/osoi【迟；晚】<br>遊ぶ/あそぶ/asobu【玩】<br>遊びます　遊んで　遊んだ<br>話す/はなす/hanasu【说】<br>話します　話して　話した<br>言う/いう/iu【说】<br>言います　言って　言った<br>行儀/ぎょうぎ/gyo^gi【举止；礼貌】<br>悪い/わるい/warui【不好】<br>ややこしい/yayakoshii【复杂；麻烦】<br>仕方ない/しかたない/shikatanai【没办法；无可奈何】<br>けん玉/けんだま/kendama【托球游戏】<br>亀/かめ/kame【龟】<br>チャンピオン/chanpion【冠军；优胜】<br>大会/たいかい/taikai【大会】<br>時間/じかん/jikan【时间】<br>続ける/つづける/tsuzukeru【继续；连续】<br>続けます　続けて　続けた<br>出る/でる/deru【出场】<br>出ます　出て　出た<br>ハマる/hamaru【入迷；迷上】<br>ハマります　ハマって　ハマった　<br>弾く/ひく/hiku【弹】<br>弾きます　弾いて　弾いた　<br>確か/たしか/tashika【确实】<br>うんち/unchi【大便】<br>おしっこ/oshikko【尿】<br>毎日/まいにち/mainichi【每天】<br>住む/すむ/sumu【住】<br>住みます　住んで　住んだ<br>いつも/itsumo【无论何时;经常】<br>ので/node【因为；由于】<br>降る/ふる/furu【下雨】<br>降ります　降って　降った<br>傘/かさ/kasa【伞】<br>持つ/もつ/motsu【拿；带】<br>持ちます　持って　持った<br>水溜まり/みずたまり/mizutamari【水洼】<br>ぽちゃぽちゃ/pochapocha【啪嚓啪嚓】<br>止む/やむ/yamu【停止】<br>止みます　止んで　止んだ<br>急に/きゅうに/kyuuni【突然间】<br>強い/つよい/tsuyoi【强；强有力】<br>吹く/ふく/fuku【吹；刮】<br>吹きます　吹いて　吹いた<br>急ぐ/いそぐ/isogu【急忙】<br>急ぎます　急いで　急いだ<br>心配/しんぱい/shinpai【担心；担忧；着急】<br>すぐ/sugu【马上；立刻】<br>楽しい/たのしい/tanoshii【愉快；快乐；高兴】<br>オープン/oopun【开业】<br>店/みせ/mise【店铺】<br>狡い/ずるい/zurui【狡猾】<br>一緒/いっしょ/issho【一起】<br>ぺこぺこ/pekopeko【饿；空】<br>おかず/okazu【菜；菜肴】<br>皿/さら/sara【碟；盘】<br>野菜/やさい/yasai【蔬菜】<br>たっぷり/tappuri【满；充足】<br>満足/まんぞく/manzoku【满足】<br>約束/やくそく/yakusoku【约定】<br>怒る/おこる/okoru【生气；发怒】<br>怒ります　怒って　怒った　怒らない<br>破る/やぶる/yaburu【破坏】<br>破ります　破って　破った　破らない<br>素敵/すてき/suteki【帅；漂亮】<br>心/こころ/kokoro【心】<br>生け花/いけばな/ikebana【插花】<br>床の間/とこのま/tokonoma【壁龛】<br>掛け軸/かけじく/kakejiku【挂轴】<br>伝統/でんとう/dento^【传统】<br>的/てき/teki【的】<br>フラワー/furawaa【花】<br>アレンジメント/arenjimento【排列；整理】<br>空間/くうかん/kuukan【空间】<br>癒す/いやす/iyasu【治愈】<br>癒します　癒して　癒した　癒さない<br>習う/ならう/narau【学习；练习】<br>習います　習って　習った　習わない<br>飾る/かざる/kazaru【装饰；修饰】<br>飾ります　飾って　飾った　飾らない<br>掛ける/かける/kakeru【挂】<br>掛けます　掛けて　掛けた　掛けない<br>匂い/におい/nioi【香味；气味】<br>洗濯/せんたく/sentaku【洗衣服；洗涤】<br>シャボン/しゃぼん/shabon【肥皂；香皂】<br>泡/あわ/awa【泡泡】<br>料理/りょうり/ryo^ri【烹饪；做菜】<br>卵焼き/たまごやき/tamagoyaki【煎鸡蛋】<br>もしもし/moshimoshi【喂喂】<br>亀/かめ/kame【龟】<br>世界/せかい/sekai【世界】<br>内/うち/uchi【内；中（表示范围）】<br>お前/おまえ/omae【你】<br>ほど/hodo【这么；那么（表示程度）】<br>歩み/あゆみ/ayumi【步行；走】<br>鈍い/のろい/noroi【缓慢】<br>仰る/おっしゃる/ossharu【说】<br>兎/うさぎ/usagi【兔子】<br>駆け競べ/かけくらべ/kakekurabe【赛跑】<br>向こう/むこう/muko^【对面】<br>山/やま/yama【山】<br>麓/ふもと/fumoto【山脚】<br>駆けつく/かけつく/kaketsuku【跑到】<br>どうせ/do^se【反正】<br>一眠り/ひとねむり/hitonemuri【睡一会儿】<br>自慢/じまん/jiman【骄傲；显摆】<br>しくじる/shikujiru【失败】<br>しくじります　しくじって　しくじった　しくじらない<br>離任式/りにんしき/rininshiki【离任仪式】<br>入学式/にゅうがくしき/nyuugakushiki【入学仪式】<br>卒業式/そつぎょうしき/sotsugyo^shiki【毕业仪式】<br>知らせ/しらせ/shirase【通知；消息】<br>確認/かくにん/kakunin【确认】<br>チェック/chekku【检验；核对】<br>担任/たんにん/tannin【担任；担当】<br>来週/らいしゅう/raishuu【下周】<br>楽しみ/たのしみ/tanoshimi【期望；希望】<br>変わる/かわる/kawaru【变化】<br>変わります　変わって　変わった　変わらない<br>諺/ことわざ/kotowaza【谚语；俗话】<br>慣用句/かんようく/kanyo^ku【惯用语】<br>秘密/ひみつ/himitsu【秘密】<br>文殊/もんじゅ/monju【文殊菩萨】<br>知恵/ちえ/chie【智慧】<br>意味/いみ/imi【意思】<br>方法/ほうほう/ho^ho^【方法】<br>寄る/よる/yoru【靠近；聚集】<br>寄ります　寄って　寄った　寄らない<br>授業/じゅぎょう/jugyo^【课；上课】<br>参観日/さんかんび/sankanbi【参观日】<br>仕事/しごと/shigoto【工作】<br>掃除/そうじ/so^ji【打扫；扫除】<br>新聞/しんぶん/shinbun【报纸】<br>文章/ぶんしょう/bunsho^【文稿】<br>名札/なふだ/nafuda【姓名卡】<br>借りる/かりる/kariru【借】<br>借ります　借りて　借りた　借りない<br>無理/むり/muri【难以办到】<br>一人/ひとり/hitori【一个人】<br>冊/さつ/satsu【册；本】<br>リュック/ryukku【背包】<br>ポケット/poketto【口袋】<br>覚える/おぼえる/oboeru【记住】<br>覚えます　覚えて　覚えた　覚えない　<br>揃える/そろえる/soroeru【齐全；具备】<br>揃えます　揃えて　揃えた　揃えない<br>背負う/せおう/seou【背】<br>背負います 背負って　背負った　背負わない<br>入れる/いれる/ireru【放入】<br>入れます　入れて　入れた　入れない<br>漢字/かんじ/kanji【汉字】<br>音読/おんどく/ondoku【朗读；读出声】<br>最初/さいしょ/saisho【起初；开始】<br>すらすら/surasura【流利】<br>続ける/つづける/tsuzukeru【继续；连接】<br>続けます　続けて　続けた　<br>続けない　続けられます<br>仲良し/なかよし/nakayoshi【要好；好朋友】<br>遠足/えんそく/ensoku【远足；郊游】<br>王子/おうじ/o^ji【王子】<br>動物園/どうぶつえん/do^butsuen【动物园】<br>持ち物/もちもの/mochimono【携带物品】<br>準備/じゅんび/junbi【准备】<br>最近/さいきん/saikin【最近】<br>忘れ物/わすれもの/wasuremono【丢失物；遗忘的东西】<br>計算ドリル/けいさんどりる/keisandoriru【计算习题】<br>リスト/risuto【目录】<br>汗ふきタオル/あせふきたおる/asefukitaoru【擦汗手帕】<br>箪笥/たんす/tansu【衣柜】<br>ぱんぱん/panpan【满满的】<br>水色/みずいろ/mizuiro【淡蓝色】<br>スカート/sukaato【裙子】<br>爽やか/さわやか/sawayaka【清爽】<br>色合い/いろあい/iroai【颜色】<br>着心地/きごこち/kigokochi【穿上时的感觉】<br>ひらひら/hirahira【飘逸】<br>シフォン/shifon【雪纺绸】<br>トップス/toppusu【上衣】<br>モチーフ/mochiifu【主题】<br>プリント/purinto【印花】<br>スタイル/sutairu【体型；风格】<br>探す/さがす/sagasu【找】<br>探します　探して　探した　探さない　探せます<br>廃れる/すたれる/sutareru【过时】<br>廃れます　廃れて　廃れた　廃れない　<br>ゴールデンウィーク/goorudenuiiku【黄金周】<br>最終日/さいしゅうび/saishuubi【最后一天】<br>今頃/いまごろ/imagoro【现在；这个时候】<br>行楽地/こうらくち/ko^rakuchi【游览地】<br>交通渋滞/こうつうじゅうたい/ko^tsuujuutai【交通堵塞】<br>遭う/あう/au【遭遇；遇到】<br>長蛇/ちょうだ/cho^da【长队】<br>列/れつ/retsu【队伍】<br>混雑/こんざつ/konzatsu【拥挤；人山人海】<br>並ぶ/ならぶ/narabu【排；排列】<br>並びます　並んで　並んだ　並ばない　<br>ストレス/sutoresu【压力】<br>折角/せっかく/sekkaku【难得】<br>大型連休/おおがたれんきゅう/oogatarenkyuu【长假】<br>期間/きかん/kikan【期间；期限】<br>のんびり/nonbiri【悠闲自在；舒舒服服】<br>思い出/おもいで/omoide【回忆】<br>疲れる/つかれる/tsukareru【累；疲乏】<br>疲れます　疲れて　疲れた　疲れない<br>休める/やすめる/yasumeru【使平静；使休息】<br>休めます　休めて　休めた　休めない<br>眼科/がんか/ganka【眼科】<br>処方/しょほう/shoho^【处方】<br>目薬/めぐすり/megusuri【眼药水】<br>大分/だいぶ/daibu【相当；很】<br>痒い/かゆい/kayui【痒】<br>点す/さす/sasu【点；上】<br>点します　点して　点した　点さない<br>辛い/つらい/tsurai【不好受】<br>視力検査/しりょくけんさ/shiryokukensa【视力检查】<br>結果/けっか/kekka【结果】<br>相談/そうだん/so^dan【商量】<br>検査/けんさ/kensa【检查】<br>掻く/かく/kaku【搔；挠】<br>掻きます　掻いて　掻いた　掻かない<br>受ける/うける/ukeru【接受】<br>受けます　受けて　受けた　受けない<br>散る/ちる/chiru【分散】<br>散ります　散って　散った　散らない<br>迷子/まいご/maigo【迷路；走丢的孩子】<br>子猫/こねこ/koneko【小猫】<br>ばかり/bakari【只；光】<br>子/こ/ko【孩子】<br>ニャンニャン/nyannyan【喵喵】<br>わんわん/wanwan【汪汪】<br>カラス/karasu【乌鸦】<br>雀/すずめ/suzume【麻雀】<br>泣く/なく/naku【哭泣】<br>泣きます　泣いて　泣いた　泣かない<br>困る/こまる/komaru【为难；难办】<br>困ります　困って　困った　困らない</p><h3 id="三、对话"><a href="#三、对话" class="headerlink" title="三、对话"></a>三、对话</h3><p>早上起来见到妈妈时可以说<br>おかあさん、おはようございます。<br>也可以简单说<br>まま、おはよう。<br>如果是爸爸呢？<br>おとうさん、おはようございます。<br>ぱぱ、おはよう。<br>中午见到爷爷或外公可以说<br>おじいちゃん、こんにちは。<br>如果是奶奶或外婆可以说<br>おばあちゃん、こんにちは。<br>晚上和哥哥道晚安时可以说<br>おにいちゃん、おやすみなさい。<br>如果是姐姐呢？<br>おねえちゃん、おやすみ。<br>母亲节时想对妈妈说，<br>妈妈，谢谢你<br>おかあさん、ありがとうございます。<br>或者<br>おかあさん、ありがとう。<br>不小心犯错误时，可以跟爸爸说<br>爸爸，对不起<br>おとうさん、ごめんなさい。<br>不小心踩到星杰小朋友的脚时，马上说<br>星杰酱，ごめんなさい。<br>这时候，星杰小朋友就可以回答<br>いいよ。<br>或者<br>だいじょうぶよ。<br>初次见面。我叫丸子です。<br>はじめまして。わたしはまるこです。<br>我36岁。请多关照。<br>さんじゅうろくさいです。よろしくおねがいします。<br>爷爷，你几岁了？<br>おじいちゃん、なんさいですか。<br> 我七十二岁了。<br>わたしはななじゅうにさい【NANAZYUUNISAI】です。<br>爸爸，昨天您辛苦啦<br>おとうさん、きのうおつかれさまでした。<br>　お父さん、昨日　お疲　れ様　でした。<br>今天的午饭看上去很好吃<br>きょう　の　ひるごはん　は　おいしそうです。<br>今日　　の　昼ご飯　　　は　美味しそうです。<br>のNO→的<br>明天回中国<br>あした　ちゅうごく　へ　かえります。<br>明日　　中国　　　　へ　帰ります。<br>这是学校用餐套装吗？<br>これ　は 　きゅうしょくセット　ですか。<br>これ　は　　　　　給食セット　ですか。<br>肯定回答<br>是的，那是学校用餐套装。<br>はい、それは　きゅうしょくセットです。<br>はい、それは　　　給食　　セットです。<br>也可以简单回答<br>是的。<br>はい、そうです。<br>否定回答<br>不是。<br>いいえ、ちがいます。<br>いいえ、　違います。<br>那是笔盒。<br>それは　ふでばこ　です。<br>それは　　筆箱　　です。<br>这是铅笔。<br>kore ha     enpitsu      desu<br>これは  えんぴつです。<br>これは   鉛筆      です。<br>这也是铅笔。<br>kore  mo  enpitsu    desu<br>これも えんぴつ です。<br>これも  鉛筆       です。<br>那是橡皮擦。<br>sore ha   keshigomu  desu<br>それは けしごむ です。<br>それは 消しゴム です。<br>那也是橡皮擦。<br>sore mo keshigomu desu<br>それも けしごむ です。<br>それも 消しゴム です。<br>那是剪刀。<br>a re   ha  hasami    desu<br>あれは はさみ です。<br>あれは ハサミ です。<br>那也是剪刀。<br>a re   mo hasami     desu<br>あれも はさみ  です。<br>あれも ハサミ  です。<br>も：也；也是<br>疑问句型<br>这也是铅笔吗？<br>ko re mo  enpitsu      desuka<br>これも えんぴつ ですか。<br>これも   鉛筆      ですか。<br>不是，那是自动铅笔。<br>i　i　e　　 chigai　masu<br>いいえ、ちがいます。<br>いいえ、　違います。<br>soreha　　syaapen　　　　desu<br>それは　シャーペン　です。那也是橡皮擦吗？<br>sore mo keshigomu   desuka<br>それも けしごむ ですか。<br>それも 消しゴム ですか。<br>是的，这也是橡皮擦。<br>ha i         koremo  keshigomu  desu<br>はい、それも けしごむ です。<br>はい、それも 消しゴム です。<br>那也是剪刀吗？<br>a re mo   hasami   desuka<br>あれも はさみ ですか。<br>あれも ハサミ ですか。<br>不是，那是铅笔刀。<br>i　i　e　　chigai　masu<br>いいえ、ちがいます。<br>いいえ、　違います。<br>areha　　　enpitsukezuri　　　　desu<br>あれは　えんぴつけずり　です。<br>あれは　　鉛筆　　削り　です。<br>这是铅笔吗？<br>Ko re ha  e   n   pitsu  desuka<br>これは えんぴつ ですか。<br>これは   鉛筆      ですか。<br>不是，那是自动铅笔。<br>i　i　e　　 chiga i  masu<br>いいえ、ちがいます。<br>いいえ、　違います。<br>soreha　　sha    a    pen　   desu<br>それは　シャーペン　です。<br>也可以说<br>不是铅笔，是自动铅笔。<br>i    i    e        enpitsu      Ja     na  i   desu<br>いいえ、えんぴつじゃないです。<br>いいえ、鉛筆じゃないです。<br>sha    a   pen   desu<br>シャーペンです。<br>这是尺子吗？<br>Ko re ha  monosashi  desuka<br>これは ものさし ですか。<br>これは    物差し  ですか。<br>不是尺子，是胶水。<br>i    i    e        monosashi      Ja     na i   desu<br>いいえ、ものさし　じゃないです。<br>いいえ、　物差し　じゃないです。<br>no  ri  desu<br>のりです。<br>那是书吗？<br>so re ha  hon    desuka<br>それは ほんですか。<br>それは   本 ですか。<br>不是书，是笔记本。<br>i    i    e        hon      Ja     na  i     desu<br>いいえ、ほん　じゃないです。<br>いいえ、本　　じゃないです。<br>no o  to   desu<br>ノートです。<br>那是透明胶吗？<br>a re   ha   sero  te e pu    desuka<br>あれは セロテープ ですか。<br>不是透明胶，是订书机。<br>i    i    e       se ro te  ep  u ja       na i    desu<br>いいえ、セロテープじゃないです。<br>ho  cchi  kisu  desu<br>ホッチキスです。<br>这是爸爸的手机。<br>ko re ha   o  to  u   san   no ke i   ta i      desu<br>これは おとうさんのけいたい です。<br>これは　 お父さんの携帯        です。<br>那是学校的校服。<br>so re  ha ga   kko u  no se i   fu ku  desu<br>それはがっこうのせいふくです。<br>それは   学校    の   制服    です。<br>の：的这是爸爸的手机吗？<br>ko re ha    o  to  u  san   no ke i   ta i      desuka<br>これは おとうさんのけいたい ですか。<br>これは　 お父さんの　携帯     ですか。<br>不是爸爸的手机，妈妈的。<br>i    i    e        o to   u  san   no ke i   ta   i   ja      na i    desu<br>いいえ、おとうさんのけいたいじゃないです。<br>いいえ、　お父さんの　携帯　じゃないです。<br>o ka   a  san   no ke i     ta i    desu<br>おかあさんのけいたいです。<br>お   母 さんの   携帯   です。<br>那是学校的校服吗？<br>so re  ha ga   kko u  no se i   fu ku  desuka<br>それはがっこうのせいふくですか。<br>それは   学校    の   制服    ですか。<br>是的，学校的校服。<br>ha i        ga     kkou no se i    fuku  desu<br>はい、がっこうのせいふくです。<br>はい、学校の制服です。<br>这是谁的便当？<br>ko re  ha   da re no 　ben  to  u   desuka<br>これは だれの　べんとうですか。<br>これは　誰の　弁当　ですか。<br>那是爸爸的便当。<br>so re ha   o  to  u   san   no ben  to u   desu<br>それは おとうさんのべんとうです。<br>それは　 お父さんの弁当      です。<br>也可以简单回答<br>爸爸的。<br>o  to   u   sa n  no  desu<br>おとうさんのです。<br>お父さんのです。<br>这是谁的鞋？<br>ko re ha   dareno  kutsu desuka<br>これは だれのくつですか。<br>これは   誰  の  靴 ですか。<br>那是妹妹的。<br>so re  ha 　i　mou　to  no kutsu desu<br>それは　いもうとの くつです。<br>それは  　　 妹   の   靴 です。<br>也可以简单回答<br>妹妹的。<br>i   mo u   to  no desu<br>いもうとのです。<br>　妹　　のです。<br>这是谁的伞？<br>これはだれのかさですか。<br>これは誰の傘ですか。<br>铃木君的。<br>すずきくんのです。<br>鈴木君のです。<br>那是谁的雨靴？<br>それはだれのれいんぶうつですか。<br>それは誰のレインブーツですか。<br>由加的。<br>ゆかちゃんのです。<br>那是谁的雨衣？<br>あれはだれのれいんこおとですか。<br>あれは誰　のレインコートですか。<br>奶奶的。<br>おばあちゃんのです。<br>这是谁的帽子？<br>これはだれのぼうしですか。<br>これは誰　の帽子　ですか。<br>爷爷的。<br>おじいちゃんのです。<br>这是书法用具，还是笔盒？<br>kore ha  shu u ji  dougu desuka      fudebako desuka<br>これはしゅうじどうぐですか、ふでばこですか。<br>これは　習字道具　ですか、　 筆箱　 ですか。<br>是书法用具。<br>しゅうじどうぐです。<br>   習字道具　　 です。</p><p>那是爸爸的便当盒，还是爷爷的便当盒？<br>sore　hao　tou　sanno　ben　tou　bakodesuka<br>それはおとうさんのべんとうばこですか、<br>それはお父さんの弁当箱ですか、<br>o　ji　i　chan　noben　to　ubako　desuka<br>おじいちゃんのべんとうばこですか。<br>お爺ちゃんの弁当箱ですか。<br>是爷爷的便当盒。<br>o　ji　i　chan　noben　to　ubako　desu<br>おじいちゃんのべんとうばこです。<br>　お爺ちゃんの　弁当箱　　です。<br>那是围裙，还是连衣裙？<br>a re  ha   e pu ro n  desuka       wan   pi  i   su desuka<br>あれはえぷろんですか、わんぴいすですか。<br>あれはエプロンですか、ワンピースですか。<br>是连衣裙。<br>wa n pi  i    su  desu<br>わんぴいすです。<br>ワンピースです。<br>这是糖，还是盐？<br>これはさとうですか、しおですか。<br>これは 砂糖 ですか、  塩  ですか。<br>是糖。<br>さとうです。<br> 砂糖  です。<br>那是味淋，还是料理酒？<br>それはみりんですか、りょうりしゅですか。<br>それは   味醂     ですか、     料理酒          ですか。<br>是料理酒。<br>りょうりしゅです。<br>    料理酒     です。<br>ここ、そこ、あそこ。<br>这里是教室。<br>ko　koha　　kyou　　sitsu　desu<br>ここは　きょうしつです。<br>ここは　　教室　　です。<br>那里是卫生间。<br>so　koha　　toi　re　desu<br>そこは　といれです。<br>そこは　トイレです。<br>那里是图书室。<br>a  so ko  ha    to  sho    sitsu   desu<br>あそこは としょしつです。<br>あそこは  図書室     です。<br>这里是客厅。<br>ここは りびんぐ です。<br>ここは リビング です。<br>那里是厨房。<br>そこは だいどころです。<br>そこは     台所      です。<br>那里是阳台。<br>あそこは べらんだ  です。<br>あそこは ベランダ です。<br>这里是派出所吗？<br>ko ko ha  ko u   ban   desuka<br>ここは こうばんですか。<br>ここは   交番     ですか。<br>是的。<br>ha i         sou   desu<br>はい、そうです。<br>那里是邮局吗？<br>soko ha   yuu   bin    kyoku      desuka<br>そこは ゆうびんきょく ですか。<br>そこは       郵便局         ですか。<br>不是，是医院。<br>i     i   e        chiga i   masu      byo   u  i   n    desu<br>いいえ、ちがいます。びょういんです。<br>いいえ、   違います。    病院       です。<br>那里是车站吗？<br>a   so  koha  e  ki   desuka<br>あそこは えき ですか。<br>あそこは  駅   ですか。<br>不是，是超市。<br>i     i    e      chi gai    masu     suu   pa a   desu<br>いいえ、ちがいます。すうぱあです。<br>いいえ、   違います。スーパーです。<br>那里是体育馆吗？<br>あそこはたいいくかんですか。<br>あそこは   体育館       ですか。<br>是的。<br>はい、そうです。<br>那里是音乐室吗？<br>そこは おんがくしつ ですか。<br>そこは      音楽室      ですか。<br>不是，是美术室。<br>いいえ、ちがいます。ずこうしつです。<br>いいえ、   違います。    図工室   です。<br>这里是三年二班的教室吗？<br>ここは さんねんにくみのきょうしつ ですか。<br>ここは          三年二組の教室             ですか。<br>是的。<br>はい、そうです。<br>面包店在这里。<br>pan  ya  ha koko  desu<br>ぱんやはここです。<br>パン屋はここです。<br>书店在那里。<br>hon  ya  ha  soko desu<br>ほんやはそこです。<br>本屋はそこです。<br>便利店在那里。<br>kon   bi  ni  ha a  so ko  desu<br>こんびにはあそこです。<br>コンビニはあそこです。<br>药妆店在那里。<br>やっきょくはそこです。<br>　　薬局　はそこです。<br>中学在这里。<br>ちゅうがっこうはここです。<br>　　中学校　　はここです。<br>机场在那里。<br>くうこうはあそこです。<br>　空港　はあそこです。<br>区役所在这里。<br>くやくしょはここです。<br>　区役所　はここです。<br>车站在哪里？<br>e    ki ha doko  desuka<br>えきはどこですか。<br>駅はどこですか。<br>在那里。<br>so ko desu<br>そこです。<br>银行在哪里？<br>gin    ko u  ha  doko  desuka<br>ぎんこうはどこですか。<br>銀行はどこですか。<br>在那里。<br>a   so ko desu<br>あそこです。<br>二年二班的教室在哪里？<br>ni  ne n  ni  ku mino kyo  u   si  tsuhadoko desuka<br>にねんにくみのきょうしつはどこですか。<br>二年二組の教室はどこですか。<br>在这里。<br>kokodesu<br>ここです。<br>自动取款机在哪里？<br>ATMはどこですか。<br>在那里。<br>あそこです。<br>酒店在哪里？<br>ホテルはどこですか。<br>在这里。<br>ここです。<br>理发店在哪里？<br>理容室はどこですか。<br>在那里。<br>そこです。<br>寿司好吃。<br>sushiha　o　i　shii　desu<br>すしは おいしいです。<br>寿司は 美味しいです。<br>书包贵。<br>ra n    do se ru ha　ta ka i  de su<br>らんどせるは　たかいです。<br>ランドセルは　高いです。<br>西瓜甜。<br>gin    ko u  ha  doko  desuka<br>すいかは　あまいです。<br>スイカは甘いです。<br>学校大。<br>ga    kko u ha    o   o  ki  i   desu<br>がっこうは おおきいです。<br>　学校　は　大きいです。<br>袜子便宜。<br>靴下は安いです。<br>柠檬酸。<br>レモンは酸っぱいです。<br>公共厕所小。<br>公衆トイレは小さいです。<br>这个荞麦面好吃。<br>ko no so ba ha o i   shi i   desu<br>このそばはおいしいです。<br>この蕎麦は美味しいです。<br>那个拉面不好吃。<br>a  no ra a  me  n  ha mazu i    desu<br>あのらあめんはまずいです。<br>あのラーメンは不味いです。<br>这个节目有意思。<br>ko no ban   gumi ha omo shi ro i   desu<br>このばんぐみはおもしろいです。<br>この番組は面白いです。<br>那个节目没意思。<br>a  no  ban   gumi ha omoshiro  ku na i  desu<br>あのばんぐみはつまらないです。<br>あの番組はつまらないです。<br>这张桌子高。<br>ko  no te  e   bu  ru ha ta   ka   i   desu<br>このてえぶるはたかいです。<br>このテーブルは高いです。<br>那条椅子矮。<br>so no i   su ha hi ku i    desu<br>そのいすはひくいです。<br>その椅子は   低いです。<br>这条裤子长。<br>ko no zu bo n  ha na ga  i   desu<br>このずぼんはながいです。<br>このズボンは長いです。<br>那件夹克短。<br>so no ja     ke       ttoha miji  ka  i    desu<br>そのじゃけっとはみじかいです。<br>そのジャケットは短いです。<br>那家店是新店吗？<br>a  no  mise ha a  ta ra shi  i   desuka<br>あのみせはあたらしいですか。<br>あの 店  は        新しいですか。<br>不是，是老店。<br>i    i     e       fu  ru i    desu<br>いいえ、ふるいです。<br>いいえ、    古いです。<br>烹调速度快吗？<br>cho    u   ri  no su pi  i    do ha ha ya i  desuka<br>ちょうりのすぴいどは はやいですか。<br>     調理  のスピードは     速いですか。<br>是的，很快。<br>ha i        ha ya i　desu<br>はい、はやいです<br>はい、　速いです。<br>不，很慢。<br>i     i   e       o　so i   desu<br>いいえ、おそいです。<br>いいえ、　遅いです。<br>这个煎饺好吃吗？<br>ko no ya ki gyo　u　zaha  o  i shi  i　desuka<br>このやきぎょうざは おいしいですか。<br>この焼きギョーザは 美味しいですか。<br>好吃。<br>ha　i　　o i   shi  i  desu<br>はい、おいしいです。<br>はい、美味しいです。<br>不好吃。<br>i　i　e　　ma zu i   desu<br>いいえ、まずいです。<br>いいえ、不味いです。<br>那个饮料是热的吗？<br>so no nomimonoha a tsu  i   desuka<br>そののみものはあついですか。<br>その    飲物   は   熱いですか。<br>不是，是冷的。<br>i    i     e      tsumeta i  desu<br>いいえ、つめたいです。<br>いいえ、　冷たいです。<br>服务好吗？<br>sa a   bi su ha i    i   desuka<br>さあびすはいいですか。<br>サービスはいいですか。<br>是，很好。<br>ha i         i    i    desu<br>はい、いいです。<br>不，不好。<br>i     i     e        wa  ru  i    desu<br>いいえ、わるいです。<br>いいえ、　悪いです。<br>我喜欢温泉。<br> wata shi ha o n  se  n  ga suki   desu<br>わたしはおんせんがすきです。<br>   私    は    温泉   が好きです。<br>妈妈喜欢音乐。<br>o  ka  a   sa n  ha o  n  ga kuga  su  ki desu<br>おかあさんはおんがくがすきです。<br>   お母さんは    音楽   が 好きです。<br>爸爸喜欢咖啡。<br> o  to  u  sa  n  ha  ko o  hi  i   ga su ki  desu<br>おとうさん は コーヒーがすきです。<br>   お父さん は      珈琲  が 好きです。<br>哥哥喜欢画。<br>oni  i   cha    n     ha    e  ga suki  desu<br>おにいちゃんは えがすきです。<br>お 兄  ちゃんは  絵が好きです。<br>我喜欢游泳。<br>wa tashi ha sui    e   i    gasuki   desu<br>わたしはすいえいがすきです。<br>     私  は    水泳   が 好きです。<br>哥哥喜欢羽毛球。<br>o  ni  i   cha    n    ha  ba domin to n  ga  suki   desu<br>おにいちゃんは ばどみんとんがすきです。<br>お  兄 ちゃん は バドミントンが好きです。<br>姐姐喜欢乒乓球。<br> o ne e    cha   n  ha   ta   kkyu    u   ga sukidesu<br>おねえちゃんは たっきゅうがすきです。<br>お　姉ちゃんは      卓球     が 好きです。<br>爸爸喜欢足球。<br>o to  u   sa n  ha fu   tto   bo o  ru ga su ki  desu<br>おとうさんは ふっとぼおるがすきです。<br>お 父  さんは フットボールが好きです。<br>爷爷喜欢跑步。<br>o   ji   i    cha   n   ha  ra n  ni   n  guga suki  desu 　<br>おじいちゃんは らんにんぐがすきです。<br>お  爺  ちゃんは ランニングが好きです。<br>你喜欢咖喱饭吗？<br>      a na  ta  ha    ka re  e   ra i    su ga 　suki desuka<br>（あなたは）かれえらいすが　すきですか。<br>（あなたは）カレーライスが　好きですか。<br>是的，喜欢。<br>ha i        su ki  desu<br>はい、すきです。<br>はい、好きです。<br>不，不喜欢。<br>i     i   e        su ki ja       na i   desu<br>いいえ、すきじゃないです。<br>いいえ、好きじゃないです。<br>王君喜欢意大利面吗？<br>o    u  ku n  ha su pa ge     tt(e)i   ga  suki  desuka<br>おうくんはスパゲッティがすきですか。<br>　王君   はスパゲッティが好きですか。<br>非常喜欢。<br>ha i         da i   su ki  desu<br>はい、だいすきです。<br>はい、   大好きです。<br>小林喜欢黄酱汤吗？<br> ri  n   sa n  ha misoshiru ga suki   desu ka<br>りんさんはみそしるがすきですか。<br>  林 さんは  味噌汁  が好きですか。<br>喜欢。<br>ha　i　　suki desu<br>はい、すきです。<br>はい、好きです。<br>哥哥喜欢泡菜吗？<br>o   ni  i   cha    n  ha kimuchi ga suki  desuka<br>おにいちゃんはきむちがすきですか。<br>お  兄 ちゃんはキムチが好きですか。<br>还可以。<br>ha i        ma a  ma a  su ki  desu<br>はい、まあまあすきです。<br>はい、まあまあ好きです。<br>小e喜欢牛肉饭吗？<br>i      i  cha   n  ha gyu  u   don   ga su kid esuka<br>いいちゃんはぎゅうどんがすきですか。<br>イーちゃんは       牛丼   が 好きですか。<br>不喜欢。<br>i　i　e　　su　ki ja      na i    desu<br>いいえ、すきじゃないです。<br>いいえ、好きじゃないです。<br>今天是9月1号。<br>kyo    u   hakugatsutsu i   ta chi desu<br>きょうはくがつついたちです。<br>  今日 は   九月    一日    です。<br>昨天是8月31号。<br>ki no  u ha hachi gatsu san   ju     u  i  chi  ni chi desu<br>きのうははちがつさんじゅういちにちです。<br>  昨日 は   八月          三十       一日      です。<br>明天是9月2号。<br>a  shi ta  hakugatsu futsuka desu<br>あしたはくがつふつかです。<br>  明日 は   九月   二日  です。<br>今天几号？<br>kyo    u   hanan   nichi  desuka<br>きょうはなんにちですか。<br>  今日 は   何　日 ですか。<br>今天3号。<br>kyo   u  ha  mikka  desu<br>きょうは みっかです。<br>今日   は　三日　です。<br>今天几月几号？<br>kyo    u ha  nan   gatsu nan  nichi desuka<br>きょうはなんがつなんにちですか。<br>   今日 は   何月      何日     ですか。<br>9月3号<br>ku gatsumi  kka   desu<br>くがつみっかです。<br>  九月  三日   です。<br>现在几点？<br>i  maha     na n  ji    desu ka<br>いまは　なんじですか。<br>今　は　　何時ですか。<br>8点。<br>ha chi ji  desu<br>はちじです。<br>　8時です。<br>现在几点？<br>i  maha     na n  ji    desu ka<br>いまは　なんじですか。<br>今　は　　何時ですか。<br>9点。<br>ku ji   desu<br>くじです。<br>9時です。<br>现在几点？<br>いまは　なんじですか。<br>今　は　　何時ですか。<br>现在七点几分？<br>いまは　しちじなんぷんですか。<br>　今は　七時    何分      ですか。<br>现在是7点25分。<br>いまはしちじにじゅうごふんです。<br>　今は　 七時 二十　五分　 です。<br>现在几点？<br>いまはなんじですか。<br>   今は 何 時  ですか。<br>11点16分。<br>じゅういちじじゅうろっぷんです。<br>十一時十六分です。<br>学校从上午8点半上到下午3点。<br>ga   kko ^ ha gozen  hachiji han   kara gogo san  ji  madedesu<br>がっこうはごぜんはちじはんからごごさんじまでです。<br>学校は午前8時半から午後3時までです。公司从9点到5点。<br>ka i  sha   ha kuji   karago ji  madedesu<br>かいしゃはくじからごじまでです。<br>会社は九時から五時までです。<br>超市从几点开到几点？<br>スーパーはなんじからなんじまでですか。<br>スーパーは 何時  から  何時  までですか。<br>8点到23点。<br>はちじからにじゅうさんじまでです。<br>八時から二十三時までです。<br>便利店从几点开到几点？<br>こんびにはなんじからなんじまでですか。<br>コンビニは何時から何時までですか。<br>便利店从上午7点开到晚上11点。<br>こんびにはごぜんしちじからよるじゅういちじまでです。<br>コンビニは午前7時から夜11時までです。<br>几点到几点午睡？<br>ひるねはなんじからなんじまでですか。<br>　昼寝は　何時から　何時までですか。<br>下午１点20分到35分。<br>ごごいちじにじっぷんからさんじゅうごふんまでです。<br>午後一時二十分から三十五分までです。</p><p>坐公交车去公司<br>ばすでかいしゃへいきます。<br>バスで会社へ行きます。<br>骑自行车去超市<br>じてんしゃでスーパーへいきます。<br>自転車でスーパーへ行きます。<br>坐电车去大阪<br>でんしゃでおおさかへいきます。<br>電車で大阪へ行きます。<br>坐出租车去医院<br>タクシーでびょういんへいきます。<br>タクシーで病院へ行きます。<br>坐飞机去美国<br>ひこうきであめりかへいきます。<br>飛行機でアメリカへ行きます。<br>坐船去泰国<br>ふねでたいへいきます。<br>船でタイへ行きます。<br>从这里怎么去机场？<br>kokokara ku^ko^ made do^ya  tte ikimasuka<br>ここからくうこうまでどうやって行きますか。<br>ここから空港までどうやって行きますか。</p><p>坐机场专线大巴去。<br>ku^ko^rimujinbasudeikimasu<br>くうこうりむじんばすでいきます。<br>空港リムジンバスで行きます。</p><p>从家里怎么去车站？<br>i e kara eki made douyatte ikimasuka<br>いえからえきまでどうやっていきますか。<br>家から駅までどうやって行きますか。</p><p>骑自行车去。<br>zitensha de ikimasu<br>じてんしゃでいきます。<br>自転車で行きます。</p><p>从学校怎么到博物馆？<br>gakko^kara hakubutsukan made do^yatte ikimasuka<br>がっこうからはくぶつかんまでどうやっていきますか。<br>学校から博物館までどうやって行きますか。</p><p>坐公交车去。<br>basudeikimasu<br>ばすでいきます。<br>バスで行きます。<br>哥哥骑摩托车去哪里？<br>oniichan ha ootobai de doko he ikimasuka<br>おにいちゃんはオートバイでどこへいきますか。<br>　お兄ちゃんはオートバイでどこへ行きますか。</p><p>去艺术中心。<br>geijutsusentaa he ikimasu<br>げいじゅつセンターへいきます。<br>　芸術　　センターへ行きます。</p><p>奶奶骑自行车去哪里？<br>i e kara eki made douyatte ikimasuka<br>おばあちゃんはじてんしゃでどこへいきますか。<br>お祖母ちゃんは自転車でどこへ行きますか。</p><p>去市场。<br>ichiba he ikimasu<br>いちばへいきます。<br>　市場へ行きます。</p><p>爷爷坐轮椅去哪里？<br>ojiichan ha kurumaisu de doko he ikimasuka<br>おじいちゃんはくるまいすでどこへいきますか。<br>お爺ちゃんは車いすでどこへ行きますか。</p><p>去小诊所。<br>shinryo^sho he kimasu<br>しんりょうしょへいきます。<br>診療所へ行きます。<br>爷爷吃药。<br>ojiichan ha kusuri wo nomimasu<br>おじいちゃんはくすりをのみます。<br>おじいちゃんは薬を飲みます。</p><p>奶奶喝了热汤。<br>obaachan ha atatakaisuupu wo nomimasita<br>おばあちゃんはあたたかいスープをのみました。<br>おばあちゃんは　　温かいスープを飲みました。</p><p>妈妈喝了果汁了吗？<br>okaasan ha juusu wo nomimashitaka<br>おかあさんはジュースをのみましたか。<br>お母さんはジュースを飲みましたか。</p><p>是的，喝过了。<br>hai nomimashita<br>はい、のみました。<br>はい、飲みました。</p><p>不，没喝。<br>iie madadesu<br>いいえ、まだです。<br>几点去了学校？<br>nanjinigakko^heikimashitaka<br>なんじにがっこうへいきましたか。<br>　何時に　学校　へ行きましたか。</p><p>8点15分去了学校。<br>hachijijuugofun ni gakko^ he ikimashita<br>はちじじゅうごふんにがっこうへいきました。<br>八時十五分に学校へ行きました。<br>我7点起床。7点半吃早饭。8点15分去上学。去学校之前洗脸。</p><p>わたしはしちじにおきます。しちじはんにあさごはんをたべます。<br>はちじじゅうごふんにがっこうへいきます。がっこうへいくまえにかおをあらいます。</p><p>私は七時に起きます。七時半に朝ご飯を食べます。<br>八時十五分に学校へ行きます。学校へ行く前に顔を洗います。<br>ha wo migaku<br>歯を磨く　<br>ha wo migakimasu<br>歯を磨きます　<br>ha wo migakimasshita<br>歯を磨きました<br>te wo arau<br>手を洗う　<br>te wo araimasu<br>手を洗います　<br>te wo araimashita<br>手を洗いました</p><p>ashi wo arau<br>足を洗う　<br>ashi wo araimasu<br>足を洗います　<br>ashi wo araimashita<br>足を洗いました</p><p>kaminoke wo arau<br>髪の毛を洗う　<br>kaminoke wo araimasu<br>髪の毛を洗います　<br>kaminoke wo araimashita<br>髪の毛を洗いました<br>昨天几点睡觉？<br>kino^ nanjini nemashitaka<br>きのうなんじにねましたか。<br>昨日何時に寝ましたか。</p><p>昨天我8点50分就睡觉了。<br>kino^ watashi ha hachijigojippunni nemashita<br>きのうわたしははちじごじっぷんにねました。<br>昨日 私は八時五十分に寝ました。<br>今天早上的报纸看了吗？<br>kesanoshinbunwoyomimashitaka<br>けさのしんぶんをよみましたか。<br>今朝の新聞を読みましたか。</p><p>看了。<br>hai        yomimashita<br>はい、よみました。<br>はい、読みました。</p><p>不，还没看。<br>iie              madadesu<br>いいえ、まだです。<br>妈妈：几点回家？<br>mama：nanji ni uchi he kaerimasuka<br>ママ：なんじにうちへかえりますか。<br>ママ：何時に家へ帰りますか。</p><p>小e：傍晚五点五十分回家。<br>イー： gojigojippun ni uchihekaerimasu<br>イー：ごじごじっぷんにうちへかえります。<br>イー：五時五十分に家へ帰ります。</p><p>妈妈 ：现在开始做什么？<br>mama：imakarananiwoshimasuka<br>ママ：いまからなにをしますか。<br>ママ：今から何をしますか。</p><p>小e ：现在开始做作业。<br>イー：ima kara shukudai wo yarimasu<br>イー：いまからしゅくだいをやります。<br>イー：今から宿題をやります。<br>妈妈：星期一学校休息吗？<br>mama：getsuyo^bigakko^woyasumimasuka<br>ママ：げつようびがっこうをやすみますか。<br>ママ：月曜日学校を休みますか。</p><p>小e：不，不休息。<br>イー：       iie   yasumimasen<br>イー：いいえ、やすみません。<br>イー：いいえ、休みません。</p><p>小e ：妈妈每天写日记吗？<br>イー：okaasan ha mainichi nikki wo kakimasuka<br>イー：おかあさんはまいにちにっきをかきますか。<br>イー：お母さんは毎日日記を書きますか。</p><p>ママ ：不，不写日记。<br>mama：iie kakimasen<br>ママ：いいえ、かきません。<br>ママ：いいえ、書きません。</p><p>ママ ：每天工作。<br>mama：mainichihatarakimasu<br>ママ：まいにちはたらきます。<br>ママ：毎日働きます。<br>妈妈：昨天在公园干了什么？<br>mama：kino^ ko^en de naniwoshimashitaka<br>ママ：きのうこうえんでなにをしましたか。<br>ママ：昨日公園で何をしましたか。</p><p>小e：荡了秋千。<br>イー：     burankowokogimashita<br>イー：ブランコをこぎました。<br>イー：ブランコを漕ぎました。</p><p>妈妈 ：玩了滑梯了吗？<br>mama：suberidai　de　asobimashitaka<br>ママ：すべりだいであそびましたか。<br>ママ：滑り台で遊びましたか。</p><p>小e ：没有玩儿滑梯。<br>イー：iie　suberidai　de　asobimasendeshita 　<br>イー：いいえ、すべりだいであそびませんでした。<br>イー：いいえ、滑り台で遊びませんでした。</p><p>小e ：玩了单杠。<br>イー：tetsubo^ wo shimashita<br>イー：てつぼうをしました。<br>イー：鉄棒をしました。</p><p>妈妈 ：开心吗？<br>mama：tanoshiikatta desuka<br>ママ：たのしかったですか。<br>ママ：楽しかったですか。</p><p>小e ：很开心。<br>イー：tanoshiikatta desu<br>イー：たのしかったです。<br>イー：楽しかったです。<br>喜欢什么料理？<br>sukinaryo^ri ha nandesuka<br>すななりょうりはなんですか。<br>好きな料理はなんですか。</p><p>寿司。<br>sushidesu<br>すしです。<br>寿司です。</p><p>喜欢什么料理？<br>donnaryo^ri ga sukidesuka<br>どんなりょうりがすきですか。<br>どんな料理が好きですか。</p><p>炸鱼。<br>sakana no furai ga suki desu<br>さかなのふらいがすきです。<br>魚のフライが好きです。<br>妈妈：午餐菜单看过了吗？<br>mama:ranchimenyuu o mimashitaka<br>ママ：ランチメニューを見ましたか。</p><p>小e：看过了。イー：mimashita<br>イー：見ました。</p><p>妈妈：喜欢吃什么料理？<br>ママ：donnaryo^rigasukidesuka<br>ママ：どんな料理が好きですか。</p><p>小e：喜欢吃天妇罗乌冬面。<br>イー：tenpuraudongasukidesu<br>イー：天ぷらうどんが好きです。</p><p>小e：妈妈吃什么？<br>イー：mama ha nani o tabemasuka<br>イー：ママは何を食べますか。</p><p>妈妈：我吃套餐。<br>ママ：watashihateishokuotabemasu<br>ママ：私は定食を食べます。</p><p>妈妈：今天的套餐看上去很好吃。<br>ママ：kyo^noteishokuhaoishiso^desu<br>ママ：今日の定食は美味しそうです。</p><p>妈妈：有饭团，炸虾，沙拉，腌渍小菜和黄酱汤。<br>ママ：onigiritoebifuraitosaradato<br>ママ：お握りとエビフライとサラダと<br>　　tsukemonotomisoshirugaarimasu<br>　　　漬物とみそ汁があります。<br>下周末一起吃饭吧。<br>raishuumatsu isshoni shokuji o shimasho^<br>らいしゅうまついっしょにしょくじをしましょう。<br>来週末一緒に食事をしましょう。</p><p>这周末一起吃饭吧。<br>konshuumatsu isshoni gohan o tabemasho^<br>こんしゅうまついっしょにごはんをたべましょう。<br>今週末一緒にご飯を食べましょう。<br>饭后一起散步吧。<br>gohan no ato isshoni sanposhimasho^<br>ごはんのあといっしょにさんぽしましょう。<br>ご飯の後一緒に散歩しましょう。</p><p>和妈妈一起去超市吧。<br>mama to isshoni suupaa he ikimasho^<br>ママといっしょにスーパーへいきましょう。<br>ママと一緒にスーパーへ行きましょう。</p><p>用日语一起说说吧。<br>nihongo de isshoni hanashimasho^<br>にほんごでいっしょにはなしましょう。<br>日本語で一緒に話しましょう。<br>想吃炸猪排。<br>tonkatsu ga tabetai<br>とんかつがたべたい。<br>とんかつが食べたい。</p><p>想吃杂样煎菜饼。<br>okonomiyaki ga tabetai<br>おこのみやきが食べたい。<br>お好み焼きが食べたい。<br>妈妈：晚饭想吃什么？<br>bangohan ha nani ga tabetaidesuka<br>ばんごはんはなにがたべたいですか。<br>晩御飯は何が食べたいですか。</p><p>e酱：想吃日式料理。<br>washoku ga tabetaidesu<br>わしょくがたべたいです。<br>和食が食べたいです。</p><p>妈妈：我也想吃。<br>watashi mo tabetaidesu<br>わたしもたべたいです。<br>私も食べたいです。</p><p>e酱：涮肉不错哦。<br>shabushabu ga iidesune<br>しゃぶしゃぶがいいですね。<br>しゃぶしゃぶがいいですね。</p><p>妈妈：也想吃卤煮菜哦。<br>oden mo tabetai desune<br>おでんもたべたいですね。<br>おでんも食べたいですね。</p><p>妈妈：怎么办？<br>do^shiyo^<br>どうしよう。</p><p>e酱：就鸡素烧吧<br>sukiyaki ni shimasho^<br>すきやきにしましょう。<br>鋤焼きにしましょう。</p><p>妈妈：那也不错哦。<br>soremoiidesune<br>それもいいですね。</p><p>妈妈：一起煮饭吧。<br>saa     isshoni bangohan o tsukurimasho^<br>さあ、いっしょにばんごはんをつくりましょう。<br>さあ、一緒に晩御飯を作りましょう。</p><p><strong>※文末加ね，显得语气更柔和。</strong><br>一起去看电影吧。<br>isshoni eiga o mini ikimasho^<br>いっしょにえいがをみにいきましょう。<br>一緒に映画を見に行きましょう。</p><p>去吃午饭了。<br>hirugohan o tabeni ikimashita<br>ひるごはんをたべにいきました。<br>昼ごはんを食べに行きました。</p><p>明天想去见朋友。<br>ashita tomodachi ni ainiikitaidesu<br>あしたともだちにあいにいきたいです。<br>明日友達に会いに行きたいです。<br>这个柿子多少钱？<br>kono kaki ha ikura desuka<br>この柿はいくらですか。</p><p>1个98日元。<br>ikko kyuujuuhachi en desu<br>いっこきゅうじゅうはちえんです。<br>一個98円です。<br>柚子多少钱？<br>gureepufuruutsu ha ikuradesuka<br>グレープフルーツはいくらですか。<br>グレープフルーツはいくらですか。</p><p>5个装398日元。<br>gokoirisanbyakukyuujuuhachiendesu<br>ごこいりさんびゃくきゅうじゅうはちえんです。<br>五個入り三百九十八円です。<br>早晨采摘的蓝莓多少钱？<br>asadoriburuuberii ha ikuradesuka<br>あさどりブルーベリーはいくらですか。<br>朝採りブルーベリーはいくらですか。</p><p>100克450日元。<br>hyaku guramu yonhyakugojuu en desu<br>ひゃくぐらむよんやくごじゅうえんです。<br>100グラム450円です。<br>边听音乐边洗碗。<br>ongaku o kikinagarasara o araimasu<br>おんがくをききながらさらをあらいます。<br>音楽を聴きながら皿を洗います。</p><p>ながら 边～<br>动词去掉ます换上ながら就可以表达边干某事的意思。<br>比如 边吃 食べながら  边听 聴きながら　<br>边吃零食边看电视吧。<br>okashi o tabenagara terebi o mimasho^<br>おかしをたべながらてれびをみましょう。<br>お菓子を食べながらテレビを見ましょう。</p><p>哥哥边唱歌边冲淋浴了。<br>oniichan ha uta o utai nagara shawaa o abimashita<br>おにいちゃんはうたをうたいながらシャワーをあびました。<br>お兄ちゃんは歌を歌いながらシャワーを浴びました。</p><p>我想边带孩子边工作。</p><p>watashihakosodateshinagarahatarakitaidesu<br>わたしはこそだてしながらはたらきたいです。<br>私は子育てしながら働きたいです。<br>书架上有什么？<br>Hondananoueninanigaarimasuka<br>ほんだなのうえになにがありますか。<br>本棚の上に何がありますか。</p><p>有书和字典。<br>hontojishogaarimasu<br>ほんとじしょがあります。<br>本と辞書があります。</p><p>※　あります 表示物体存在<br>ある　あります　ありません<br>ありました　ありませんでした<br>桌子下面有什么？<br>tsukuenoshitani nani ga arimasuka<br>つくえのしたになにがありますか。<br>机の下に何がありますか。</p><p>有头盔和椅子。<br>herumettotoisugaarimasu<br>ヘルメットといすがあります。<br>ヘルメットと椅子があります。</p><p>钱包里有什么？<br>saifunonakaninanigaarimasuka<br>さいふのなかになにがありますか。<br>財布の中に何がありますか。</p><p>有钱和信用卡。<br>okanetokurejittokaadogaarimasu<br>おかねとクレジットカードがあります。<br>お金とクレジットカードがあります。<br>动物园有什么动物？<br>do^butsuenni donnado^butsu ga imasuka<br>どうぶつえんにどんなどうぶつがいますか。<br>動物園にどんな動物がいますか。<br>有老虎，狮子，企鹅等。<br>papatomamagaimasu<br>とらやらいおんやぺんぎんがいます。<br>虎やライオンやペンギンがいます。</p><p>※　います 表示人或动物的存在<br>いる　います　いません<br>いました　いませんでした</p><p>用や时表示还有其他未罗列出来的事物的意思。<br>隔壁医院里有几个医生？<br>tonarinobyo^innonakani isha ga nannin imasuka<br>となりのびょういんのなかにいしゃがなんにんいますか。<br>隣の病院の中に医者が何人いますか。<br>有25人。<br>nijuugoninimasu<br>にじゅうごにんいます。<br>二十五人います。</p><p>沙发旁边有什么？<br>sofaanoyokoni naniga imasuka<br>そふぁあのよこになにがいますか。<br>ソファーの横に何がいますか。</p><p>有小猫。<br>konekogaimasu<br>こねこがいます。<br>子猫がいます。<br>和式房间里有什么？<br>washitsuni naniga arimasuka<br>わしつになにがありますか。<br>和室に何がありますか。<br>有空调,书桌，电钢琴等。<br>eakonya gakushuudukueya denshipiano nadogaarimasu<br>エアコンやがくしゅうづくえやでんしぴあのなどがあります。<br>エアコンや学習机や電子ピアノなどがあります。</p><p>没有电视。<br>terebihaarimasen<br>てれびはありません。<br>テレビはありません。</p><p>也没有床。<br>heddomoarimasen<br>ベッドもありません。</p><p>用や时表示还有其他未罗列出来的事物的意思。<br>洋式房间里有什么？<br>yo^shitsuni naniga arimasuka<br>ようしつになにがありますか。<br>洋室に何がありますか。</p><p>有书架，电脑和电热器等。<br>hondanayapasokonyahiitaanadogaarimasu<br>ほんだなやぱそこんやでんきヒーターなどがあります。<br>本棚やパソコンや電気ヒーターなどがあります。</p><p>没有沙发。<br>sofaahaarimasen<br>ソファーはありません。</p><p>也没有空气净化器。<br>くうきせいじょうきもありません。<br>空気清浄機もありません。<br>家里有几个房间？<br>ieniheyaga ikutsu arimasuka<br>いえにへやがいくつありますか。<br>家に部屋がいくつありますか。<br>有两个（房间）。<br>futatsu arimasu<br>ふたつあります。<br>二つあります。</p><p>木地板的洋式房间和榻榻米的和式房间各有一间。<br>furooringunoyo^shitsuto tataminowashitsu ga hitotsuzutsu arimasu<br>フローリングのようしつとたたみのわしつがひとつずつあります。<br>フローリングの洋室と畳の和室が一つずつあります。<br>冰箱里有几个苹果？<br>reizo^koni ringo ga ikutsu arimasuka<br>れいぞうこにりんごがいくつありますか。<br>冷蔵庫にリンゴがいくつありますか。<br>有四个。<br>yotsu arimasu<br>よつあります。<br>四つあります。</p><p>富士和王林各有两个。<br>fuji to o^ringa futatsu zutuarimasu<br>ふじとおうりんがふたつずつあります。<br>富士と王林が二つずつあります。<br>浴室变漂亮了吗？<br>yokushitsugakireininarimashitaka<br>よくしつがきれいになりましたか。<br>浴室が綺麗になりましたか。</p><p>是呀，变得非常漂亮啦。<br>hai        totemokireininarimashitayo<br>はい、とてもきれいになりましたよ。<br>はい、とても綺麗になりましたよ。<br>洗发水变少了吧。<br>shanpuugasukunakunarimashitane<br>シャンプーがすくなくなりましたね。<br>シャンプーが少なくなりましたね。<br>是呀。<br>so^desune<br>そうですね。</p><p>浴缸里的水变冷了吗？<br>yubunenonakano oyu gatsumetakunarimashitaka<br>ゆぶねのなかのおゆがつめたくなりましたか。<br>湯船の中のお湯が冷たくなりましたか。</p><p>不，还是温热的。<br>iie madanukuidesuyo<br>いいえ、まだぬくいですよ。<br>いいえ、まだ温いですよ。<br>完全进入冬天了。<br>sukkari fuyuni narimashita<br>すっかりふゆになりました。<br>すっかり冬になりました。</p><p>冬天太冷不好度过。<br>fuyuha samukute sugosinikuidesu<br>ふゆはさむくてすごしにくいです。<br>冬は寒くて過ごしにくいです。<br>完全进入秋天了。<br>sukkari akini narimashita<br>すっかりあきになりました。<br>すっかり秋になりました。<br>秋天凉爽好度过。<br>haruhaatatakakutesugoshiyasuidesu<br>あきはさわやかですごしやすいです。<br>秋は爽やかで過ごしやすいです。</p><p>完全进入夏天了。<br>sukkari natsuni narimashita<br>すっかりなつになりました。<br>すっかり夏になりました。</p><p>夏天太闷热不好度过。<br>natsuha mushiatsukutesugoshinikuidesu<br>なつはむしあつくてすごしにくいです。<br>夏は蒸し暑くて過ごしにくいです。<br>老师用什么写字？<br>senseiha nande jiokakimasuka<br>せんせいはなんでじをかきますか。<br>先生は何で字を書きますか。</p><p>老师用粉笔写字。<br>senseihacho^kudeji o kakimasu<br>せんせいはチョークでじをかきます。<br>先生はチョークで字を書きます。<br>法国人用什么吃牛排？<br>furansujinha　nandesuteeki o tabemasuka<br>ふらんすじんはなんでステーキをたべますか。<br>フランス人は何でステーキを食べますか。<br>用刀和叉子吃牛排。<br>naifutofo^kudesuteeki o tabemasu<br>ナイフとフォークでステーキをたべます。<br>ナイフとフォークでステーキを食べます。</p><p>哥哥用什么剪纸？<br>oniichanhanandekamiokirimasuka<br>おにいちゃんはなんでかみをきりますか。<br>お兄ちゃんはなんで紙を切りますか。</p><p>用裁纸刀剪纸。<br>kattaadekami o kirimasu<br>カッターでかみをきります。<br>カッターで紙を切ります。<br>你从圣诞老人那里得到了什么样的礼物？<br>santasan kara donna purezento o moraimashitaka<br>サンタさんからどんなプレゼントをもらいましたか。</p><p>我从圣诞老人那里得到了两本书。<br>watashiha santasan ni hon o nisatsu moraimashita<br>わたしはサンタさんにほんをにさつもらいました。<br>私はサンタさんに本を二冊もらいました。<br>你想从爸爸那里得到什么样的建议？<br>oto^sankara donna adobaisu o moraitai desuka<br>おとうさんからどんなアドバイスをもらいたいですか。<br>お父さんからどんなアドバイスをもらいたいですか。</p><p>我想从爸爸那里得到学习的建议。<br>watashiha papakara benkyo^no adobaisu o moraitaidesu<br>わたしはぱぱからべんきょうのアドバイスをもらいたいです。<br>私はパパから勉強のアドバイスをもらいたいです。</p><p>小孩子从老师那里得到了什么样的奖励？<br>kodomoha senseini donnagoho^bi o moraimashitaka<br>こどもはせんせいにどんなごほうびをもらいましたか。<br>子どもは先生にどんなご褒美をもらいましたか。</p><p>小孩子从老师那里得到了支持的卡片。<br>kodomoha senseini o^ennomesseejikaado o moraimashita<br>こどもはせんせいにおうえんのメッセージカードをもらいました。<br>子どもは先生に応援のメッセージカードをもらいました。<br>自己会干什么呢？<br>jibundenanigadekimasuka<br>じぶんでなにができますか。<br>自分で何ができますか。</p><p>我会自己写贺年卡。<br>watashihajibundenengajo^okakukotogadekimasu<br>わたしはじぶんでねんがじょうをかくことができます。<br>私は自分で年賀状を書くことができます。<br>我会自己做饭了。<br>watashihajibundegohan o tsukurukotogadekimashita<br>わたしはじぶんでごはんをつくることができました。<br>私は自分でご飯を作ることができました。</p><p>我会自己寄往返明信片。<br>watashiha jibunde o^fukuhagaki o dasukotogadekimasu<br>わたしはじぶんでおうふくはがきをだすことができます。<br>私は自分で往復はがきを出すことができます。<br>正月怎么度过的？<br>osho^gatsuha ikagaosugoshideshitaka<br>おしょうがつはいかがおすごしでしたか。<br>お正月はいかがお過ごしでしたか。</p><p>我睡觉度过正月。<br>watashiha nesho^gatsudeshita<br>わたしはねしょうがつでした。<br>私は寝正月でした。</p><p>睡太多疲倦了。<br>nesugitetsukaremashita<br>ねすぎてつかれました。<br>寝すぎて疲れました。<br>吃了太多好吃的东西肚子都痛了。<br>gochiso^otabesugite onakagaitakunarimashita<br>ごちそうをたべすぎておなかがいたくなりました。<br>御馳走を食べすぎてお腹が痛くなりました。</p><p>新春开卖买了太多福袋钱包变轻了。<br>hatsuuridefukubukurookaisugitesaifugakarukunarimashita<br>はつうりでふくぶくろをかいすぎてさいふがかるくなりました。<br>初売りで福袋を買いすぎて財布が軽くなりました。</p><p>我回来啦。<br>ただいま。<br>您回来了。<br>okaeri<br>おかえり。<br>お帰り。<br>你在干什么？<br>nanioshiteimasuka<br>なにをしていますか。<br>何をしていますか。<br>我在打坐。<br>zazenokundeimasu<br>ざぜんをくんでいます。<br>座禅を組んでいます。<br>爸爸，哥哥和爷爷都不在啊。<br>oto^sanmooniichanmoojiichanmoimasenne<br>おとうさんもおにいちゃんもおじいちゃんもいませんね。<br>お父さんもお兄ちゃんもお爺ちゃんもいませんね。<br>哥哥在自己房间里学习。<br>oniichanhazibunnoheyadebenkyo^shiteimasu<br>おにいちゃんはじぶんのへやでべんきょうしています。<br>お兄ちゃんは自分の部屋で勉強しています。<br>爷爷去散步了。<br>ojiichanhasanponidekakemashita<br>おじいちゃんはさんぽにでかけました。<br>お爺ちゃんは散歩に出かけました。<br>爸爸和叔叔在书房里下棋。<br>oto^sanhaojisantoshosaideigooutteimasuyo<br>おとうさんはおじさんとしょさいでいごをうっていますよ。<br>お父さんはおじさんと書斎で囲碁を打っていますよ。<br>现在雨正淅淅沥沥地下着。<br>imaha amega shitoshito futteimasu<br>いまはあめがしとしとふっています。<br>今は雨がしとしと降っています。<br>太冷了不想离开家。<br>samukuteheyakaradetakunaidesu<br>さむくてへやからでたくないです。<br>寒くて部屋から出たくないです。<br>我也想翘课。<br>watashimogakko^osaboritaidesu<br>わたしもがっこうをさぼりたいです。<br>私も学校をサボりたいです。<br>是呀。<br>so^desune<br>そうですね。<br>真想一直猫在家里啊。<br>zuttoienikomoritaidesune<br>ずっといえにこもりたいですね。<br>ずっと家にこもりたいですね。<br>但是，周末我想去玩儿。<br>demo   shuumatsuhaasobiniikitaidesu<br>でも、しゅうまつはあそびにいきたいです。<br>でも、週末は遊びに行きたいです。<br>先去学校再说。<br>toriaezugakko^heittekudasai<br>とりあえずがっこうへいってください。<br>取り敢えず学校へ行ってください。<br>我想去迪士尼乐园。<br>watashihadizuniirandoheikitaidesu<br>わたしはディズニーランドへいきたいです。<br>私はディズニーランドへ行きたいです。<br>我很理解你的心情，可是<br>kimochihayokuwakarimasuga<br>きもちはよくわかりますが、<br>気持ちはよく分かりますが、<br>妈妈不想排长队。<br>mamahanagaigyo^retsuninarabitakunaidesu<br>ママはながいぎょうれつにならびたくないです。<br>ママは長い行列に並びたくないです。<br>除了迪士尼乐园，还有很多漂亮的地方。<br>dizuniirandoigai  sutekinatokorogaippaiarimasuyo<br>ディズニーランドいがい、すてきなところがいっぱいありますよ。<br>ディズニーランド以外、素敵なところがいっぱいありますよ。<br>知道。<br>shitteimasu<br>しっています。<br>知っています。<br>我们看了很多京都的世界遗产。<br>watashitachihakyo^tonosekaiisan o takusanmitekimashita<br>わたしたちはきょうとのせかいいさんをたくさんみてきました。<br>私達は京都の世界遺産をたくさん見てきました。<br>对，也去过乌冬面王国香川。<br>so^ udonnoo^kuni kagawakenheittakotomoarimasu<br>そう、うどんの王国―香川へ行ったこともあります。<br>去过广岛。<br>hiroshimaheittakotogaarimasu<br>ひろしまへいったことがあります。<br>広島へ行ったことがあります。<br>但是，我一点儿都不记得。<br>demo zenzenoboeteimasenyo<br>でも、ぜんぜんおぼえていませんよ。<br>でも、全然覚えていませんよ。<br>也去过东京。<br>to^kyo^heittakotomoarimasu<br>とうきょうへいったこともあります。<br>東京へ行ったこともあります。<br>真的吗？什么时候的事儿？<br>honto^desuka      itsunokotodesuka<br>ほんとうですか。いつのことですか。<br>本当ですか。いつのことですか。<br>以前。<br>mukashidesu<br>むかしです。<br>昔です。<br>早就忘了。还想去。<br>sukkariwasuremashita   mataikitaidesu<br>すっかりわすれました。またいきたいです。<br>すっかり忘れました。また行きたいです。<br>能帮我装好加湿口罩吗？<br>nuremasuku o settoshitekuremasenka<br>ぬれマスクをセットしてくれませんか。<br>濡れマスクをセットしてくれませんか。<br>可以。<br>iiyo<br>いいよ。<br>昨天咳嗽不止怎么也睡不好。<br>kino^sekigatomaranakutenakanakaneraremasendeshita<br>きのうせきがとまらなくてなかなかねられませんでした。<br>昨日咳が止まらなくてなかなか寝られませんでした。<br>那就戴上这个口罩好好酣睡一觉。<br>ja konomasuku o tsuketegussurinetekudasai<br>じゃ、このマスクをつけてぐっすりねてください。<br>じゃ、このマスクをつけてぐっすり寝てください。<br>谢谢。<br>arigato^<br>ありがとう。<br>能帮我把水壶拿过来吗？<br>suito^omottekitekuremasenka<br>すいとうをもってきてくれませんか。<br>水筒を持ってきてくれませんか。<br>给，多喝水。<br>do^zo mizu o ippainondekudasai<br>どうぞ、みずをいっぱいのんでください。<br>どうぞ、水を一杯飲んでください。<br>谢谢。<br>arigato^<br>ありがとう。<br>能帮我买草莓吗？<br>ichigookattekitekuremasenka<br>いちごをかってきてくれませんか。<br>イチゴを買ってきてくれませんか。<br>我想多摄取维他命C。<br>bitaminsi o ippaitoritaidesu<br>ビタミンCをいっぱいとりたいです。<br>ビタミンCをいっぱい取りたいです。<br>那我去买草莓回来。<br>ja ichigookattekimasu<br>じゃ、いちごをかってきます。<br>じゃ、イチゴを買ってきます。<br>绘本到了。<br>ehongatodokimashita<br>えほんがとどきました。<br>絵本が届きました。<br>太好啦。<br>yattaa<br>ヤッター。<br>通知读书会的朋友们比较好。<br>dokushokainominasannishirasetaho^gaiidesune<br>どくしょかいのみなさんにしらせたほうがいいですね。<br>読書会の皆さんに知らせたほうがいいですね。<br>当然。<br>atarimaedesuyo<br>あたりまえですよ。<br>当たり前ですよ。<br>都是好绘本。<br>iiehonbakaridesu<br>いいえほんばかりです。<br>いい絵本ばかりです。<br>『小橡子村』系列非常有意思。<br>dongurimura shiriizugatottemoomoshiroidesu<br>【どんぐりむら】シリーズがとってもおもしろいです。<br>【どんぐりむら】シリーズがとっても面白いです。<br>妈妈也读一下比较好。<br>mamamoichidoyondaho^gaiidesuyo<br>ママもいちどよんだほうがいいですよ。<br>ママも一度読んだほうがいいですよ。<br>知道了。<br>wakarimashita<br>わかりました。<br>分かりました。<br>『已经脱不掉了』在大人当中也有人气。<br>mo^nugenai ha otonanoaida demo ninkigaarimasuyo<br>【もうぬげない】はおとなのあいだでもにんきがありますよ。<br>【もうぬげない】は大人の間でも人気がありますよ。<br>大人们也在读吗？<br>otonatachimo yondeimasuka<br>おとなたちもよんでいますか。<br>大人たちも読んでいますか。<br>是，有非常多大人也都读了这本绘本。<br>un takusan no otonamokonoehon o yomimashitayo<br>うん、たくさんのおとなもこのえほんをよみましたよ。<br>うん、たくさんの大人もこの絵本を読みましたよ。<br>那赶紧寄回中国比较好。<br>ja  hayakuchuugokuheokuttaho^gaiidesune<br>じゃ、はやくちゅうごくへおくったほうがいいですね。<br>じゃ、早く中国へ送ったほうがいいですね。<br>今天 有作业吗？<br>kyo^shukudaihaarimasuka<br>きょう しゅくだいはありますか。<br>今日，宿題はありますか。<br>只剩一些。<br>sukoshidakenokotteimasu<br>すこしだけのこっています。<br>少しだけ残っています。<br>赶紧做作业。<br>hayakushukudaioyattekudasai<br>はやくしゅくだいをやってください。<br>早く宿題をやってください。<br>等下能在公园玩儿吗？<br>atodeko^endeasondemoiidesuka<br>あとでこうえんであそんでもいいですか。<br>後で公園で遊んでもいいですか。<br>公园泥泞不堪哦。<br>ko^engadorodorodesuyo<br>公園がドロドロですよ。<br>那我能在家里看巧虎吗？<br>ja iedeshimajiro^omitemoiidesuka<br>じゃ、いえでしまじろうをみてもいいですか。<br>じゃ、家でしまじろうを見てもいいですか。<br>不行。<br>damedesu<br>だめです。<br>能吃冰激凌吗？<br>aisuotabetemoiidesuka<br>アイスをたべてもいいですか。<br>アイスを食べてもいいですか。<br>吃一点儿的话可以。<br>sukoshinara<br>少しなら。<br>昨天溜冰怎么样？<br>kino^noaisusukeetohado^deshitaka<br>きのうのアイススケートはどうでしたか。<br>昨日のアイススケートはどうでしたか。<br>很开心。<br>tanoshikattadesu<br>たのしかったです。<br>楽しかったです。<br>摔了几次？<br>nankaiguraikokemashitaka<br>なんかいぐらいこけましたか。<br>何回ぐらいこけましたか。<br>没数。<br>kazoeteimasendeshita<br>かぞえていませんでした。<br>数えていませんでした。<br>在冰上滑的时候很容易摔倒呀。<br>koorinoueosuberutoki kokeyasuidesune<br>こおりのうえをすべるとき、こけやすいですね。<br>氷の上を滑るとき、こけやすいですね。<br>虽然又滑又摔的，但是很开心。<br>subettarikoketarishimashitaga tanoshikattadesu<br>すべったりこけたりしましたが、たのしかったです。<br>滑ったりこけたりしましたが、楽しかったです。<br>滑得很好了，恭喜恭喜。<br>jo^zunisuberukkotogadekimashitane omedeto^<br>じょうずにすべることができましたね。おめでとう。<br>上手に滑ることができましたね。おめでとう。<br>昨天是第几次滑？<br>kino^hanankaimedeshitaka<br>きのうはなんかいめでしたか。<br>昨日は何回目でしたか。<br>第二次。<br>nikaimedeshita<br>にかいめでした。<br>二回目でした。<br>我想滑得更好。<br>mottojo^zuninaritaidesu<br>もっとじょうずになりたいです。<br>もっと上手になりたいです。<br>花样滑冰选手们还能在溜冰场上跳跃，表演哦。<br>figyuasukeetosenshutachiharinkunouedejanpushitariodottarisurukotomodekimasuyo<br>フィギュアスケートせんしゅたちはりんくのうえでジャンプしたりおどったりすることもできますよ。<br>フィギュアスケート選手たちはリンクの上でジャンプしたり踊ったりすることもできますよ。<br>哇啊，真想看一次花样滑冰比赛。<br>waa ichidofigyuasukeetonoshiaiomitemitaidesu<br>わあ～、いちどフィギュアスケートのしあいをみてみたいです。<br>わあ～、一度フィギュアスケートの試合を見てみたいです。<br>下次吧。<br>kondominiikimasho^<br>こんどみにいきましょう。<br>今度見に行きましょう。<br>有很多要买的东西，一起去吗？<br>kaimonogatakusanarimasuga isshoniikimasenka<br>かいものがたくさんありますが、いっしょにいきませんか。<br>買い物がたくさんありますが、一緒に行きませんか。<br>嗯，我也想跟去。<br>un tsuiteikitaidesu<br>うん、ついていきたいです。<br>うん、付いて行きたいです。<br>顺便在公园里玩一下可以吗？<br>tsuideniko^endeasondemoiidesuka<br>ついでにこうえんであそんでもいいですか。<br>ついでに公園で遊んでもいいですか。<br>OK<br>okkee<br>オッケー。<br>不能玩太迟。<br>osokumadeasondehaikemasen<br>おそくまであそんではいけません。<br>遅くまで遊んではいけません。<br>知道了。<br>wakarimashita<br>わかりました。<br>分かりました。<br>不能和不认识的人说话。<br>shiranaihitotohanashitehaikemasenyo<br>しらないひととはなしてはいけませんよ。<br>知らない人と話してはいけませんよ。<br>是，是。<br>hai hai<br>はい、はい。<br>不能说两次“是”,<br>haihanikaiittehaikemasen<br>「はい」はにかいいってはいけません。<br>「はい」は二回言ってはいけません。<br>没有礼貌。<br>gyo^gigawaruidesu<br>ぎょうぎがわるいです。<br>行儀が悪いです。<br>好麻烦呀。<br>yayakoshiidesune<br>ややこしいですね。<br>没有办法。<br>shikatanaidesu<br>しかたないです。<br>仕方ないです。<br>喂喂小龟，小龟<br>moshimoshikameyo kame<br>もしもしかめよ、かめ。<br>你想持续练习托球游戏到什么时候？<br>itsumadekendamaoyaritsuzukemasuka<br>いつまでけんだまをやりつづけますか。<br>いつまでけん玉をやり続けますか。<br>『喂喂小龟』全部都会为止。<br>moshikamegazenbudekirumade<br>もしかめがぜんぶできるまで。<br>『もし亀』が全部できるまで。<br>看上去得花很长时间呀。<br>jikangakakariso^desune<br>じかんがかかりそうですね。<br>時間がかかりそうですね。<br>你想参加托球优胜大会吗？<br>kendamachanpiontaikainidetaidesuka<br>けんだまチャンピオンたいかいにでたいですか。<br>けん玉チャンピオン大会に出たいですか。<br>『喂喂小龟』参加没指望吧。<br>moshikamedehamuridesho^<br>もしかめではむりでしょう。<br>『もし亀』では無理でしょう。<br>着迷于托球游戏也可以，但是<br>kendamanihamattemoiidesuga<br>けんだまにはまってもいいですが、<br>けん玉にハマってもいいですが、<br>不弹琴不行。<br>piano o hikanaitodamedesu<br>ピアノをひかないとだめです。<br>ピアノを弾かないとだめです。<br>可是，托球游戏更有意思呀。<br>datte   kendamanoho^gaomoshiroidesuyo<br>だって、けんだまのほうがおもしろいですよ。<br>だって、けん玉のほうが面白いですよ。<br>确实有意思。<br>tashikani<br>たしかに。<br>確かに。<br>但是，练完琴后再玩比较好。<br>demo pianoohiitekaraasondaho^gaiidesu<br>でも、ぴあのをひいてからあそんだほうがいいです。<br>でも、ピアノを弾いてから遊んだほうがいいです。<br>便便住在家里。<br>ouchini unchiga sunde imashita<br>おうちにうんちがすんでいました。<br>お家にうんちが住んでいました。<br>每天都吃很多饭。<br>mainichi gohan o ippaitabemasu<br>まいにちごはんをいっぱいたべます。<br>毎日ご飯を一杯食べます。<br>吃很多后，<br>ippaitabetara<br>いっぱいたべたら<br>一杯食べたら<br>尿尿出来了，便便也出来了。<br>おしっこがでて、うんちもでました。<br>おしっこが出て、うんちも出ました。<br>因为总是吃很多饭，<br>いつもごはんをいっぱいたべていたので<br>いつもご飯を一杯食べていたので<br>肚子饱饱的就在公园里玩儿。<br>おなかいっぱいでこうえんであそんでいました。<br>お腹一杯で公園で遊んでいました。<br>下雨了，<br>あめがふったら<br>雨が降ったら<br>带上伞，啦啦啦啦啦<br>かさをもって、ランランララーンと<br>傘を持って、ランランララーンと<br>啪嚓啪嚓踩到水洼里。<br>みずたまりにぽちゃっとしました。<br>水溜まりにぽちゃっとしました。<br>雨停了<br>あめがやんだら<br>雨が止んだら<br>突然间刮起了大风，<br>きゅうにつよいかぜがふいてきました。<br>急に強い風が吹いてきました。<br>急急忙忙回家了。<br>いそいでかえりました。<br>急いで帰りました。<br>妈妈已经很担心了。<br>おかあさんがしんぱいしました。<br>お母さんが心配しました。<br>“我饭已经做了哟。”<br>「ごはんをつくっていたんだよ」<br>「ご飯を作っていたんだよ」<br>便便君说：“我马上就吃！”<br>うんちくんは「いますぐたべる！」といいました。<br>うんち君は「今すぐ食べる！」と言いました。<br>我开动啦。<br>いっただっきまーす<br>便便君很开心地吃起了饭。<br>うんちくんがたのしくごはんをたべました。<br>うんち君が楽しくご飯を食べました。<br>吃饭时，大风停了下来。<br>そのあいだ，つよいかぜがやみました。<br>その間、強い風が止みました。<br>完。<br>おしまい。<br>我到刚开的店铺里去了。<br>オープンしたばかりのみせへいってきました。<br>オープンしたばかりの店へ行ってきました。<br>妈妈好狡猾！<br>ママずるい！<br>不是说一起去的吗？<br>いっしょにいくっていったでしょう。<br>一緒に行くって言ったでしょう。<br>不要生气。<br>おこらないでください。<br>怒らないでください。<br>肚子太饿了突然间就想去了。<br>おなかがぺこぺこできゅうにいきたくなりました。<br>お腹がぺこぺこで急に行きたくなりました。<br>太好吃了。<br>とってもおいしかったですよ。<br>有六道小菜哦。<br>おかずはろくさらもありました。<br>おかずは六皿もありました。<br>很多蔬菜，真是太满足了。<br>やさいたっぷりでだいまんぞくでした。<br>野菜たっぷりで大満足でした。<br>我也想吃。<br>わたしもたべたいです。<br>私も食べたいです。<br>星期六一起去吧。<br>どようびにいっしょにいきましょう。<br>土曜日に一緒に行きましょう。<br>请不要失约。<br>やくそくをやぶらないでください。<br>約束を破らないでください。<br>嗯。<br>un<br>うん。<br>店铺前摆放了很多漂亮的花儿。<br>みせのまえにきれいなはながいっぱいかざってあります。<br>店の前に綺麗な花がいっぱい飾ってあります。<br>看着漂亮的花儿，心会被治愈了。<br>すてきなおはなをみると、こころがいやされます。<br>素敵なお花を見ると、心が癒されます。<br>想去学插花。<br>いけばなをならいにいきたいです。<br>生け花を習いに行きたいです。<br>我知道插花。<br>いけばなをしっていますよ。<br>生け花を知っていますよ。<br>插花是日本的传统花艺。<br>にほんのでんとうてきなフラワーアレンジメントのことです。<br>日本の伝統的なフラワーアレンジメントのことです。<br>把漂亮的插花装饰在壁龛，<br>すてきないけばなをとこのまにかざって<br>素敵な生け花を床の間に飾って、<br>挂上挂轴，<br>かけじくをかけて<br>掛け軸を掛けて、<br>想把和式房间变成治愈的空间。<br>わしつをいやしのくうかんにしたいです。<br>和室を癒しの空間にしたいです。<br>明天是离任仪式。<br>あしたはりにんしきです。<br>明日は離任式です。<br>去学校吗？<br>がっこうへいきますか。<br>学校へ行きますか。<br>不知道要不要去学校。<br>がっこうへいくかどうかわかりません。<br>学校へ行くかどうか分かりません。<br>要确认一下学校发的通知。<br>がっこうからのおしらせをかくにんしないとだめです。<br>学校からのお知らせを確認しないとだめです。<br>担当的老师会改变吗？<br>たんにんのせんせいがかわりますか。<br>担任の先生が変わりますか。<br>不知道会不会变，但是<br>かわるかどうかわかりませんが、<br>変わるかどうかわかりませんが、<br>很期待下周一。<br>らいしゅうのげつようびがたのしみです。<br>来週の月曜日が楽しみです。<br>在看什么书？<br>どんなほんをよんでいますか。<br>どんな本を読んでいますか。<br>『谚语和惯用语的秘密』<br>【ことわざ・かんようくのひみつ】です。<br>【ことわざ・慣用句のひみつ】です。<br>有什么惯用语？<br>どんなかんようくがありますか。<br>どんな慣用句がありますか。<br>三个臭皮匠赛过诸葛亮。<br>さんにんよればもんじゅのちえ<br>三人寄れば文殊の知恵。<br>什么意思？<br>どんないみですか。<br>どんな意味ですか。<br>我觉得是三个人聚在一起会想出好办法的意思。<br>さんにんいっしょにいたら、なにかいいほうほうがでてくるといういみだとおもいます。<br>三人一緒にいたら、何かいい方法がでてくるという意味だと思います。<br>也有同样意思的中文谚语哟。<br>おなじいみのちゅうごくごのことわざもありますよ。<br>同じ意味の中国語の諺もありますよ。<br>什么谚语？<br>どんなことわざですか。<br>どんな諺ですか。<br>【三个臭皮匠赛过诸葛亮】です。<br>妈妈，今天是教学参观日。<br>まま、きょうはじゅぎょうさんかんびです。<br>ママ、今日は授業参観日です。<br>啊，我给忘得一干二净了。<br>ああ、すっかりわすれました。<br>ああ、すっかり忘れました。<br>妈妈总是很忙。<br>ままはいつもいそがしいですね。<br>ママはいつも忙しいですね。<br>是呀，星期一真的是忙得不可开交。<br>ええ、げつようびはねこのてもかりたいくらいいそがしいです。<br>ええ、月曜日は猫の手も借りたいくらい忙しいです。<br>工作堆成山。<br>しごとがやまほどあります。<br>仕事が山ほどあります。<br>家里的卫生要做，衣服要洗。<br>へやのそうじとせんたくをしなければなりません。<br>部屋の掃除と洗濯をしなければなりません。<br>要看报纸。<br>しんぶんをよまなければなりません。<br>新聞を読まなければなりません。<br>要写文稿。<br>ぶんしょうをかかなければなりません。<br>文章を書かなければなりません。<br>还有，借来的书也要还。<br>そして、かりてきたほんもかえさなければなりません。<br>そして、借りてきた本も返さなければなりません。<br>啊，已经8点5分了。<br>あっ、もうはちじごふんですね。<br>あっ、もう8時5分ですね。<br>差不多得走了。<br>そろそろいかなければなりません。<br>そろそろ行かなければなりません。<br>对了，来学校的时候，必须带姓名卡。<br>そうそう。がっこうへきたときに、なふだをつけなければなりません。<br>そうそう。学校へ来た時に、名札をつけなければなりません。<br>知道了，谢谢。<br>わかりました。ありがとう。<br>今天必须得还书了。<br>きょうはほんをかえさなければなりません。<br>今日は本を返さなければなりません。<br>现在就去还吧。<br>いまからかえしにいきましょう。<br>今から返しに行きましょう。<br>不行，我还有事儿要做。<br>むりです。しごとがのこっています。<br>無理です。仕事が残っています。<br>一个人能去吗？<br>ひとりでいけますか。<br>一人で行けますか。<br>已经记住路了，一个人可以去。<br>みちをおぼえているので、ひとりでいけます。<br>道を覚えているので、一人で行けます。<br>借来的书都拿齐了吗？<br>かりてきたほんをぜんぶそろえなければなりませんよ。<br>借りてきた本を全部揃えなければなりませんよ。<br>五本都拿好了。<br>ごさつぜんぶそろえました。<br>五冊全部揃えました。<br>妈妈的书也帮忙还一下。<br>ままのほんもおねがいします。<br>ママの本もお願いします。<br>背包一下子变重了。<br>リュックがきゅうにおもたくなりました。<br>リュックが急に重たくなりました。<br>能背吗？<br>せおえますか。<br>背負えますか。<br>没事儿。<br>だいじょうぶです。<br>大丈夫です。<br>别忘了卡。<br>かーどをわすれないでくださいね。<br>カードを忘れないでくださいね。<br>放进口袋了。<br>ポケットにいれましたよ。<br>ポケットに入れましたよ。<br>汉字写好了。<br>かんじがかけました。<br>漢字が書けました。<br>朗读也好了。<br>おんどくもできました。<br>音読もできました。<br>中文的书看了吗？<br>ちゅうごくごのほんをよみましたか。<br>中国語の本を読みましたか。<br>还没。<br>まだです。<br>起初，平假名和片假名都不会写。<br>さいしょは、ひらがなもカタカナもかけませんでした。<br>最初は、ひらがなもカタカナも書けませんでした。<br>现在也会写长长作文了。<br>いまは、ながいさくぶんもかけましたね。<br>今は、長い作文も書けましたね。<br>努力的话，也能学会流利地阅读中文书哦。<br>がんばったら、ちゅうごくごのほんもすらすらよめるようになりますよ。<br>頑張ったら、中国語の本もすらすら読めるようになりますよ。<br>真的吗？<br>ほんとうですか。<br>本当ですか。<br>我想学会流利地阅读中文书籍。<br>すらすらよめるようになりたいです。<br>すらすら読めるようになりたいです。<br>能坚持吗？<br>つづけられますか。<br>続けられますか。<br>我想可以坚持。<br>つづけられるとおもいます。<br>続けられると思います。<br>加油。<br>がんばってください。<br>頑張ってください。<br>明天是好朋友远足的日子。<br>あしたはなかよしえんそくのひです。<br>明日は仲よし遠足の日です。<br>我们和四年级的同学们一起去王子动物园。<br>わたしたちはよんねんせいといっしょにおうじどうぶつえんへいきます。<br>私達は四年生と一緒に王子動物園へ行きます。<br>携带的物品都准备好了吗？<br>もちもののじゅんびはできましたか。<br>持ち物の準備はできましたか。<br>还没。<br>まだです。<br>最近经常忘带东西。<br>さいきん、わすれものがおおいです。<br>最近、忘れ物が多いです。<br>昨天也把计算习题给忘了。<br>きのうもけいさんどりるをわすれてしまいました。<br>昨日も計算ドリルを忘れてしまいました。<br>边看携带物品目录边准备比较好。<br>もちもののりすとをチェックしながらじゅんびしたほうがいいですよ。<br>持ち物のリストをチェックしながら準備したほうがいいですよ。<br>背包，水壶，擦汗手帕，零食・・・<br>リュック・すいとう・あせふきたおる・おやつ・・・<br>リュック・水筒・汗拭きタオル・おやつ・・・<br>要去买零食。<br>おやつをかわなければなりません。<br>おやつを買わなければなりません。<br>也要带便当去。<br>おべんとうももっていかなければなりません。<br>お弁当も持って行かなければなりません。<br>便当妈妈来准备。<br>おべんとうはままがよういします。<br>お弁当はママが用意します。<br>想去看看夏天的衣服。<br>なつのおようふくをみにいきたいです。<br>夏のお洋服を見に行きたいです。<br>看了就会想买哦。<br>みたらかいたくなりますよ。<br>見たら買いたくなりますよ。<br>你的衣柜已经非常满了。<br>あなたのたんすがぱんぱんになっていますよ。<br>あなたの箪笥がぱんぱんになっていますよ。<br>这条浅蓝色裙子好漂亮呀。<br>このみずいろのスカートがかわいいですね。<br>この水色のスカートが可愛いですね。<br>颜色清爽看上去也很好穿。<br>さわやかないろあいできごこちもよさそうです。<br>爽やかな色合いで着心地も良さそうです。<br>找一找适合这条裙子的上衣。<br>このスカートにあうようなトップスをさがしてみましょう。<br>このスカートに合うようなトップスを探してみましょう。<br>有飘逸的雪纺绸衫。<br>ひらひらシフォンのトップスがありました。<br>不论是花瓣装饰，还是印花都非常可爱。<br>フラワーモチーフといいプリントといい、ほんとうにかわいいですね。<br>フラワーモチーフといいプリントといい、本当に可愛いですね。<br>非常适合小e夏天的装扮。<br>イーのなつスタイルにぴったりです。<br>イーの夏スタイルにぴったりです。<br>可可・香奈儿说过，流行会过时，但风格永远不会。<br>ココ・シャネルはいいました。<br>「ファッションはすたれるが、スタイルはのこる」。<br>ココ・シャネルは言いました。<br>『ファッションは廃れるが、スタイルは残る』。<br>知道不少呀。<br>よくしっていますね。<br>よく知っていますね。<br>转眼就到了黄金周的最后一天。<br>あっというまにゴールデンウィークのさいしゅうびになりました。<br>あっという間にゴールデンウィークの最終日になりました。<br>现在去哪儿都挤。<br>いまごろどのこうらくちにいってもこんざつしていますよ。<br>今頃どの行楽地に行っても混雑していますよ。<br>交通堵塞，排长队的话，<br>こうつうじゅうたいにあったりちょうだのれつにならんだりしたら、<br>交通渋滞に遭ったり長蛇の列に並んだりしたら、<br>压力马上就来了。<br>すとれすがたまってしまいます。<br>ストレスが溜まってしまいます。<br>难得的长假，<br>せっかくのおおがたれんきゅうなので、<br>せっかくの大型連休なので、<br>所以想让它成为疲乏的身心都能得到休息的假期。<br>つかれたこころとからだをやすめるきかんにしたいですね。<br>疲れた心と体を休める期間にしたいですね。<br>我们待在家里悠闲自在也很好。<br>わたしたちはいえでのんびりすごせてよかったです。<br>私達は家でのんびり過ごせてよかったです。<br>昨天包饺子也很开心。<br>きのうのぎょうざづくりもたのしかったです。<br>昨日の餃子づくりも楽しかったです。<br>变成黄金周的美好回忆。<br>ゴールデンウィークのいいおもいでになりました。<br>ゴールデンウィークのいい思い出になりました。<br>今天去看了眼科。<br>きょうはがんかへいってきました。<br>今日は眼科へ行ってきました。<br>滴了开了的眼药水后<br>しょほうされためぐすりをさすと、<br>処方された目薬を点すと、<br>好了很多。<br>だいぶよくなりました。<br>だいぶ良くなりました。<br>还是去医院看了比较安心啊。<br>やっぱりびょういんへいってよかったですね。<br>やっぱり病院へ行ってよかったですね。<br>是的。眼睛太痒了忍不住就会挠挠挠，<br>うん。めがかゆくてついついかいてしまったので、<br>うん。目が痒くてついつい掻いてしまったので、<br>真的很难受。<br>ほんとうにつらかったです。<br>本当に辛かったです。<br>我也想去看眼科。<br>わたしもがんかへいきたかったですが。<br>私も眼科へ行きたかったですが。<br>对了，对了，我跟医生咨询了学校视力检查结果的事儿了。<br>そうそう。がっこうのしりょくけんさのけっかをせんせいにそうだんしてみました。<br>そうそう。学校の視力検査の結果を先生に相談してみたました。<br>怎么样了？<br>どうでしたか。<br>医生说，在学校检查的时候，<br>がっこうでけんさをうけるときに、<br>学校で検査を受けるときに、<br>朋友们在会分散注意力，<br>ともだちがいるときがちってしまうので、<br>友達がいると気が散ってしまうので、<br>所以到医院再检查一次比较好。<br>びょういんでもういっかいけんさをうけたほうがいいって。<br>病院でもう一回検査を受けたほうがいいって。<br>那明天预约眼科吧。<br>じゃ、あしたがんかをよやくしてね。<br>じゃ、明日眼科を予約してね。<br>知道了。<br>わかりました。<br>分かりました。</p><h3 id="四、语法-句型"><a href="#四、语法-句型" class="headerlink" title="四、语法/句型"></a>四、语法/句型</h3><p><strong>～時から～時まで　从～点（起点）到～点（终点）</strong><br>はちじじゅうごふんからじゅうにじよんじっぷんまで/<br>8時15分から12時40分まで</p><p><strong>どうやって：疑问词，指怎样，一般是针对手段的疑问词</strong><br>・・・から・・・まで：从某地到某地。<br>こうべからディズ二ーランドまでどうやっていきますか。<br>神戸からディズ二ーランドまでどうやって行きますか。<br>やこうばすでいきます。</p><p><strong>どこ：疑问词，指哪里，一般是针对地点的疑问词</strong><br>おとうさんはくるまでどこへいきますか。<br>   お父さんは    車    でどこへ行きますか。<br>じむへいきます。<br>ジムへ行きます。</p><p><strong>～にくい　不容易干～</strong><br>書きにくい　歌いにくい　しにくい　<br>見にくい　洗いにくい　読みにくい　<br><strong>～やすい　容易干～</strong><br>食べやすい　しやすい　磨きやすい　<br>寝やすい　着やすい　買いやすい　<br>③形容词连用时<br>い形容词去掉い换成くて<br>な形容词直接加で</p><p><strong>（名词）で（动词）　「で」（表示方法；手段</strong><br>用粉笔写 チョークで書きます　<br>用筷子吃 箸で食べます　<br>用剪刀剪 ハサミで切ります</p><p><strong>提问用什么方法或手段时「何」的发音。</strong><br>「何」后面跟た行、だ行、な行开头单词时，应该读なん（nan）。<br>但是此种读法很容易与询问目的或理由混淆，所以日常生活当中针对手段提问时，「何」通常都读なに（nani）。应该说两种读法都是可以的。</p><p><strong>（人）に/から（某物）　をもらう　从某人处得到某物</strong><br>从爷爷那里得到零花钱<br>おじいちゃんにお小遣いをもらいます　<br>从老师那里得到笔记本<br>先生からノートをもらいます　<br>从朋友那里得到玩具<br>友達におもちゃをもらいます</p><p><strong>（动词字典型）ことができます　会干～</strong><br>会买  買うことができます<br>会洗　洗うことができます<br>会寄　送ることができます　出すことができます</p><p><strong>いかが　是どう的更礼貌的说法</strong></p><p><strong>（动词ます形）＋すぎる　～过多</strong><br>比如<br>食べすぎる 【吃太多 】<br>見すぎる　【看太多】<br>書きすぎる 【写太多】<br>※动词ます形是指连接【ます】的动词形，比如食べます的【食べ】</p><p><strong>お＋动词ます形＋します</strong>　谦虚语的用法，通过贬低自身行为来表示对听者或话题中出现的人物表示敬意的一种表达方式。<br>※动词ます形是指连接【ます】的动词形，比如調べます的【調べ】<br>比如<br>お調べします【查询】<br>お書きします【写】<br>発車時間をお調べしますので、少々お待ちください。<br>【帮您查询发车时间，请稍等】</p><p><strong>お＋动词ます形＋ください</strong>　尊敬语，是对对方请求或劝诱时表示敬意的句型。<br>比如<br>お待ちください【请等一等】<br>お乗りください【请乘坐】<br>すぐお持ちしますので、少々お待ちください。<br>【马上给您拿来，请稍等】</p><p><strong>动词て形＋ください</strong> 请～　表示委托听话人干某事或者下指示，劝诱。<br>比如<br>作り方を教えてください【请教一下做法】<br>見てください【请看】<br>ぜひ遊びに来てください【请一定来玩】</p><p><strong>～は～でございます</strong> 是～は～です的更为礼貌的说法。<br>です⇒でございます</p><p><strong>～ても＋よろしいでしょうか</strong>是表示征询的一种礼貌说法。<br>～てもいいですか我能干～吗？⇒～てもよろしいでしょうか　听起来也更委婉。<br>比如　我能喝这汤吗？<br>このスープを飲んでもいいですか。<br>このスープを飲んでもよろしいでしょうか。</p><p><strong>～て＋おる是～ています</strong>的礼貌用法。<br>比如<br>待っております 　外出しております</p><p><strong>お～（动词ます形）＋になる</strong>　是尊敬形。<br>比如<br>お読みになります　お使いになります</p><p><strong>动词て形＋います</strong>是表示现在在干～<br>比如<br>テレビを見ています。在看电视。<br>本を読んでいます。在看书。</p><p><strong>动词て形＋みます</strong>是表示试着做～<br>比如<br>食べてみます　试着吃吃看<br>書いてみます　试着写写看</p><p><strong>になると</strong>是表示达到某种条件之后～<br>比如<br>十八歳になると選挙権が与えられます。十八岁后享有选举权。<br>秋になると涼しくなります。到了秋天后天气会变凉爽。</p><p><strong>~ています（～ている）</strong><br>动词て形加います或いる表示动作正在进行。<br>比如<br>本を読んでいます。在看书</p><p><strong>~てください</strong><br>动词て形加ください，表示发出指示，请干～<br>比如<br>本を読んでください。　请看书<br>ドアを閉めてください。　请关门</p><p><strong>~たことがあります</strong><br>动词た形加ことがある（あります），表示干过～<br>比如<br>お寿司を食べたことがあります。　吃过寿司<br>川で泳いだことがあります。　在河里游过泳。<br>餃子を作ったことがあります。做过饺子。</p><p><strong>~てくれませんか</strong><br>动词て形加くれませんか，也是给予指示，不过比～てください更有礼貌。<br>比如<br>ご飯を作ってくれませんか。　请给我煮饭好吗？　<br>本を買ってくれませんか。　请帮我买书好吗？<br>エアコンをつけてくれませんか。请帮我打开空调好吗？</p><p><strong>~たほうがいい</strong><br>动词た形加ほうがいい，表示建议，干～比较好。<br>比如<br>薬を飲んだほうがいい。　喝药比较好。　<br>仕事を休んだほうがいい。　工作请假比较好。<br>声に出して読んだほうがいい。读出声比较好。</p><p><strong>~てもいいですか 表示请求许可，可以翻译为 能干～吗？</strong><br>比如<br>本を読んでもいいですか。　能看书吗？<br>音楽を聴いてもいいですか。　能听音乐吗？<br>走ってもいいですか。　可以跑吗？</p><p><strong>~たり～たり＋する（します）表示某种状态交替出现，或某种行为反复实行。</strong><br>比如<br>泣いたり笑ったり　又哭又笑<br>上がったりさがったり　时上时下<br>有时候还表示列举。用于从很多种事项当中列举一两个例子来讲时。<br>比如<br>寝たり食べたりします。　又睡又吃。<br>本を読んだり音楽を聴いたりします。　又看书又听音乐。</p><p><strong>~てはいけません 表示禁止的说法，不能干～。</strong><br>比如<br>遊んではいけません　不能玩<br>見てはいけません　不能看<br>寝てはいけません　不能睡</p><p><strong>~ないとだめです 表示必须，应该，非～不可。</strong><br>比如<br>字をきれいに書かないとだめです。　字必须写漂亮。<br>子どもは外で遊ばないとだめです。　小孩不在外面玩儿不行。<br>ママを待たないとだめです　不等妈妈不行。</p><p><strong>Ｉ类动词ない形</strong><br>如果动词的ます形的最后一个音节是い段，把它变成あ段就可以。<br>比如<br>よみ－ます　よみ⇒よま‐ない<br>かき‐ます　かき→かか‐ない<br>泳ぎ‐ます　およぎ→およが‐ない<br>特殊例子<br>最后音节是い的话，不能变成あ，而要变成わ。<br>比如<br>会います　会あない✖　　会わない〇<br>違います　違あない×　　違わない〇</p><p><strong>~たら 动词た形加ら，可以连接先后发生的两件事情。</strong><br>比如<br>ご飯を食べ終わったら、散歩しに行きます。　<br>饭吃完了去散步。<br>友達にメールを送ったら、すぐに返事がきました。<br>给朋友发了邮件之后，马上就收到了回信。<br>也可以表示假设条件<br>大きくなったら、弁護士になりたいです。<br>长大了的话，想当律师。</p><p><strong>~ないでください 表示请不要～。</strong><br>比如<br>スーパーの中で走り回らないでください。　请不要在超市里到处跑。<br>プライベートなことを聞かないでください。　请不要打听个人隐私问题。<br>授業中寝ないでください。　请不要在上课的时候睡觉。<br>大声でしゃべらないでください。　请不要大声讲话。</p><p><strong><del>にする(します) 名词加</del>にする(します)，表示说话者的意志，决定。</strong><br>比如<br>ランチ定食にします。　 我要午餐套餐。<br>午後三時をおやつの時間にします。  将下午三点定为点心时间。<br>母へのプレゼントはマフラーにしました。　决定将围巾做为给妈妈的礼物。</p><p><strong>~かどうかわかりません 表示我不知道～。</strong><br>～前面是动词时,<br>比如<br>明日は雨が降るかどうかわかりません。  我不知道明天会不会下雨。<br>晩ご飯ができたかどうかわかりません。　我不知道晚饭煮好了没有。<br>～前面是名词或形容词时，<br>比如<br>あの人は先生かどうかわかりません。我不知道那个人是不是老师。<br> 日本の物価は高いかどうかわかりません。我不知道日本的物价贵不贵。<br>アメリカの景色は綺麗かどうかわかりません。我不知道美国的风景美不美。</p><p><strong>~と思います 在想……</strong><br>千里の道も一歩より始まる/せんりのみちもいっぽよりはじまる/千里之行始于足下<br>【千里の道も一歩より始まる。】と言って、兄は一人で海外旅行に行くために、英単語をコツコツと覚え始めました。<br>都说千里之行始于足下，哥哥为了能到海外自由行，开始埋头背起了英语单词。<br>好きこそ物の上手なれ/すきこそもののじょうずなれ/兴趣是最好的老师<br>石の上にも三年/いしのうえにもさんねん/ishinouenimosannen/功夫不负有心人</p><p><strong>~なければなりません 表示必需得干～</strong><br>～里的动词用ない形<br>比如<br> 必须写<br>書く　書きます　書かない　書かなければなりません<br>必须洗<br>洗う　洗います　洗わない　洗わなければなりません<br>必须吃<br>食べる　食べます　食べない　食べなければなりません<br>必须借<br>借りる　借ります　借りない　借りなければなりません<br>必须做<br>する　します　しない　しなければなりません<br>动词可能形。表示会干～，能够干～<br>比如<br> 可以写<br>書く　書きます　書けます<br>可以游<br>泳ぐ　泳ぎます　泳げます<br>可以见<br>会う　会います　会えます<br>可以吃<br>食べる　食べます　食べられます<br>会记<br>覚える　覚えます　覚えられます<br>可以看<br>見る　見ます　見られます<br>可以做<br>する　します　できます<br>能来<br>来る　来ます　来られます（こられます注意读音）</p><p><strong>～（动词可能形的普通形式）ようになる 表示能力的变化。能干~.</strong><br>比如<br> 会写<br>書く　書きます　書けます　書けるようになります<br>会游了<br>泳ぐ　泳ぎます　泳げます　泳げるようになりました<br>能吃了<br>食べる　食べます　食べられます　食べられるようになりました<br>能看<br>見る　見ます　見られます　見られるようになりました<br>能做<br>する　します　できます　できるようになります<br>能来<br>来る　来ます　来られます（こられます注意读音）<br>来られるようになりました</p><p><strong>～（动词）てしまいました，表示动作完成，有时也包含后悔的心情。</strong><br>比如<br>ケーキを全部食べてしまいました。<br>把蛋糕全吃完了。<br>買ってきたばかりの本を一気に読んでしまいました。<br>刚买来的书一下子都读完了。<br>学校迟到了。<br>学校に遅れてしまいました。<br>珍贵的表坏掉了。<br>大切な時計が壊れてしまいました。</p><p><strong>～といい～といい、列举出事物的两个侧面，表示不论～还是～  也好～  也好～</strong><br>比如<br>このワンピースは、デザインといい値段といい、私にぴったりです。<br>这件连衣裙，款式也好，价格也好，都非常适合我。<br>彼は見た目といい性格といい、文句のつけようがありません。<br>他的外形也好，性格也好，都让人无可挑剔。<br>娘といい息子といい、遊んでばかりで全然勉強しようとしません。<br>不论是女儿还是儿子，一直都在玩儿根本就不想学习。</p><p><strong>ので、一般用在表示原因和结果的前后句的前半句句末，因为～</strong><br>比如<br>昨日は雨だったので、一日中家にいました。<br>昨天下雨，所以一整天都在家里。<br>もう遅いので、そろそろ家に帰ります。<br>已经晚了差不多要回家了。<br>スマホが便利なので、買ったほうがいいです。<br>因为智能手机方便，所以买了比较好。<br>家に着いたので、心配しなくてもいいです。<br>已经到家了，不用担心。</p><p><strong>ので、一般用在表示原因和结果的前后句的前半句句末，因为～</strong><br>比如<br>昨日は雨だったので、一日中家にいました。<br>昨天下雨，所以一整天都在家里。<br>已经到家了，不用担心。</p><p><strong>～と、～。一般と前面带的动词都是字典型。有各种各样的用法，表示前面的动作引起后面的结果，或者两者之间的关联性。</strong><br>比如，<br>お酒を飲むと、顔が赤くなりました。<br>喝了酒后，脸变红了。<br>筆記試験に合格すると、面接試験を受けられるようになります。<br>书面考试合格后，才能参加面试。</p><h3 id="五、日本自由行"><a href="#五、日本自由行" class="headerlink" title="五、日本自由行"></a>五、日本自由行</h3><h4 id="（1）问路"><a href="#（1）问路" class="headerlink" title="（1）问路"></a>（1）问路</h4><p>不要意思。我想请问一下。<br>すみません。ちょっとおききしたいですが。<br>すみません。ちょっとお聞きしたいですが。</p><p>有什么事儿？<br>はい。なんですか。<br>はい。何ですか。</p><p>前往京都电车的乘车点在哪里？<br>きょうとゆきでんしゃののりばはどこですか。<br>京都行き電車の乗り場はどこですか。</p><p>请在1号站台乘坐新快速电车。<br>いちばんほーむでしんかいそくでんしゃにおのりください。<br>一番ホームで新快速電車にお乗りください。</p><p>不要意思。我想请问一下。<br>すみません。ちょっとおききしたいですが。<br>すみません。ちょっとお聞きしたいですが。</p><p>有什么事儿？<br>はい。なんですか。<br>はい。何ですか。</p><p>女性洗手间在哪里？<br>じょしトイレはどこですか。<br>女子トイレはどこですか。</p><p>在自动扶梯旁边。<br>エスカレーターのよこにあります。<br>エスカレーターの横にあります。</p><p>不要意思。能打扰您一下吗？<br>すみません。ちょっといいですか。</p><p>有什么事儿？<br>はい。なんですか。<br>はい。何ですか。</p><p>我想去二条城。<br>にじょうじょうにいきたいですが。<br>二条城に行きたいですが。</p><p>这条通道的尽头是中央出口。<br>このつうろのつきあたりはちゅうおうでぐちです。<br>この通路の突き当りは中央出口です。</p><p>中央出口前面有市公交始发点。<br>ちゅうおうでぐちのまえにしばすターミナルがあります。<br>中央出口の前に市バスターミナルがあります。</p><p>请在B1乘车点乘坐巴士。<br>B1のりばでばすにおのりください。<br>B1乗り場でバスにお乗りください。</p><p>请在二条城前车站下车。<br>にじょうじょうまえでおおりください。<br>二条城前でお降りください。</p><p>明白了，谢谢。<br>わかりました。ありがとうございました。</p><p>不要意思。能打扰您一下吗？<br>すみません。ちょっといいですか。</p><p>有什么事儿？<br>はい。なんですか。<br>はい。何ですか。</p><p>这附近有便利店吗？<br>このちかくにコンビニがありますか。<br>この近くにコンビニがありますか。</p><p>下一个信号往右拐。<br>つぎのしんごうをみぎにまがってください。<br>次の信号を右に曲がってください。</p><p>便利店在那里。<br>コンビニはあそこにあります。</p><h4 id="（2）旅馆"><a href="#（2）旅馆" class="headerlink" title="（2）旅馆"></a>（2）旅馆</h4><p>喂，您好。<br>もしもし。</p><p>这里是神户酒店<br>こちらはこうべほてるでございます。<br>こちらは神戸ホテルでございます。</p><p>我想预约一下房间。<br>へやのよやくをしたいのですが。<br>部屋の予約をしたいのですが。</p><p>请问您贵姓？<br>おきゃくさまのおなまえをうかがってもよろしいでしょうか。<br>お客様のお名前を伺ってもよろしいでしょうか。</p><p>我姓林，叫林e。<br>リンです。リンイーと申します。</p><p>您想订什么时候？<br>いつのごりようでしょうか。<br>いつのご利用でしょうか。</p><p>我想从2月1号开始住三晚。<br>にがつついたちからさんぱくでおねがいします。<br>二月一日から三泊でお願いします。</p><p>请问您几位？<br>なんめいさまでしょうか。<br>何名様でしょうか。</p><p>两位。大人两个。<br>にめいです。おとなふたりです。<br>二名です。大人二人です。</p><p>有和式房间和洋式房间，您想要哪一种？<br>わしつとようしつがございますが、どちらをごきぼうでしょうか。<br>和室と洋室がございますが、どちらをご希望でしょうか。</p><p>我想要和式的。<br>わしつをきぼうします。<br>和室を希望します。</p><p>好的，帮您查看房源，请稍等。<br>はい、くうしつをおしらべしますので、しょうしょうおまちくださいませ。<br>はい、空室をお調べしますので、少々お待ちくださいませ。</p><p>让您久等了。<br>おまたせいたしました。<br>お待たせいたしました。</p><p>有双人房和双人床房间。<br>ツインルームとダブルルームがございますが。</p><p>我要双人房。<br>ツインルームでおねがいします。<br>ツインルームでお願いします。</p><p>住宿费是多少呢？<br>しゅくはくりょうきんはいくらですか。<br>宿泊料金はいくらですか。</p><p>一个人一晚6700日元。<br>おひとりさまいっぱく６７００えんです。<br>おひとり様一泊6700円です。</p><p>有带早餐吗？<br>ちょうしょくつきですか。<br>朝食付きですか。</p><p>是的，有带早餐。<br>はい、ちょうしょくつきでございます。<br>はい、朝食付きでございます。</p><p>那就帮我订吧。<br>じゃ、それでおねがいします。<br>じゃ、それでお願いします。</p><p>入住登记是从下午3点开始。<br>チェックインはごごさんじからでございます。<br>チェックインは午後三時からでございます。</p><p>明白了。<br>わかりました。<br>分かりました。</p><h4 id="（3）就餐"><a href="#（3）就餐" class="headerlink" title="（3）就餐"></a>（3）就餐</h4><p>欢迎光临。<br>いらっしゃいませ。</p><p>桌子座位已经满了，<br>テーブルせきはまんせきでございますが、<br>テーブル席は満席でございますが、</p><p>您介意和别人同坐一桌吗？<br>あいせきでよろしいでしょうか。<br>相席でよろしいでしょうか。</p><p>不介意。<br>かまいません。<br>構いません。</p><p>您决定点菜了吗？<br>ごちゅうもんをはおきまりになりましたか。<br>ご注文をお決まりになりましたか。</p><p>还没，有什么推荐的菜吗？<br>まだです。おすすめりょうりはなんですか。<br>まだです。おすすめ料理は何ですか。</p><p>神户牛午餐A最有人气。<br>こうべぎゅうらんちAがいちばんにんきでございます。<br>神戸牛ランチAが一番人気でございます。</p><p>里脊肉130克3980日元。<br>ロース130ぐらむでさんぜんきゅうひゃくはちじゅうえんでございます。<br>ロース130gで3980円でございます。</p><p>也带饭和黄酱汤及沙拉。<br>ごはんとみそしるとさらだもついております。<br>ごはんとみそ汁とサラダもついております。</p><p>那就这个吧。<br>じゃ、それでおねがいします。<br>じゃ、それでお願いします。</p><p>烤几分熟呢？<br>やきぐあいはいかがなさいますか。<br>焼き具合はいかがなさいますか。</p><p>十分熟吧。<br>うぇるだんでおねがいします。<br>ウェルダンでお願いします。</p><p>点这些就好了吗？<br>ごちゅうもんはいじょうでよろしいでしょうか。<br>ご注文は以上でよろしいでしょうか。</p><p>是的。<br>はい。</p><p>不好意思，请给我热茶。<br>すみません、あたたかいおちゃもおねがいします。<br>すみません、温かいお茶もお願いします。</p><p>马上就帮您拿来，请稍等。<br>すぐにおもちしますので、しょうしょうおまちくださいませ。<br>すぐにお持ちしますので、少々お待ちくださいませ。</p><h4 id="（4）结账"><a href="#（4）结账" class="headerlink" title="（4）结账"></a>（4）结账</h4><p>请算账。<br>かいけいをおねがいします。<br>会計をお願いします。</p><p>请到收银台支付。<br>おしはらいはレジにておねがいします。<br>お支払はレジにてお願いします。</p><p>共计7960日元。<br>ごうけいななせんきゅうひゃくろくじゅうえんになります。<br>合計7960円になります。</p><p>请帮我分开算。<br>べつべつでおねがいします。<br>別々でお願いします。</p><p>明白了。<br>かしこまりました。<br>畏まりました。</p><p>能使用信用卡吗？<br>クレジットカードはつかえますか。<br>クレジットカードは使えますか。</p><p>可以。<br>hai<br>はい。</p><p>我刷银联卡。<br>ぎんれんカードでおねがいします。<br>銀聯カードでお願いします。</p><p>先保管您的卡。<br>カードをおあずかりします。<br>カードをお預かりします。</p><p>请输入密码。<br>あんしょうばんごうのにゅうりょくをおねがいします。<br>暗証番号の入力をお願いします。</p><p>请在这里签名。<br>こちらにサインをおねがいします。<br>こちらにサインをお願いします。</p><p>请收好卡和留底。<br>カードとおひかえのおかえしです。<br>カードとお控えのお返しです。</p><p>请给我小票。<br>レシートをおねがいします。<br>レシートをお願いします。</p><p>明白了。<br>かしこまりました。</p><p>多谢款待。<br>ごちそうさまでした。</p><p>欢迎您再次光临。<br>またのおこしをおまちしております。<br>またのお越しをお待ちしております。</p><h4 id="（5）买衣服"><a href="#（5）买衣服" class="headerlink" title="（5）买衣服"></a>（5）买衣服</h4><p>欢迎光临。<br>いらっしゃいませ。</p><p>请问有没有100%羊毛的毛衣？<br>すみません。ウールひゃくぱあせんとのせえたあをさがしていますが。<br>すみません。ウール100％のセーターを探していますが。</p><p>这边请。<br>こちらへどうぞ。</p><p>这件看上去很不错呀。可以试穿吗？<br>これはよさそうですね。しちゃくできますか。<br>これはよさそうですね。試着できますか。</p><p>我带您到试衣间，请。<br>しちゃくしつまでごあんないしますので、どうぞこちらへ<br>試着室までご案内しますので、どうぞこちらへ。</p><p>穿了感觉怎么样？<br>いかがでしょうか。</p><p>有点儿大，有没有小一点儿的号码？<br>ちょっとおおきいですが、もうすこしちいさめのさいずはありますか。<br>ちょっと大きいですが、もう少し小さめのサイズはありますか。</p><p>那给您拿S码的，请稍等。<br>えすさいずをおもちしますので、しょうしょうおまちくださいませ。<br>Sサイズをお持ちしますので、少々お待ちくださいませ。</p><p>有没有搭配这件毛衣的裤子呢？<br>このせえたあにあうようなずぼんってありますか。<br>このセーターに合うようなズボンってありますか。</p><p>这条怎么样？<br>こちらはいかがでしょうか。</p><p>我搭配一下。<br>あわせてみます。<br>合わせてみます。</p><p>很适合您。<br>とてもおにあいですよ。<br>とてもお似合いですよ。</p><p>裤腿儿有点儿长。<br>ずぼんのたけがちょっとながいですが。<br>ズボンの丈がちょっと長いですが。</p><p>裤管长度可以修改的，请放心。<br>すそあげができますので、ごあんしんくださいませ。<br>裾上げができますので、ご安心くださいませ。</p><p>修改费多少呢？<br>りょうきんはいくらですか。<br>料金はいくらですか。</p><p>300日元。<br>さんびゃくえんです。<br>300円です。</p><p>我要这上下一套。<br>このじょうげわんせっとをおねがいします。<br>この上下一セットをお願いします。</p><p>谢谢您。<br>ありがとうございます。</p><h4 id="（6）买东西"><a href="#（6）买东西" class="headerlink" title="（6）买东西"></a>（6）买东西</h4><p>欢迎光临。<br>いらっしゃいませ。</p><p>请问有没有一般的感冒药？<br>あの、ふつうのかぜぐすりってありますか。<br>あの、普通の風邪薬ってありますか。</p><p>这边的都是感冒药。<br>こちらにあるくすりはぜんぶかぜぐすりです。<br>こちらにある薬は全部風邪薬です。</p><p>止咳的感冒药是哪一个？<br>せきどめのかぜぐすりはどれですか。<br>咳止めの風邪薬はどれですか。</p><p>护肤化妆品在哪里？。<br>すきんけあけしょうひんはどこですか。<br>スキンケア化粧品はどこですか。</p><p>在那边。<br>あちらになります。</p><p>这里可以免税吗？<br>ここはめんぜいできますか。<br>ここは免税できますか。</p><p>可以的。<br>できますよ。</p><p>购买一万日元以上可以免税。<br>いちまんえんいじょうおかいあげになりますとめんぜいできます。<br>一万円以上お買い上げになりますと免税できます。</p><p>哪一个柜台都能办理吗？<br>どのれじもてつづきできますか。<br>どのレジも手続きできますか。</p><p>不，请您到免税专用柜台办理。<br>いいえ、めんぜいせんようカウンターにておねがいします。<br>いいえ、免税専用カウンターにてお願いします。</p><p>好的，谢谢。<br>わかりました。ありがとうございます。<br>分かりました。ありがとうございます。</p><p>您有带护照吗？<br>パスポートをおもちですか。<br>パスポートをお持ちですか。<br>有。<br>はい。</p><p>我帮您把免税商品资料贴在护照上。<br>めんぜいしょうひんのしょるいをパスポートにはらせていただきます。<br>免税商品の書類をパスポートに貼らせていただきます。</p><p>请在这里签字。<br>こちらにサインをおねがいします。<br>こちらにサインをお願いします。</p><p>谢谢您。<br>ありがとうございます。</p><h3 id="六、童谣"><a href="#六、童谣" class="headerlink" title="六、童谣"></a>六、童谣</h3><p><strong>【おかあさん】</strong><br>okaasan            naani<br>おかあさん　なあに<br>妈妈         怎么啦<br>okaasan te ii nioi<br>おかあさん　て　いい　におい<br>妈妈 手好香<br>sentaku shiteita nioidesho^<br>せんたく　していた　においでしょう<br>洗过衣服的味道吧<br>shabonno awano nioidesho^<br>しゃぼんの　あわの　においでしょう<br>肥皂泡的味道吧<br>okaasan            naani<br>おかあさん　なあに<br>妈妈         怎么啦<br>okaasan te ii nioi<br>おかあさん　て　いい　におい<br>妈妈 手好香<br>oryo^ri shiteita nioidesho^<br>おりょうり　していた　においでしょう<br>煮过饭的味道吧<br>tamagoyakino nioidesho^<br>たまごやきの　においでしょう<br>煎鸡蛋的味道吧</p><p><strong>【うさぎとかめ】</strong><br>moshimoshi kameyo kamesanyo<br>もしもし　かめよ　かめさんよ<br>喂喂   小龟   小龟<br>sekainouchide omaehodo<br>せかいのうちで　おまえほど<br>世界上没有比您<br>ayumino noroi monohanai<br>あゆみの　のろい　ものはない<br>走路更慢的了<br>do^shite sonnani noroinoka<br>どうして　そんなに　のろいのか<br>怎么会行走得那么慢呢？<br>nanto ossharu usagisan<br>なんと　おっしゃる　うさぎさん<br>你说什么呀？小兔<br>sonnara omaeto kakekurabe<br>そんなら　おまえと　かけくらべ<br>那样的话就和你赛跑<br>muko^no oyamano fumotomade<br>むこうの　おやまの　ふもとまで<br>到对面山脚下<br>dochiraga sakini kaketsukuka<br>どちらが　さきに　かけつくか<br>看谁先跑到<br>donnani kamega isoidemo<br>どんなに　かめが　いそいでも<br>无论小龟再怎么赶<br>do^se banmade kakarudaro^<br>どうせ　ばんまで　かかるだろう<br>反正都要跑到晚上吧。<br>kokorade chotto hitonemuri<br>ここらで　ちょっと　ひとねむり<br>就在这里睡一小会儿<br>guuguuguuguu guuguuguu<br>グーグーグーグー　グーグーグー<br>呼噜呼噜呼噜呼噜 呼噜呼噜呼噜<br>koreha nesugita shikujitta<br>これは　ねすぎた　しくじった<br>这下睡过头了，糟了。<br>pyonpyonpyonpyon pyonpyonpyon<br>ピョンピョンピョンピョン　ピョンピョンピョン<br>跳跳跳跳 跳跳跳<br>anmari osoi usagisan<br>あんまり　おそい　うさぎさん<br>你也太慢了 小兔<br>sakinojimanha do^shitano<br>さきのじまんは　どうしたの<br>刚才的显摆到哪儿去了？</p><p><strong>【いぬのおまわりさん】</strong><br>maigonomaigono          konekochan<br>まいごのまいごの　こねこちゃん<br>迷路的小猫咪<br>anatanoouchiwa dokodesuka<br>あなたのおうちは　どこですか<br>你的家在哪里？<br>ouchiokiitemo               wakaranai<br>おうちをきいても　わからない<br>问了家在哪里不知道<br>namaeokiitemo             wakaranai<br>なまえをきいても　わからない<br>问了名字也说不知道<br>nyannyan         nyanyan<br>ニャンニャン　ニャニャーン<br>喵喵喵喵  喵喵喵喵<br>nyannyan             nyanyan<br>ニャンニャン　ニャニャーン<br>喵喵喵喵  喵喵喵喵<br>naitebakariiru               konekochan<br>ないてばかりいる　こねこちゃん<br>只知道哭的小猫咪<br>inunoomawarisan             komatteshimatte<br>いぬのおまわりさん　こまってしまって<br>小狗警察好为难<br>wanwanwanwaan<br>ワンワンワンワーン　<br>汪汪汪汪<br>wanwanwanwaan<br>ワンワンワンワーン<br>汪汪汪汪<br>maigonomaigono          konekochan<br>まいごのまいごの　こねこちゃん<br>迷路的小猫咪<br>konokonoouchiwa dokodesuka<br>このこのおうちは　どこですか<br>这个孩子的家在哪里？<br>karasunikiitemo               wakaranai<br>からすにきいても　わからない<br>问了乌鸦不知道<br>suzumenikiitemo             wakaranai<br>すずめにきいても　わからない<br>问了麻雀也不知道<br>nyannyan         nyanyan<br>ニャンニャン　ニャニャーン<br>喵喵喵喵  喵喵喵喵<br>nyannyan             nyanyan<br>ニャンニャン　ニャニャーン<br>喵喵喵喵  喵喵喵喵<br>naitebakariiru               konekochan<br>ないてばかりいる　こねこちゃん<br>只知道哭的小猫咪<br>inunoomawarisan             komatteshimatte<br>いぬのおまわりさん　こまってしまって<br>小狗警察好为难<br>wanwanwanwaan<br>ワンワンワンワーン　<br>汪汪汪汪<br>wanwanwanwaan<br>ワンワンワンワーン<br>汪汪汪汪   </p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CV系列5：目标检测算法</title>
      <link href="/2020/03/19/CV-05/"/>
      <url>/2020/03/19/CV-05/</url>
      
        <content type="html"><![CDATA[<p>核心内容：传统目标检测算法（Viola-Jones、HOG+SVM、DPM），two-stage系列（R-CNN、SPP-Net、Fast R-CNN、Faster R-CNN、Mask R-CNN），one-stage系列（YOLO系列、SSD等）</p><a id="more"></a><p><a href="https://iloveyou11.github.io/2020/02/16/CV-01/" target="_blank" rel="noopener">CV系列1：计算机视觉基础知识</a><br><a href="https://iloveyou11.github.io/2020/02/20/CV-02/" target="_blank" rel="noopener">CV系列2：卷积神经网络的演变</a><br><a href="https://iloveyou11.github.io/2020/03/01/CV-03/" target="_blank" rel="noopener">CV系列3：卷积神经网络代码实现</a><br><a href="https://iloveyou11.github.io/2020/03/12/CV-04/" target="_blank" rel="noopener">CV系列4：对抗生成网络</a><br><a href="https://iloveyou11.github.io/2020/03/19/CV-05/" target="_blank" rel="noopener">CV系列5：目标检测算法</a></p><h2 id="什么是目标检测"><a href="#什么是目标检测" class="headerlink" title="什么是目标检测"></a>什么是目标检测</h2><p>如何理解一张图片？根据后续任务的需要，有三个主要的层次：</p><img width="60%" src="https://i.loli.net/2020/03/25/fhDLCnFHlgGWmOU.jpg" alt="检测任务分类"><ol><li>一是<code>分类（Classification）</code>，即是将图像结构化为某一类别的信息，用事先确定好的类别(string)或实例ID来描述图片。这一任务是最简单、最基础的图像理解任务，也是深度学习模型最先取得突破和实现大规模应用的任务。其中，ImageNet是最权威的评测集，每年的ILSVRC催生了大量的优秀深度网络结构，为其他任务提供了基础。在应用领域，人脸、场景的识别等都可以归为分类任务。ß</li><li>二是<code>检测（Detection）</code>。分类任务关心整体，给出的是整张图片的内容描述，而检测则关注特定的物体目标ß，要求同时获得这一目标的类别信息和位置信息。相比分类，检测给出的是对图片前景和背景的理解，我们需要从背景中分离出感兴趣的目标，并确定这一目标的描述（类别和位置），因而，检测模型的输出是一个列表，列表的每一项使用一个数据组给出检出目标的类别和位置（常用矩形检测框的坐标表示）。</li><li>三是<code>分割（Segmentation）</code>。分割包括<code>语义分割（semantic segmentation）</code>和<code>实例分割（instance segmentation）</code>，前者是对前背景分离的拓展，要求分离开具有不同语义的图像部分，而后者是检测任务的拓展，要求描述出目标的轮廓（相比检测框更为精细）。分割是对图像的像素级描述，它赋予每个像素类别（实例）意义，适用于理解要求较高的场景，如无人驾驶中对道路和非道路的分割。<h2 id="目标检测算法"><a href="#目标检测算法" class="headerlink" title="目标检测算法"></a>目标检测算法</h2></li></ol><img width="80%" src="https://i.loli.net/2020/03/25/Si2FBakzhrI9l4v.jpg" alt="目标检测算法"><p><strong>传统目标检测算法 VS 基于深度学习的目标检测算法：</strong><br>传统目标检测算法：</p><ul><li>手动设计特征</li><li>滑动窗口</li><li>传统分类器</li><li>多步骤</li><li>准确度和实时性差</li></ul><p>基于深度学习的目标检测算法：</p><ul><li>深度网络学习特征</li><li>proposal或者直接回归</li><li>深度网络</li><li>端到端</li><li>准确度高和实时性好</li></ul><h2 id="模型指标评价"><a href="#模型指标评价" class="headerlink" title="模型指标评价"></a>模型指标评价</h2><p><strong>判断目标检测结果好坏的指标：</strong></p><ol><li>模型检测速度fps</li><li>mAP—平均准确率均值</li></ol><img width="50%" src="https://i.loli.net/2020/04/06/MQ7x8EfZk9JiBta.jpg" alt="mAP"><p>计算方法：</p><img width="50%" src="https://i.loli.net/2020/04/06/oTMuY25gpdIaeGf.jpg" alt="mAP计算方法"><p><strong>one-stage vs two stage的目标检测算法：</strong></p><img width="50%" src="https://i.loli.net/2020/04/07/182xYpwVW9jXGq6.jpg" alt="one and two"><img width="50%" src="https://i.loli.net/2020/04/07/3cwfBMvyaSDolb5.jpg" alt="one and two效果图"><h2 id="传统目标检测算法"><a href="#传统目标检测算法" class="headerlink" title="传统目标检测算法"></a>传统目标检测算法</h2><p>原理：滑动窗口法+传统机器学习分类器</p><img width="50%" src="https://i.loli.net/2020/04/06/25etcPVKwn1z7gb.jpg" alt="传统目标检测"><p>缺点：</p><ol><li>识别效果不够好，准确率不高</li><li>计算量及较大，运行速度慢</li><li>可能会出现多个正确识别的结果<br>算法基本流程如下：</li></ol><img width="80%" src="https://i.loli.net/2020/03/25/ok12gCjlupOwvXd.jpg" alt="传统目标检测流程"><h3 id="Viola-Jones算法"><a href="#Viola-Jones算法" class="headerlink" title="Viola-Jones算法"></a>Viola-Jones算法</h3><p>VJ算法，用于人脸检测</p><ul><li>Haar特征抽取</li><li>训练人脸分类器（采用Adaboost算法，在训练同时不停更新样本权重）</li><li>基于滑动窗口</li></ul><p>以下是Haar特征，采用差分运算求解梯度，value=白-黑</p><img width="40%" src="https://i.loli.net/2020/03/25/4EGZT7HJVlg3SyD.jpg" alt="Haar特征"><p>Adaboost算法流程：</p><ul><li>初始化样本的权重w，样本权重之和为1</li><li>训练弱分类器</li><li>更新样本权重</li><li>循环第2步—训练弱分类器</li><li>结合多个分类器结果，进行投票</li></ul><img width="40%" src="https://i.loli.net/2020/03/25/HRrfJgAQTGVi6St.jpg" alt="Adaboost"><h3 id="HOG-SVM算法"><a href="#HOG-SVM算法" class="headerlink" title="HOG+SVM算法"></a>HOG+SVM算法</h3><p>HOG+SVM算法主要用于行人检测，基本流程如下：</p><ul><li>提取HOG特征</li><li>训练SVM分类器</li><li>利用滑动窗口提取目标区域，进行分类判断</li><li>NMS</li><li>输出检测结果</li></ul><p>HOG特征维度很高，通常需要降维，以下是HOG特征的求解步骤：</p><img width="50%" src="https://i.loli.net/2020/03/25/mVxJHAYRfdezycr.jpg" alt="HOG特征"><ul><li>灰度化+Gamma变换</li><li>计算梯度map</li><li>图像划分为小的cell，统计每个cell梯度直方图</li><li>多个cell组成一个block，特征归一化</li><li>多个block串联并归一化</li></ul><h3 id="DPM算法"><a href="#DPM算法" class="headerlink" title="DPM算法"></a>DPM算法</h3><p>DPM算法是对HOG特征的扩展，常用于物体检测，传统目标检测算法的巅峰之作。</p><h3 id="FCN"><a href="#FCN" class="headerlink" title="FCN"></a>FCN</h3><p>原理：滑动窗口法+CNN提升识别的准确率<br>解决了传统目标检测中需要针对每个滑动窗口计算分类的效率问题，使用FCN可以一次性计算。</p><img width="50%" src="https://i.loli.net/2020/04/06/R81rLtlbj4uPNm2.jpg" alt="FCN"><img width="50%" src="https://i.loli.net/2020/04/06/YHGECgKUhsVJAjf.jpg" alt="FCN2"><h2 id="深度学习目标检测算法"><a href="#深度学习目标检测算法" class="headerlink" title="深度学习目标检测算法"></a>深度学习目标检测算法</h2><p>传统的计算机视觉方法常用精心设计的手工特征(如SIFT, HOG)描述图像，而深度学习的方法则倡导习得特征，从图像分类任务的经验来看，CNN网络自动习得的特征取得的效果已经超出了手工设计的特征。</p><h3 id="two-stage"><a href="#two-stage" class="headerlink" title="two-stage"></a>two-stage</h3><img width="80%" src="https://i.loli.net/2020/03/25/TcyFGvO2rZa1zYD.jpg" alt="two-stage常用算法"><p><strong>two-stage核心组件：</strong><br>1）CNN网络</p><ul><li>从简到繁再到简的卷积神经网络</li><li>多尺度特征融合的网络</li><li>更轻量级的CNN网络<br>2）RPN网络</li><li>区域推荐（Anchor机制）</li><li>ROI pooling</li><li>分类和回归</li></ul><p><strong>two-stage改进方向：</strong></p><ul><li>更好的网络特征</li><li>更精准的RPN</li><li>更完美的ROI分类</li><li>样本后处理</li><li>更大的mini-batch</li></ul><h4 id="R-CNN"><a href="#R-CNN" class="headerlink" title="R-CNN"></a>R-CNN</h4><p>R-CNN将检测抽象为两个过程，一是基于图片提出若干可能包含物体的区域（即图片的局部裁剪，被称为Region Proposal），如Selective Search算法；二是在提出的这些区域上运行当时表现最好的分类网络（AlexNet），得到每个区域内物体的类别。</p><p>一是数据的准备。输入CNN前，我们需要根据Ground Truth对提出的Region Proposal进行标记，这里使用的指标是IoU（Intersection over Union，交并比）。IoU计算了两个区域之交的面积跟它们之并的比，描述了两个区域的重合程度。</p><p>另一点是位置坐标的回归（Bounding-Box Regression），这一过程是Region Proposal向Ground Truth调整，实现时加入了log/exp变换来使损失保持在合理的量级上，可以看做一种标准化（Normalization)操作。</p><img width="80%" src="https://i.loli.net/2020/03/25/htX6erfwgaQuJFC.jpg" alt="R-CNN"><p><strong>R-CNN的想法直接明了，即将检测任务转化为区域上的分类任务，是深度学习方法在检测任务上的试水。模型本身存在的问题也很多，如需要训练三个不同的模型（proposal, classification, regression）、重复计算过多导致的性能问题等。</strong></p><img width="60%" src="https://i.loli.net/2020/04/06/Zh6Gejk9K4rL8pl.jpg" alt="RCNN"><img width="60%" src="https://i.loli.net/2020/04/06/ycnjhArmeJkYKVx.jpg" alt="RCNN算法流程"><p><strong>具体算法流程如下：</strong></p><ol><li>选择一个分类模型（比如AlexNet、VGGNet等）</li><li>去掉最后一个全连接层，将分类数从1000改为N+1（注意这里+1是添加了背景分类，N值根据实际业务场景选定），对该模型做fine-tuning（主要目的是优化卷积层和池化层的参数）</li></ol><img width="60%" src="https://i.loli.net/2020/04/06/CtF87aJjST2fZeL.jpg" alt="RCNN流程分析"><ol start="3"><li>对每个候选区域进行特征提取，resize区域大小，将第5个池化层的输出（即候选区提取到的特征）保存到硬盘</li></ol><img width="60%" src="https://i.loli.net/2020/04/06/gfpMmtRDnYe4b9G.jpg" alt="RCNN流程分析2"><ol start="4"><li>使用pooling5输出的图像特征训练SVM分类器，判断此候选区内的物体类别。每个类别对应一个SVM</li><li>使用pooling5输出的图像特征训练一个回归器（dx，dy，dw，dh）。其中，dx是水平平移，dy是垂直平移，dw是宽度缩放，dh是高度缩放。在测试阶段，使用回归器调整候选框位置。</li></ol><h4 id="SPP-Net"><a href="#SPP-Net" class="headerlink" title="SPP-Net"></a>SPP-Net</h4><img width="60%" src="https://i.loli.net/2020/04/06/e32O86LCG7JFTsM.jpg" alt="SPP"><p>SPP-Net针对RCNN做了改进，重点是：</p><ol><li>对原图只做一次卷积操作，就可以得到每个候选区域的特征。而不是类似RCNN对2000个候选区分别做CNN。</li><li>使用了金字塔池化层技术，保证了原始候选区不管什么形状都可以得到同样尺寸的输出，而不是类似RCNN中将每个不同尺寸的候选区调整至相同大小。（4x4+2x2=20个值）</li></ol><img width="60%" src="https://i.loli.net/2020/04/06/tY2pAHr5amG1zd4.jpg" alt="金字塔池化层"><p>经过实验证明，SPP-Net图像检测速度比RCNN提高了约100倍。</p><h4 id="Fast-R-CNN"><a href="#Fast-R-CNN" class="headerlink" title="Fast R-CNN"></a>Fast R-CNN</h4><p>R-CNN耗时的原因是CNN是在每一个Proposal上单独进行的，没有共享计算，便提出将基础网络在图片整体上运行完毕后，再传入R-CNN子网络，共享了大部分计算，故有Fast之名。</p><img width="80%" src="https://i.loli.net/2020/03/25/FBNE84oVOxqXWhY.jpg" alt="Fast R-CNN"><p>图片经过<code>feature extractor</code>得到<code>feature map</code>, 同时在原图上运行<code>Selective Search</code>算法并将<code>RoI</code>（Region of Interset，实为坐标组，可与Region Proposal混用）映射到到<code>feature map</code>上，再对每个RoI进行RoI Pooling操作便得到等长的<code>feature vector</code>，将这些得到的<code>feature vector</code>进行正负样本的整理（保持一定的正负样本比例），分batch传入并行的<code>R-CNN</code>子网络，同时进行分类和回归，并将两者的损失统一起来。</p><p><code>RoI Pooling</code> 是对输入<code>R-CNN</code>子网络的数据进行准备的关键操作。我们得到的区域常常有不同的大小，在映射到<code>feature map</code>上之后，会得到不同大小的特征张量。<code>RoI Pooling</code>先将RoI等分成目标个数的网格，再在每个网格上进行<code>max pooling</code>，就得到等长的<code>RoI feature vector</code>。</p><p><strong>Fast R-CNN的这一结构正是检测任务主流two-stage方法所采用的元结构的雏形，将Proposal, Feature Extractor, Object Classification&amp;Localization统一在一个整体的结构中，并通过共享卷积计算提高特征利用效率。</strong></p><img width="60%" src="https://i.loli.net/2020/04/06/AKcEBDu3avneIr5.jpg" alt="Fast RCNN"><p>Fast RCNN针对SPP-Net做了改进，重点是：</p><ol><li>使用了ROI Pooling（是金字塔池化层的一种简单化的形式）</li></ol><img width="60%" src="https://i.loli.net/2020/04/06/EPS5q7tFzWAxr8N.jpg" alt="ROI Pooling"><ol start="2"><li>将回归放进了神经网络内部，作为了一个整体，而不是单独地训练回归器和分类器</li></ol><img width="60%" src="https://i.loli.net/2020/04/06/478TSbjWtCmoLD3.jpg" alt="Fast RCNN对比"><h4 id="Faster-R-CNN"><a href="#Faster-R-CNN" class="headerlink" title="Faster R-CNN"></a>Faster R-CNN</h4><p>Faster R-CNN是two-stage方法的奠基性工作，提出的<code>RPN网络</code>取代<code>Selective Search</code>算法使得检测任务可以由神经网络<code>端到端</code>地完成。粗略的讲，<code>Faster R-CNN = RPN + Fast R-CNN</code>，跟RCNN共享卷积计算的特性使得RPN引入的计算量很小，使得Faster R-CNN可以在单个GPU上以5fps的速度运行，而在精度方面达到SOTA（State of the Art，当前最佳）。</p><img width="80%" src="https://i.loli.net/2020/03/25/M8Fe1urqchszfLb.jpg" alt="Faster R-CNN"><p>第一步是在一个滑动窗口上生成不同大小和长宽比例的anchor box，取定IoU的阈值，按Ground Truth标定这些anchor box的正负。于是，传入RPN网络的样本数据被整理为anchor box（坐标）和每个anchor box是否有物体（二分类标签）。RPN网络将每个样本映射为一个概率值和四个坐标值，概率值反应这个anchor box有物体的概率，四个坐标值用于回归定义物体的位置。最后将二分类和坐标回归的损失统一起来，作为RPN网络的目标训练。</p><p>由RPN得到Region Proposal在根据概率值筛选后经过类似的标记过程，被传入R-CNN子网络，进行多分类和坐标回归，同样用多任务损失将二者的损失联合。</p><p><strong>Faster R-CNN的成功之处在于用RPN网络完成了检测任务的”深度化”。使用滑动窗口生成anchor box的思想也在后来的工作中越来越多地被采用（YOLO v2等）。这项工作奠定了”RPN+RCNN”的两阶段方法元结构，影响了大部分后续工作。</strong></p><img width="60%" src="https://i.loli.net/2020/04/06/wWrFczhEGp4J5d3.jpg" alt="Faster RCNN"><img width="60%" src="https://i.loli.net/2020/04/07/lQxKi7ONImoEUXH.jpg" alt="Faster RCNN网络架构"><p>Faster RCNN针对Fast RCNN做了改进，重点是：</p><ol><li>加入了专门生成候选区的神经网络RPN，代替Fast RCNN中Selective Search方法</li></ol><img width="60%" src="https://i.loli.net/2020/04/07/DAwVKJrcMFQtWsT.jpg" alt="RPN"><ol start="2"><li>RPN中引入了anchor机制（每个点生成9个anchor）</li></ol><img width="60%" src="https://i.loli.net/2020/04/07/9BoNEROQKkZruP8.jpg" alt="anchor"><img width="60%" src="https://i.loli.net/2020/04/07/R7SAvjx18gwYuWn.jpg" alt="Faster RCNN训练流程"><h4 id="Mask-R-CNN"><a href="#Mask-R-CNN" class="headerlink" title="Mask R-CNN"></a>Mask R-CNN</h4><img width="60%" src="https://i.loli.net/2020/03/25/BN9DnWY3qeQfoE8.jpg" alt="Mask R-CNN"><img width="60%" src="https://i.loli.net/2020/03/25/y7HT1z4R3KbWDQ5.jpg" alt="R-CNN系列"><h3 id="one-stage"><a href="#one-stage" class="headerlink" title="one-stage"></a>one-stage</h3><p>单阶段模型没有中间的区域检出过程，直接从图片获得预测结果，也被成为Region-free方法。</p><p>one-stage系列目标检测算法的特点：</p><ul><li>使用CNN卷积特征</li><li>直接回归物体的类别概率和位置坐标值（无region proposal）</li><li>准确度低，速度相对two-stage快</li></ul><h4 id="YOLO"><a href="#YOLO" class="headerlink" title="YOLO"></a>YOLO</h4><img width="80%" src="https://i.loli.net/2020/03/25/NH9VdW2x7CAmj4o.jpg" alt="YOLO"><p>YOLO的工作流程如下：</p><ol><li>准备数据：将图片缩放，划分为等分的网格，每个网格按跟Ground Truth的IoU分配到所要预测的样本。</li><li>卷积网络：由GoogLeNet更改而来，每个网格对每个类别预测一个条件概率值，并在网格基础上生成B个box，每个box预测五个回归值，四个表征位置，第五个表征这个box含有物体（注意不是某一类物体）的概率和位置的准确程度（由IoU表示）。</li><li>后处理：使用NMS（Non-Maximum Suppression，非极大抑制）过滤得到最后的预测框</li></ol><p>损失函数被分为三部分：坐标误差、物体误差、类别误差。为了平衡类别不均衡和大小物体等带来的影响，损失函数中添加了权重并将长宽取根号。</p><p><strong>YOLO提出了单阶段的新思路，相比两阶段方法，其速度优势明显，实时的特性令人印象深刻。但YOLO本身也存在一些问题，如划分网格较为粗糙，每个网格生成的box个数等限制了对小尺度物体和相近物体的检测。</strong></p><h4 id="YOLO-V1"><a href="#YOLO-V1" class="headerlink" title="YOLO V1"></a>YOLO V1</h4><img width="80%" src="https://i.loli.net/2020/03/25/1Aqjgb4Tz7C6uKv.jpg" alt="YOLOV1-1"><img width="80%" src="https://i.loli.net/2020/03/25/cZnHb7BE3NYK4Lv.jpg" alt="YOLOV1-2"><img width="60%" src="https://i.loli.net/2020/04/06/mi3dH8eTSlfMhAV.jpg" alt="YOLO V1"><img width="60%" src="https://i.loli.net/2020/04/06/hTjtAGUbQo6Llzx.jpg" alt="YOLO V1结构"><img width="60%" src="https://i.loli.net/2020/04/06/QjX5gYpS6lZN3FI.jpg" alt="YOLO V1流程"><img width="60%" src="https://i.loli.net/2020/04/06/QmCOWNYDqR46Fdh.jpg" alt="YOLO V1流程2"><img width="60%" src="https://i.loli.net/2020/04/06/VYPAXvQ7w61N3kM.jpg" alt="YOLO V1代价函数"><h4 id="YOLO-V2"><a href="#YOLO-V2" class="headerlink" title="YOLO V2"></a>YOLO V2</h4><img width="80%" src="https://i.loli.net/2020/03/25/MVH9kyZnFUi5du4.jpg" alt="YOLOV2-1"><img width="80%" src="https://i.loli.net/2020/03/25/qDsEyIjlnTm5Kbo.jpg" alt="YOLOV2-2"><img width="80%" src="https://i.loli.net/2020/03/25/QLJN6GX5ogqHMdD.jpg" alt="YOLOV2-3"><img width="60%" src="https://i.loli.net/2020/04/06/7wQRpLFd4DSXIBi.jpg" alt="YOLO V2"><img width="60%" src="https://i.loli.net/2020/04/06/G6sU8hSCXtTf5Hi.jpg" alt="YOLO V2-2"><img width="60%" src="https://i.loli.net/2020/04/06/m9DtxjwZgLsXJUq.jpg" alt="YOLO V2-3"><img width="60%" src="https://i.loli.net/2020/04/07/juO7Aahd5F4oxKH.jpg" alt="YOLO V2-4"><img width="60%" src="https://i.loli.net/2020/04/07/2TWdmixDeo4sSa5.jpg" alt="YOLO V2-4-2"><img width="60%" src="https://i.loli.net/2020/04/07/irOVv81PxykjFWA.jpg" alt="YOLO V2-5"><img width="60%" src="https://i.loli.net/2020/04/07/ua5T1ldexNUAEgP.jpg" alt="YOLO V2-6"><h4 id="YOLO-V3"><a href="#YOLO-V3" class="headerlink" title="YOLO V3"></a>YOLO V3</h4><p><a href="https://juejin.im/post/5c360346f265da6125784d05" target="_blank" rel="noopener">YOLO v3有哪些新特点？</a><br><img width="80%" src="https://i.loli.net/2020/03/25/XUOWkoJD8GjgAFB.jpg" alt="YOLOV3-1"></p><img width="80%" src="https://i.loli.net/2020/03/25/UZa971gs5MQl3Dm.jpg" alt="YOLOV3-2"><img width="60%" src="https://i.loli.net/2020/04/07/6FXo5fy8h4dPTcz.jpg" alt="YOLO V3"><h4 id="SSD"><a href="#SSD" class="headerlink" title="SSD"></a>SSD</h4><p>SSD是Single Shot Multi-box Detector的简称，这类将区域提名以及位置和分类合并到一起的方法被称为single shot，上图是Single Shot的另一种方式multi-box detector的结构图。multi-box detector也用到了VGG16，不过仅有前三个conv_block，剔除了全链接层，原先的FC6、FC7又添加了新的卷积。可以看到其中有若干个卷积块连接到了最后的detections，也就是在不同尺度的特征映射上都进行一次物体猜测，这样精度会稍有提高，对于尺度变化较大的物体也能起到较好的效果。</p><img width="80%" src="https://i.loli.net/2020/03/25/vHoElGfKwnWNkST.jpg" alt="SSD"><p>SSD相比YOLO有以下突出的特点：</p><ul><li>多尺度的feature map：基于VGG的不同卷积段，输出feature map到回归器中。这一点试图提升小物体的检测精度。</li><li>更多的anchor box，每个网格点生成不同大小和长宽比例的box，并将类别预测概率基于box预测（YOLO是在网格上），得到的输出值个数为(C+4)×k×m×n，其中C为类别数，k为box个数，m×n为feature map的大小。</li></ul><p><strong>SSD是单阶段模型早期的集大成者，达到跟接近两阶段模型精度的同时，拥有比两阶段模型快一个数量级的速度。后续的单阶段模型工作大多基于SSD改进展开。</strong></p><img width="60%" src="https://i.loli.net/2020/04/07/1yzKFlC96QLdTmU.jpg" alt="SSD算法"><p>观察上图，会看到每一层都有指向尾层特征的连线，尾层特征会收集到不同尺寸的特征图。一方面，浅层特征和深层特征包含的信息是不一样的，另一方面，每个层对应的感受野也不同，可以检测不同大小的目标物体。</p><p><strong>SSD算法流程：</strong></p><img width="60%" src="https://i.loli.net/2020/04/07/ElnaqCUMHZcguVP.jpg" alt="SSD流程"><p>SSD中使用到了hard negative mining和data augmentation优化手段：</p><ol><li>hard negative mining</li></ol><img width="60%" src="https://i.loli.net/2020/04/07/YnPgFjbCGukophx.jpg" alt="hard"><ol start="2"><li>data augmentation</li></ol><img width="60%" src="https://i.loli.net/2020/04/06/xXFBepOmrKWZbvH.jpg" alt="DA"><p><strong>SSD结果分析：</strong></p><ol><li>更多的feature map可以得到更好的结果</li><li>使用图片边界的标注框比不使用图片边界的标注框效果更好</li></ol><p><strong>SSD缺点：</strong><br><img width="60%" src="https://i.loli.net/2020/04/06/TFoOgdan5u1DWkY.jpg" alt="SSD缺点"></p><h2 id="目标分割算法"><a href="#目标分割算法" class="headerlink" title="目标分割算法"></a>目标分割算法</h2><img width="60%" src="https://i.loli.net/2020/04/07/k5vL2uNncryiTS9.jpg" alt="目标分割"><p>目标分割的不同层次：</p><ol><li>普通分割——将不同类别物体的像素区域分开</li><li>语义分割——在普通分割的基础上，分类出每一块区域的语义（判断是什么物体）</li><li>实例分割——在语义分割的基础上，给每一个物体编号</li></ol><h3 id="FCN-1"><a href="#FCN-1" class="headerlink" title="FCN"></a>FCN</h3><img width="60%" src="https://i.loli.net/2020/04/07/IctN5vsZrOheiVz.jpg" alt="FCN算法"><img width="60%" src="https://i.loli.net/2020/04/07/BiLvoNbCFq6JXZP.jpg" alt="FCN算法2"><h3 id="Mask-RCNN"><a href="#Mask-RCNN" class="headerlink" title="Mask RCNN"></a>Mask RCNN</h3><img width="60%" src="https://i.loli.net/2020/04/07/eHZoD4v1fJlQASh.jpg" alt=" Mask RCNN"><img width="60%" src="https://i.loli.net/2020/04/07/UTti65ofFDQ7zaK.jpg" alt=" Mask RCNN架构">]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CV系列4：对抗生成网络</title>
      <link href="/2020/03/12/CV-04/"/>
      <url>/2020/03/12/CV-04/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><a href="https://iloveyou11.github.io/2020/02/16/CV-01/" target="_blank" rel="noopener">CV系列1：计算机视觉基础知识</a><br><a href="https://iloveyou11.github.io/2020/02/20/CV-02/" target="_blank" rel="noopener">CV系列2：卷积神经网络的演变</a><br><a href="https://iloveyou11.github.io/2020/03/01/CV-03/" target="_blank" rel="noopener">CV系列3：卷积神经网络代码实现</a><br><a href="https://iloveyou11.github.io/2020/03/12/CV-04/" target="_blank" rel="noopener">CV系列4：对抗生成网络</a><br><a href="https://iloveyou11.github.io/2020/03/19/CV-05/" target="_blank" rel="noopener">CV系列5：目标检测算法</a></p><h4 id="待补充……"><a href="#待补充……" class="headerlink" title="待补充……"></a>待补充……</h4>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CV系列3：卷积神经网络代码实现</title>
      <link href="/2020/03/01/CV-03/"/>
      <url>/2020/03/01/CV-03/</url>
      
        <content type="html"><![CDATA[<p>本文主要介绍各类典型卷积神经网络的代码实现。</p><a id="more"></a><p><a href="https://iloveyou11.github.io/2020/02/16/CV-01/" target="_blank" rel="noopener">CV系列1：计算机视觉基础知识</a><br><a href="https://iloveyou11.github.io/2020/02/20/CV-02/" target="_blank" rel="noopener">CV系列2：卷积神经网络的演变</a><br><a href="https://iloveyou11.github.io/2020/03/01/CV-03/" target="_blank" rel="noopener">CV系列3：卷积神经网络代码实现</a><br><a href="https://iloveyou11.github.io/2020/03/12/CV-04/" target="_blank" rel="noopener">CV系列4：对抗生成网络</a><br><a href="https://iloveyou11.github.io/2020/03/19/CV-05/" target="_blank" rel="noopener">CV系列5：目标检测算法</a></p><h4 id="LeNet-雏形网络"><a href="#LeNet-雏形网络" class="headerlink" title="LeNet-雏形网络"></a>LeNet-雏形网络</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf  </span><br><span class="line"><span class="keyword">import</span> input_data  </span><br><span class="line">  </span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">'MNIST_data'</span>, one_hot=<span class="literal">True</span>)  </span><br><span class="line">  </span><br><span class="line">sess = tf.InteractiveSession()  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 训练数据</span></span><br><span class="line">x = tf.placeholder(<span class="string">"float"</span>, shape=[<span class="literal">None</span>, <span class="number">784</span>])  </span><br><span class="line"><span class="comment"># 训练标签数据</span></span><br><span class="line">y_ = tf.placeholder(<span class="string">"float"</span>, shape=[<span class="literal">None</span>, <span class="number">10</span>])  </span><br><span class="line"><span class="comment"># 把x更改为4维张量，第1维代表样本数量，第2维和第3维代表图像长宽， 第4维代表图像通道数, 1表示黑白</span></span><br><span class="line">x_image = tf.reshape(x, [<span class="number">-1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>])</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 第一层：卷积层</span></span><br><span class="line"><span class="comment"># 过滤器大小为5*5, 当前层深度为1， 过滤器的深度为32</span></span><br><span class="line">conv1_weights = tf.get_variable(<span class="string">"conv1_weights"</span>, [<span class="number">5</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">32</span>], initializer=tf.truncated_normal_initializer(stddev=<span class="number">0.1</span>))</span><br><span class="line">conv1_biases = tf.get_variable(<span class="string">"conv1_biases"</span>, [<span class="number">32</span>], initializer=tf.constant_initializer(<span class="number">0.0</span>))</span><br><span class="line"><span class="comment"># 移动步长为1, 使用全0填充</span></span><br><span class="line">conv1 = tf.nn.conv2d(x_image, conv1_weights, strides=[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], padding=<span class="string">'SAME'</span>)</span><br><span class="line"><span class="comment"># 激活函数Relu去线性化</span></span><br><span class="line">relu1 = tf.nn.relu(tf.nn.bias_add(conv1, conv1_biases))</span><br><span class="line">  </span><br><span class="line"><span class="comment">#第二层：最大池化层  </span></span><br><span class="line"><span class="comment">#池化层过滤器的大小为2*2, 移动步长为2，使用全0填充  </span></span><br><span class="line">pool1 = tf.nn.max_pool(relu1, ksize=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], strides=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], padding=<span class="string">'SAME'</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#第三层：卷积层  </span></span><br><span class="line">conv2_weights = tf.get_variable(<span class="string">"conv2_weights"</span>, [<span class="number">5</span>, <span class="number">5</span>, <span class="number">32</span>, <span class="number">64</span>], initializer=tf.truncated_normal_initializer(stddev=<span class="number">0.1</span>)) <span class="comment">#过滤器大小为5*5, 当前层深度为32， 过滤器的深度为64  </span></span><br><span class="line">conv2_biases = tf.get_variable(<span class="string">"conv2_biases"</span>, [<span class="number">64</span>], initializer=tf.constant_initializer(<span class="number">0.0</span>))  </span><br><span class="line">conv2 = tf.nn.conv2d(pool1, conv2_weights, strides=[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], padding=<span class="string">'SAME'</span>) <span class="comment">#移动步长为1, 使用全0填充  </span></span><br><span class="line">relu2 = tf.nn.relu( tf.nn.bias_add(conv2, conv2_biases) )  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#第四层：最大池化层  </span></span><br><span class="line"><span class="comment">#池化层过滤器的大小为2*2, 移动步长为2，使用全0填充  </span></span><br><span class="line">pool2 = tf.nn.max_pool(relu2, ksize=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], strides=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], padding=<span class="string">'SAME'</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#第五层：全连接层  </span></span><br><span class="line">fc1_weights = tf.get_variable(<span class="string">"fc1_weights"</span>, [<span class="number">7</span> * <span class="number">7</span> * <span class="number">64</span>, <span class="number">1024</span>], initializer=tf.truncated_normal_initializer(stddev=<span class="number">0.1</span>)) <span class="comment">#7*7*64=3136把前一层的输出变成特征向量  </span></span><br><span class="line">fc1_baises = tf.get_variable(<span class="string">"fc1_baises"</span>, [<span class="number">1024</span>], initializer=tf.constant_initializer(<span class="number">0.1</span>))  </span><br><span class="line">pool2_vector = tf.reshape(pool2, [<span class="number">-1</span>, <span class="number">7</span> * <span class="number">7</span> * <span class="number">64</span>])  </span><br><span class="line">fc1 = tf.nn.relu(tf.matmul(pool2_vector, fc1_weights) + fc1_baises)  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#为了减少过拟合，加入Dropout层  </span></span><br><span class="line">keep_prob = tf.placeholder(tf.float32)  </span><br><span class="line">fc1_dropout = tf.nn.dropout(fc1, keep_prob)  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#第六层：全连接层  </span></span><br><span class="line">fc2_weights = tf.get_variable(<span class="string">"fc2_weights"</span>, [<span class="number">1024</span>, <span class="number">10</span>], initializer=tf.truncated_normal_initializer(stddev=<span class="number">0.1</span>)) <span class="comment">#神经元节点数1024, 分类节点10  </span></span><br><span class="line">fc2_biases = tf.get_variable(<span class="string">"fc2_biases"</span>, [<span class="number">10</span>], initializer=tf.constant_initializer(<span class="number">0.1</span>))  </span><br><span class="line">fc2 = tf.matmul(fc1_dropout, fc2_weights) + fc2_biases  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#第七层：输出层  </span></span><br><span class="line"><span class="comment"># softmax  </span></span><br><span class="line">y_conv = tf.nn.softmax(fc2)  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#定义交叉熵损失函数  </span></span><br><span class="line">cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y_conv), reduction_indices=[<span class="number">1</span>]))  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#选择优化器，并让优化器最小化损失函数/收敛, 反向传播  </span></span><br><span class="line">train_step = tf.train.AdamOptimizer(<span class="number">1e-4</span>).minimize(cross_entropy)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># tf.argmax()返回的是某一维度上其数据最大所在的索引值，在这里即代表预测值和真实值  </span></span><br><span class="line"><span class="comment"># 判断预测值y和真实值y_中最大数的索引是否一致，y的值为1-10概率  </span></span><br><span class="line">correct_prediction = tf.equal(tf.argmax(y_conv,<span class="number">1</span>), tf.argmax(y_,<span class="number">1</span>))  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 用平均值来统计测试准确率  </span></span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#开始训练  </span></span><br><span class="line">sess.run(tf.global_variables_initializer())  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000</span>):  </span><br><span class="line">    batch = mnist.train.next_batch(<span class="number">100</span>)  </span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">100</span> == <span class="number">0</span>:  </span><br><span class="line">        train_accuracy = accuracy.eval(feed_dict=&#123;x:batch[<span class="number">0</span>], y_: batch[<span class="number">1</span>], keep_prob: <span class="number">1.0</span>&#125;) <span class="comment">#评估阶段不使用Dropout  </span></span><br><span class="line">        print(<span class="string">"step %d, training accuracy %g"</span> % (i, train_accuracy))  </span><br><span class="line">    train_step.run(feed_dict=&#123;x: batch[<span class="number">0</span>], y_: batch[<span class="number">1</span>], keep_prob: <span class="number">0.5</span>&#125;) <span class="comment">#训练阶段使用50%的Dropout  </span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#在测试数据上测试准确率  </span></span><br><span class="line">print(<span class="string">"test accuracy %g"</span> % accuracy.eval(feed_dict=&#123;x: mnist.test.images, y_: mnist.test.labels, keep_prob: <span class="number">1.0</span>&#125;))</span><br></pre></td></tr></table></figure><h4 id="AlexLet"><a href="#AlexLet" class="headerlink" title="AlexLet"></a>AlexLet</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">第一层：卷积层</span><br><span class="line"></span><br><span class="line">该层的输入是原始图像的像素值，以MNIST数据集为例，则是28x28x1，第一层过滤器尺寸为5x5，深度设置为6，不适用0去填充，因此该层的输出尺寸是28-5+1=24，深度也为6.</span><br><span class="line"></span><br><span class="line">第二层：池化层</span><br><span class="line"></span><br><span class="line">接受第一层的输出作为输入，过滤器大小选为2x2，步长2.</span><br><span class="line"></span><br><span class="line">第三层：卷积层</span><br><span class="line"></span><br><span class="line">卷积和大小5x5，深度为16，同样不使用0填充，步长为1.</span><br><span class="line"></span><br><span class="line">第四层：池化层</span><br><span class="line"></span><br><span class="line">卷积核采用2x2,步长2</span><br><span class="line"></span><br><span class="line">第五层：全连接</span><br><span class="line"></span><br><span class="line">卷积核为5x5，输出节点为120</span><br><span class="line"></span><br><span class="line">第六层：全连接层</span><br><span class="line"></span><br><span class="line">输入节点数120，输出节点数84</span><br><span class="line"></span><br><span class="line">第七层：全连接层</span><br><span class="line"></span><br><span class="line">输入84，输出10</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> input_data</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"> </span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">"MNIST_data"</span>, one_hot=<span class="literal">True</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义网络超参数</span></span><br><span class="line">learning_rate = <span class="number">1e-4</span></span><br><span class="line">training_iters = <span class="number">300000</span></span><br><span class="line">batch_size = <span class="number">64</span></span><br><span class="line">display_step = <span class="number">20</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义网络参数</span></span><br><span class="line">n_input = <span class="number">784</span> <span class="comment"># 输入的维度</span></span><br><span class="line">n_classes = <span class="number">10</span> <span class="comment"># 标签的维度</span></span><br><span class="line">dropout = <span class="number">0.5</span> <span class="comment"># Dropout 的概率</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 占位符输入</span></span><br><span class="line">x = tf.placeholder(tf.float32, [<span class="literal">None</span>, n_input])</span><br><span class="line">y = tf.placeholder(tf.float32, [<span class="literal">None</span>, n_classes])</span><br><span class="line">keep_prob = tf.placeholder(tf.float32)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 卷积操作</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv2d</span><span class="params">(name, l_input, w, b, k)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(l_input,</span><br><span class="line">                                                  w, strides=[<span class="number">1</span>, k, k, <span class="number">1</span>],</span><br><span class="line">                                                  padding=<span class="string">'SAME'</span>), b), name=name)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 最大下采样操作</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_pool</span><span class="params">(name, l_input, k1, k2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.max_pool(l_input, ksize=[<span class="number">1</span>, k1, k1, <span class="number">1</span>], strides=[<span class="number">1</span>, k2, k2, <span class="number">1</span>], padding=<span class="string">'SAME'</span>, name=name)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 归一化操作</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">norm</span><span class="params">(name, l_input, lsize=<span class="number">4</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.lrn(l_input, lsize, bias=<span class="number">1.0</span>, alpha=<span class="number">0.001</span> / <span class="number">9.0</span>, beta=<span class="number">0.75</span>, name=name)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义整个网络</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alex_net</span><span class="params">(_X, _weights, _biases, _dropout)</span>:</span></span><br><span class="line">    <span class="comment"># 向量转为矩阵</span></span><br><span class="line">    _X = tf.reshape(_X, shape=[<span class="number">-1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>])</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 卷积层</span></span><br><span class="line">    conv1 = conv2d(<span class="string">'conv1'</span>, _X, _weights[<span class="string">'wc1'</span>], _biases[<span class="string">'bc1'</span>], <span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 归一化层</span></span><br><span class="line">    norm1 = norm(<span class="string">'norm1'</span>, conv1, lsize=<span class="number">4</span>)</span><br><span class="line">    <span class="comment"># 下采样层</span></span><br><span class="line">    pool1 = max_pool(<span class="string">'pool1'</span>, norm1, k1=<span class="number">3</span>, k2=<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># Dropout</span></span><br><span class="line">    norm1 = tf.nn.dropout(pool1, _dropout)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 卷积</span></span><br><span class="line">    conv2 = conv2d(<span class="string">'conv2'</span>, norm1, _weights[<span class="string">'wc2'</span>], _biases[<span class="string">'bc2'</span>], <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 归一化</span></span><br><span class="line">    norm2 = norm(<span class="string">'norm2'</span>, conv2, lsize=<span class="number">4</span>)</span><br><span class="line">    <span class="comment"># 下采样</span></span><br><span class="line">    pool2 = max_pool(<span class="string">'pool2'</span>, norm2, k1=<span class="number">3</span>, k2=<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># Dropout</span></span><br><span class="line">    norm2 = tf.nn.dropout(pool2, _dropout)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 卷积</span></span><br><span class="line">    conv3 = conv2d(<span class="string">'conv3'</span>, norm2, _weights[<span class="string">'wc3'</span>], _biases[<span class="string">'bc3'</span>], <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 归一化384</span></span><br><span class="line">    norm3 = norm(<span class="string">'norm3'</span>, conv3, lsize=<span class="number">4</span>)</span><br><span class="line">    <span class="comment"># 下采样</span></span><br><span class="line">    <span class="comment"># pool3 = max_pool('pool3', norm3, k=2)</span></span><br><span class="line">    <span class="comment"># Dropoutize of tensor shape you provided is 150528 : 224x224x</span></span><br><span class="line">    norm3 = tf.nn.dropout(norm3, _dropout)</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    # 卷积</span></span><br><span class="line"><span class="string">    conv4 = conv2d('conv4', norm3, _weights['wc4'], _biases['bc4'], 1)</span></span><br><span class="line"><span class="string">    # 归一化</span></span><br><span class="line"><span class="string">    norm4 = norm('norm4', conv4, lsize=4)</span></span><br><span class="line"><span class="string">    # 下采样</span></span><br><span class="line"><span class="string">    # pool3 = max_pool('pool3', norm3, k=2)</span></span><br><span class="line"><span class="string">    # Dropout</span></span><br><span class="line"><span class="string">    norm4 = tf.nn.dropout(norm4, _dropout)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    # 卷积</span></span><br><span class="line"><span class="string">    conv5 = conv2d('conv5', norm4, _weights['wc5'], _biases['bc5'], 1)</span></span><br><span class="line"><span class="string">    # 归一化256</span></span><br><span class="line"><span class="string">    norm5 = norm('norm5', conv5, lsize=4)</span></span><br><span class="line"><span class="string">    # 下采样</span></span><br><span class="line"><span class="string">    pool5 = max_pool('pool5', norm5, k1=3, k2=2)</span></span><br><span class="line"><span class="string">    # Dropout</span></span><br><span class="line"><span class="string">    norm5 = tf.nn.dropout(pool5, _dropout)</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># 全连接层，先把特征图转为向量</span></span><br><span class="line">    dense1 = tf.reshape(norm3, [<span class="number">-1</span>, _weights[<span class="string">'wd1'</span>].get_shape().as_list()[<span class="number">0</span>]])</span><br><span class="line">    dense1 = tf.nn.dropout(tf.nn.relu(tf.matmul(dense1, _weights[<span class="string">'wd1'</span>]) + _biases[<span class="string">'bd1'</span>], name=<span class="string">'fc1'</span>), _dropout)</span><br><span class="line">    <span class="comment"># 全连接层4096</span></span><br><span class="line">    dense2 = tf.nn.relu(tf.matmul(dense1, _weights[<span class="string">'wd2'</span>]) + _biases[<span class="string">'bd2'</span>], name=<span class="string">'fc2'</span>) <span class="comment"># Relu activation</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 网络输出层384</span></span><br><span class="line">    out = tf.matmul(dense2, _weights[<span class="string">'out'</span>]) + _biases[<span class="string">'out'</span>]</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 存储所有的网络参数48</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">weights = &#123;</span></span><br><span class="line"><span class="string">    'wc1': tf.Variable(tf.random_normal([3, 3, 1, 64])),</span></span><br><span class="line"><span class="string">    'wc2': tf.Variable(tf.random_normal([3, 3, 64, 128])),</span></span><br><span class="line"><span class="string">    'wc3': tf.Variable(tf.random_normal([3, 3, 128, 256])),</span></span><br><span class="line"><span class="string">    'wd1': tf.Variable(tf.random_normal([4*4*256, 1024])),</span></span><br><span class="line"><span class="string">    'wd2': tf.Variable(tf.random_normal([1024, 1024])),</span></span><br><span class="line"><span class="string">    'out': tf.Variable(tf.random_normal([1024, 10]))</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">biases = &#123;</span></span><br><span class="line"><span class="string">    'bc1': tf.Variable(tf.random_normal([64])),</span></span><br><span class="line"><span class="string">    'bc2': tf.Variable(tf.random_normal([128])),</span></span><br><span class="line"><span class="string">    'bc3': tf.Variable(tf.random_normal([256])),</span></span><br><span class="line"><span class="string">    'bd1': tf.Variable(tf.random_normal([1024])),</span></span><br><span class="line"><span class="string">    'bd2': tf.Variable(tf.random_normal([1024])),</span></span><br><span class="line"><span class="string">    'out': tf.Variable(tf.random_normal([n_classes]))</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 以字典的形式设置权重和偏置</span></span><br><span class="line">weights = &#123;</span><br><span class="line">    <span class="string">'wc1'</span>: tf.Variable(tf.random_normal([<span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">64</span>])),</span><br><span class="line">    <span class="string">'wc2'</span>: tf.Variable(tf.random_normal([<span class="number">3</span>, <span class="number">3</span>, <span class="number">64</span>, <span class="number">128</span>])),</span><br><span class="line">    <span class="string">'wc3'</span>: tf.Variable(tf.random_normal([<span class="number">3</span>, <span class="number">3</span>, <span class="number">128</span>, <span class="number">256</span>])),</span><br><span class="line">    <span class="string">'wd1'</span>: tf.Variable(tf.random_normal([<span class="number">4</span>*<span class="number">4</span>*<span class="number">256</span>, <span class="number">1024</span>])),</span><br><span class="line">    <span class="string">'wd2'</span>: tf.Variable(tf.random_normal([<span class="number">1024</span>, <span class="number">1024</span>])),</span><br><span class="line">    <span class="string">'out'</span>: tf.Variable(tf.random_normal([<span class="number">1024</span>, <span class="number">10</span>]))</span><br><span class="line">&#125;</span><br><span class="line">biases = &#123;</span><br><span class="line">    <span class="string">'bc1'</span>: tf.Variable(tf.random_normal([<span class="number">64</span>])),</span><br><span class="line">    <span class="string">'bc2'</span>: tf.Variable(tf.random_normal([<span class="number">128</span>])),</span><br><span class="line">    <span class="string">'bc3'</span>: tf.Variable(tf.random_normal([<span class="number">256</span>])),</span><br><span class="line">    <span class="string">'bd1'</span>: tf.Variable(tf.random_normal([<span class="number">1024</span>])),</span><br><span class="line">    <span class="string">'bd2'</span>: tf.Variable(tf.random_normal([<span class="number">1024</span>])),</span><br><span class="line">    <span class="string">'out'</span>: tf.Variable(tf.random_normal([n_classes]))</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 构建模型</span></span><br><span class="line">pred = alex_net(x, weights, biases, keep_prob)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义损失函数和学习步骤</span></span><br><span class="line">cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=pred, labels=y))</span><br><span class="line">optimizer = tf.train.AdamOptimizer(<span class="number">1e-4</span>).minimize(cost)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 测试网络</span></span><br><span class="line">correct_pred = tf.equal(tf.argmax(pred, <span class="number">1</span>), tf.argmax(y, <span class="number">1</span>))</span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_pred, tf.float32))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 初始化所有的共享变量</span></span><br><span class="line">init = tf.initialize_all_variables()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 开启一个训练</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(init)</span><br><span class="line">    step = <span class="number">1</span></span><br><span class="line">    <span class="comment"># Keep training until reach max iterations</span></span><br><span class="line">    <span class="keyword">while</span> step * batch_size &lt; training_iters:</span><br><span class="line">        batch_xs, batch_ys = mnist.train.next_batch(batch_size)</span><br><span class="line">        <span class="comment"># 获取批数据</span></span><br><span class="line">        sess.run(optimizer, feed_dict=&#123;x: batch_xs, y: batch_ys, keep_prob: dropout&#125;)</span><br><span class="line">        <span class="keyword">if</span> step % display_step == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 计算精度</span></span><br><span class="line">            acc = sess.run(accuracy, feed_dict=&#123;x: batch_xs, y: batch_ys, keep_prob: <span class="number">1.</span>&#125;)</span><br><span class="line">            <span class="comment"># 计算损失值</span></span><br><span class="line">            loss = sess.run(cost, feed_dict=&#123;x: batch_xs, y: batch_ys, keep_prob: <span class="number">1.</span>&#125;)</span><br><span class="line">            print(<span class="string">"Iter "</span> + str(step*batch_size) + <span class="string">", Minibatch Loss= "</span> + <span class="string">"&#123;:.6f&#125;"</span>.format(loss) +</span><br><span class="line">                   <span class="string">", Training Accuracy = "</span> + <span class="string">"&#123;:.5f&#125;"</span>.format(acc))</span><br><span class="line">        step += <span class="number">1</span></span><br><span class="line">    print(<span class="string">"Optimization Finished!"</span>)</span><br><span class="line">    <span class="comment"># 计算测试精度</span></span><br><span class="line">    print(<span class="string">"Testing Accuracy:"</span>, sess.run(accuracy, feed_dict=&#123;x: mnist.test.images[:<span class="number">256</span>],</span><br><span class="line">                                                             y: mnist.test.labels[:<span class="number">256</span>],</span><br><span class="line">                                                             keep_prob: <span class="number">0.5</span>&#125;))</span><br><span class="line">    print(<span class="string">'**********************'</span>)</span><br><span class="line">    print(<span class="string">"Testing Accuracy:"</span>, sess.run(accuracy, feed_dict=&#123;x: mnist.test.images[:<span class="number">256</span>],</span><br><span class="line">                                                             y: mnist.test.labels[:<span class="number">256</span>],</span><br><span class="line">                                                             keep_prob: <span class="number">1.0</span>&#125;))</span><br></pre></td></tr></table></figure><h4 id="SPPNet-空间金字塔"><a href="#SPPNet-空间金字塔" class="headerlink" title="SPPNet-空间金字塔"></a>SPPNet-空间金字塔</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spp_layer</span><span class="params">(input_, levels=<span class="number">4</span>, name = <span class="string">'SPP_layer'</span>,pool_type = <span class="string">'max_pool'</span>)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Multiple Level SPP layer.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Works for levels=[1, 2, 3, 6].</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    </span><br><span class="line">    shape = input_.get_shape().as_list()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(name):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> range(levels):</span><br><span class="line">        <span class="comment">#设置池化参数</span></span><br><span class="line">            l = l + <span class="number">1</span></span><br><span class="line">            ksize = [<span class="number">1</span>, np.ceil(shape[<span class="number">1</span>]/ l + <span class="number">1</span>).astype(np.int32), np.ceil(shape[<span class="number">2</span>] / l + <span class="number">1</span>).astype(np.int32), <span class="number">1</span>]</span><br><span class="line">            strides = [<span class="number">1</span>, np.floor(shape[<span class="number">1</span>] / l + <span class="number">1</span>).astype(np.int32), np.floor(shape[<span class="number">2</span>] / l + <span class="number">1</span>).astype(np.int32), <span class="number">1</span>]</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> pool_type == <span class="string">'max_pool'</span>:</span><br><span class="line">                pool = tf.nn.max_pool(input_, ksize=ksize, strides=strides, padding=<span class="string">'SAME'</span>)</span><br><span class="line">                pool = tf.reshape(pool,(shape[<span class="number">0</span>],<span class="number">-1</span>),)</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">else</span> :</span><br><span class="line">                pool = tf.nn.avg_pool(input_, ksize=ksize, strides=strides, padding=<span class="string">'SAME'</span>)</span><br><span class="line">                pool = tf.reshape(pool,(shape[<span class="number">0</span>],<span class="number">-1</span>))</span><br><span class="line">            print(<span class="string">"Pool Level &#123;:&#125;: shape &#123;:&#125;"</span>.format(l, pool.get_shape().as_list()))</span><br><span class="line">            <span class="keyword">if</span> l == <span class="number">1</span>：</span><br><span class="line">                x_flatten = tf.reshape(pool,(shape[<span class="number">0</span>],<span class="number">-1</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                x_flatten = tf.concat((x_flatten,pool),axis=<span class="number">1</span>) <span class="comment">#四种尺度进行拼接</span></span><br><span class="line">            print(<span class="string">"Pool Level &#123;:&#125;: shape &#123;:&#125;"</span>.format(l, x_flatten.get_shape().as_list()))</span><br><span class="line">            <span class="comment"># pool_outputs.append(tf.reshape(pool, [tf.shape(pool)[1], -1]))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x_flatten</span><br></pre></td></tr></table></figure><h4 id="VGGNet"><a href="#VGGNet" class="headerlink" title="VGGNet"></a>VGGNet</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span>  datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">batch_size = <span class="number">32</span></span><br><span class="line">num_batches = <span class="number">100</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 用来创建卷积层并把本层的参数存入参数列表</span></span><br><span class="line"><span class="comment"># input_op:输入的tensor name:该层的名称 kh:卷积层的高 kw:卷积层的宽 n_out:输出通道数，dh:步长的高 dw:步长的宽，p是参数列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv_op</span><span class="params">(input_op,name,kh,kw,n_out,dh,dw,p)</span>:</span></span><br><span class="line">    <span class="comment"># 输入的通道数</span></span><br><span class="line">    n_in = input_op.get_shape()[<span class="number">-1</span>].value</span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(name) <span class="keyword">as</span> scope:</span><br><span class="line">        kernel = tf.get_variable(scope + <span class="string">"w"</span>,shape=[kh,kw,n_in,n_out],dtype=tf.float32,initializer=tf.contrib.layers.xavier_initializer_conv2d())</span><br><span class="line">        conv = tf.nn.conv2d(input_op, kernel, (<span class="number">1</span>,dh,dw,<span class="number">1</span>),padding=<span class="string">'SAME'</span>)</span><br><span class="line">        bias_init_val = tf.constant(<span class="number">0.0</span>, shape=[n_out],dtype=tf.float32)</span><br><span class="line">        biases = tf.Variable(bias_init_val , trainable=<span class="literal">True</span> , name=<span class="string">'b'</span>)</span><br><span class="line">        z = tf.nn.bias_add(conv,biases)</span><br><span class="line">        activation = tf.nn.relu(z,name=scope)</span><br><span class="line">        p += [kernel,biases]</span><br><span class="line">        <span class="keyword">return</span> activation</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义全连接层</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fc_op</span><span class="params">(input_op,name,n_out,p)</span>:</span></span><br><span class="line">    n_in = input_op.get_shape()[<span class="number">-1</span>].value</span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(name) <span class="keyword">as</span> scope:</span><br><span class="line">        kernel = tf.get_variable(scope+<span class="string">'w'</span>,shape=[n_in,n_out],dtype=tf.float32,initializer=tf.contrib.layers.xavier_initializer_conv2d())</span><br><span class="line">        biases = tf.Variable(tf.constant(<span class="number">0.1</span>,shape=[n_out],dtype=tf.float32),name=<span class="string">'b'</span>)</span><br><span class="line">        <span class="comment"># tf.nn.relu_layer()用来对输入变量input_op与kernel做乘法并且加上偏置b</span></span><br><span class="line">        activation = tf.nn.relu_layer(input_op,kernel,biases,name=scope)</span><br><span class="line">        p += [kernel,biases]</span><br><span class="line">        <span class="keyword">return</span> activation</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义最大池化层</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mpool_op</span><span class="params">(input_op,name,kh,kw,dh,dw)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.max_pool(input_op,ksize=[<span class="number">1</span>,kh,kw,<span class="number">1</span>],strides=[<span class="number">1</span>,dh,dw,<span class="number">1</span>],padding=<span class="string">'SAME'</span>,name=name)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#定义网络结构</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inference_op</span><span class="params">(input_op,keep_prob)</span>:</span></span><br><span class="line">    p = []</span><br><span class="line">    conv1_1 = conv_op(input_op,name=<span class="string">'conv1_1'</span>,kh=<span class="number">3</span>,kw=<span class="number">3</span>,n_out=<span class="number">64</span>,dh=<span class="number">1</span>,dw=<span class="number">1</span>,p=p)</span><br><span class="line">    conv1_2 = conv_op(conv1_1,name=<span class="string">'conv1_2'</span>,kh=<span class="number">3</span>,kw=<span class="number">3</span>,n_out=<span class="number">64</span>,dh=<span class="number">1</span>,dw=<span class="number">1</span>,p=p)</span><br><span class="line">    pool1 = mpool_op(conv1_2,name=<span class="string">'pool1'</span>,kh=<span class="number">2</span>,kw=<span class="number">2</span>,dw=<span class="number">2</span>,dh=<span class="number">2</span>)</span><br><span class="line"> </span><br><span class="line">    conv2_1 = conv_op(pool1,name=<span class="string">'conv2_1'</span>,kh=<span class="number">3</span>,kw=<span class="number">3</span>,n_out=<span class="number">128</span>,dh=<span class="number">1</span>,dw=<span class="number">1</span>,p=p)</span><br><span class="line">    conv2_2 = conv_op(conv2_1,name=<span class="string">'conv2_2'</span>,kh=<span class="number">3</span>,kw=<span class="number">3</span>,n_out=<span class="number">128</span>,dh=<span class="number">1</span>,dw=<span class="number">1</span>,p=p)</span><br><span class="line">    pool2 = mpool_op(conv2_2, name=<span class="string">'pool2'</span>, kh=<span class="number">2</span>, kw=<span class="number">2</span>, dw=<span class="number">2</span>, dh=<span class="number">2</span>)</span><br><span class="line"> </span><br><span class="line">    conv3_1 = conv_op(pool2, name=<span class="string">'conv3_1'</span>, kh=<span class="number">3</span>, kw=<span class="number">3</span>, n_out=<span class="number">256</span>, dh=<span class="number">1</span>, dw=<span class="number">1</span>, p=p)</span><br><span class="line">    conv3_2 = conv_op(conv3_1, name=<span class="string">'conv3_2'</span>, kh=<span class="number">3</span>, kw=<span class="number">3</span>, n_out=<span class="number">256</span>, dh=<span class="number">1</span>, dw=<span class="number">1</span>, p=p)</span><br><span class="line">    conv3_3 = conv_op(conv3_2, name=<span class="string">'conv3_3'</span>, kh=<span class="number">3</span>, kw=<span class="number">3</span>, n_out=<span class="number">256</span>, dh=<span class="number">1</span>, dw=<span class="number">1</span>, p=p)</span><br><span class="line">    pool3 = mpool_op(conv3_3, name=<span class="string">'pool3'</span>, kh=<span class="number">2</span>, kw=<span class="number">2</span>, dw=<span class="number">2</span>, dh=<span class="number">2</span>)</span><br><span class="line"> </span><br><span class="line">    conv4_1 = conv_op(pool3, name=<span class="string">'conv4_1'</span>, kh=<span class="number">3</span>, kw=<span class="number">3</span>, n_out=<span class="number">512</span>, dh=<span class="number">1</span>, dw=<span class="number">1</span>, p=p)</span><br><span class="line">    conv4_2 = conv_op(conv4_1, name=<span class="string">'conv4_2'</span>, kh=<span class="number">3</span>, kw=<span class="number">3</span>, n_out=<span class="number">512</span>, dh=<span class="number">1</span>, dw=<span class="number">1</span>, p=p)</span><br><span class="line">    conv4_3 = conv_op(conv4_2, name=<span class="string">'conv4_3'</span>, kh=<span class="number">3</span>, kw=<span class="number">3</span>, n_out=<span class="number">512</span>, dh=<span class="number">1</span>, dw=<span class="number">1</span>, p=p)</span><br><span class="line">    pool4 = mpool_op(conv4_3, name=<span class="string">'pool4'</span>, kh=<span class="number">2</span>, kw=<span class="number">2</span>, dw=<span class="number">2</span>, dh=<span class="number">2</span>)</span><br><span class="line"> </span><br><span class="line">    conv5_1 = conv_op(pool4, name=<span class="string">'conv5_1'</span>, kh=<span class="number">3</span>, kw=<span class="number">3</span>, n_out=<span class="number">512</span>, dh=<span class="number">1</span>, dw=<span class="number">1</span>, p=p)</span><br><span class="line">    conv5_2 = conv_op(conv5_1, name=<span class="string">'conv5_2'</span>, kh=<span class="number">3</span>, kw=<span class="number">3</span>, n_out=<span class="number">512</span>, dh=<span class="number">1</span>, dw=<span class="number">1</span>, p=p)</span><br><span class="line">    conv5_3 = conv_op(conv5_2, name=<span class="string">'conv5_3'</span>, kh=<span class="number">3</span>, kw=<span class="number">3</span>, n_out=<span class="number">512</span>, dh=<span class="number">1</span>, dw=<span class="number">1</span>, p=p)</span><br><span class="line">    pool5 = mpool_op(conv5_3, name=<span class="string">'pool5'</span>, kh=<span class="number">2</span>, kw=<span class="number">2</span>, dw=<span class="number">2</span>, dh=<span class="number">2</span>)</span><br><span class="line"> </span><br><span class="line">    shp = pool5.get_shape()</span><br><span class="line">    flattened_shape = shp[<span class="number">1</span>].value * shp[<span class="number">2</span>].value * shp[<span class="number">3</span>].value</span><br><span class="line">    resh1 = tf.reshape(pool5,[<span class="number">-1</span>,flattened_shape],name=<span class="string">"resh1"</span>)</span><br><span class="line"> </span><br><span class="line">    fc6 = fc_op(resh1,name=<span class="string">"fc6"</span>,n_out=<span class="number">4096</span>,p=p)</span><br><span class="line">    fc6_drop = tf.nn.dropout(fc6,keep_prob,name=<span class="string">'fc6_drop'</span>)</span><br><span class="line">    fc7 = fc_op(fc6_drop,name=<span class="string">"fc7"</span>,n_out=<span class="number">4096</span>,p=p)</span><br><span class="line">    fc7_drop = tf.nn.dropout(fc7,keep_prob,name=<span class="string">"fc7_drop"</span>)</span><br><span class="line">    fc8 = fc_op(fc7_drop,name=<span class="string">"fc8"</span>,n_out=<span class="number">1000</span>,p=p)</span><br><span class="line">    softmax = tf.nn.softmax(fc8)</span><br><span class="line">    predictions = tf.argmax(softmax,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> predictions,softmax,fc8,p</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">time_tensorflow_run</span><span class="params">(session,target,feed,info_string)</span>:</span></span><br><span class="line">    num_steps_burn_in = <span class="number">10</span>  <span class="comment"># 预热轮数</span></span><br><span class="line">    total_duration = <span class="number">0.0</span>  <span class="comment"># 总时间</span></span><br><span class="line">    total_duration_squared = <span class="number">0.0</span>  <span class="comment"># 总时间的平方和用以计算方差</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_batches + num_steps_burn_in):</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        _ = session.run(target,feed_dict=feed)</span><br><span class="line">        duration = time.time() - start_time</span><br><span class="line">        <span class="keyword">if</span> i &gt;= num_steps_burn_in:  <span class="comment"># 只考虑预热轮数之后的时间</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> i % <span class="number">10</span>:</span><br><span class="line">                print(<span class="string">'%s:step %d,duration = %.3f'</span> % (datetime.now(), i - num_steps_burn_in, duration))</span><br><span class="line">                total_duration += duration</span><br><span class="line">                total_duration_squared += duration * duration</span><br><span class="line">    mn = total_duration / num_batches  <span class="comment"># 平均每个batch的时间</span></span><br><span class="line">    vr = total_duration_squared / num_batches - mn * mn  <span class="comment"># 方差</span></span><br><span class="line">    sd = math.sqrt(vr)  <span class="comment"># 标准差</span></span><br><span class="line">    print(<span class="string">'%s: %s across %d steps, %.3f +/- %.3f sec/batch'</span> % (datetime.now(), info_string, num_batches, mn, sd))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_benchmark</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> tf.Graph().as_default():</span><br><span class="line">        image_size = <span class="number">224</span>  <span class="comment"># 输入图像尺寸</span></span><br><span class="line">        images = tf.Variable(tf.random_normal([batch_size, image_size, image_size, <span class="number">3</span>], dtype=tf.float32, stddev=<span class="number">1e-1</span>))</span><br><span class="line">        keep_prob = tf.placeholder(tf.float32)</span><br><span class="line">        prediction,softmax,fc8,p = inference_op(images,keep_prob)</span><br><span class="line">        init = tf.global_variables_initializer()</span><br><span class="line">        sess = tf.Session()</span><br><span class="line">        sess.run(init)</span><br><span class="line">        time_tensorflow_run(sess, prediction,&#123;keep_prob:<span class="number">1.0</span>&#125;, <span class="string">"Forward"</span>)</span><br><span class="line">        <span class="comment"># 用以模拟训练的过程</span></span><br><span class="line">        objective = tf.nn.l2_loss(fc8)  <span class="comment"># 给一个loss</span></span><br><span class="line">        grad = tf.gradients(objective, p)  <span class="comment"># 相对于loss的 所有模型参数的梯度</span></span><br><span class="line">        time_tensorflow_run(sess, grad, &#123;keep_prob:<span class="number">0.5</span>&#125;,<span class="string">"Forward-backward"</span>)</span><br></pre></td></tr></table></figure><h4 id="GoogLeNet"><a href="#GoogLeNet" class="headerlink" title="GoogLeNet"></a>GoogLeNet</h4><p>这里实现的是Inception V3卷积网络</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"> </span><br><span class="line">slim=tf.contrib.slim</span><br><span class="line"><span class="comment">#产生截断的正态分布</span></span><br><span class="line">trunc_normal =<span class="keyword">lambda</span> stddev:tf.truncated_normal_initializer(<span class="number">0.0</span>,stddev)</span><br><span class="line">parameters =[] <span class="comment">#储存参数</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#why？为什么要定义这个函数？</span></span><br><span class="line"><span class="comment">#因为若事先定义好slim.conv2d各种默认参数，包括激活函数、标准化器，后面定义卷积层将会非常容易：</span></span><br><span class="line"><span class="comment"># 1.代码整体美观</span></span><br><span class="line"><span class="comment"># 2.网络设计的工作量会大大减轻</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inception_v3_arg_scope</span><span class="params">(weight_decay=<span class="number">0.00004</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                           stddev=<span class="number">0.1</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                           batch_norm_var_collection=<span class="string">'moving_vars'</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    #定义inception_v3_arg_scope(),</span></span><br><span class="line"><span class="string">    #用来生成网络中经常用到的函数的默认参数（卷积的激活函数、权重初始化方式、标准化器等）</span></span><br><span class="line"><span class="string">    :param weight_decay: 权值衰减系数</span></span><br><span class="line"><span class="string">    :param stddev: 标准差</span></span><br><span class="line"><span class="string">    :param batch_norm_var_collection:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    batch_norm_params=&#123;</span><br><span class="line">        <span class="string">'decay'</span>:<span class="number">0.9997</span>, <span class="comment">#衰减系数decay</span></span><br><span class="line">        <span class="string">'epsilon'</span>:<span class="number">0.001</span>, <span class="comment">#极小值</span></span><br><span class="line">        <span class="string">'updates_collections'</span>:tf.GraphKeys.UPDATE_OPS,</span><br><span class="line">        <span class="string">'variables_collections'</span>:&#123;</span><br><span class="line">            <span class="string">'beta'</span>:<span class="literal">None</span>,</span><br><span class="line">            <span class="string">'gamma'</span>:<span class="literal">None</span>,</span><br><span class="line">            <span class="string">'moving_mean'</span>:[batch_norm_var_collection],</span><br><span class="line">            <span class="string">'moving_variance'</span>:[batch_norm_var_collection],</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">with</span> slim.arg_scope([slim.conv2d,slim.fully_connected],</span><br><span class="line">                        weights_regularizer=slim.l2_regularizer(weight_decay)):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        slim.arg_scope()是一个非常有用的工具，可以给函数的参数自动赋予某些默认值</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        例如：</span></span><br><span class="line"><span class="string">        slim.arg_scope([slim.conv2d,slim.fully_connected],weights_regularizer=slim.l2_regularizer(weight_decay)):</span></span><br><span class="line"><span class="string">        会对[slim.conv2d,slim.fully_connected]这两个函数的参数自动赋值，</span></span><br><span class="line"><span class="string">        将参数weights_regularizer的默认值设为slim.l2_regularizer(weight_decay)</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        备注：使用了slim.arg_scope后就不需要每次重复设置参数，只需在修改时设置即可。</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 设置默认值：对slim.conv2d函数的几个参数赋予默认值</span></span><br><span class="line">        <span class="keyword">with</span> slim.arg_scope(</span><br><span class="line">            [slim.conv2d],</span><br><span class="line">            weights_initializer=tf.truncated_normal_initializer(stddev=stddev), <span class="comment">#权重初始化</span></span><br><span class="line">            activation_fn=tf.nn.relu,  <span class="comment">#激励函数</span></span><br><span class="line">            normalizer_fn=slim.batch_norm,  <span class="comment">#标准化器</span></span><br><span class="line">            normalizer_params=batch_norm_params ) <span class="keyword">as</span> sc: <span class="comment">#normalizer_params标准化器的参数</span></span><br><span class="line"> </span><br><span class="line">            <span class="keyword">return</span> sc  <span class="comment">#返回定义好的scope</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inception_V3_base</span><span class="params">(input,scope=None)</span>:</span></span><br><span class="line"> </span><br><span class="line">    end_points= &#123;&#125;</span><br><span class="line">    <span class="comment"># 第一部分--基础部分：卷积和池化交错</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(scope,<span class="string">'inception_V3'</span>,[input]):</span><br><span class="line">        <span class="keyword">with</span> slim.arg_scope([slim.conv2d, slim.max_pool2d, slim.avg_pool2d],</span><br><span class="line">                            stride=<span class="number">1</span>,padding=<span class="string">'VALID'</span>):</span><br><span class="line">            net1=slim.conv2d(input,<span class="number">32</span>,[<span class="number">3</span>,<span class="number">3</span>],stride=<span class="number">2</span>,scope=<span class="string">'conv2d_1a_3x3'</span>)</span><br><span class="line">            net2 = slim.conv2d(net1, <span class="number">32</span>, [<span class="number">3</span>, <span class="number">3</span>],scope=<span class="string">'conv2d_2a_3x3'</span>)</span><br><span class="line">            net3 = slim.conv2d(net2, <span class="number">64</span>, [<span class="number">3</span>, <span class="number">3</span>], padding=<span class="string">'SAME'</span>,</span><br><span class="line">                               scope=<span class="string">'conv2d_2b_3x3'</span>)</span><br><span class="line">            net4=slim.max_pool2d(net3,[<span class="number">3</span>,<span class="number">3</span>],stride=<span class="number">2</span>,scope=<span class="string">'maxPool_3a_3x3'</span>)</span><br><span class="line">            net5 = slim.conv2d(net4, <span class="number">80</span>, [<span class="number">1</span>, <span class="number">1</span>], scope=<span class="string">'conv2d_4a_3x3'</span>)</span><br><span class="line">            net6 = slim.conv2d(net5, <span class="number">192</span>, [<span class="number">3</span>, <span class="number">3</span>], padding=<span class="string">'SAME'</span>,</span><br><span class="line">                               scope=<span class="string">'conv2d_4b_3x3'</span>)</span><br><span class="line">            net = slim.max_pool2d(net6, [<span class="number">3</span>, <span class="number">3</span>], stride=<span class="number">2</span>, scope=<span class="string">'maxPool_5a_3x3'</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#第二部分--Inception模块组：inception_1\inception_2\inception_2</span></span><br><span class="line">    <span class="keyword">with</span> slim.arg_scope([slim.conv2d, slim.max_pool2d, slim.avg_pool2d],</span><br><span class="line">                            stride=<span class="number">1</span>,padding=<span class="string">'SAME'</span>):</span><br><span class="line"><span class="comment">#inception_1：第一个模块组（共含3个inception_module）</span></span><br><span class="line">        <span class="comment">#inception_1_m1: 第一组的1号module</span></span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(<span class="string">'inception_1_m1'</span>):</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_0'</span>):</span><br><span class="line">                branch_0=slim.conv2d(net,<span class="number">64</span>,[<span class="number">1</span>,<span class="number">1</span>],scope=<span class="string">'conv2d_0a_1x1'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_1'</span>):</span><br><span class="line">                branch1_1 = slim.conv2d(net, <span class="number">48</span>, [<span class="number">1</span>, <span class="number">1</span>], scope=<span class="string">'conv2d_1a_1x1'</span>)</span><br><span class="line">                branch1_2 = slim.conv2d(branch1_1, <span class="number">64</span>, [<span class="number">5</span>, <span class="number">5</span>],</span><br><span class="line">                                        scope=<span class="string">'conv2d_1b_5x5'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_2'</span>):</span><br><span class="line">                branch2_1 = slim.conv2d(net, <span class="number">64</span>, [<span class="number">1</span>, <span class="number">1</span>], scope=<span class="string">'conv2d_2a_1x1'</span>)</span><br><span class="line">                branch2_2 = slim.conv2d(branch2_1, <span class="number">96</span>, [<span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">                                        scope=<span class="string">'conv2d_2b_3x3'</span>)</span><br><span class="line">                branch2_3 = slim.conv2d(branch2_2, <span class="number">96</span>, [<span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">                                        scope=<span class="string">'conv2d_2c_3x3'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_3'</span>):</span><br><span class="line">                branch3_1 = slim.avg_pool2d(net, [<span class="number">3</span>, <span class="number">3</span>], scope=<span class="string">'avgPool_3a_3x3'</span>)</span><br><span class="line">                branch3_2 = slim.conv2d(branch3_1, <span class="number">32</span>, [<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">                                        scope=<span class="string">'conv2d_3b_1x1'</span>)</span><br><span class="line">            <span class="comment">#使用concat将4个分支的输出合并到一起（在第三个维度合并，即输出通道上合并）</span></span><br><span class="line">            net=tf.concat([branch_0,branch1_2,branch2_3,branch3_2],<span class="number">3</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># inception_1_m2: 第一组的 2号module</span></span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(<span class="string">'inception_1_m2'</span>):</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_0'</span>):</span><br><span class="line">                branch_0 = slim.conv2d(net, <span class="number">64</span>, [<span class="number">1</span>, <span class="number">1</span>], scope=<span class="string">'conv2d_0a_1x1'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_1'</span>):</span><br><span class="line">                branch1_1 = slim.conv2d(net, <span class="number">48</span>, [<span class="number">1</span>, <span class="number">1</span>], scope=<span class="string">'conv2d_1a_1x1'</span>)</span><br><span class="line">                branch1_2 = slim.conv2d(branch1_1, <span class="number">64</span>, [<span class="number">5</span>, <span class="number">5</span>],</span><br><span class="line">                                            scope=<span class="string">'conv2d_1b_5x5'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_2'</span>):</span><br><span class="line">                branch2_1 = slim.conv2d(net, <span class="number">64</span>, [<span class="number">1</span>, <span class="number">1</span>], scope=<span class="string">'conv2d_2a_1x1'</span>)</span><br><span class="line">                branch2_2 = slim.conv2d(branch2_1, <span class="number">96</span>, [<span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">                                            scope=<span class="string">'conv2d_2b_3x3'</span>)</span><br><span class="line">                branch2_3 = slim.conv2d(branch2_2, <span class="number">96</span>, [<span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">                                            scope=<span class="string">'conv2d_2c_3x3'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_3'</span>):</span><br><span class="line">                branch3_1 = slim.avg_pool2d(net, [<span class="number">3</span>, <span class="number">3</span>], scope=<span class="string">'avgPool_3a_3x3'</span>)</span><br><span class="line">                branch3_2 = slim.conv2d(branch3_1, <span class="number">64</span>, [<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">                                            scope=<span class="string">'conv2d_3b_1x1'</span>)</span><br><span class="line">            <span class="comment"># 使用concat将4个分支的输出合并到一起（在第三个维度合并，即输出通道上合并）</span></span><br><span class="line">            net = tf.concat([branch_0, branch1_2, branch2_3, branch3_2], <span class="number">3</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># inception_1_m2: 第一组的 3号module</span></span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(<span class="string">'inception_1_m3'</span>):</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_0'</span>):</span><br><span class="line">                branch_0 = slim.conv2d(net, <span class="number">64</span>, [<span class="number">1</span>, <span class="number">1</span>], scope=<span class="string">'conv2d_0a_1x1'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_1'</span>):</span><br><span class="line">                branch1_1 = slim.conv2d(net, <span class="number">48</span>, [<span class="number">1</span>, <span class="number">1</span>], scope=<span class="string">'conv2d_1a_1x1'</span>)</span><br><span class="line">                branch1_2 = slim.conv2d(branch1_1, <span class="number">64</span>, [<span class="number">5</span>, <span class="number">5</span>],</span><br><span class="line">                                            scope=<span class="string">'conv2d_1b_5x5'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_2'</span>):</span><br><span class="line">                branch2_1 = slim.conv2d(net, <span class="number">64</span>, [<span class="number">1</span>, <span class="number">1</span>], scope=<span class="string">'conv2d_2a_1x1'</span>)</span><br><span class="line">                branch2_2 = slim.conv2d(branch2_1, <span class="number">96</span>, [<span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">                                            scope=<span class="string">'conv2d_2b_3x3'</span>)</span><br><span class="line">                branch2_3 = slim.conv2d(branch2_2, <span class="number">96</span>, [<span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">                                            scope=<span class="string">'conv2d_2c_3x3'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_3'</span>):</span><br><span class="line">                branch3_1 = slim.avg_pool2d(net, [<span class="number">3</span>, <span class="number">3</span>], scope=<span class="string">'avgPool_3a_3x3'</span>)</span><br><span class="line">                branch3_2 = slim.conv2d(branch3_1, <span class="number">64</span>, [<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">                                            scope=<span class="string">'conv2d_3b_1x1'</span>)</span><br><span class="line">            <span class="comment"># 使用concat将4个分支的输出合并到一起（在第三个维度合并，即输出通道上合并）</span></span><br><span class="line">            net = tf.concat([branch_0, branch1_2, branch2_3, branch3_2], <span class="number">3</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#inception_2：第2个模块组（共含5个inception_module）</span></span><br><span class="line">        <span class="comment"># inception_2_m1: 第2组的 1号module</span></span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(<span class="string">'inception_2_m1'</span>):</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_0'</span>):</span><br><span class="line">                branch_0 = slim.conv2d(net, <span class="number">384</span>, [<span class="number">3</span>, <span class="number">3</span>],stride=<span class="number">2</span>,</span><br><span class="line">                                       padding=<span class="string">'VALID'</span>,scope=<span class="string">'conv2d_0a_3x3'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_1'</span>):</span><br><span class="line">                branch1_1 = slim.conv2d(net, <span class="number">64</span>, [<span class="number">1</span>, <span class="number">1</span>], scope=<span class="string">'conv2d_1a_1x1'</span>)</span><br><span class="line">                branch1_2 = slim.conv2d(branch1_1, <span class="number">96</span>, [<span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">                                            scope=<span class="string">'conv2d_1b_3x3'</span>)</span><br><span class="line">                branch1_3 = slim.conv2d(branch1_2, <span class="number">96</span>, [<span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">                                        stride=<span class="number">2</span>,</span><br><span class="line">                                        padding=<span class="string">'VALID'</span>,</span><br><span class="line">                                        scope=<span class="string">'conv2d_1c_3x3'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_2'</span>):</span><br><span class="line">                branch2_1 = slim.max_pool2d(net, [<span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">                                        stride=<span class="number">2</span>,</span><br><span class="line">                                        padding=<span class="string">'VALID'</span>,</span><br><span class="line">                                        scope=<span class="string">'maxPool_2a_3x3'</span>)</span><br><span class="line"> </span><br><span class="line">            <span class="comment"># 使用concat将4个分支的输出合并到一起（在第三个维度合并，即输出通道上合并）</span></span><br><span class="line">            net = tf.concat([branch_0, branch1_3, branch2_1], <span class="number">3</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># inception_2_m2: 第2组的 2号module</span></span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(<span class="string">'inception_2_m2'</span>):</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_0'</span>):</span><br><span class="line">                branch_0 = slim.conv2d(net, <span class="number">192</span>, [<span class="number">1</span>, <span class="number">1</span>],scope=<span class="string">'conv2d_0a_1x1'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_1'</span>):</span><br><span class="line">                branch1_1 = slim.conv2d(net, <span class="number">128</span>, [<span class="number">1</span>, <span class="number">1</span>], scope=<span class="string">'conv2d_1a_1x1'</span>)</span><br><span class="line">                branch1_2 = slim.conv2d(branch1_1, <span class="number">128</span>, [<span class="number">1</span>, <span class="number">7</span>],</span><br><span class="line">                                            scope=<span class="string">'conv2d_1b_1x7'</span>)</span><br><span class="line">                branch1_3 = slim.conv2d(branch1_2, <span class="number">128</span>, [<span class="number">7</span>, <span class="number">1</span>],</span><br><span class="line">                                        scope=<span class="string">'conv2d_1c_7x1'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_2'</span>):</span><br><span class="line">                branch2_1 = slim.conv2d(net, <span class="number">128</span>, [<span class="number">1</span>, <span class="number">1</span>], scope=<span class="string">'conv2d_2a_1x1'</span>)</span><br><span class="line">                branch2_2 = slim.conv2d(branch2_1, <span class="number">128</span>, [<span class="number">7</span>, <span class="number">1</span>],</span><br><span class="line">                                        scope=<span class="string">'conv2d_2b_7x1'</span>)</span><br><span class="line">                branch2_3 = slim.conv2d(branch2_2, <span class="number">128</span>, [<span class="number">1</span>, <span class="number">7</span>],</span><br><span class="line">                                        scope=<span class="string">'conv2d_2c_1x7'</span>)</span><br><span class="line">                branch2_4 = slim.conv2d(branch2_3, <span class="number">128</span>, [<span class="number">7</span>, <span class="number">1</span>],</span><br><span class="line">                                        scope=<span class="string">'conv2d_2d_7x1'</span>)</span><br><span class="line">                branch2_5 = slim.conv2d(branch2_4, <span class="number">128</span>, [<span class="number">1</span>, <span class="number">7</span>],</span><br><span class="line">                                        scope=<span class="string">'conv2d_2e_1x7'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_3'</span>):</span><br><span class="line">                branch3_1 = slim.avg_pool2d(net, [<span class="number">3</span>, <span class="number">3</span>], scope=<span class="string">'avgPool_3a_3x3'</span>)</span><br><span class="line">                branch3_2 = slim.conv2d(branch3_1, <span class="number">192</span>, [<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">                                        scope=<span class="string">'conv2d_3b_1x1'</span>)</span><br><span class="line"> </span><br><span class="line">            <span class="comment"># 使用concat将4个分支的输出合并到一起（在第三个维度合并，即输出通道上合并）</span></span><br><span class="line">            net = tf.concat([branch_0, branch1_3, branch2_5,branch3_2], <span class="number">3</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># inception_2_m3: 第2组的 3号module</span></span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(<span class="string">'inception_2_m3'</span>):</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_0'</span>):</span><br><span class="line">                branch_0 = slim.conv2d(net, <span class="number">192</span>, [<span class="number">1</span>, <span class="number">1</span>],scope=<span class="string">'conv2d_0a_1x1'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_1'</span>):</span><br><span class="line">                branch1_1 = slim.conv2d(net, <span class="number">160</span>, [<span class="number">1</span>, <span class="number">1</span>], scope=<span class="string">'conv2d_1a_1x1'</span>)</span><br><span class="line">                branch1_2 = slim.conv2d(branch1_1, <span class="number">160</span>, [<span class="number">1</span>, <span class="number">7</span>],</span><br><span class="line">                                            scope=<span class="string">'conv2d_1b_1x7'</span>)</span><br><span class="line">                branch1_3 = slim.conv2d(branch1_2, <span class="number">192</span>, [<span class="number">7</span>, <span class="number">1</span>],</span><br><span class="line">                                        scope=<span class="string">'conv2d_1c_7x1'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_2'</span>):</span><br><span class="line">                branch2_1 = slim.conv2d(net, <span class="number">160</span>, [<span class="number">1</span>, <span class="number">1</span>], scope=<span class="string">'conv2d_2a_1x1'</span>)</span><br><span class="line">                branch2_2 = slim.conv2d(branch2_1, <span class="number">160</span>, [<span class="number">7</span>, <span class="number">1</span>],</span><br><span class="line">                                        scope=<span class="string">'conv2d_2b_7x1'</span>)</span><br><span class="line">                branch2_3 = slim.conv2d(branch2_2, <span class="number">160</span>, [<span class="number">1</span>, <span class="number">7</span>],</span><br><span class="line">                                        scope=<span class="string">'conv2d_2c_1x7'</span>)</span><br><span class="line">                branch2_4 = slim.conv2d(branch2_3, <span class="number">160</span>, [<span class="number">7</span>, <span class="number">1</span>],</span><br><span class="line">                                        scope=<span class="string">'conv2d_2d_7x1'</span>)</span><br><span class="line">                branch2_5 = slim.conv2d(branch2_4, <span class="number">192</span>, [<span class="number">1</span>, <span class="number">7</span>],</span><br><span class="line">                                        scope=<span class="string">'conv2d_2e_1x7'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_3'</span>):</span><br><span class="line">                branch3_1 = slim.avg_pool2d(net, [<span class="number">3</span>, <span class="number">3</span>], scope=<span class="string">'avgPool_3a_3x3'</span>)</span><br><span class="line">                branch3_2 = slim.conv2d(branch3_1, <span class="number">192</span>, [<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">                                        scope=<span class="string">'conv2d_3b_1x1'</span>)</span><br><span class="line"> </span><br><span class="line">            <span class="comment"># 使用concat将4个分支的输出合并到一起（在第三个维度合并，即输出通道上合并）</span></span><br><span class="line">            net = tf.concat([branch_0, branch1_3, branch2_5,branch3_2], <span class="number">3</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># inception_2_m4: 第2组的 4号module</span></span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(<span class="string">'inception_2_m4'</span>):</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_0'</span>):</span><br><span class="line">                branch_0 = slim.conv2d(net, <span class="number">192</span>, [<span class="number">1</span>, <span class="number">1</span>],scope=<span class="string">'conv2d_0a_1x1'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_1'</span>):</span><br><span class="line">                branch1_1 = slim.conv2d(net, <span class="number">160</span>, [<span class="number">1</span>, <span class="number">1</span>], scope=<span class="string">'conv2d_1a_1x1'</span>)</span><br><span class="line">                branch1_2 = slim.conv2d(branch1_1, <span class="number">160</span>, [<span class="number">1</span>, <span class="number">7</span>],</span><br><span class="line">                                            scope=<span class="string">'conv2d_1b_1x7'</span>)</span><br><span class="line">                branch1_3 = slim.conv2d(branch1_2, <span class="number">192</span>, [<span class="number">7</span>, <span class="number">1</span>],</span><br><span class="line">                                        scope=<span class="string">'conv2d_1c_7x1'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_2'</span>):</span><br><span class="line">                branch2_1 = slim.conv2d(net, <span class="number">160</span>, [<span class="number">1</span>, <span class="number">1</span>], scope=<span class="string">'conv2d_2a_1x1'</span>)</span><br><span class="line">                branch2_2 = slim.conv2d(branch2_1, <span class="number">160</span>, [<span class="number">7</span>, <span class="number">1</span>],</span><br><span class="line">                                        scope=<span class="string">'conv2d_2b_7x1'</span>)</span><br><span class="line">                branch2_3 = slim.conv2d(branch2_2, <span class="number">160</span>, [<span class="number">1</span>, <span class="number">7</span>],</span><br><span class="line">                                        scope=<span class="string">'conv2d_2c_1x7'</span>)</span><br><span class="line">                branch2_4 = slim.conv2d(branch2_3, <span class="number">160</span>, [<span class="number">7</span>, <span class="number">1</span>],</span><br><span class="line">                                        scope=<span class="string">'conv2d_2d_7x1'</span>)</span><br><span class="line">                branch2_5 = slim.conv2d(branch2_4, <span class="number">192</span>, [<span class="number">1</span>, <span class="number">7</span>],</span><br><span class="line">                                        scope=<span class="string">'conv2d_2e_1x7'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_3'</span>):</span><br><span class="line">                branch3_1 = slim.avg_pool2d(net, [<span class="number">3</span>, <span class="number">3</span>], scope=<span class="string">'avgPool_3a_3x3'</span>)</span><br><span class="line">                branch3_2 = slim.conv2d(branch3_1, <span class="number">192</span>, [<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">                                        scope=<span class="string">'conv2d_3b_1x1'</span>)</span><br><span class="line"> </span><br><span class="line">            <span class="comment"># 使用concat将4个分支的输出合并到一起（在第三个维度合并，即输出通道上合并）</span></span><br><span class="line">            net = tf.concat([branch_0, branch1_3, branch2_5,branch3_2], <span class="number">3</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># inception_2_m5: 第2组的 5号module</span></span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(<span class="string">'inception_2_m5'</span>):</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_0'</span>):</span><br><span class="line">                branch_0 = slim.conv2d(net, <span class="number">192</span>, [<span class="number">1</span>, <span class="number">1</span>],scope=<span class="string">'conv2d_0a_1x1'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_1'</span>):</span><br><span class="line">                branch1_1 = slim.conv2d(net, <span class="number">160</span>, [<span class="number">1</span>, <span class="number">1</span>], scope=<span class="string">'conv2d_1a_1x1'</span>)</span><br><span class="line">                branch1_2 = slim.conv2d(branch1_1, <span class="number">160</span>, [<span class="number">1</span>, <span class="number">7</span>],</span><br><span class="line">                                            scope=<span class="string">'conv2d_1b_1x7'</span>)</span><br><span class="line">                branch1_3 = slim.conv2d(branch1_2, <span class="number">192</span>, [<span class="number">7</span>, <span class="number">1</span>],</span><br><span class="line">                                        scope=<span class="string">'conv2d_1c_7x1'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_2'</span>):</span><br><span class="line">                branch2_1 = slim.conv2d(net, <span class="number">160</span>, [<span class="number">1</span>, <span class="number">1</span>], scope=<span class="string">'conv2d_2a_1x1'</span>)</span><br><span class="line">                branch2_2 = slim.conv2d(branch2_1, <span class="number">160</span>, [<span class="number">7</span>, <span class="number">1</span>],</span><br><span class="line">                                        scope=<span class="string">'conv2d_2b_7x1'</span>)</span><br><span class="line">                branch2_3 = slim.conv2d(branch2_2, <span class="number">160</span>, [<span class="number">1</span>, <span class="number">7</span>],</span><br><span class="line">                                        scope=<span class="string">'conv2d_2c_1x7'</span>)</span><br><span class="line">                branch2_4 = slim.conv2d(branch2_3, <span class="number">160</span>, [<span class="number">7</span>, <span class="number">1</span>],</span><br><span class="line">                                        scope=<span class="string">'conv2d_2d_7x1'</span>)</span><br><span class="line">                branch2_5 = slim.conv2d(branch2_4, <span class="number">192</span>, [<span class="number">1</span>, <span class="number">7</span>],</span><br><span class="line">                                        scope=<span class="string">'conv2d_2e_1x7'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_3'</span>):</span><br><span class="line">                branch3_1 = slim.avg_pool2d(net, [<span class="number">3</span>, <span class="number">3</span>], scope=<span class="string">'avgPool_3a_3x3'</span>)</span><br><span class="line">                branch3_2 = slim.conv2d(branch3_1, <span class="number">192</span>, [<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">                                        scope=<span class="string">'conv2d_3b_1x1'</span>)</span><br><span class="line"> </span><br><span class="line">            <span class="comment"># 使用concat将4个分支的输出合并到一起（在第三个维度合并，即输出通道上合并）</span></span><br><span class="line">            net = tf.concat([branch_0, branch1_3, branch2_5,branch3_2], <span class="number">3</span>)</span><br><span class="line">        <span class="comment">#将inception_2_m5存储到end_points中，作为Auxiliary Classifier辅助模型的分类</span></span><br><span class="line">        end_points[<span class="string">'inception_2_m5'</span>]=net</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 第3组</span></span><br><span class="line"><span class="comment"># inception_3_m1: 第3组的 1号module</span></span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(<span class="string">'inception_3_m1'</span>):</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_0'</span>):</span><br><span class="line">                branch_0 = slim.conv2d(net, <span class="number">192</span>, [<span class="number">1</span>, <span class="number">1</span>],scope=<span class="string">'conv2d_0a_1x1'</span>)</span><br><span class="line">                branch_0 = slim.conv2d(branch_0,<span class="number">320</span>, [<span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">                                       stride=<span class="number">2</span>,</span><br><span class="line">                                       padding=<span class="string">'VALID'</span>,</span><br><span class="line">                                       scope=<span class="string">'conv2d_0b_3x3'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_1'</span>):</span><br><span class="line">                branch1_1 = slim.conv2d(net, <span class="number">192</span>, [<span class="number">1</span>, <span class="number">1</span>], scope=<span class="string">'conv2d_1a_1x1'</span>)</span><br><span class="line">                branch1_2 = slim.conv2d(branch1_1, <span class="number">192</span>, [<span class="number">1</span>, <span class="number">7</span>],</span><br><span class="line">                                            scope=<span class="string">'conv2d_1b_1x7'</span>)</span><br><span class="line">                branch1_3 = slim.conv2d(branch1_2, <span class="number">192</span>, [<span class="number">7</span>, <span class="number">1</span>],</span><br><span class="line">                                        scope=<span class="string">'conv2d_1c_7x1'</span>)</span><br><span class="line">                branch1_4 = slim.conv2d(branch1_3, <span class="number">192</span>, [<span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">                                        stride=<span class="number">2</span>,</span><br><span class="line">                                        padding=<span class="string">'VALID'</span>,</span><br><span class="line">                                        scope=<span class="string">'conv2d_1c_3x3'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_2'</span>):</span><br><span class="line">                branch2_1 = slim.max_pool2d(net, [<span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">                                            stride=<span class="number">2</span>,</span><br><span class="line">                                            padding=<span class="string">'VALID'</span>,</span><br><span class="line">                                            scope=<span class="string">'maxPool_3a_3x3'</span>)</span><br><span class="line"> </span><br><span class="line">            <span class="comment"># 使用concat将4个分支的输出合并到一起（在第三个维度合并，即输出通道上合并）</span></span><br><span class="line">            net = tf.concat([branch_0, branch1_4, branch2_1], <span class="number">3</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># inception_3_m2: 第3组的 2号module</span></span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(<span class="string">'inception_3_m2'</span>):</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_0'</span>):</span><br><span class="line">                branch_0 = slim.conv2d(net, <span class="number">320</span>, [<span class="number">1</span>, <span class="number">1</span>],scope=<span class="string">'conv2d_0a_1x1'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_1'</span>):</span><br><span class="line">                branch1_1 = slim.conv2d(net, <span class="number">384</span>, [<span class="number">1</span>, <span class="number">1</span>], scope=<span class="string">'conv2d_1a_1x1'</span>)</span><br><span class="line"><span class="comment">#特殊</span></span><br><span class="line">                branch1_2 = tf.concat([</span><br><span class="line">                    slim.conv2d(branch1_1, <span class="number">384</span>, [<span class="number">1</span>, <span class="number">3</span>], scope=<span class="string">'conv2d_1a_1x3'</span>),</span><br><span class="line">                    slim.conv2d(branch1_1, <span class="number">384</span>, [<span class="number">3</span>, <span class="number">1</span>], scope=<span class="string">'conv2d_1a_3x1'</span>)</span><br><span class="line">                    ], <span class="number">3</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_2'</span>):</span><br><span class="line">                branch2_1 = slim.conv2d(net, <span class="number">488</span>, [<span class="number">1</span>, <span class="number">1</span>], scope=<span class="string">'conv2d_2a_1x1'</span>)</span><br><span class="line">                branch2_2 = slim.conv2d(branch2_1, <span class="number">384</span>, [<span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">                                        scope=<span class="string">'conv2d_2b_3x3'</span>)</span><br><span class="line">                branch2_3 = tf.concat([</span><br><span class="line">                    slim.conv2d(branch2_2, <span class="number">384</span>, [<span class="number">1</span>, <span class="number">3</span>], scope=<span class="string">'conv2d_1a_1x3'</span>),</span><br><span class="line">                    slim.conv2d(branch2_2, <span class="number">384</span>, [<span class="number">3</span>, <span class="number">1</span>], scope=<span class="string">'conv2d_1a_3x1'</span>)</span><br><span class="line">                    ], <span class="number">3</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_3'</span>):</span><br><span class="line">                branch3_1 = slim.avg_pool2d(net, [<span class="number">3</span>, <span class="number">3</span>], scope=<span class="string">'avgPool_3a_3x3'</span>)</span><br><span class="line">                branch3_2 = slim.conv2d(branch3_1, <span class="number">192</span>, [<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">                                        scope=<span class="string">'conv2d_3b_1x1'</span>)</span><br><span class="line"> </span><br><span class="line">            <span class="comment"># 使用concat将4个分支的输出合并到一起（在第三个维度合并，即输出通道上合并）</span></span><br><span class="line">            net = tf.concat([branch_0, branch1_2, branch2_3,branch3_2], <span class="number">3</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># inception_3_m3: 第3组的 3号module</span></span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(<span class="string">'inception_3_m3'</span>):</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_0'</span>):</span><br><span class="line">                branch_0 = slim.conv2d(net, <span class="number">320</span>, [<span class="number">1</span>, <span class="number">1</span>],scope=<span class="string">'conv2d_0a_1x1'</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_1'</span>):</span><br><span class="line">                branch1_1 = slim.conv2d(net, <span class="number">384</span>, [<span class="number">1</span>, <span class="number">1</span>], scope=<span class="string">'conv2d_1a_1x1'</span>)</span><br><span class="line"><span class="comment">#特殊</span></span><br><span class="line">                branch1_2 = tf.concat([</span><br><span class="line">                    slim.conv2d(branch1_1, <span class="number">384</span>, [<span class="number">1</span>, <span class="number">3</span>], scope=<span class="string">'conv2d_1a_1x3'</span>),</span><br><span class="line">                    slim.conv2d(branch1_1, <span class="number">384</span>, [<span class="number">3</span>, <span class="number">1</span>], scope=<span class="string">'conv2d_1a_3x1'</span>)</span><br><span class="line">                    ], <span class="number">3</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_2'</span>):</span><br><span class="line">                branch2_1 = slim.conv2d(net, <span class="number">488</span>, [<span class="number">1</span>, <span class="number">1</span>], scope=<span class="string">'conv2d_2a_1x1'</span>)</span><br><span class="line">                branch2_2 = slim.conv2d(branch2_1, <span class="number">384</span>, [<span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">                                        scope=<span class="string">'conv2d_2b_3x3'</span>)</span><br><span class="line">                branch2_3 = tf.concat([</span><br><span class="line">                    slim.conv2d(branch2_2, <span class="number">384</span>, [<span class="number">1</span>, <span class="number">3</span>], scope=<span class="string">'conv2d_1a_1x3'</span>),</span><br><span class="line">                    slim.conv2d(branch2_2, <span class="number">384</span>, [<span class="number">3</span>, <span class="number">1</span>], scope=<span class="string">'conv2d_1a_3x1'</span>)</span><br><span class="line">                    ], <span class="number">3</span>)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">'Branch_3'</span>):</span><br><span class="line">                branch3_1 = slim.avg_pool2d(net, [<span class="number">3</span>, <span class="number">3</span>], scope=<span class="string">'avgPool_3a_3x3'</span>)</span><br><span class="line">                branch3_2 = slim.conv2d(branch3_1, <span class="number">192</span>, [<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">                                        scope=<span class="string">'conv2d_3b_1x1'</span>)</span><br><span class="line"> </span><br><span class="line">            <span class="comment"># 使用concat将4个分支的输出合并到一起（在第三个维度合并，即输出通道上合并）</span></span><br><span class="line">            net = tf.concat([branch_0, branch1_2, branch2_3,branch3_2], <span class="number">3</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> net,end_points</span><br><span class="line"><span class="comment">##############################  卷积部分完成  ########################################</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#第三部分：全局平均池化、softmax、Auxiliary Logits</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inception_v3</span><span class="params">(input,</span></span></span><br><span class="line"><span class="function"><span class="params">                 num_classes=<span class="number">1000</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 is_training=True,</span></span></span><br><span class="line"><span class="function"><span class="params">                 dropout_keep_prob=<span class="number">0.8</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 prediction_fn=slim.softmax,</span></span></span><br><span class="line"><span class="function"><span class="params">                 spatial_squeeze=True,</span></span></span><br><span class="line"><span class="function"><span class="params">                 reuse=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 scope=<span class="string">'inceptionV3'</span>)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(scope,<span class="string">'inceptionV3'</span>,[input,num_classes],</span><br><span class="line">                       reuse=reuse) <span class="keyword">as</span> scope:</span><br><span class="line">        <span class="keyword">with</span> slim.arg_scope([slim.batch_norm,slim.dropout],</span><br><span class="line">                            is_training=is_training):</span><br><span class="line">             net,end_points=inception_V3_base(input,scope=scope)</span><br><span class="line"> </span><br><span class="line">            <span class="comment">#Auxiliary  Logits</span></span><br><span class="line">             <span class="keyword">with</span> slim.arg_scope([slim.conv2d,slim.max_pool2d,slim.avg_pool2d],</span><br><span class="line">                            stride=<span class="number">1</span>,padding=<span class="string">'SAME'</span>):</span><br><span class="line">                aux_logits=end_points[<span class="string">'inception_2_m5'</span>]</span><br><span class="line">                <span class="keyword">with</span> tf.variable_scope(<span class="string">'Auxiliary_Logits'</span>):</span><br><span class="line">                    aux_logits=slim.avg_pool2d(</span><br><span class="line">                        aux_logits,[<span class="number">5</span>,<span class="number">5</span>],stride=<span class="number">3</span>,padding=<span class="string">'VALID'</span>,</span><br><span class="line">                        scope=<span class="string">'AvgPool_1a_5x5'</span> )</span><br><span class="line">                    aux_logits=slim.conv2d(aux_logits,<span class="number">128</span>,[<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                                       scope=<span class="string">'conv2d_1b_1x1'</span>)</span><br><span class="line">                    aux_logits=slim.conv2d(aux_logits,<span class="number">768</span>,[<span class="number">5</span>,<span class="number">5</span>],</span><br><span class="line">                                       weights_initializer=trunc_normal(<span class="number">0.01</span>),</span><br><span class="line">                                       padding=<span class="string">'VALID'</span>,</span><br><span class="line">                                       scope=<span class="string">'conv2d_2a_5x5'</span>)</span><br><span class="line">                    aux_logits = slim.conv2d(aux_logits, num_classes, [<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">                                         activation_fn=<span class="literal">None</span>,</span><br><span class="line">                                         normalizer_fn=<span class="literal">None</span>,</span><br><span class="line">                                         weights_initializer=trunc_normal(<span class="number">0.001</span>),</span><br><span class="line">                                         scope=<span class="string">'conv2d_2b_1x1'</span>)</span><br><span class="line">                    <span class="keyword">if</span> spatial_squeeze:</span><br><span class="line">                        aux_logits =tf.squeeze(aux_logits,[<span class="number">1</span>,<span class="number">2</span>],name=<span class="string">'SpatialSqueeze'</span>)</span><br><span class="line">                    end_points[<span class="string">'Auxiliary_Logits'</span>]=aux_logits</span><br><span class="line"> </span><br><span class="line">             <span class="keyword">with</span> tf.variable_scope(<span class="string">'Logits'</span>):</span><br><span class="line">                 net=slim.avg_pool2d(net,[<span class="number">8</span>,<span class="number">8</span>],padding=<span class="string">'VALID'</span>,</span><br><span class="line">                                scope=<span class="string">'avgPool_1a_8x8'</span>)</span><br><span class="line">                 net=slim.dropout(net,keep_prob=dropout_keep_prob,</span><br><span class="line">                             scope=<span class="string">'dropout_1b'</span>)</span><br><span class="line">                 end_points[<span class="string">'PreLogits'</span>]=net</span><br><span class="line">                 logits=slim.conv2d(net,num_classes,[<span class="number">1</span>,<span class="number">1</span>],activation_fn=<span class="literal">None</span>,</span><br><span class="line">                               normalizer_fn=<span class="literal">None</span>,</span><br><span class="line">                               scope=<span class="string">'conv2d_1c_1x1'</span>)</span><br><span class="line">                 <span class="keyword">if</span> spatial_squeeze:</span><br><span class="line">                     logits=tf.squeeze(logits,[<span class="number">1</span>,<span class="number">2</span>],name=<span class="string">'SpatialSqueeze'</span>)</span><br><span class="line">             end_points[<span class="string">'Logits'</span>]=logits</span><br><span class="line">             end_points[<span class="string">'Predictions'</span>]=prediction_fn(logits,scope=<span class="string">'Predictions'</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> logits,end_points</span><br><span class="line"> </span><br><span class="line"><span class="comment">########################### 构建完成</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">time_compute</span><span class="params">(session, target, info_string)</span>:</span></span><br><span class="line">    num_batch = <span class="number">100</span> <span class="comment">#100</span></span><br><span class="line">    num_step_burn_in = <span class="number">10</span>  <span class="comment"># 预热轮数，头几轮迭代有显存加载、cache命中等问题可以因此跳过</span></span><br><span class="line">    total_duration = <span class="number">0.0</span>  <span class="comment"># 总时间</span></span><br><span class="line">    total_duration_squared = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_batch + num_step_burn_in):</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        _ = session.run(target )</span><br><span class="line">        duration = time.time() - start_time</span><br><span class="line">        <span class="keyword">if</span> i &gt;= num_step_burn_in:</span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">10</span> == <span class="number">0</span>:  <span class="comment"># 每迭代10次显示一次duration</span></span><br><span class="line">                print(<span class="string">"%s: step %d,duration=%.5f "</span> % (datetime.now(), i - num_step_burn_in, duration))</span><br><span class="line">            total_duration += duration</span><br><span class="line">            total_duration_squared += duration * duration</span><br><span class="line">    time_mean = total_duration / num_batch</span><br><span class="line">    time_variance = total_duration_squared / num_batch - time_mean * time_mean</span><br><span class="line">    time_stddev = math.sqrt(time_variance)</span><br><span class="line">    <span class="comment"># 迭代完成，输出</span></span><br><span class="line">    print(<span class="string">"%s: %s across %d steps,%.3f +/- %.3f sec per batch "</span> %</span><br><span class="line">          (datetime.now(), info_string, num_batch, time_mean, time_stddev))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> tf.Graph().as_default():</span><br><span class="line">        batch_size=<span class="number">32</span></span><br><span class="line">        height,weight=<span class="number">299</span>,<span class="number">299</span></span><br><span class="line">        input=tf.random_uniform( (batch_size,height,weight,<span class="number">3</span>) )</span><br><span class="line">        <span class="keyword">with</span> slim.arg_scope(inception_v3_arg_scope()):</span><br><span class="line">            logits,end_points=inception_v3(input,is_training=<span class="literal">False</span>)</span><br><span class="line"> </span><br><span class="line">        init=tf.global_variables_initializer()</span><br><span class="line">        sess=tf.Session()</span><br><span class="line">        <span class="comment"># 将网络结构图写到文件中</span></span><br><span class="line">        writer = tf.summary.FileWriter(<span class="string">'logs/'</span>, sess.graph)</span><br><span class="line">        sess.run(init)</span><br><span class="line">        num_batches=<span class="number">100</span></span><br><span class="line">        time_compute(sess,logits,<span class="string">'Forward'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="ResNet-残差网络"><a href="#ResNet-残差网络" class="headerlink" title="ResNet-残差网络"></a>ResNet-残差网络</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> resnet_config</span><br><span class="line"><span class="keyword">from</span> data_loader <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> eval.evaluate <span class="keyword">import</span> accuracy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResNet</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,</span></span></span><br><span class="line"><span class="function"><span class="params">                 depth=resnet_config.depth,</span></span></span><br><span class="line"><span class="function"><span class="params">                 height=config.height,</span></span></span><br><span class="line"><span class="function"><span class="params">                 width=config.width,</span></span></span><br><span class="line"><span class="function"><span class="params">                 channel=config.channel,</span></span></span><br><span class="line"><span class="function"><span class="params">                 num_classes=config.num_classes,</span></span></span><br><span class="line"><span class="function"><span class="params">                 learning_rate=resnet_config.learning_rate,</span></span></span><br><span class="line"><span class="function"><span class="params">                 learning_decay_rate=resnet_config.learning_decay_rate,</span></span></span><br><span class="line"><span class="function"><span class="params">                 learning_decay_steps=resnet_config.learning_decay_steps,</span></span></span><br><span class="line"><span class="function"><span class="params">                 epoch=resnet_config.epoch,</span></span></span><br><span class="line"><span class="function"><span class="params">                 batch_size=resnet_config.batch_size,</span></span></span><br><span class="line"><span class="function"><span class="params">                 model_path=resnet_config.model_path,</span></span></span><br><span class="line"><span class="function"><span class="params">                 summary_path=resnet_config.summary_path)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param depth:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.depth = depth</span><br><span class="line">        self.height = height</span><br><span class="line">        self.width = width</span><br><span class="line">        self.channel = channel</span><br><span class="line">        self.learning_rate = learning_rate</span><br><span class="line">        self.learning_decay_rate = learning_decay_rate</span><br><span class="line">        self.learning_decay_steps = learning_decay_steps</span><br><span class="line">        self.epoch = epoch</span><br><span class="line">        self.batch_size = batch_size</span><br><span class="line">        self.num_classes = num_classes</span><br><span class="line">        self.model_path = model_path</span><br><span class="line">        self.summary_path = summary_path</span><br><span class="line">        self.num_block_dict = &#123;<span class="number">18</span>: [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">                               <span class="number">34</span>: [<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>],</span><br><span class="line">                               <span class="number">50</span>: [<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>],</span><br><span class="line">                               <span class="number">101</span>: [<span class="number">3</span>, <span class="number">4</span>, <span class="number">23</span>, <span class="number">3</span>]&#125;</span><br><span class="line">        self.bottleneck_dict = &#123;<span class="number">18</span>: <span class="literal">False</span>,</span><br><span class="line">                                <span class="number">34</span>: <span class="literal">False</span>,</span><br><span class="line">                                <span class="number">50</span>: <span class="literal">True</span>,</span><br><span class="line">                                <span class="number">101</span>: <span class="literal">True</span>&#125;</span><br><span class="line">        self.filter_out = [<span class="number">64</span>, <span class="number">128</span>, <span class="number">256</span>, <span class="number">512</span>]</span><br><span class="line">        self.filter_out_last_layer = [<span class="number">256</span>, <span class="number">512</span>, <span class="number">1024</span>, <span class="number">2048</span>]</span><br><span class="line">        self.conv_out_depth = self.filter_out[<span class="number">-1</span>] <span class="keyword">if</span> self.depth &lt; <span class="number">50</span> <span class="keyword">else</span> self.filter_out_last_layer[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">assert</span> self.depth <span class="keyword">in</span> self.num_block_dict, <span class="string">'depth should be in [18,34,50,101]'</span></span><br><span class="line">        self.num_block = self.num_block_dict[self.depth]</span><br><span class="line">        self.bottleneck = self.bottleneck_dict[self.depth]</span><br><span class="line">        self.input_x = tf.placeholder(tf.float32, shape=[<span class="literal">None</span>, self.height, self.width, self.channel], name=<span class="string">'input_x'</span>)</span><br><span class="line">        self.input_y = tf.placeholder(tf.float32, shape=[<span class="literal">None</span>, self.num_classes], name=<span class="string">'input_y'</span>)</span><br><span class="line">        self.prediction = <span class="literal">None</span></span><br><span class="line">        self.loss = <span class="literal">None</span></span><br><span class="line">        self.acc = <span class="literal">None</span></span><br><span class="line">        self.global_step = <span class="literal">None</span></span><br><span class="line">        self.data_loader = DataLoader()</span><br><span class="line">        self.model()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">model</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># first convolution layers</span></span><br><span class="line">        x = self.conv(x=self.input_x, k_size=<span class="number">7</span>, filters_out=<span class="number">64</span>, strides=<span class="number">2</span>, activation=<span class="literal">True</span>, name=<span class="string">'First_Conv'</span>)</span><br><span class="line">        x = tf.layers.max_pooling2d(x, pool_size=[<span class="number">3</span>, <span class="number">3</span>], strides=<span class="number">2</span>, padding=<span class="string">'same'</span>, name=<span class="string">'max_pool'</span>)</span><br><span class="line">        x = self.stack_block(x)</span><br><span class="line">        x = tf.layers.average_pooling2d(x, pool_size=x.get_shape()[<span class="number">1</span>:<span class="number">3</span>], strides=<span class="number">1</span>, name=<span class="string">'average_pool'</span>)</span><br><span class="line">        x = tf.reshape(x, [<span class="number">-1</span>, <span class="number">1</span> * <span class="number">1</span> * self.conv_out_depth])</span><br><span class="line">        fc_W = tf.truncated_normal_initializer(stddev=<span class="number">0.1</span>)</span><br><span class="line">        logits = tf.layers.dense(inputs=x, units=self.num_classes,kernel_initializer=fc_W)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 预测值</span></span><br><span class="line">        self.prediction = tf.argmax(logits,axis=<span class="number">-1</span>)</span><br><span class="line">        <span class="comment"># 计算准确率</span></span><br><span class="line">        self.acc = accuracy(logits, self.input_y)</span><br><span class="line">        <span class="comment"># 损失值</span></span><br><span class="line">        self.loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=self.input_y))</span><br><span class="line">        <span class="comment"># 全局步数</span></span><br><span class="line">        self.global_step = tf.train.get_or_create_global_step()</span><br><span class="line">        <span class="comment"># 递减学习率</span></span><br><span class="line">        learning_rate = tf.train.exponential_decay(learning_rate=self.learning_rate,</span><br><span class="line">                                                   global_step=self.global_step,</span><br><span class="line">                                                   decay_rate=self.learning_decay_rate,</span><br><span class="line">                                                   decay_steps=self.learning_decay_steps,</span><br><span class="line">                                                   staircase=<span class="literal">True</span>)</span><br><span class="line">        self.optimize = tf.train.AdamOptimizer(learning_rate).minimize(self.loss)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stack_block</span><span class="params">(self, input_x)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> stack <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            stack_strides = <span class="number">1</span> <span class="keyword">if</span> stack == <span class="number">0</span> <span class="keyword">else</span> <span class="number">2</span></span><br><span class="line">            stack_name = <span class="string">'stack_%s'</span> % stack</span><br><span class="line">            <span class="keyword">with</span> tf.name_scope(stack_name):</span><br><span class="line">                <span class="keyword">for</span> block <span class="keyword">in</span> range(self.num_block[stack]):</span><br><span class="line">                    shortcut = input_x</span><br><span class="line">                    block_strides = stack_strides <span class="keyword">if</span> block == <span class="number">0</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">                    block_name = stack_name + <span class="string">'_block_%s'</span> % block</span><br><span class="line">                    <span class="keyword">with</span> tf.name_scope(block_name):</span><br><span class="line">                        <span class="keyword">if</span> self.bottleneck:</span><br><span class="line">                            <span class="keyword">for</span> layer <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">                                <span class="keyword">with</span> tf.name_scope(block_name + <span class="string">'_layer_%s'</span> % layer):</span><br><span class="line">                                    filters = self.filter_out[stack] <span class="keyword">if</span> layer &lt; <span class="number">2</span> <span class="keyword">else</span> self.filter_out_last_layer[stack]</span><br><span class="line">                                    k_size = <span class="number">3</span> <span class="keyword">if</span> layer == <span class="number">1</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">                                    layer_strides = block_strides <span class="keyword">if</span> layer &lt; <span class="number">1</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">                                    activation = <span class="literal">True</span> <span class="keyword">if</span> layer &lt; <span class="number">2</span> <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line">                                    layer_name = block_name + <span class="string">'_conv_%s'</span> % layer</span><br><span class="line">                                    input_x = self.conv(x=input_x, filters_out=filters, k_size=k_size,</span><br><span class="line">                                                        strides=layer_strides, activation=activation, name=layer_name)</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="keyword">for</span> layer <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">                                <span class="keyword">with</span> tf.name_scope(block_name + <span class="string">'_layer_%s'</span> % layer):</span><br><span class="line">                                    filters = self.filter_out[stack]</span><br><span class="line">                                    k_size = <span class="number">3</span></span><br><span class="line">                                    layer_strides = block_strides <span class="keyword">if</span> layer &lt; <span class="number">1</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">                                    activation = <span class="literal">True</span> <span class="keyword">if</span> layer &lt; <span class="number">1</span> <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line">                                    layer_name = block_name + <span class="string">'_conv_%s'</span> % layer</span><br><span class="line">                                    input_x = self.conv(x=input_x, filters_out=filters, k_size=k_size,</span><br><span class="line">                                                        strides=layer_strides, activation=activation, name=layer_name)</span><br><span class="line">                    shortcut_depth = shortcut.get_shape()[<span class="number">-1</span>]</span><br><span class="line">                    input_x_depth = input_x.get_shape()[<span class="number">-1</span>]</span><br><span class="line">                    <span class="keyword">with</span> tf.name_scope(<span class="string">'shortcut_connect'</span>):</span><br><span class="line">                        <span class="keyword">if</span> shortcut_depth != input_x_depth:</span><br><span class="line">                            connect_k_size = <span class="number">1</span></span><br><span class="line">                            connect_strides = block_strides</span><br><span class="line">                            connect_filter = filters</span><br><span class="line">                            shortcut_name = block_name + <span class="string">'_shortcut'</span></span><br><span class="line">                            shortcut = self.conv(x=shortcut, filters_out=connect_filter, k_size=connect_k_size,</span><br><span class="line">                                                 strides=connect_strides, activation=<span class="literal">False</span>, name=shortcut_name)</span><br><span class="line">                        input_x = tf.nn.relu(shortcut + input_x)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> input_x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">conv</span><span class="params">(self, x, k_size, filters_out, strides, activation, name)</span>:</span></span><br><span class="line">        x = tf.layers.conv2d(x, filters=filters_out, kernel_size=k_size, strides=strides, padding=<span class="string">'same'</span>, name=name)</span><br><span class="line">        x = tf.layers.batch_normalization(x, name=name + <span class="string">'_BN'</span>)</span><br><span class="line">        <span class="keyword">if</span> activation:</span><br><span class="line">            x = tf.nn.relu(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, train_id_list, valid_img, valid_label)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        training model</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 模型存储路径初始化</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(self.model_path):</span><br><span class="line">            os.makedirs(self.model_path)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(self.summary_path):</span><br><span class="line">            os.makedirs(self.summary_path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># train_steps初始化</span></span><br><span class="line">        train_steps = <span class="number">0</span></span><br><span class="line">        best_valid_acc = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># summary初始化</span></span><br><span class="line">        tf.summary.scalar(<span class="string">'loss'</span>, self.loss)</span><br><span class="line">        merged = tf.summary.merge_all()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># session初始化</span></span><br><span class="line">        sess = tf.Session()</span><br><span class="line">        writer = tf.summary.FileWriter(self.summary_path, sess.graph)</span><br><span class="line">        saver = tf.train.Saver(max_to_keep=<span class="number">10</span>)</span><br><span class="line">        sess.run(tf.global_variables_initializer())</span><br><span class="line">        <span class="keyword">for</span> epoch <span class="keyword">in</span> range(self.epoch):</span><br><span class="line">            shuffle_id_list = random.sample(train_id_list.tolist(), len(train_id_list))</span><br><span class="line">            batch_num = int(np.ceil(len(shuffle_id_list) / self.batch_size))</span><br><span class="line">            train_id_batch = np.array_split(shuffle_id_list, batch_num)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(batch_num):</span><br><span class="line">                this_batch = train_id_batch[i]</span><br><span class="line">                batch_img, batch_label = self.data_loader.get_batch_data(this_batch)</span><br><span class="line">                train_steps += <span class="number">1</span></span><br><span class="line">                feed_dict = &#123;self.input_x: batch_img, self.input_y: batch_label&#125;</span><br><span class="line">                _, train_loss, train_acc = sess.run([self.optimize, self.loss, self.acc], feed_dict=feed_dict)</span><br><span class="line">                <span class="keyword">if</span> train_steps % <span class="number">1</span> == <span class="number">0</span>:</span><br><span class="line">                    val_loss, val_acc = sess.run([self.loss, self.acc],</span><br><span class="line">                                                 feed_dict=&#123;self.input_x: valid_img, self.input_y: valid_label&#125;)</span><br><span class="line">                    msg = <span class="string">'epoch:%s | steps:%s | train_loss:%.4f | val_loss:%.4f | train_acc:%.4f | val_acc:%.4f'</span> % (</span><br><span class="line">                        epoch, train_steps, train_loss, val_loss, train_acc, val_acc)</span><br><span class="line">                    print(msg)</span><br><span class="line">                    summary = sess.run(merged, feed_dict=&#123;self.input_x: valid_img, self.input_y: valid_label&#125;)</span><br><span class="line">                    writer.add_summary(summary, global_step=train_steps)</span><br><span class="line">                    <span class="keyword">if</span> val_acc &gt;= best_valid_acc:</span><br><span class="line">                        best_valid_acc = val_acc</span><br><span class="line">                        saver.save(sess, save_path=self.model_path, global_step=train_steps)</span><br><span class="line"></span><br><span class="line">        sess.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        predicting</span></span><br><span class="line"><span class="string">        :param x:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        sess = tf.Session()</span><br><span class="line">        sess.run(tf.global_variables_initializer())</span><br><span class="line">        saver = tf.train.Saver(tf.global_variables())</span><br><span class="line">        ckpt = tf.train.get_checkpoint_state(self.model_path)</span><br><span class="line">        saver.restore(sess, ckpt.model_checkpoint_path)</span><br><span class="line"></span><br><span class="line">        prediction = sess.run(self.prediction, feed_dict=&#123;self.input_x: x&#125;)</span><br><span class="line">        <span class="keyword">return</span> prediction</span><br></pre></td></tr></table></figure><h4 id="DenseNet-密连网络"><a href="#DenseNet-密连网络" class="headerlink" title="DenseNet-密连网络"></a>DenseNet-密连网络</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> tensorflow.contrib.slim <span class="keyword">as</span> slim</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv_layer</span><span class="params">(input, filters,kernel_size,stride=<span class="number">1</span>, layer_name=<span class="string">"conv"</span>)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(layer_name):</span><br><span class="line">        net = slim.conv2d(input, filters, kernel_size, scope=layer_name)</span><br><span class="line">        <span class="keyword">return</span> net</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DenseNet</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,x,nb_blocks, filters, sess)</span>:</span></span><br><span class="line">        self.nb_blocks = nb_blocks</span><br><span class="line">        self.filters = filters</span><br><span class="line">        self.model = self.build_model(x)</span><br><span class="line">        self.sess = sess</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bottleneck_layer</span><span class="params">(self,x, scope)</span>:</span></span><br><span class="line">        <span class="comment"># [BN --&gt; ReLU --&gt; conv11 --&gt; BN --&gt; ReLU --&gt;conv33]</span></span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(scope):</span><br><span class="line">            x = slim.batch_norm(x)</span><br><span class="line">            x = tf.nn.relu(x)</span><br><span class="line">            x = conv_layer(x,self.filters,kernel_size=(<span class="number">1</span>,<span class="number">1</span>), layer_name=scope+<span class="string">'_conv1'</span>)</span><br><span class="line">            x = slim.batch_norm(x)</span><br><span class="line">            x = tf.nn.relu(x)</span><br><span class="line">            x = conv_layer(x,self.filters,kernel_size=(<span class="number">3</span>,<span class="number">3</span>), layer_name=scope+<span class="string">'_conv2'</span>)</span><br><span class="line">            <span class="keyword">return</span> x </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transition_layer</span><span class="params">(self,x, scope)</span>:</span></span><br><span class="line">        <span class="comment"># [BN --&gt; conv11 --&gt; avg_pool2]</span></span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(scope):</span><br><span class="line">            x = slim.batch_norm(x)</span><br><span class="line">            x = conv_layer(x,self.filters,kernel_size=(<span class="number">1</span>,<span class="number">1</span>), layer_name=scope+<span class="string">'_conv1'</span>)</span><br><span class="line">            x = slim.avg_pool2d(x,<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> x </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dense_block</span><span class="params">(self,input_x, nb_layers, layer_name)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(layer_name):</span><br><span class="line">            layers_concat = []</span><br><span class="line">            layers_concat.append(input_x)</span><br><span class="line">            x = self.bottleneck_layer(input_x,layer_name +<span class="string">'_bottleN_'</span>+str(<span class="number">0</span>))</span><br><span class="line">            layers_concat.append(x)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> xrange(nb_layers):</span><br><span class="line">                x = tf.concat(layers_concat,axis=<span class="number">3</span>)</span><br><span class="line">                x = self.bottleneck_layer(x,layer_name+<span class="string">'_bottleN_'</span>+str(i+<span class="number">1</span>))</span><br><span class="line">                layers_concat.append(x)</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_model</span><span class="params">(self,input_x)</span>:</span></span><br><span class="line">        x = conv_layer(input_x,self.filters,kernel_size=(<span class="number">7</span>,<span class="number">7</span>), layer_name=<span class="string">'conv0'</span>)</span><br><span class="line">        x = slim.max_pool2d(x,(<span class="number">3</span>,<span class="number">3</span>))        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(self.nb_blocks):</span><br><span class="line">            print(i)</span><br><span class="line">            x = self.dense_block(x,<span class="number">4</span>, <span class="string">'dense_'</span>+str(i))</span><br><span class="line">            x = self.transition_layer(x,<span class="string">'trans_'</span>+str(i))        </span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机课程总结</title>
      <link href="/2020/02/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%BE%E7%A8%8B%E6%80%BB%E7%BB%93/"/>
      <url>/2020/02/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%BE%E7%A8%8B%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>总结三大计算机基础核心知识：计算机组成原理、计算机网络、操作系统</p><a id="more"></a><h3 id="计算机组成原理"><a href="#计算机组成原理" class="headerlink" title="计算机组成原理"></a>计算机组成原理</h3><h4 id="基础笔记"><a href="#基础笔记" class="headerlink" title="基础笔记"></a>基础笔记</h4><p><strong>冯诺依曼体系：</strong> 将程序指令和数据一起存储的计算机设计概念结构，必须有一个<code>存储器、控制器、运算器、输入设备、输出设备</code></p><p><strong>容量单位：</strong><br>bit、byte、KB、MB、GB、TB、PB、EB<br>byte=8bit<br>1KB=1024byte<br>1MB=1024KB<br>1GB=1024MB<br>……</p><p><strong>计算机字符与编码集：</strong><br>ASCII码、Extended ASCII码<br>中文编码集：<code>GB2312</code>、<code>GBK</code>（向下兼容GB2312，向上支持国际ISO标准，但是跨国使用就有问题了）、<code>Unicode</code>（万国码、统一码，如UTF-8、UTF-16）</p><p><strong>总线和IO设备：</strong>计算机总线：提供了对外连接的接口，不同设备可以通过USB接口进行连接，促使外围设备接口的统一<br>总线的仲裁：为了解决总线使用权的冲突问题</p><ol><li>链式查询</li><li>计时器定时查询</li><li>独立请求<br>IO设备：字符输入设备、图像输入设备</li></ol><p><strong>存储器：</strong><br>计算机存储器：RAM（随机存储器）、串行存储器、只读存储器（DOM）<br>存储器：<code>缓存</code>（CPU里的寄存器以及高速缓存）、<code>主存</code>（计算机里的内存）、<code>辅存</code>（磁盘、U盘等）<br><strong>高速缓存是为了解决CPU与主存之间速度不匹配的问题</strong><br><img src="https://i.loli.net/2020/04/07/p9ugcEltDGPAqIx.jpg" alt="存储器"><br><strong>计算机断电，主存内容会消失，但是辅存内容仍然在，为什么？</strong><br>因为主存储器是内存，RAM（随机存取存储器），RAM通过电容存储数据，必须隔一段时间刷新一次，如果断电，一段时间后将丢失所有数据。</p><p><strong>磁盘调度算法：</strong><br>1、先来先服务算法（FIFO）<br>2、最短寻道时间优先算法<br>3、扫描算法（电梯算法，每次只往一个方向移动）<br>4、循环扫描算法</p><p><strong>高速缓存的替换策略：</strong><br>1、随机算法<br>2、先进先出算法（FIFO）<br>3、最不经常使用算法（LFU）<br>4、最近最少使用算法（LRU）</p><p><strong>CPU：</strong><br>1、计算机指令系统<br>2、计算机运算器<br>3、计算机控制器<br>4、指令执行过程</p><h4 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h4><p><strong>摩尔定律</strong><br>当价格不变时，集成电路上可容纳的元器件的数目，约每隔18-24个月便会增加一倍，性能也将提升一倍。换言之，每一美元所能买到的电脑性能，将每隔18-24个月翻一倍以上。这一定律揭示了信息技术进步的速度 。尽管这种趋势已经持续了超过半个世纪，摩尔定律仍应该被认为是观测或推测，而不是一个物理或自然法。</p><p><strong>冯诺依曼体系</strong><br>冯诺依曼是：数字计算机的数制采用二进制；计算机应该按照程序顺序执行。</p><ol><li>采用二进制作为计算机数值计算的基础，以0、1代表数值。不采用人类常用的十进制计数方法，二进制使得计算机容易实现数值的计算。</li><li>程序或指令的顺序执行，即预先编好程序，然后交给计算机按照程序中预先定义好的顺序进行数值计算。</li></ol><p><strong>冯诺依曼机</strong><br>根据冯·诺依曼提出的原理制造的计算机被称为冯·诺依曼结构计算机，现代计算机虽然结构更加复杂，计算能力更加强大，但仍然是基于这一原理设计的，也是冯诺依曼机。<br>冯诺依曼机的组成：<code>存储器+运算器+控制器+输入设备+输出设备</code>。<br>其主要特征为：数字计算机的数制采用二进制；计算机应该按照程序顺序执行。</p><p>冯诺依曼机必须具备五大基本组成部件，包括：</p><ul><li>运算器：用于完成各种算术运算、逻辑运算和数据传送等数据加工处理。</li><li>控制器：用于控制程序的执行，是计算机的大脑。运算器和控制器组成计算机的中央处理器（CPU）。控制器根据存放在存储器中的指令序列（程序）进行工作，并由一个程序计数器控制指令的执行。控制器具有判断能力，能根据计算结果选择不同的工作流程。</li><li>存储器：用于记忆程序和数据，例如：内存。程序和数据以二进制代码形式不加区别地存放在存储器中，存放位置由地址确定。</li><li>输入设备：用于将数据或程序输入到计算机中，例如：鼠标、键盘。</li><li>输出设备：将数据或程序的处理结果展示给用户，例如：显示器、打印机。</li></ul><p><strong>冯诺依曼瓶颈</strong><br>由于指令与数据放在同一内存带来的CPU利用率（吞吐率）限制就是冯诺依曼瓶颈。<br>指令和数据放在一起的后果是取指令和取数据不能同时进行，否则会引起访存的混乱。发展到今天，CPU的运算速度已经远远超过了访存速度，因此CPU必须浪费时间等数据。</p><p>冯诺依曼瓶颈的缓解办法有：</p><ol><li>Providing a cache between the CPU and the main memory</li><li>providing separate caches or separate access paths for data and instructions (the so-called Modified Harvard architecture)</li><li>using branch predictor algorithms and logic</li><li>providing a limited CPU stack or other on-chip scratchpad memory to reduce memory access</li></ol><p><strong>程序解释</strong><br>解释程序也是一种翻译程序，它将源程序作为输入并执行它，<code>边解释边执行</code>。它与编译程序的主要区别在于在解释程序执行的过程中不产生目标程序，而是按照源语言的定义解释执行源程序本身。</p><p><strong>程序翻译</strong><br>编译程序是一种翻译程序，它把高级语言所写的源程序翻译成等价的机器语言或汇编语言的目标程序。</p><p><strong>高级语言</strong><br>高级语言（High-level programming language）是一种独立于机器，面向过程或对象的语言。高级语言是参照数学语言而设计的近似于日常会话的语言。例如，要将2个变量相加并赋值给第三个变量，用高级语言表达为var3=var1+var2。</p><p>计算机语言具有高级语言和低级语言之分。而高级语言又主要是相对于汇编语言而言的，它是较接近自然语言和数学公式的编程，基本脱离了机器的硬件系统，用人们更易理解的方式编写程序。编写的程序称之为源程序。</p><p>高级语言并不是特指的某一种具体的语言，而是包括很多编程语言，如流行的java，c，c++，C#，pascal，python，lisp，prolog，FoxPro，易语言，中文版的C语言等等，这些语言的语法、命令格式都不相同 。</p><p><strong>汇编语言</strong><br>汇编语言（assembly language）是一种用于电子计算机、微处理器、微控制器或其他可编程器件的低级语言，亦称为符号语言。在汇编语言中，用助记符代替机器指令的操作码，用地址符号或标号代替指令或操作数的地址。在不同的设备中，汇编语言对应着不同的机器语言指令集，通过汇编过程转换成机器指令。</p><p><strong>机器语言</strong><br>机器语言是机器能直接识别的程序语言或指令代码，勿需经过翻译，每一操作码在计算机内部都有相应的电路来完成它，或指不经翻译即可为机器直接理解和接受的程序语言或指令代码。机器语言使用绝对地址和绝对操作码。不同的计算机都有各自的机器语言，即指令系统。<code>从使用的角度看，机器语言是最低级的语言。</code></p><p><strong>计算机软件</strong><br>计算机软件( Software，也称软件)是指计算机系统中的程序及其文档，程序是计算任务的处理对象和处理规则的描述；文档是为了便于了解程序所需的阐明性资料。程序必须装入机器内部才能工作，文档一般是给人看的，不一定装入机器。</p><p><strong>计算机硬件</strong><br>计算机硬件（Computer hardware）是指计算机系统中由电子，机械和光电元件等组成的各种物理装置的总称。这些物理装置按系统结构的要求构成一个有机整体为计算机软件运行提供物质基础。简言之，计算机硬件的功能是输入并存储程序和数据，以及执行程序把数据加工成可以利用的形式。在用户需要的情况下，以用户要求的方式进行数据的输出。</p><p><strong>计算机系统层次结构</strong><br>计算机系统层次结构，指的是计算机系统由硬件和软件两大部分所构成，而如果按功能再细分，可分为7层。把计算机系统按功能分为多级层次结构，就是有利于正确理解计算机系统的工作过程，明确软件，硬件在计算机系统中的地位和作用。<br>具体层级为：</p><ol><li>硬联逻辑级</li><li>微程序级</li><li>传统机器级</li><li>操作系统级</li><li>汇编语言级</li><li>高级语言级</li><li>应用语言级</li></ol><p><strong>计算机编码集</strong><br><strong>1、ASCII</strong><br>ASCII（American Standard Code for Information Interchange，美国信息互换标准代码）是基于罗马字母表的一套电脑编码系统，它主要用于显示现代英语和其他西欧语言。它是现今最通用的单字节编码系统，并等同于国际标准ISO 646。<br><strong>2、Extended ASCII码</strong><br>这里面包括了常见的数学运算符、带音标的欧洲字符以及其他常用符号、表格符号等。使用了拓展的ASCII码极大的补充了原来的码表，使得计算机能表达的内容越来越丰富。<br><strong>3、GB2312。</strong><br>GB2312是1980年制定的中国汉字编码国家标准，是我国最早最完备的一个编码集，一共收录了7445个字符，包括6763个汉字和682个其他字符，一个汉字占用两个字节。<br><strong>4、GBK。</strong><br>由于GB2312不符合国际标准，中国的科学家在1995年推出了第二套完备的编码集——GBK，GBK向下兼容GB2312，向上支持国际ISO标准，收录了21003个汉字，支持全部中日韩汉字。<br><strong>5、Unicode</strong><br>为了统一所有文字的编码，Unicode应运而生。Unicode是一个兼容全球的字符集，定义了世界通用的符号集，可以表达全世界所有的文字和字符。Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。<br>我们平时用的UTF-8是其中一个编码规则，它以字节为单位对Unicode进行编码，平常写代码的时候都是推荐使用UTF-8编码。中文Windows操作系统默认使用GBK编码，因此，使用IDE编程时通常要设置成UTF-8编码。</p><h4 id="知识点巩固"><a href="#知识点巩固" class="headerlink" title="知识点巩固"></a>知识点巩固</h4><p><strong>1.计算机的发展历史大概可以分为几个阶段?每个阶段的计算机分别有什么特点?</strong><br>第一代电脑叫做电子管电脑，体积庞大，可靠性差，输入输出设备有限，内存容量只有数百字到数千字，主要以单机方式完成计算，数据表示为定点数。<br>第二代电脑叫做晶体管电脑，用铁淦氧磁心和磁盘作为存储器，体积和质量比电子管电脑小，运算速度进一步提高。<br>第三代电脑叫做集成电路电脑，包括小规模集成电路和中规模集成电路，用半导体存储器取代了铁淦氧磁心存储器，采用了微程序控制技术。<br>第四代电脑叫做超大规模集成电路电脑，主存储器是集成度很高的半导体存储器。20世纪80年代末期出现了多媒体电脑。<br>20世纪90年代人工智能系统计算机的诞生标志着第五代计算机出台。</p><p><strong>2.你了解“摩尔定律”吗?“摩尔定律”对现代计算机产生了什么影响?</strong><br>摩尔定律，是指集成电路上可容纳的元器件的数目，约每隔18-24个月便会增加一倍，性能也会翻倍。<br>影响：摩尔定律非常具有前瞻性，是对微电子行业发展的一种鼓励。因为公司会按照摩尔定律来制定发展计划，一旦公司的研发进度落后于摩尔定律，就可能被淘汰。</p><p><strong>3.你了解冯诺依曼机吗?你是否可以大概描述冯诺依号机的基本组成和工作原理?冯诺依曼机相对于之前的计算机有什么重要改变？</strong><br>冯诺依曼机的核心部件是<code>存储器</code>。<br>组成：<code>输入设备、输出设备、运算器、控制器、存储器</code>。<br>工作原理：输入设备将数据和程序输入到存储器中，在运行过程中，控制器从存储器中取出指令，运算器从存储器中取数据，计算，并放回到存储器中。<br>改进：使得计算机由专用电路计算机发展成为通用电路计算机。</p><p><strong>4.什么是冯诺依曼瓶颈?冯诺依曼瓶颈对现代计算机产生了什么影响?</strong><br>冯诺依曼瓶颈：CPU和存储器之间的速度瓶颈，导致计算机的运算速度瓶颈。<br>影响：现代计算机根据局部性原理设计了存储器的层次结构，缓存-主存-辅存</p><p><strong>5.你了解程序解释和程序翻译吗?什么是编译型语言，什么是解释型语言呢?</strong><br><code>程序解释</code>：程序在执行的过程中逐行解释，解释一句后计算机就执行一句，不生成目标程序。<br><code>程序翻译</code>：程序代码在编译阶段就翻译成较低层次的语言，在运行时直接运行。<br><code>编译型语言</code>：在执行之前，需要经过编译系统将高级语言编译成机器语言文件。<br><code>解释型语言</code>：在运行的时候再翻译，不需要经过单独的编译程序。</p><p><strong>6.请你列举十种以上的编程语言，并分别分类他们属于什么类型的语言。</strong><br>编译型语言：C、c++、GO、OC。<br>解释型语言：Python、PHP、Javascript。<br>编译+解释：Java、C#。</p><p><strong>7.你了解计算机的层次结构吗?今天的软件和硬件是怎么界定的。</strong><br>计算机的层次结构：数字逻辑层、微体系结构层、指令系统层、操作系统机器层、汇编语言层、面向问题语言层。<br>结构划分：指令系统层之上为软件层，指令系统层之下为硬件层。</p><p><strong>8.请你尝试说明高级语言、汇编语言和机器语言的区别和联系?</strong><br>高级语言，是方便程序员描述程序逻辑的编程语言。<br>汇编语言，方便程序员描述硬件逻辑的语言。<br>机器语言，方便机器运行和理解。</p><p><strong>9.请完成常见的容量换算公式：</strong><br>    1) 1G=(1024^3) Bytes<br>    2) 1Byte=(8) bits<br>    3).一条内存条的容量大约2(GB)<br>    4).一个磁盘的容呈大约1(TB)<br>    5) .一个SSD的容量大约256(GB)</p><p><strong>10.CPU的速度一般使用什么做单位?它具有什么物理意义?</strong><br>赫兹，也称为CPU的时钟频率。代表CPU产生信号的频率。</p><p><strong>11.网络的速度一般使用什么做单位?</strong><br>Mbps，兆比特每秒</p><p><strong>12.20世纪80年代以前的计算机是不支持输入中文的，当时的计算机使用的是什么编码集?</strong><br>Extended-ASCII</p><p><strong>13.ASCII编码集占用多少个字节?</strong><br>7</p><p><strong>14.’A， ‘b’， ‘C对应的ASCII十进制数值分别是多少?</strong><br>65、98、67</p><p><strong>15.你可以使用你熟悉的语言将72、96、108转换为ASCII码吗?</strong><br>char c = 72;<br>c = 96;<br>c = 108;</p><p><strong>16.你知道Unicode编码和UTF-8编码的区别和联系吗?</strong><br>Unicode是一个符号集，规定了符号以及符号对应的二进制代码，却没有规定这个二进制代码怎么存储。<br>UTF-8就是一种Unicode编码的实现形式，规定了每个符号的具体实现编码，使用不定长字节表示字符。</p><p><strong>17.假设有10000个汉字，6000个日本字，3000个韩国字，1000个特殊字符，如果让你设计一套通用的编码集，请问每个字至少几个比特位?</strong><br>10000+6000+3000+1000 = 20000   15位</p><p><strong>1.计算机的总线就像是计算机的”高速公路”，你是否可以说出总线主要的功能和分类?</strong><br>功能，将计算机的各个部件连接在一起，一般用来连接CPU、存储器和IO设备。<br>分类：片内总线、系统总线；系统总线可以分为数据总线、地址总线、控制总线。</p><p><strong>2.什么是总线标准，为什么需要总线标准，现在有哪些常见的总线标准?</strong><br>总线标准是用来规范系统与各模块、模块与模块之间的一个互联的标准。<br>有了总线标准，不同的厂商就可以按照同样的标准和规范来生产设备，达到互通互联的目的。<br>常见标准：ISA、PCI、USB、PCIe。</p><p><strong>3.常说的”IO设备“，“I”、“O”分别是什么的缩写?</strong><br>IO设备分别是是Input和Output的缩写</p><p><strong>4.常见的输入设备可以分为什么种类?</strong><br>字符输入：键盘。<br>图像输入：鼠标、数位板、扫描仪。</p><p><strong>5.常见的输出设备可以分为什么种类?</strong><br>输出设备的分类：屏幕、打印机。</p><p><strong>6.日常常见的计算机外设(显示器、键盘、鼠标、打印机)，分别属于什么设备?</strong><br>输出、输入、输入、输出。</p><p><strong>7.输入输出接口一般需要完成什么工作，可以把接口的线路分为什么线路?</strong><br>将外部设备与CPU连接起来，进行信息交换。<br>线路分类：数据线、状态线、命令线、地址线。</p><p><strong>8.DMA的全称是什么?</strong><br>直接存储器访问。</p><p><strong>9.程序中断和DMA相比， 有什么优劣?</strong><br>优势：程序中断实现简单，DMA设备成本较高。<br>劣势：需要频繁中断CPU，降低CPU的处理效率。</p><p><strong>10.你是否可以清晰的表述计算机存储器的层次结构?存储器的层次结构是为了解决什么问题的?</strong><br>存储器的层次结构：缓存、主存、辅存。<br>缓存-主存为了解决主存速度不够的问题，主存-辅存为了解决主存容量不够的问题。</p><p><strong>11.什么是局部性原理，局部性原理对计算机存储系统的设计产生了什么影响?</strong><br>局部性原理：时间局部性：一个被使用的内存块可能在不远的将来被再次使用；空间局部性：一个被使用过的内存块的附近的内存可能被使用。<br>影响：计算机存储器层次结构的每一层都会缓存下一层（更慢一层）的一部分数据。</p><p><strong>12.计算机存储系统的每一个层次分别有什么特点?</strong><br>速度越快，成本越高；离CPU越远，速度越慢。</p><p><strong>13.计算机的辅助存储器一般是指计算机硬盘，你了解计算机磁盘的物理结构吗?</strong><br>磁盘一般有多个盘片，每个盘片上有一个磁头，各磁头之间是同步移动的。每个盘片又被划分为磁道（柱面）、扇区。 磁盘读取时间 = 寻道+旋转+传输。</p><p><strong>14.磁盘的调度算法有哪些?分别有什么特点?</strong><br>先来先服务算法FIFO：根据进程请求访问磁盘的先后顺序进行调度。<br>最短寻道时间SSTF：在请求队列中，找到最近的进行服务。<br>电梯算法（扫描算法）SCAN：摆动式扫描算法、每次移动的方向单一，只能向里或者向外。<br>循环扫描算法C-SCAN：磁头单向移动、访问到一端的终点后，立即回到另一端点。</p><p><strong>15.计算机的主存一般是指计算机内存，内存有什么特点?</strong><br>内存是CPU能直接寻址的存储单元，存取速度快，一般采用RAM存储。停电时数据丢失。</p><p><strong>16.请解释概念：主存、辅存、Cache、RAM、ROM?</strong><br>主存：直接给CPU提供存储的设备，高速，断电无法保存。<br>辅存：一般指外部存储器，比如硬盘、光盘等等，这类存储器断电后仍然可以保存数据。<br>Cache：缓存，设于CPU与内存之间。<br>RAM：随机访问存储器，断电丢数据。<br>ROM：只读存储器，存储后无法修改或删除。</p><p><strong>17.什么是字?什么是字块?</strong><br>字：一个存储单元中的二进制单元，字长就是字的位数。<br>字块：存储于连续的存储单元中被看作一个单元的一组字。</p><p><strong>18.计算机的高速缓存一般是指Cache， Cache一般位于计算机的什么硬件设备上?</strong><br>位于主板或者CPU上。</p><p><strong>19.一般使用什么指标去评估主存-高速缓存的性能?</strong><br>命中率、访问效率。</p><p><strong>20.命中率是怎么定义的?</strong><br>访问缓存的次数/总访问次数。</p><p><strong>21.访问效率是怎么定义的?</strong><br>访问缓存的时间/总访问时间。</p><p><strong>22.假设CPU执行某段程序共计访问Cache命中4800次， 访问主存200次， 已知Cache的存取周期是30ns， 主存的存取周期是提高了多少?</strong><br>命中率 = 4800 / 5000 = 0.96<br>平均访问时间  = 30ns * 0.96 + 150ns * 0.04 = 34.8ns<br>访问效率 = 30/34.8 = 0.8621 = 86%<br>提高了(150-34.8）/150 * 100% = 76.8%</p><p><strong>23.请描述LFU、LRU、FIFO缓存置换算法的过程。</strong><br>LFU：最少使用算法，淘汰使用频次最小的内存块。<br>LRU：最近使用算法，淘汰最近没有使用的页面。<br>FIFO：先进先出算法，最先进入的内存块被最早替换出去。</p><p><strong>24.计算机的指令一般由操作码和地址码组成，那么计算机指令可以分类为几种类型?</strong><br>指令类型：移位操作指令、数据传输指令、控制指令和算术逻辑操作指令。</p><p><strong>25.对计算机指令数据的寻址有哪几种方式?</strong><br>立即寻址、直接寻址、间接寻址。</p><p><strong>26.计算机的运算器主要由什么组成?控制器呢?</strong><br>运算器组成：ALU、状态寄存器、累加器（数据缓冲器）、通用寄存器。<br>控制器组成：程序计数器PC、控制单元CU、指令寄存器IR。</p><p><strong>27.请简述计算机.指令的执行过程。</strong><br>主要分为取指令、分析指令、执行指令。<br>从PC中取指令地址放到MAR中，控制单元根据MAR中的地址到内存中取指令，取回的指令放在MDR中，MDR将指令交给译码器ID进行解析，然后执行指令。</p><h3 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h3><h4 id="基础笔记-1"><a href="#基础笔记-1" class="headerlink" title="基础笔记"></a>基础笔记</h4><p><strong>计算机网络层次结构：</strong></p><ol><li>层次结构设计的基本原则——保证数据通路顺畅、识别目的计算机、目的计算机的状态、苏剧是否错误……<br>1）各层之间相互独立<br>2）每一层要有足够的灵活性<br>3）各层之间完全解耦</li><li>OSI七层模型<br><code>应用层</code>：所有能产生网络流量的程序<br><code>表示层</code>：在传输之前是否要进行加密、压缩处理、二进制、ASCII码<br><code>会话层</code>：可以通过会话查木马 netstat -n<br><code>传输层</code>：可进行可靠传输、流量控制、不可靠传输<br><code>网络层</code>：负责选择最佳路径，规划ip地址<br><code>数据链路层</code>：定义帧的开始和结束，实现透明传输（中间转义）、差错校验<br><code>物理层</code>：网络设备的接口标准、电器标准、如何在物理链路上传输更快的速度<br>只获得了一些理论化的成果，但是在市场化方面没有成功地推进，并没有被广为使用</li><li>TCP/IP四层模型（重点）<br>1）应用层（HTTP/FTP/SMTP/POP3…）<br>2）传输层（TCP/UDP）<br>3）网络层（IP）<br>4）网络接口层（Ethernet/PPP） </li></ol><p><strong>OSI参考模型对网络排错的指导：</strong><br>1、物理层故障：查看连接状态、发送和接收的数据包<br>2、数据链路层故障：MAC地址冲突、ADSL欠费、网速没办法协商一致、计算机连接到错误的WLAN<br>3、网络层故障：配置了错误的ip子网掩码、配置了错误的网关、路由器上没有到达网络的路由<br>4、应用层故障：应用程序出现错误</p><p><strong>OSI参考模型与网络安全：</strong><br>1、物理层安全：私自接入网络<br>2、数据链路层安全：ADSL账号密码、交换机端口绑定MAC地址<br>3、网络层安全：在路由器上使用ACL控制数据包流量<br>4、应用层安全：开发的应用程序无漏洞</p><p><strong>计算机网络的性能指标：</strong></p><ol><li>速率：连接在计算机上的主机在数字信道上传送数据位数的速率，单位是b/s、kb/s、Mb/s、Gb/s等。计算思虑时别忘了除以8（按照bit来算的）</li><li>带宽：数据信道所能传送的最高数据率</li><li>吞吐量：在单位时间内通过某个网络的数据量</li><li>时延：时延=发送时延+传播时延+处理时延+排队时延</li><li>时延带宽积：时延带宽积=传播时延*带宽，表示有多少数据正在线路上</li><li>往返时间：又称RTT，从发送方发送数据开始，到发送方收到接收方确认</li><li>利用率：包括信道利用率和网络利用率。信道利用率=有数据通过的时间/总时间，网络利用率=信道利用率加权平均</li></ol><p><strong>计算机网络的性能指标：</strong><br>1）速率（bps） bit/s<br>其他单位：bit、Byte、KB、MB、GB、TB、PB、EB……<br>2）时延（包括发送时延、传播时延、排队时延、处理时延）</p><p><strong>什么是局域网？广域网？Internet？</strong><br>局域网：覆盖范围比较小，自己花钱买设备，带宽固定自己维护 100m<br>广域网：距离比较远，&gt;100m，花钱买服务买带宽，别人来维护<br>Internet：有很多ISP组成，有自己的机房，对网民提供访问Internet的连接</p><p><strong>IP地址和MAC地址：</strong><br>ip地址决定了这个数据包最终到哪去，MAC地址决定要想到达目的地，下一跳应该给谁<br>如果全球的网都是用交换机连接的，不使用路由器，这时就不需要ip地址，只需MAC地址即可，但是这种情况是不可能的。</p><p><strong>常见的协议和端口总结：</strong><br>http：tcp+80端口<br>http：tcp+443端口<br>ftp：tcp+21端口<br>smtp：tcp+25端口<br>dns：udp+53端口<br>……</p><p><strong>服务和应用层协议之间的关系：</strong><br>服务使用TCP或UDP的端口侦听客户端请求<br>客户端使用IP地址定位服务器，使用目标端口定位服务<br>可以在服务器网卡上设置只开放必要的端口，实现服务器网络安全</p><p><strong>如何查看服务侦听的端口？</strong><br><code>netstat -an</code><br><code>netstat -n</code> 查看建立的会话<br><code>netstat -nb</code> 查看建立会话的进程<br><code>telnet (ip)</code> 测试远程计算机的某个端口是否打开<br>黑客进行远程扫描是为了测试有哪些服务，针对服务的漏洞进行监听<br>更改服务默认端口，可以迷惑入侵者，使系统更加安全     </p><p><strong>一、网络接口层</strong></p><ol><li><p>物理层———连接不同的物理设备、传输比特流<br><code>信道</code>：往一个方向传输信息的媒体，一条通信电路包含一个接收信道和一个发送信道<br> 1）单工通信信道——只能一个方向通信，没有反方向反馈的信道，如有线电视、无线收音机等<br> 2）半双工通信信道——双方都可以发送和接收信息，但是不能双方同时发送，也不能同时接收<br> 3）全双工通信信道——双方可以同时发送和接收信息<br><code>信道分用-复用技术</code>：信道复用，物理层帮助实现了，不需要关心</p></li><li><p>数据链路层——完成相邻设备的数据帧传输<br>封装成帧、透明传输、差错检测（物理层只管传输比特流，不进行差错检测）<br>如何进行差错检测？<br> 1）奇偶校验码（有一定局限性）<br> 2）循环冗余校验码CRC（广泛使用）<br><code>最大传输单元MTU</code>：描述传输数据帧的最大值，过大或过小都不合适<br><code>路径MTU</code>：木桶效应，由路径中MTU最小值决定<br><code>MAC地址</code>：物理地址、硬件地址（设备的身份证，唯一）<br><code>以太网协议</code>：数据链路层常用协议，可以完成相邻设备的数据帧传输，具体流程如下：<br> 1）A通过网卡发出数据帧<br> 2）数据帧到达路由器，路由器取出前6字节<br> 3）路由器匹配MAC地址表，找到对应的网络接口<br> 4）路由器往该网络接口发送数据帧</p></li></ol><p><strong>【思考】</strong>：如果路由器的MAC地址表中没有找到对应的记录呢？<br>    1）路由器检查MAC地址表，发现没有对应信息<br>    2）路由器将广播数据包到除发送方以外的端口<br>    3）路由器将收到来自其他设备的回应，并记录其地址</p><p><strong>二、网络层——决定数据在网络拓扑中的传输路径</strong><br>IP协议</p><ol><li>使得复杂的实际网络变为一个虚拟互联网络</li><li>使得网络层可以屏蔽底层细节而专注网络层的数据转发</li><li>解决了在虚拟网络中数据包传输路径的问题</li></ol><p><code>IP地址和MAC地址的区别</code>：MAC是永久不变的，它是物理设备的身份证；而IP地址是受网络    环境影响的，是会变化的。</p><p><strong>三、传输层——两个设备之间是如何进行通信的（进程与进程之间的通信）</strong><br>通常使用端口port来标记不同的网络进程<br><strong>UDP协议：</strong><br>用户数据报协议，是一个非常简单的协议<br>是面向报文传输的，对待数据报不合并不拆分，直接传输出去<br>是无连接的协议，不能保证可靠地交付数据<br>没有拥塞控制、首部开销非常小<br><strong>TCP协议（重点！！！）：</strong><br>协议详解、可靠传输、流量控制、拥塞控制、三次握手、四次挥手<br>传输控制协议，是面向连接的协议，一个连接有两端（点到点通信）<br>提供可靠的传输服务<br>提供全双工的通信<br>面向字节流的协议<br>TCP首部是较为复杂的<br>TCP标记：ACK（确认位）、SYN（同步位）、FIN（终止位）……<br><strong>可靠传输的基本原理：</strong><br><code>1）停止等待协议：</code><br>只要消息没有正确到达对方，就进行超时重传。每发送一个消息，都需要设置一个定时器（超时定时器）<br>对信道的利用效率并不高<br><code>2）连续ARQ协议：</code><br>ARQ是自动重传请求<br>核心思想——滑动窗口、累计确认<br>可以大幅提高信道服用效率<br><strong>TCP的可靠传输：</strong><br>1）TCP的可靠传输基于连续ARQ协议，TCP的滑动窗口以字节位单位<br>2）选择重传：需要指定需要重传的字节<br><strong>TCP流量控制：</strong>——让发送方发送速率不要太快，主要考虑的是点对点的通信量的控制<br>是使用滑动窗口实现流量控制的<br>当接收到窗口为0的消息，则启动坚持定时器<br>坚持定时器每隔一段时间发送一个窗口探测报文<br><strong>TCP拥塞控制：</strong>——考虑到的是整个网络，全局性的考虑<br>首先使用慢启动算法（指数增长）<br>再使用拥塞避免算法（维护拥塞窗口变量）<br><strong>TCP连接三次握手：</strong><br>ACK（确认位）：ACK=1确认号才生效<br>SYN（同步位）：SYN=1表示连接请求报文<br>FIN（终止位）：FIN=1表示释放连接<br>【思考】：为什么发送方要发出第三个确认报文呢？——为了防止已经失效的连接请求报文传送到对方，引起错误<br><strong>TCP四次挥手：</strong><br>等待定时器：等待两倍的MSL（最长报文段寿命）<br>为什么需要等待2倍的MSL？——最后一个报文没有确认，确保发送方的ACK可以正确到达对方，如果2MSL时间内没有收到，则接收方会重发<br><strong>套接字与套接字编程：</strong><br><code>套接字（socket）</code>是抽象概念，表示TCP连接的一端，通常是ip和port的组合，通过套接字可以进行数据发送或接收<br><code>server端</code>：创建套接字——绑定套接字——监听套接字——接收并处理信息<br><code>client端</code>：创建套接字——连接套接字——发送信息<br><strong>区分4个定时器</strong>：<a href="https://coding.imooc.com/lesson/355.html#mid=28757" target="_blank" rel="noopener">https://coding.imooc.com/lesson/355.html#mid=28757</a><br>1、超时定时器<br>2、坚持定时器<br>3、等待定时器<br>4、保活定时器</p><p><strong>四、应用层——离用户最近的一层</strong><br><strong>需要定义应用间通信的规则，如：</strong><br>应用进程的报文类型（请求报文、响应报文）<br>报文的语法、格式<br>应用进程发送数据的时机、规则<br><strong>DNS：</strong><br>Domain Name System，域名系统<br>将域名映射到ip地址（使用域名帮助记忆）<br>顶级域（如com、net、org等）、二级域（如qq、taobao等）、三级域（如mail、www、game等）。<br><strong>DHCP协议：</strong>——即插即用联网<br>动态主机设置协议，是一个局域网协议，是应用UDP协议的应用层协议<br>分配临时ip进行网络连接<br><strong>HTTP协议：</strong><br>超文本传输协议<br>是可靠的数据传输协议<br>【流程】：接收客户端连接——接收请求报文——处理请求——访问web资源——构造应答——发送应答<br><strong>CDN：</strong>内容分发网络——多媒体内容加速<br><strong>HTTPS协议：</strong>安全的http协议<br><strong>加密模型：</strong>对称加密、非对称加密（公钥/私钥）<br><strong>SSL：</strong>安全套接层</p><h4 id="重要概念-1"><a href="#重要概念-1" class="headerlink" title="重要概念"></a>重要概念</h4><p><strong>计算机网络</strong><br>计算机网络是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统。</p><p><strong>ISP</strong><br>互联网服务提供商（Internet Service Provider），简称ISP，指的是面向公众提供下列信息服务的经营者：一是接入服务，即帮助用户接入Internet；二是导航服务，即帮助用户在Internet上找到所需要的信息；三是信息服务，即建立数据服务系统，收集、加工、存储信息，定期维护更新，并通过网络向用户提供信息内容服务。</p><p><strong>OSI七层模型</strong><br>开放系统互连参考模型 (Open System Interconnect 简称OSI）是国际标准化组织(ISO)和国际电报电话咨询委员会(CCITT)联合制定的开放系统互连参考模型，为开放式互连信息系统提供了一种功能结构的框架。它从低到高分别是：<code>物理层、数据链路层、网络层、传输层、会话层、表示层和应用层</code>。</p><p><strong>TCP/IP四层模型</strong><br>TCP/IP协议族是一个四层协议系统，自底而上分别是<code>数据链路层、网络层、传输层和应用层</code>。每一层完成不同<br>的功能，且通过若干协议来实现，上层协议使用下层协议提供的服务。</p><img width="60%" src="https://i.loli.net/2020/04/07/C5cebLftEiRFs28.jpg" alt="TCP-IP四层模型"><p><strong>C/S模式</strong><br>服务器-客户机，即Client-Server(C/S)结构。C/S结构通常采取两层结构。服务器负责数据的管理，客户机负责完成与用户的交互任务。</p><p><strong>P2P模式</strong><br>对等计算（Peer to Peer，简称p2p）可以简单的定义成通过直接交换来共享计算机资源和服务，而对等计算模型应用层形成的网络通常称为对等网络。在P2P网络环境中，成千上万台彼此连接的计算机都处于对等的地位，整个网络一般来说不依赖专用的集中服务器。网络中的每一台计算机既能充当网络服务的请求者，又对其它计算机的请求作出响应，提供资源和服务。通常这些资源和服务包括：信息的共享和交换、计算资源（如CPU的共享）、存储共享（如缓存和磁盘空间的使用）等。</p><p><strong>RTT</strong><br>RTT(Round-Trip Time)： 往返时延。在计算机网络中它是一个重要的性能指标，表示从发送端发送数据开始，到发送端收到来自接收端的确认（接收端收到数据后便立即发送确认），总共经历的时延。往返延时(RTT)由三个部分决定：即链路的传播时间、末端系统的处理时间以及路由器的缓存中的排队和处理时间。其中，前面两个部分的值作为一个TCP连接相对固定，路由器的缓存中的排队和处理时间会随着整个网络拥塞程度的变化而变化。所以RTT的变化在一定程度上反映了网络拥塞程度的变化。简单来说就是发送方从发送数据开始，到收到来自接受方的确认信息所经历的时间。</p><p><strong>奇偶校验码</strong><br>奇偶校验码是一种增加二进制传输系统最小距离的简单和广泛采用的方法。是一种通过增加冗余位使得码字中”1”的个数恒为奇数或偶数的编码方法，它是一种检错码。在实际使用时又可分为垂直奇偶校验、水平奇偶校验和水平垂直奇偶校验等几种。</p><p><strong>CRC循环冗余校验码</strong><br>循环冗余校验（Cyclic Redundancy Check， CRC）是一种根据网络数据包或计算机文件等数据产生简短固定位数校验码的一种信道编码技术，主要用来检测或校验数据传输或者保存后可能出现的错误。它是利用除法及余数的原理来作错误侦测的。</p><p><strong>MTU</strong><br>最大传输单元（Maximum Transmission Unit，MTU）用来通知对方所能接受数据服务单元的最大尺寸，说明发送方能够接受的有效载荷大小。</p><p><strong>路径MTU</strong><br>路径MTU（PMTU），一种动态发现因特网上任意一条路径的最大传输单元(MTU)的技术。它对这条路径上由路由器产生的ICMP消息作了小的修改。如果在路径上的路由器没有作出修改，这种技术就不能发现正确的路径MTU，但是这种技术选出的MTU将和使用其它方法选出的MTU同样准确，甚至在许多情况下更加精确。</p><p><strong>以太网</strong><br>以太网是一种计算机局域网技术。IEEE组织的IEEE 802.3标准制定了以太网的技术标准，它规定了包括物理层的连线、电子信号和介质访问层协议的内容。以太网是目前应用最普遍的局域网技术，取代了其他局域网技术如令牌环、FDDI和ARCNET。</p><p><strong>VPN</strong><br>虚拟专用网络(VPN)的功能是：在公用网络上建立专用网络，进行加密通讯。在企业网络中有广泛应用。VPN网关通过对数据包的加密和数据包目标地址的转换实现远程访问。VPN可通过服务器、硬件、软件等多种方式实现。</p><p><strong>IP协议</strong><br>IP是Internet Protocol（网际互连协议）的缩写，是TCP/IP体系中的网络层协议。设计IP的目的是提高网络的可扩展性：一是解决互联网问题，实现大规模、异构网络的互联互通；二是分割顶层网络应用和底层网络技术之间的耦合关系，以利于两者的独立发展。根据端到端的设计原则，IP只为主机提供一种无连接、不可靠的、尽力而为的数据报传输服务。</p><p><strong>ICMP协议</strong><br>ICMP（Internet Control Message Protocol）Internet控制报文协议。它是TCP/IP协议簇的一个子协议，用于在IP主机、路由器之间传递控制消息。控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。这些控制消息虽然并不传输用户数据，但是对于用户数据的传递起着重要的作用。</p><p><strong>路由表</strong><br>在计算机网络中，路由表（routing table）或称路由择域信息库（RIB, Routing Information Base），是一个存储在路由器或者联网计算机中的电子表格（文件）或类数据库。路由表存储着指向特定网络地址的路径（在有些情况下，还记录有路径的路由度量值）。路由表中含有网络周边的拓扑信息。路由表建立的主要目标是为了实现路由协议和静态路由选择。</p><p><strong>子网掩码</strong><br>子网掩码(subnet mask)又叫网络掩码、地址掩码、子网络遮罩，它是一种用来指明一个IP地址的哪些位标识的是主机所在的子网，以及哪些位标识的是主机的位掩码。子网掩码不能单独存在，它必须结合IP地址一起使用。子网掩码只有一个作用，就是将某个IP地址划分成网络地址和主机地址两部分。</p><p><strong>无分类编址CIDR</strong><br>消除了传统的A类、B类和C类地址以及划分子网的概念。CIDR把32位的IP地址划分为两个部分，网络前缀和主机号。如下：<br><code>IP地址 ::={&lt;网络地址&gt;,&lt;主机号&gt;}</code><br>并使用“斜线记法”，或称为CIDR记法，即在IP地址后面加上斜线“/”，然后写上网络前缀的位数。<br>CIDR把网络前缀都相同的连续的IP地址组成一个“CIDR地址块”。只需要知道CIDR地址块中的任何一个地址，就能推出这个地址块的起始地址（最小地址）和最大地址，以及地址块中的地址数。</p><p><strong>NAT</strong><br>NAT（Network Address Translation，网络地址转换）是1994年提出的。当在专用网内部的一些主机本来已经分配到了本地IP地址（即仅在本专用网内使用的专用地址），但现在又想和因特网上的主机通信（并不需要加密）时，可使用NAT方法。<br>这种方法需要在专用网连接到因特网的路由器上安装NAT软件。装有NAT软件的路由器叫做NAT路由器，它至少有一个有效的外部全球IP地址。这样，所有使用本地地址的主机在和外界通信时，都要在NAT路由器上将其本地地址转换成全球IP地址，才能和因特网连接。</p><p><strong>自治系统(AS)</strong><br>自治系统：autonomous system。在互联网中，一个自治系统(AS)是一个有权自主地决定在本系统中应采用何种路由协议的小型单位。这个网络单位可以是一个简单的网络也可以是一个由一个或多个普通的网络管理员来控制的网络群体，它是一个单独的可管理的网络单元（例如一所大学，一个企业或者一个公司个体）。一个自治系统有时也被称为是一个路由选择域（routing domain）。一个自治系统将会分配一个全局的唯一的16位号码，有时我们把这个号码叫做自治系统号（ASN）。</p><p><strong>距离矢量</strong><br>距离矢量（Distance Vector）是两个路由算法中的一个。另一类是链路状态路由选择。基本上，路由协议基于距离矢量算法根据目的地的远近来决定最好的路径，链路状态协议是可以使用更高级的方法根据链路的变化，例如带宽，延迟，可靠性和负载。距离矢量协议根据距离的远近来决定最好的路径。距离可能用跳数或一个metrics运算的组合来代表一个距离值。</p><p><strong>RIP协议</strong><br>RIP(Routing Information Protocol,路由信息协议）是一种内部网关协议（IGP），是一种动态路由选择协议，用于自治系统（AS）内的路由信息的传递。RIP协议基于距离矢量算法（DistanceVectorAlgorithms），使用“跳数”(即metric)来衡量到达目标地址的路由距离。这种协议的路由器只关心自己周围的世界，只与自己相邻的路由器交换信息，范围限制在15跳(15度)之内，再远，它就不关心了。RIP应用于OSI网络七层模型的应用层。各厂家定义的管理距离（AD，即优先级）如下：华为定义的优先级是100，思科定义的优先级是120。</p><p><strong>OSPF协议</strong><br>OSPF(Open Shortest Path First开放式最短路径优先）是一个内部网关协议(Interior Gateway Protocol，简称IGP），用于在单一自治系统（autonomous system,AS）内决策路由。是对链路状态路由协议的一种实现，隶属内部网关协议（IGP），故运作于自治系统内部。著名的迪克斯加算法被用来计算最短路径树。OSPF支持负载均衡和基于服务类型的选路，也支持多种路由形式，如特定主机路由和子网路由等。</p><p><strong>BGP协议</strong><br>边界网关协议（BGP）是运行于 TCP 上的一种自治系统的路由协议。 BGP 是唯一一个用来处理像因特网大小的网络的协议，也是唯一能够妥善处理好不相关路由域间的多路连接的协议。 BGP 构建在 EGP 的经验之上。 BGP 系统的主要功能是和其他的 BGP 系统交换网络可达信息。网络可达信息包括列出的自治系统（AS）的信息。这些信息有效地构造了 AS 互联的拓朴图并由此清除了路由环路，同时在 AS 级别上可实施策略决策。</p><h4 id="知识点巩固-1"><a href="#知识点巩固-1" class="headerlink" title="知识点巩固"></a>知识点巩固</h4><p><strong>1.计算机网络的七层模型从顶往下分别是什么?请按顺序列举出来。</strong><br>应用层、表示层、会话层、传输层、网络层、数据链路层、物理层。</p><p><strong>2.现在开发者更喜欢使用TCP/IP四层模型来划分计算机网络， 为什么TCP IIP四层模型会取代OSI七层模型被广泛使用?</strong><br>OSI模型的专家缺乏实践经验，模型设计不合理，功能在各层重复出现。<br>TCP/IP模型更具实用性，在具体应用过程中方便实施。</p><p><strong>3.ARP协议、RARP协议属于计算机网络的哪一个层次?</strong><br>数据链路层。</p><p><strong>4.IP协议、ICMP协议属于计算机网络的哪一个层次?</strong><br>网络层。</p><p><strong>5.传输层最重要的两个协议是什么?</strong><br>TCP/UDP。</p><p><strong>6.常见的应用层协议有HTTP协议、FTP协议等， 你还能列举一些常见的应用层协议吗?</strong><br>SMTP、DNS、Telnet、DHCP、POP3。</p><p><strong>7.路由器工作在计算机网络的哪几个层次?</strong><br>网络层、网络接口层。</p><p><strong>8.现代网络设备互联的两种模式分别是什么?他们有什么特点?</strong><br>C/S和P2P。<br>C/S模式一方请求服务，一方提供服务，常常表现为一个服务端，多个客户端的形式。<br>P2P模式提供的是对等连接服务，每一个主机既可能提供服务，也可以请求服务。</p><p><strong>9.时延是判断计算机网络质量的重要标准，网络时延由哪几个部分组成?</strong><br>发送时延+排队时延+传播时延+处理时延。</p><p><strong>10.物理层主要的作用是什么?</strong><br>将物理设备连接起来，并传输比特流。</p><p><strong>11.请列举物理层常见的传输介质。</strong><br>有线传输：双绞线、同轴电缆、光纤，无线传输。</p><p><strong>12.什么是信道，什么是单工信道、半双工信道、全双工信道?</strong><br>信道是往一个方向传送信息的媒体。<br><code>单工信道</code>：只能一个方向通信，一方发送信息，一方接收信息<br><code>半双工信道</code>：两方都可以发送和接收，但是在同一时间，只能一个发，一个收<br><code>全双工信道</code>：两方都可以在发送的同时接收数据</p><p><strong>13.数据链路层的三个重要功能分别是什么?</strong><br> 封装成帧、透明传输、差错检测。</p><p><strong>14.物理层只负责比特流的传输，这些数据在数据链路层称为什么?</strong><br>数据帧。</p><p><strong>15.为了界定区分一个单独的数据帧，数据链路层通常会做什么操作?</strong><br>在帧的首部和尾部附加上特殊比特位作为分界。</p><p><strong>16.假设有数据00100101需要传输，目标机器接收到的数据为10100100，请问使用奇偶校验码是否可以检测出错误?</strong><br>不能。</p><p><strong>17.假设有数据1101011011需要传输， 采用CRC的生成多项式为P(X) =X^4+X+1， 请计算添加了CRC校验码之后的数据。</strong><br>1101011011 1110.</p><p><strong>18.什么是MAC地址?如何查看本机的MAC地址?MAC地址有什么作用?</strong><br>MAC是硬件的物理地址，共48位，使用12位16进制表示。<br>在Win系统下，cmd命令 ipconfig /all查看MAC地址。<br>MAC地址可以封装在以太网协议的数据帧中，表示源地址和目的地址。</p><p><strong>19.请简述以太网的工作过程。MAC地址在其中起到了什么作用?</strong><br>1.主机通过网卡发出数据帧。 2.数据帧到达路由器，路由器取出前6字节（目的地址）。 3.路由器匹配MAC地址表。 4.若该目的地址在表中，转发；若不在，广播。<br>MAC地址对地址进行唯一标记。</p><p>1.什么是IP地址， IP地址有什么特征?IP地址和MAC地址有什么区别和联系?<br>2.IP报文由IP头部和IP数据两个部分组成，IP头部一般占用多少个字节?<br>3.请简述IP头部包含哪些数据?<br>4.IP头部的TTL数据有什么作用?<br>5.网络层是怎么界定区分一个IP报文的?<br>6.路由表是网络层重要的数据结构，路由表有什么作用?<br>7.ARP协议有什么作用?如何清理本机的ARP缓存?<br>8.ARP协议的设计有一定的缺陷， 请通过搜索引擎自行搜索了解利用ARP漏洞攻击的方法。<br>9.IP地址一共4 Bytes， 32bits， 理论上可以表示多少个IP?<br>10.为了科学的使用IP地址，早期的科学家把IP地址划分为A、B、C三类IP地址，这些IP地址有什么特点?<br>11.A类地址理论上可以有多少个子网，每个子网理论上有多少个主机号?<br>12.请列举特殊的网络号和特殊的主机号。<br>13.如何计算一个IP的网络号是什么?<br>14.一个网络的掩码是255.255.255.248，请问这个网络可以连接多少台主机?<br>15.网络地址转换技术(NAT) 解决了什么问题?<br>16.NAT技术的实现原理。<br>17.ICMP报文和IP报文一样， 也是由头部和数据两个部分组成， 请简述ICMP报文的头部字段。<br>18.ICMP报文和IP报文由什么关系?ICMP报文是怎么样传输的。<br>19.常见的利用ICMP协议的计算机应用有ping和traceroute， 请简述这两个应用的功能， 以及这两个应用是怎么利用ICMP协议完成工作的。<br>20.网络层路由可以抽象成一个图算法问题，按照网络的大小可以分为内部网关协议和外部网关协议，请列举与网络路由相关的算法。<br>21.请简述RIP协议的过程。<br>22.RIP协议有什么优点和缺点?<br>23.请简述OSPF协议的过程， OSPF协议中起到重要的算法是什么算法?<br>24.OSPF协议有什么优点和缺点?<br>25.网络层有了RIP协议和OSPF协议， 为什么还需要BGP协议?BGP协议解决了什么问题?</p><p>1.传输层主要工作在什么地方?<br>2.传输层最申要的两个协议是什么?<br>3.端口是什么，端口有什么作用?端口在协议中一般占用几个字节?<br>4.UDP协议的中文全称是什么?UDP协议有什么特点?请分点说明。<br>5.UDP的报文和IP报文一样， 也是由头部和数据两个部分组成， 请绘制UDP头部的结构图。<br>6.TCP协议的中文全称是什么?TCP协议有什么特点?请分点说明。<br>7.TCP的报文和UDP、IP报文一样， 也是由头部和数据两个部分组成， 请绘制TCP头部的结构图，<br>8.TCP报文头部的序号和确认号都占据4个字节， 序号有什么用?确认号呢?<br>9.TCP报文头部的数据偏移字段有什么用?他和TCP报文的结构有什么关系?<br>10.TCP报文头部的标记占用6个比特位， 每个比特位的值可以为1或0， 他们分别有什么意义?<br>11.TCP报文头部的窗口占用2个字节， 窗口字段有什么作用?<br>12.TCP协议一个重要的特点是可靠传输， 可靠传输是怎么实现的?请简要描述可靠传输的基本原理。<br>13.TCP协议的流量控制和TCP报文头部的什么字段有关系?流量控制具体是怎么工作的?请简要描述流量控制的主要过程。<br>14.TCP协议具备拥塞控制的功能， 拥塞控制和流量控制有什么区别?拥塞控制是怎么实现的?<br>15.TCP协议的三次握于是非常重要的知识点， TCP协议的三次握于和TCP报文头部的哪些字段有关系?<br>16.请简述TCP协议三次握手的过程。<br>17.TCP协议的三次握手是TCP建立可靠通信的基础， 请问为什么TCP连接建立的过程叫做三次握手， 请陈述三次握手的必要性， 两次握手为什么不行?<br>18.TCP协议的四次挥手是非常重要的知识点， TCP协议的四次挥手和TCP报文头部的哪些字段有关系?<br>19.请简述TCP协议四次挥手的过程， 并说明清楚每一次挥手后， 双方进入的状态。<br>20.TCP连接释放的过程中有一个重要概念叫做2MSL， 什么是2MSL， 它有什么作用?<br>21.TCP协议有四个审要的定时器， 分别是什么定时器?请简述这些定时器的作用，<br>22.什么是套接字?你了解套接字的编程吗?请使用套接字实现一个简单的C/S通信工具。</p><p>1.应用层相对于其他层，是面向用户的一层，应用层协议主要解决了什么问题?<br>2.请列举5个以上的应用层协议。<br>3.什么是域名?为什么需要域名?<br>4.把域名解析成IP地址的服务叫做什么服务?它有什么特点。<br>5.DHCP协议是应用层中重要的一个协议， DHCP协议主要干了什么工作?<br>6.HTTP协议是广泛使用的一个协议， 也是最重要的应用层协议之一， HTTP协议解决了什么问题?<br>7.HTTP地址有什么特点， 一个完整的HTTP地址由哪几个部分组成?<br>8.HTTP协议中常用的HTTP请求方法有什么?他们分别表示什么意思。<br>9.HTTP服务的状态码由3位十进制数组成， 主要可以分成几类呢?<br>10.一个浏览器在请求服务器时，拿到了404状态码的回应，请问是什么意思?<br>11.一个浏览器在请求服务器时，拿到了502状态码的回应，请问是什么意思?<br>12.请简述HTTP请求报文的主要结构。<br>13.请简述HTTP应答报文的主要结构。<br>14.什么是缓存， 什么是Web缓存?<br>15.Web代理在生成环境中应用非常广泛， 一般使用Ng in x来完成代理， 请问什么是Web代理， Web代理有什么作用?<br>16.什么是CDN， 什么是爬虫?搜索引擎的本质是什么?<br>17.HTTPS是安全的HTTP协议， HTTPS应用了密码学的知识， 其中就包括对称加密和非对称加密， 请问什么是对称加密， 什么是非对称加密?<br>18.SSL为现代Web应用的安全作出了重要的贡献， 请简述SSL握手的主要过程。</p><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><h4 id="基础笔记-2"><a href="#基础笔记-2" class="headerlink" title="基础笔记"></a>基础笔记</h4><p><strong>什么是操作系统？</strong>——操作系统是管理计算机硬件和软件资源的计算机程序<br><strong>操作系统的基本功能：</strong><br>1、能统一管理计算机资源（处理器、存储器、IO设备、文件）<br>2、实现了对计算机资源的抽象（用户无需面对硬件接口编程）<br>3、提供了用户与计算机之间的接口<br><strong>操作系统相关概念：</strong><br>1、并发性（需要区分什么是并行，什么是并发）<br>2、共享性（互斥共享形式、同时访问形式）<br>3、虚拟性（把一个物理实体转变为若干个逻辑实体，时分复用技术/空分复用技术）<br>4、异步性（进程以不可预知的速度向前推进）<br><strong>为什么需要进程？</strong><br>1、进程是系统进行资源分配和调度的基本单位<br>2、进程作为程序独立运行的载体保障程序正常执行<br>3、进程的存在使得操作系统资源的利用率大幅提升<br><strong>进程的实体：</strong><br>1、进程控制块（PCB）——包括进程标识符、处理机状态、进程调度信息、进程控制信息<br>2、进程与线程（Process&amp;Thread）<br><strong>进程与线程：</strong><br>进程是系统进行资源分配和调度的基本单位<br>线程是操作系统进程运行调度的最小单位<br>一个进程可以并发多个线程，每个线程执行不同的任务，进程中的线程可以共享进程资源<br><strong>进程5状态模型：</strong><br>1、创建状态（创建进程时拥有PCB但其他资源尚未就绪）<br>2、就绪状态（其他资源都准备好，只差CPU资源）<br>3、执行状态（进程获得CPU，其程序正在执行）<br>4、阻塞状态（进程因某种愿意（如其他设备未就绪）而放弃CPU）<br>5、终止状态（进程结束由系统清理或归还PCB）<br><strong>为什么需要进程同步？</strong>——生产者-消费者问题、哲学家进餐问题——需要进程间的同步<br>1、对竞争资源在多进程间进行使用次序的协调<br>2、使得并发执行的多个进程之间可以有效使用资源和相互合作<br><strong>临界资源：</strong>指一些虽作为共享资源却又无法同时被多个线程共同访问的共享资源。<br><strong>进程间的同步：</strong><br><code>1、消息队列</code><br><code>2、共享存储</code><br><code>3、信号量</code><br><code>4、共享内存</code><br>共享存储允许不相关的进程访问同一片物理内存<br>共享内存是两个进程之间共享和传递数据最快的方式<br>共享内存未提供同步机制，需要借助其他机制管理访问<br><code>5、Unix域套接字</code><br><strong>使用fork函数创建进程：</strong><br>1、fork函数调用无参数<br>2、fork会返回两次，分别返回子进程id和0<br>3、返回子进程id的是父进程，返回0的是子进程<br><strong>线程间的同步：</strong><br><code>1、互斥量</code><br>是最简单的线程同步方法。互斥量（互斥锁）是通过加锁、解锁保证资源访问的穿行。操作系统直接提供了互斥量的API（pthread_mutex_t），开发者可以直接使用API完成资源的加锁、解锁操作<br><code>2、自旋锁</code><br>自旋锁类似于互斥量。不同的是自旋锁的线程会反复检查锁变量是否可用，是不会让出CPU的，处于一种忙等待的状态。它避免了进程或线程上下文切换的开销。在OS内部很多地方使用的是自旋锁，自旋锁并不适合在单核CPU使用。操作系统也提供了自旋锁的API（pthread_spinlock_t）<br><code>3、读写锁</code><br>是一种特殊的自旋锁。允许多个读者同时访问资源以提高读性能，但是对于写操作是互斥的。操作系统也提供了读写锁的API（pthread_rwlock_t）<br><code>4、条件变量</code><br>条件变量是一种相对复杂的线程同步方法。条件变量允许线程睡眠，直到满足某种条件时，才向该线程信号通知唤醒。操作系统也提供了自旋锁的API（pthread_cond_t、pthread_cond_wait、pthread_cond_notify）<br><strong>linux进程：</strong><br>1、前台进程：具有终端，可以和用户交互的进程<br>2、后台进程：没有占用终端，基本上不和用户交互的进程，优先级比前台进程低<br>3、守护进程：特殊的后台进程，很多守护进程在系统引导的时候启动，一直运行直到系统关闭，进程名称以d结尾的一般都是守护进程（常见的守护进程有crond、sshd、httpd、mysqld……）<br>进程与进程之间会存在父子关系，可以通过pstree命令查看<br><strong>linux相关命令：</strong>ps（列出当前进程）、top、kill（杀死进程)……<br><strong>进程调度：</strong>指计算机通过决策决定哪个就绪进程可以获得CPU使用权<br><strong>调度机制：</strong><br>1、就绪队列的排队机制——形成就绪进程队列，便于调度程序最快找到就绪进程<br>2、选择运行进程的委派机制——调度程序以一定的策略选择就绪进程，给它分配CPU<br>3、新老进程的上下文切换机制——保存当前进程的上下文信息，装入被委派执行进程的运行上下文<br><strong>进程调度算法：</strong><br>1、先来先服务调度算法<br>2、短进程优先调度算法<br>3、高优先权优先调度算法<br>4、时间片轮转调度算法（相对公平，酶促从队列头取出待执行进程，分配一个时间片执行，但不能保证及时响应用户）<br><strong>死锁：</strong>指两个或两个以上的进程在执行过程中，由于资源竞争或者由于彼此通信而造成的一种阻塞现象，若无外力作用，它们都将无法推进下去。此时系统处于死锁状态。<br>产生死锁的四个必要条件——去除了任意一个条件都不会导致死锁的产生：<br>1、互斥条件：某资源只能由一个进程使用，其他资源需要使用只能等待<br>2、请求保持条件：进程至少保持一个资源，又申请新的资源，但新资源被占用，该进程又不释放自己保持的资源<br>3、不可剥夺条件：进程资源在未完成使用前不能被剥夺，只能自己释放<br>4、环路等待条件：存在进程-资源环形链<br>解决死锁的方法：银行家算法<br>包括1）所需资源表；2）已分配资源表；3）还需分配资源表；4）可分配资源表<br>核心思想：分配给满足资源条件的进程，其他不满足的进程继续等待<br><strong>存储管理：</strong><br>1、页式存储管理<br>2、段式存储管理<br>3、段页式存储管理<br><strong>虚拟内存：</strong><br>是操作系统内存管理的关键技术，把程序使用内存划分，将部分暂时不适用的内存放置在辅存。虚拟内存是对物理内存的补充，速度接近于内存，成本接近于辅存。<br>程序的局部性原理：<br>指CPU访问存储器时，无论是存取指令还是存取数据，所访问的存储单元都趋于聚集在一个较小的连续区域中。<br><strong>虚拟内存的置换算法：</strong><br>1、先进先出算法（FIFO）<br>2、最不经常使用算法（LFU）<br>3、最近最少使用算法（LRU）</p><p><strong>linux存储管理：</strong></p><ol><li><strong>Buddy内存管理算法：</strong>经典的内存管理算法<br>相关概念：<br>1）页内碎片：已经分配出去的内存空间大于所需的内存空间，不能被利用的内存空间<br>2）页外碎片：还未分配出去，但是由于大小无法分配给申请内存的新进程的内存空闲块</li><li><strong>Buddy内存管理算法具体步骤举例：</strong></li></ol><p>（1）分配100k内存：</p><ul><li>100k向上取2的幂128k</li><li>查询是否有128k空闲内存块？</li><li>没有！查询是否有256k空闲内存块？</li><li>没有！查询是否有512k空闲内存块？</li><li>没有！查询是否有1M空闲内存块？</li><li>有！取下1M空闲内存块，分配出去</li><li>拆下512k放在512k的空闲链表，其余的分配出去</li><li>拆下256k放在256k的空闲链表，其余的分配出去</li><li>拆下128k放在128k的空闲链表，其余的分配出去</li><li>分配完毕</li></ul><p>（2）回收100k内存：</p><ul><li>判断刚才分配的内存伙伴在空闲链表上吗？</li><li>在！移除伙伴，合并为256k空闲内存，继续判断内存伙伴在空闲链表上吗？</li><li>在！移除伙伴，合并为512k空闲内存，继续判断内存伙伴在空闲链表上吗？</li><li>在！移除伙伴，合并为1Mk空闲内存，继续判断内存伙伴在空闲链表上吗？</li><li>不在！插入1M空闲链表，回收完成</li></ul><p><strong>生产者-消费者问题：</strong><br>生产者消费者问题（英语：Producer-consumer problem），也称有限缓冲问题（英语：Bounded-buffer problem），是一个多线程同步问题的经典案例。该问题描述了共享固定大小缓冲区的两个线程——即所谓的“生产者”和“消费者”——在实际运行时会发生的问题。生产者的主要作用是生成一定量的数据放到缓冲区中，然后重复此过程。与此同时，消费者也在缓冲区消耗这些数据。该问题的关键就是要保证生产者不会在缓冲区满时加入数据，消费者也不会在缓冲区中空时消耗数据。<br>要解决该问题，就必须让生产者在缓冲区满时休眠（要么干脆就放弃数据），等到下次消费者消耗缓冲区中的数据的时候，生产者才能被唤醒，开始往缓冲区添加数据。同样，也可以让消费者在缓冲区空时进入休眠，等到生产者往缓冲区添加数据之后，再唤醒消费者。通常采用进程间通信的方法解决该问题。如果解决方法不够完善，则容易出现死锁的情况。出现死锁时，两个线程都会陷入休眠，等待对方唤醒自己。该问题也能被推广到多个生产者和消费者的情形。<br><strong>“哲学家进餐”问题：</strong><br>有五个哲学家，他们的生活方式是交替地进行思考和进餐。他们共用一张圆桌，分别坐在五张椅子上。在圆桌上有五个碗和五支筷子，平时一个哲学家进行思考，饥饿时便试图取用其左、右最靠近他的筷子，只有在他拿到两支筷子时才能进餐。进餐完毕，放下筷子又继续思考。</p><h4 id="重要概念-2"><a href="#重要概念-2" class="headerlink" title="重要概念"></a>重要概念</h4><p>操作系统<br>批处理系统<br>分时系统<br>多道程序设计<br>并发性<br>共享性<br>虚拟性<br>异步性<br>进程<br>线程<br>进程控制块<br>生产者-消费者问题<br>哲学家进餐问题<br>临界资源<br>前台进程<br>后台进程<br>守护进程<br>父(子)进程<br>(非)抢占式调度<br>电梯调度算法<br>银行家算法<br>段页式存储管理<br>虚拟内存<br>交换空间<br>Buddy(伙伴) 算法<br>位示图<br>FAT文件系统<br>ext文件系统<br>Inode<br>SPOOLing技术</p><h4 id="知识点巩固-2"><a href="#知识点巩固-2" class="headerlink" title="知识点巩固"></a>知识点巩固</h4><p>1.最早的计算机是没有操作系统的，操作系统的诞生解决了什么问题?<br>2.什么是批处理操作系统，它有什么特点?<br>3.什么是分时操作系统，它有什么特点?<br>4.操作系统主要功能是什么?<br>5.操作系统实现了对计算机资源的抽象，这里面的计算机资源主要包括什么?<br>6.操作系统提供了用户与计算机之间的接口，使得用户可以通过操作系统操作计算机，这个接口主要有几种形式?<br>7.什么是并行?什么是并发?并行和并发有什么区别和联系?<br>8.操作系统的共享性对用户来说表现为什么?<br>9.对于计算机资源的共享，有哪两种形式?<br>10.什么是操作系统的虚拟性?<br>11.什么是操作系统的异步性?它对我们的编程有什么实际意义?<br>12.什么是操作系统的进程，操作系统的进程解决了什么问题?<br>13.进程在计算机中是以什么形式存在的?<br>14.PCB的全称是什么?它有什么作用?<br>15.什么是线程，线程与进程的关系和区别?<br>16.进程的五状态主要是哪五状态?你了解进程的生命周期吗?<br>17.什么是生产者-消费者问题，你能够编程实现吗?<br>18.什么是哲学家进餐问题，你能够编程实现吗?<br>19.进程间同步一般有哪些方法，线程间同步呢?<br>20.对于Linux来说， 什么是前台进程、什么是后台进程、什么是守护进程?<br>21.进程的调度算法可以分为两大类，抢占式调度和非抢占式调度，对于抢占式调度，主要有什么算法?<br>22.死锁的危害重大，什么是死锁，死锁是怎么产生的?<br>23.为了避免死锁，操作系统使用了什么算法?你了解这个算法的过程吗?<br>24.什么是段?什么是页?什么是段页式存储管理?<br>25.虚拟内存是什么?从根本上来说，虚拟内存解决了什么问题?<br>26.虚拟内存有哪些的置换算法?<br>27.请简述Buddy算法分配内存和回收内存的过程?<br>28.在Buddy算法里面， 什么是Buddy(伙伴) ?<br>29.在计算机里面，文件可以分为有结构文件和无结构文件，你可以列举常见的有结构文件和无结构文件吗?<br>30.当为文件分配辅存空间时，一般有什么分配方式?<br>31.FAT文件系统对应的是辅存的哪种空间分配方式?<br>32.ext文件系统对应的是辅存的哪种空间分配方式?<br>33.在辅存中，一般使用什么样的数据结构来管理存储空间?<br>34.文件目录树有什么作用?<br>35.文件描述信息包含哪些数据?<br>36.Linux文件有哪几种类型?<br>37.ext文件系统可以看做是由一个Boot Sector和若干个Block Group组成， 你能简要的描述Block Group由什么组成吗?<br>38.什么是文件的Inode， Inode存储了文件的什么信息?<br>39.什么是SPOOLing技术?计算机中常说的*脱机”是什么意思?</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CV系列2：卷积神经网络的演变</title>
      <link href="/2020/02/20/CV-02/"/>
      <url>/2020/02/20/CV-02/</url>
      
        <content type="html"><![CDATA[<p>本文主要介绍深度学习种卷积神经网络的发展历史，以及典型的卷积神经网络。</p><a id="more"></a><p><a href="https://iloveyou11.github.io/2020/02/16/CV-01/" target="_blank" rel="noopener">CV系列1：计算机视觉基础知识</a><br><a href="https://iloveyou11.github.io/2020/02/20/CV-02/" target="_blank" rel="noopener">CV系列2：卷积神经网络的演变</a><br><a href="https://iloveyou11.github.io/2020/03/01/CV-03/" target="_blank" rel="noopener">CV系列3：卷积神经网络代码实现</a><br><a href="https://iloveyou11.github.io/2020/03/12/CV-04/" target="_blank" rel="noopener">CV系列4：对抗生成网络</a><br><a href="https://iloveyou11.github.io/2020/03/19/CV-05/" target="_blank" rel="noopener">CV系列5：目标检测算法</a></p><img width="60%" alt="卷积神经网络演变历史" src="https://i.loli.net/2020/03/23/tjsBuCpIH5xzlea.jpg"><h4 id="LeNet-雏形网络"><a href="#LeNet-雏形网络" class="headerlink" title="LeNet-雏形网络"></a>LeNet-雏形网络</h4><p>第一个真正的卷积神经网络在1998年提出，称为LeNet。模型共有8层（不计输入层），包括3个卷积层、2个下采样层、1个全连接层、1个输出层。模型结构如下：</p><img width="60%" alt="LeNet" src="https://i.loli.net/2020/03/23/Qf9OoUcmvXJWTxj.jpg"><img width="60%" alt="LeNet2" src="https://i.loli.net/2020/03/23/wbM3USkNtuOjHqm.jpg"><h4 id="AlexLet"><a href="#AlexLet" class="headerlink" title="AlexLet"></a>AlexLet</h4><p>AlexLet包含5个卷积层（进行了3次最大池化）、3个全连接层。模型结构如下：</p><img width="60%" src="https://i.loli.net/2020/03/23/hKbTYGAp715dlNJ.jpg" alt="AlexLet"><p>AlexLet与LeNet相比，有了很多的改进：</p><ol><li>使用了ReLU激活函数，提高训练速度（ReLU是一种非饱和函数，在训练时间上比饱和函数sigmoid、tanh快，而且ReLU利用了分片线性结构实现了非线性的表达能力，梯度消失现象较弱，有助于训练更深的网络）</li><li>使用GPU训练（可以提供数十倍乃至于上百倍于CPU的性能）</li><li>使用重叠池化（传统池化窗口没有重叠，不同窗口池化过程分别独立计算，有助于缓解过拟合）</li><li>局部响应归一化（不过后来验证没效果，采用的是BN？）</li><li>数据扩充-图像平移和反转、丢失输出-随即丢弃节点（减少了过拟合）</li></ol><h4 id="SPPNet-空间金字塔"><a href="#SPPNet-空间金字塔" class="headerlink" title="SPPNet-空间金字塔"></a>SPPNet-空间金字塔</h4><p>空间金字塔池化网络，在最后一个卷积层和第一个全连接层之间插入了一个空间金字塔池化层，用来池化特征并产生固定长度的输出。无需对输入图像进行裁剪和变形，就可以处理输入图像大小不同的情况。</p><img width="60%" alt="SPPNet" src="https://i.loli.net/2020/03/23/eSWywOImAvVGDMn.jpg"><p>SPP有几个引人注目的特征：</p><ol><li>SPP对于任意输入大小都能产生一个固定长度的输出，而滑动窗口池化不能</li><li>SPP使用多级大小空间窗口，而滑动窗口池化只使用一个窗口大小</li><li>SPP可以在不同尺度上提取特征并进行池化</li></ol><img width="60%" alt="SPPNet2" src="https://i.loli.net/2020/03/23/mqFH2SLMc1J7XZg.jpg"><h4 id="VGGNet"><a href="#VGGNet" class="headerlink" title="VGGNet"></a>VGGNet</h4><p>有两种基本类型：VGGNet-16、VGGNet-19。VGGNet全部使用3X3的卷积核和2X2的池化核。VGG 块的组成规律是：连续使用若干个相同的填充为 1 、窗口形状为3X3的卷积层后接上一个步幅为 2 、窗口形状为2X2的最大池化层。</p><p>对于给定的感受野（与输出有关的输入图片的局部大小），采用堆积的小卷积核优于采用大的卷积核，因为可以增加网络深度来保证学习更复杂的模式，而且代价还比较小（参数更少）。</p><p>常见的VGG网络有：VGG-11、VGG-13、VGG-16、VGG-19</p><img width="50%" alt="VGGNet" src="https://i.loli.net/2020/03/23/GXiz8tcIZmHfRaM.jpg"><h4 id="GoogLeNet"><a href="#GoogLeNet" class="headerlink" title="GoogLeNet"></a>GoogLeNet</h4><p>GoogLeNet专注于如何建立更深的网络结构，通视引入新型的基本结构-Inception模块，以加深网络宽度。GoogLeNet包括V1、V2、V3、V4版本。</p><p><strong>Inception的作用：</strong> 代替人工确定卷积层中的过滤器类型或者确定是否需要创建卷积层和池化层，即：不需要人为的决定使用哪个过滤器，是否需要池化层等，由网络自行决定这些参数，可以给网络添加所有可能值，将输出连接起来，网络自己学习它需要什么样的参数。</p><p><strong>1. Inception V1结构</strong></p><img width="50%" alt="Inception v1" src="https://i.loli.net/2020/03/23/YzK3WBeIwZROaVy.jpg"><p>由上图可以看出，Inception 块里有4条并行的线路，它通过不同窗口形状的卷积层和最大池化层来并行抽取信息，并使用1X1卷积层减少通道数从而降低模型复杂度。</p><p><strong>2. Inception V2结构</strong></p><img width="40%" alt="Inception v2" src="https://i.loli.net/2020/03/23/8MEfPrFHmaWiUO9.jpg"><p>用2个连续的3x3卷积层(stride=1)组成的小网络来代替单个的5x5卷积层，这便是Inception V2结构，保持感受野范围的同时又减少了参数量</p><p><strong>3. Inception V3结构</strong></p><p>考虑了 nx1 卷积核，如下图所示的取代3x3卷积：于是，任意nxn的卷积都可以通过1xn卷积后接nx1卷积来替代。</p><img width="60%" alt="Inception v3" src="https://i.loli.net/2020/03/23/Vg3MxciEzeQCDqU.jpg"><img width="60%" alt="Inception v3-2" src="https://i.loli.net/2020/03/23/jpGdJlD7NWFH5o8.jpg"><p><strong>4. Inception V4结构</strong><br>它结合了残差神经网络ResNet。</p><h4 id="ResNet-残差网络"><a href="#ResNet-残差网络" class="headerlink" title="ResNet-残差网络"></a>ResNet-残差网络</h4><p>随着网络结构的加深， 梯度消失或梯度爆炸问题会越来越严重，可能导致神经网络学习和训练变得越来越困难。通过初始化、随机丢弃、归一化等技巧可以得到一定程度的缓和，而ResNet使用了在网络中增加信息传递快速通道的方法，信息可以无障碍地跨越多层直接传递到后面的层。</p><p>残差网络引入了跨层连接，构造了残差模块。基于残差模块，深层残差网络可以具有非常深的结构，深度甚至可以达到1000层以上。</p><img width="30%" alt="ResNet" src="https://i.loli.net/2020/03/23/tisQ4Tep2mVohjI.jpg"><h4 id="DenseNet-密连网络"><a href="#DenseNet-密连网络" class="headerlink" title="DenseNet-密连网络"></a>DenseNet-密连网络</h4><p>残差网络在层间加入跨层连接，使得即使成百上千层的网络，也可以得到精准地训练。不过，残差网络一般只采用2~3层的跨层连接形成残差模块，密连卷积网络（DenseNet）通过引入密连模块代替残差模块进一步扩展了残差网络的结构。与残差模块的区别在于，密连模块内部允许任意两个非相邻层之间进行跨层连接。</p><img width="50%" alt="DenseNet" src="https://i.loli.net/2020/03/23/mU91kI2sqeA3hga.jpg"><img width="50%" alt="DenseNet2" src="https://i.loli.net/2020/03/23/BKoIu2OG649eLWZ.jpg"><h4 id="CatNet-拼接网络"><a href="#CatNet-拼接网络" class="headerlink" title="CatNet-拼接网络"></a>CatNet-拼接网络</h4><p>CatNet包含了r个交错的卷积层和池化层，再跟一个全连接层和输出层。其中，全连接层是所有卷积层和池化层通过跨层连接拼接的得到的。</p><img width="50%" alt="CatNet" src="https://i.loli.net/2020/03/23/2l54TnfwRahcM67.jpg"><hr><p><strong>目标检测系列</strong></p><h4 id="R-CNN-区域卷积网络"><a href="#R-CNN-区域卷积网络" class="headerlink" title="R-CNN-区域卷积网络"></a>R-CNN-区域卷积网络</h4><p>R-CNN是一种目标检测模型，目标检测要求在图像中确定多个可能目标的位置。R-CNN采用了华东窗口的策略进行定位，包括3大模块：区域推荐、特征提取、区域分类。</p><ol><li>区域推荐<br>给输入图像生成约2000个类别无关的区域推荐构成候选检测集。R-CNN采用的区域推荐方法是选择性搜索（selective search），其他推荐方法包括目标够成度、类别无关目标推荐、受限参数最小割等。</li><li>特征提取<br>利用卷积网络计算每个推荐的特征，要求先将推荐转变为卷积网络的输入大小，并且做减均值处理。</li><li>区域分类<br>对每个区域进行打分和筛选。R-CNN先采用支持向量机SCM对所提取的特征打分，再根据分支高低，通过贪婪非最大抑制策略进行筛选，保留高分推荐。</li></ol><img width="60%" alt="RCNN" src="https://i.loli.net/2020/03/23/1DHYvwhOuKnNcaC.jpg"><h4 id="Fast-R-CNN"><a href="#Fast-R-CNN" class="headerlink" title="Fast R-CNN"></a>Fast R-CNN</h4><p>R-CNN利用深层卷积网络对目标区域推荐进行分类，可以得到较高的检测精度，但也有明显不足：</p><ol><li>训练过程阶段多。先区域推荐、再求特征、再区域分类</li><li>训练时空费用大。支持向量机和边框回归都需要从每幅图像的每个区域推荐提取特征写入硬盘，过程非常耗时。</li><li>目标检测速度慢。</li></ol><p>于是有人提出Fast R-CNN网络，优点在于1）检测质量更高 2）训练过程统一 3）网络圈层更新 4）无需磁盘存储</p><p>Fast R-CNN的结构如下：</p><img width="60%" alt="Fast R-CNN0" src="https://i.loli.net/2020/03/23/cI3ALbZ9adwymjU.jpg"><p>输入一幅完整图像和多个感兴趣区域（RoI）,京埚几个卷积和最大池化层的处理，产生一个共享卷积特征图，用来为每个区域推荐的RoI通过最大池化提取一个固定长度的特征向量。这些特征向量的输入到一系列全连接层后，又分化为两个并列输出层：一个输出类别softmax概率，一个输出目标惊喜边框位置。</p><img width="60%" alt="Fast R-CNN" src="https://i.loli.net/2020/03/23/cyR4uFf5DiOr6Pj.jpg"><img width="60%" alt="Fast R-CNN2" src="https://i.loli.net/2020/03/23/aYZt7g2bEomSreN.jpg"><p>Fast R-CNN做了以下改变：</p><ol><li>把最后的最大池化层替换为一个RoI池化层</li><li>把最后的全连接层和softmax层替换为两个兄弟层，分别用来估计每个类别的概率和边框</li><li>把网络改为接收两种数据输入，一是图像列表，二是RoooI列表</li></ol><h4 id="Faster-R-CNN"><a href="#Faster-R-CNN" class="headerlink" title="Faster R-CNN"></a>Faster R-CNN</h4><p>Faster R-CNN采用了区域推荐网络（RPN），可以检测网络共享整幅图像的卷积特征，从而产生几乎无代价的区域推荐。</p><img width="30%" alt="Faseter RCNN" src="https://i.loli.net/2020/03/23/TzXD2xKCI3Fpwqv.jpg"><p>Faster R-CNN有两个模块：一是用来产生区域推荐的RPN，二是使用推荐于去的Fast R-CNN检测器。整个系统是一个统一的目标检测网络，其中RPN采用了attention机制，告诉Fast R-CNN模块应该看什么地方。</p><h4 id="Mask-R-CNN"><a href="#Mask-R-CNN" class="headerlink" title="Mask R-CNN"></a>Mask R-CNN</h4><img width="60%" src="https://i.loli.net/2020/03/23/INtbYW4eXKJcuAr.jpg" alt="Mask R-CNN"><p><strong>RCNN系列算法对比：</strong></p><img width="60%" src="https://i.loli.net/2020/03/23/FagjoMOD3JS78VU.jpg" alt="RCNN系列算法对比"><h4 id="YOLO"><a href="#YOLO" class="headerlink" title="YOLO"></a>YOLO</h4><img width="50%" alt="YOLO" src="https://i.loli.net/2020/03/23/5rClbMTnG3XhHq9.jpg"><h4 id="SSD"><a href="#SSD" class="headerlink" title="SSD"></a>SSD</h4><p>单次检测器（SSD）是一种新型的深度神经网络目标检测器，不用对边框假设重采像素或特征，也不会损失精度，但速度比Faster R-CNN、YOLO都要快。SSD提高速度的根本改进措施是消除边框推荐和随后的像素或特征重采样阶段，还包括使用小卷积核在变量位置预测对象的类别和偏移，使用独立预测器负责不同高度比的检测，并用这些滤波器在网络后期的多个特征图种执行多尺度检测。</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CV系列1：计算机视觉基础知识</title>
      <link href="/2020/02/16/CV-01/"/>
      <url>/2020/02/16/CV-01/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><a href="https://iloveyou11.github.io/2020/02/16/CV-01/" target="_blank" rel="noopener">CV系列1：计算机视觉基础知识</a><br><a href="https://iloveyou11.github.io/2020/02/20/CV-02/" target="_blank" rel="noopener">CV系列2：卷积神经网络的演变</a><br><a href="https://iloveyou11.github.io/2020/03/01/CV-03/" target="_blank" rel="noopener">CV系列3：卷积神经网络代码实现</a><br><a href="https://iloveyou11.github.io/2020/03/12/CV-04/" target="_blank" rel="noopener">CV系列4：对抗生成网络</a><br><a href="https://iloveyou11.github.io/2020/03/19/CV-05/" target="_blank" rel="noopener">CV系列5：目标检测算法</a></p><h4 id="什么是深度学习"><a href="#什么是深度学习" class="headerlink" title="什么是深度学习"></a>什么是深度学习</h4><p>深度学习是指一类对具有深层结构的神经网络进行有效训练的方法。神经网络是一种由许多非线性计算单元（神经元）组成的分层系统，网络深度是不包括输入层的层数。</p><h4 id="1x1卷积"><a href="#1x1卷积" class="headerlink" title="1x1卷积"></a>1x1卷积</h4><p>作用：</p><ol><li>可以增加模型的非线性性（相当于在不改变特征尺寸的基础上，额外引入了一个非线性层，使用非线性激活函数）</li><li>进行特征降维，可以将多通道的特征图压缩到更小的channel（主要目的）</li></ol><p>其中，1x1卷积的主要作用是为了特征降维，能极大地减少计算量，在GoogLeNet的Inception架构中，引入了1x1卷积来简化计算。</p><img width="60%" src="https://i.loli.net/2020/04/06/HaqK5wDLAsPTEzC.jpg" alt="1x1卷积"><p>以下是GoogLeNet的Inception结构，其中就应用到了1x1的卷积，极大地简化了计算量：</p><img width="60%" src="https://i.loli.net/2020/04/06/isyzG24B3f5HYeA.jpg" alt="1x1卷积减少计算量"><h4 id="空洞卷积"><a href="#空洞卷积" class="headerlink" title="空洞卷积"></a>空洞卷积</h4><img width="60%" src="https://i.loli.net/2020/04/06/4jDPpI5Ub2o7Tne.jpg" alt="空洞卷积"><h4 id="转置卷积（反卷积）"><a href="#转置卷积（反卷积）" class="headerlink" title="转置卷积（反卷积）"></a>转置卷积（反卷积）</h4><img width="60%" src="https://i.loli.net/2020/04/06/ybJ71TREC8AloNU.jpg" alt="转置卷积"><h4 id="什么是卷积神经网"><a href="#什么是卷积神经网" class="headerlink" title="什么是卷积神经网"></a>什么是卷积神经网</h4><p>卷积神经网络是一种特殊的多层感知机或前馈神经网络，具有局部连接、权值共享的特点，其中大量神经元按照一定方式组织起来对视野中的交叠区域产生反应。</p><p>卷积神经网络是深度学习中最为重要的模型。在2012年，提出了著名的AlexNet，在ImageNet（大规模图片分类竞赛）上取得了优异成绩，为深度学习奠定了基础。之后，卷积神经网络相继出现，如VGGNet、GoogLeNet、ResNet、SPPNet、DenseNet、Faster RCNN、YOLO、SSD、FCN、Mask RCNN、DCGAN等等，极大地推进了图片分类、识别和理解技术的发展。</p><h4 id="深度学习模型"><a href="#深度学习模型" class="headerlink" title="深度学习模型"></a>深度学习模型</h4><ul><li>卷积神经网络（CNN）</li><li>循环神经网络（RNN）</li><li>长短期记忆网络（LSTM）</li><li>深层自编码器（AE）</li><li>深层信念网络</li><li>强化学习网络（RLN）</li><li>生成式对抗网络（GAN）</li><li>受限玻尔兹曼机（RBM）</li><li>深层玻尔兹曼机（DSN）<br>……</li></ul><h4 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h4><p>常见激活函数有sigmoid、tanh、relu、leaky relu、maxout等等，它们的函数图像如下：<br><img width="50%" alt="激活函数" src="https://i.loli.net/2020/03/23/PDkzl9BehuEnZ54.png"></p><p><strong>特点及问题：</strong><br><strong>1. Sigmoid</strong></p><ul><li>Sigmoid函数饱和使梯度消失。当神经元的激活在接近0或1处时会饱和，在这些区域梯度几乎为0，这就会导致梯度消失，几乎就有没有信号通过神经传回上一层。</li><li>Sigmoid函数的输出不是零中心的。因为如果输入神经元的数据总是正数，那么关于w的梯度在反向传播的过程中，将会要么全部是正数，要么全部是负数，这将会导致梯度下降权重更新时出现z字型的下降。</li></ul><p><strong>2. tanh</strong></p><ul><li>Tanh解决了Sigmoid的输出是不是零中心的问题，但仍然存在饱和问题。</li><li>为了防止饱和，现在主流的做法会在激活函数前多做一步batch normalization，尽可能保证每一层网络的输入具有均值较小的、零中心的分布。</li></ul><p><strong>3. ReLU</strong></p><ul><li>ReLU单元比较脆弱并且可能“死掉”，而且是不可逆的，因此导致了数据多样化的丢失。通过合理设置学习率，会降低神经元“死掉”的概率。</li></ul><p><strong>4. Leaky ReLU</strong></p><ul><li>能解决了ReLU神经元“死掉”的问题</li></ul><p><strong>5. Maxout</strong></p><ul><li>Maxout是对ReLU和leaky ReLU的一般化归纳。Maxout具有ReLU的优点，如计算简单，不会 saturation，同时又没有ReLU的一些缺点，如容易go die。问题就是每个神经元的参数double（翻倍），这就导致整体参数的数量激增。</li></ul><p><strong>6. Softmax</strong></p><ul><li>Softmax用于多分类神经网络输出，目的是让大的更大。</li></ul><h4 id="优化器（梯度下降算法）"><a href="#优化器（梯度下降算法）" class="headerlink" title="优化器（梯度下降算法）"></a>优化器（梯度下降算法）</h4><ul><li><strong>随机梯度下降（SGD）</strong><br>分为两种模式：整体梯度下降、mini梯度下降。<strong>整体梯度下降</strong>是先把所有样本随机洗牌，再逐一计算每个样本对梯度的贡献去更新权值。缺点是梯度下降的过程不太稳定、波动较大。<strong>mini梯度下降</strong>是将所有样本随机洗牌后分为若干大小为m的块，再逐一计算每块对梯度的贡献去更新权值。</li><li><strong>Momentum动量</strong><br>加一个动量（借助物理学的惯性原理）</li></ul><img width="50%" src="https://i.loli.net/2020/03/23/EP24GoBwSs8jNlx.jpg" alt="Momentum动量"><ul><li><strong>Adagrad</strong><br>在不同方向上的学习率是可以变化的，计算时除了这个方向上所有之前梯度的平均值。</li></ul><img width="50%" src="https://i.loli.net/2020/03/23/A5ougkDGOqzniVy.jpg" alt="Adagrad"><ul><li><strong>RMSProp</strong><br>在不同方向上的学习率是可以变化的，计算时除了这个方向上所有之前梯度的加权平均值（最近的gradient权重大，过去的gradient权重小）</li></ul><img width="50%" src="https://i.loli.net/2020/03/23/EB9vHFjotcremDW.jpg" alt="RMSProp"><ul><li><strong>Adam</strong><br>记录过去一段时间的梯度平方和（类似Adagrad和RMSProp）以及梯度的和（类似Momentum动量），把优化看作是铁球滚下山坡，定义了一个带动量和摩擦的铁球。Adam是目前最好的算法，在不知道如何选择时就选择它。</li></ul><h4 id="权值-w-偏置-b-初始化"><a href="#权值-w-偏置-b-初始化" class="headerlink" title="权值(w)偏置(b)初始化"></a>权值(w)偏置(b)初始化</h4><p>在训练神经网络之前，必须对其权值和偏置进行初始化，常用的初始化方法有3种：高斯初始化、Xavier初始化和MSRA初始化。它们一般都是把偏置初始化为0，对权值进行随机初始化。</p><h4 id="过拟合和欠拟合"><a href="#过拟合和欠拟合" class="headerlink" title="过拟合和欠拟合"></a>过拟合和欠拟合</h4><p><strong>1. 如何防止过拟合</strong></p><ul><li>获取和使用更多的数据（数据集增强）——解决过拟合的根本性方法</li><li>采用合适的模型（控制模型的复杂度）</li><li>降低特征的数量</li><li>使用正则化项（常见的L0、L1、L2正则化项，L1可以稀疏神经元，L2可以降低神经元权重，从而降低了过拟合的风险）</li><li>dropout（在网络训练过程中让网络某些节点不工作，不过度依赖某些神经元）</li><li>early stopping（如果发现随着训练迭代次数的增多，测试集并没有出现损失减少反而上升的现象，则可能是发生了过拟合，导致了泛化能力降低，应提前停止训练）</li></ul><p><strong>2. 如何防止欠拟合</strong></p><ul><li>增加网络复杂度</li><li>在模型中增加特征</li></ul><hr><h4 id="为什么需要激活函数？"><a href="#为什么需要激活函数？" class="headerlink" title="为什么需要激活函数？"></a>为什么需要激活函数？</h4><p>如果不适用激活函数，那么就算层数再深，表达的也只是线性函数，和使用一层网络表达的效果相同。</p><h4 id="网络加深就一定好吗？"><a href="#网络加深就一定好吗？" class="headerlink" title="网络加深就一定好吗？"></a>网络加深就一定好吗？</h4><p>加深在一定程度上可以提升模型性能，但是未必就是网络越深越越好。深层网络带来的梯度不稳定，网络退化的问题始终都是存在的，可以缓解，没法消除。这就有可能出现网络加深，性能反而开始下降。深层网络的训练很少能突破30层，VGGNet19层，GoogleNet22层，MobileNet28层，经典的网络超过30层的也就是ResNet系列常见的ResNet50，ResNet152了。ResNet网络使用跳连结构，有效地解决了梯度消失问题。</p><p>模型加深还可能出现的一些问题是导致某些浅层的学习能力下降，限制了深层网络的学习，这也是跳层连接等结构能够发挥作用的很重要的因素。</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ML系列6：tensorflow项目实战</title>
      <link href="/2020/01/30/ML-06/"/>
      <url>/2020/01/30/ML-06/</url>
      
        <content type="html"><![CDATA[<p>利用tensorflow框架写一些小项目，多多熟悉一下吧~<a href="https://github.com/iloveyou11/tensorflow-exercise" target="_blank" rel="noopener">github项目地址</a></p><a id="more"></a><p><a href="https://iloveyou11.github.io/2019/12/04/ML-01/" target="_blank" rel="noopener">ML系列1：AI学习资源与知识点</a><br><a href="https://iloveyou11.github.io/2019/12/10/ML-02/" target="_blank" rel="noopener">ML系列2：机器学习必会算法</a><br><a href="https://iloveyou11.github.io/2019/12/29/ML-04/" target="_blank" rel="noopener">ML系列3：深度学习中的问题解答</a><br><a href="https://iloveyou11.github.io/2020/01/02/ML-05/" target="_blank" rel="noopener">ML系列4：tensorflow入门-1</a><br><a href="https://iloveyou11.github.io/2020/01/10/ML-06/" target="_blank" rel="noopener">ML系列5：tensorflow入门-2</a><br><a href="https://iloveyou11.github.io/2020/01/30/ML-07/" target="_blank" rel="noopener">ML系列6：tensorflow项目实战</a></p><h4 id="房价预测线性回归"><a href="#房价预测线性回归" class="headerlink" title="房价预测线性回归"></a>房价预测线性回归</h4><p><strong>第1步：进行数据处理</strong></p><p>首先读取csv数据，再对x1 x2 … xn y数据进行归一化处理，接下来添加单独的一列x0(值均为1，常数项)<br><img alt="回归模型1" src="https://i.loli.net/2019/12/04/pS4qj1zguRPa7lY.jpg" width="40%"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits <span class="keyword">import</span> mplot3d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line">sns.set(context=<span class="string">"notebook"</span>， style=<span class="string">"whitegrid"</span>， palette=<span class="string">"dark"</span>)</span><br><span class="line">df0 = pd.read_csv(<span class="string">'房价预测线性回归/data0.csv'</span>， names=[<span class="string">'square'</span>， <span class="string">'price'</span>])</span><br><span class="line">sns.lmplot(<span class="string">'square'</span>， <span class="string">'price'</span>， df0， height=<span class="number">6</span>， fit_reg=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">df1 = pd.read_csv(<span class="string">'房价预测线性回归/data1.csv'</span>， names=[<span class="string">'square'</span>， <span class="string">'bedrooms'</span>， <span class="string">'price'</span>])</span><br><span class="line">print(df1.head())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制3d散点图</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = plt.axes(projection=<span class="string">'3d'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'square'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'bedrooms'</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">'price'</span>)</span><br><span class="line">ax.scatter3D(df1[<span class="string">'square'</span>]， df1[<span class="string">'bedrooms'</span>]，</span><br><span class="line">             df1[<span class="string">'price'</span>]， c=df1[<span class="string">'price'</span>]， cmap=<span class="string">'Greens'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据规范化</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize</span><span class="params">(df)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> df.apply(<span class="keyword">lambda</span> col: (col-col.mean())/col.std())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df = normalize(df1)</span><br><span class="line">print(df.head())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制规范化数据后的3d散点图</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = plt.axes(projection=<span class="string">'3d'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'square'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'bedrooms'</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">'price'</span>)</span><br><span class="line">ax.scatter3D(df[<span class="string">'square'</span>]， df[<span class="string">'bedrooms'</span>]，</span><br><span class="line">             df[<span class="string">'price'</span>]， c=df[<span class="string">'price'</span>]， cmap=<span class="string">'Reds'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加列</span></span><br><span class="line">ones = pd.DataFrame(&#123;<span class="string">'ones'</span>: np.ones(len(df))&#125;)</span><br><span class="line">df = pd.concat([ones， df]， axis=<span class="number">1</span>)</span><br><span class="line">print(df.head())</span><br></pre></td></tr></table></figure><img alt="回归模型2" src="https://i.loli.net/2019/12/04/TSDOhWt62yqJG79.jpg" width="40%"><img alt="回归模型3" src="https://i.loli.net/2019/12/04/isW5zX1EYHSpnw7.jpg" width="40%"><p>经过归一化处理后的数据结构如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   ones    square  bedrooms     price</span><br><span class="line">0   1.0  0.130010 -0.223675  0.475747</span><br><span class="line">1   1.0 -0.504190 -0.223675 -0.084074</span><br><span class="line">2   1.0  0.502476 -0.223675  0.228626</span><br><span class="line">3   1.0 -0.735723 -1.537767 -0.867025</span><br><span class="line">4   1.0  1.257476  1.090417  1.595389</span><br></pre></td></tr></table></figure><p><strong>第2步：训练模型</strong></p><p>在第1步得到的数据基础上进行处理. 首先，需要拿到x y的数据，定义学习率<code>learning_rate</code>和训练次数<code>epoch</code>，分别输入x y，计算损失loss值，使用梯度下降优化器进行优化操作.<code>GradientDescentOptimizer</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize</span><span class="params">(df)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> df.apply(<span class="keyword">lambda</span> col: (col-col.mean())/col.std())</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">'房价预测线性回归/data1.csv'</span>， names=[<span class="string">'square'</span>， <span class="string">'bedrooms'</span>， <span class="string">'price'</span>])</span><br><span class="line">df = normalize(df)</span><br><span class="line">ones = pd.DataFrame(&#123;<span class="string">'ones'</span>: np.ones(len(df))&#125;)</span><br><span class="line">df = pd.concat([ones， df]， axis=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># print(df.head())</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据处理</span></span><br><span class="line">X_data = np.array(df[df.columns[<span class="number">0</span>:<span class="number">3</span>]])</span><br><span class="line">y_data = np.array(df[df.columns[<span class="number">-1</span>]]).reshape(len(df)， <span class="number">1</span>)</span><br><span class="line">print(X_data.shape， type(X_data))</span><br><span class="line">print(y_data.shape， type(y_data))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建显性回归模型</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line">epoch = <span class="number">500</span></span><br><span class="line"><span class="comment"># 输入x y</span></span><br><span class="line">X = tf.compat.v1.placeholder(tf.float32， X_data.shape)</span><br><span class="line">y = tf.compat.v1.placeholder(tf.float32， y_data.shape)</span><br><span class="line">W = tf.compat.v1.get_variable(</span><br><span class="line">    <span class="string">"weights"</span>， (X_data.shape[<span class="number">1</span>]， <span class="number">1</span>)， initializer=tf.constant_initializer())</span><br><span class="line">y_pred = tf.matmul(X， W)</span><br><span class="line">loss_op = <span class="number">1</span> / (<span class="number">2</span> * len(X_data)) * tf.matmul((y_pred - y)，</span><br><span class="line">                                            (y_pred - y)， transpose_a=<span class="literal">True</span>)</span><br><span class="line">opt = tf.train.GradientDescentOptimizer(learning_rate=learning_rate)</span><br><span class="line">train_op = opt.minimize(loss_op)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建会话</span></span><br><span class="line"><span class="keyword">with</span> tf.compat.v1.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(tf.compat.v1.global_variables_initializer())</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> range(<span class="number">1</span>， epoch+<span class="number">1</span>):</span><br><span class="line">        sess.run(train_op， feed_dict=&#123;X: X_data， y: y_data&#125;)</span><br><span class="line">        <span class="keyword">if</span> e % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">            loss， w = sess.run([loss_op， W]， feed_dict=&#123;X: X_data， y: y_data&#125;)</span><br><span class="line">            print(<span class="string">"Epoch %d \t Loss=%.4g \t Model: y = %.4gx1 + %.4gx2 + %.4g"</span> %</span><br><span class="line">                  (e， loss， w[<span class="number">1</span>]， w[<span class="number">2</span>]， w[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><p>模型训练好后的数据如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Epoch 10         Loss=0.4116     Model: y = 0.0791x1 + 0.03948x2 + 3.353e-10</span><br><span class="line">Epoch 20         Loss=0.353      Model: y = 0.1489x1 + 0.07135x2 + -5.588e-11</span><br><span class="line">Epoch 30         Loss=0.3087     Model: y = 0.2107x1 + 0.09676x2 + 3.912e-10</span><br><span class="line">Epoch 40         Loss=0.2748     Model: y = 0.2655x1 + 0.1167x2 + -1.863e-11</span><br><span class="line">Epoch 50         Loss=0.2489     Model: y = 0.3142x1 + 0.1321x2 + 1.77e-10</span><br><span class="line">Epoch 60         Loss=0.2288     Model: y = 0.3576x1 + 0.1436x2 + -4.47e-10</span><br><span class="line">Epoch 70         Loss=0.2131     Model: y = 0.3965x1 + 0.1519x2 + -8.103e-10</span><br><span class="line">Epoch 80         Loss=0.2007     Model: y = 0.4313x1 + 0.1574x2 + -6.985e-10</span><br><span class="line">Epoch 90         Loss=0.1908     Model: y = 0.4626x1 + 0.1607x2 + -4.936e-10</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">Epoch 420        Loss=0.1332     Model: y = 0.8076x1 + 0.02271x2 + 2.125e-09</span><br><span class="line">Epoch 430        Loss=0.133      Model: y = 0.8109x1 + 0.01957x2 + 2.292e-09</span><br><span class="line">Epoch 440        Loss=0.1328     Model: y = 0.8141x1 + 0.01655x2 + 2.913e-09</span><br><span class="line">Epoch 450        Loss=0.1326     Model: y = 0.8171x1 + 0.01366x2 + 3.412e-09</span><br><span class="line">Epoch 460        Loss=0.1325     Model: y = 0.82x1 + 0.01087x2 + 3.749e-09</span><br><span class="line">Epoch 470        Loss=0.1323     Model: y = 0.8228x1 + 0.008204x2 + 3.499e-09</span><br><span class="line">Epoch 480        Loss=0.1322     Model: y = 0.8254x1 + 0.005641x2 + 3.663e-09</span><br><span class="line">Epoch 490        Loss=0.1321     Model: y = 0.828x1 + 0.003183x2 + 4.2e-09</span><br><span class="line">Epoch 500        Loss=0.132      Model: y = 0.8304x1 + 0.0008239x2 + 4.138e-09</span><br></pre></td></tr></table></figure><p><strong>第3步：可视化流图</strong></p><p>使用tensorboard可以可视化数据流图，可以方便我们查看训练的过程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize</span><span class="params">(df)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> df.apply(<span class="keyword">lambda</span> col: (col-col.mean())/col.std())</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">'房价预测线性回归/data1.csv'</span>， names=[<span class="string">'square'</span>， <span class="string">'bedrooms'</span>， <span class="string">'price'</span>])</span><br><span class="line">df = normalize(df)</span><br><span class="line">ones = pd.DataFrame(&#123;<span class="string">'ones'</span>: np.ones(len(df))&#125;)</span><br><span class="line">df = pd.concat([ones， df]， axis=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># print(df.head())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据处理</span></span><br><span class="line">X_data = np.array(df[df.columns[<span class="number">0</span>:<span class="number">3</span>]])</span><br><span class="line">y_data = np.array(df[df.columns[<span class="number">-1</span>]]).reshape(len(df)， <span class="number">1</span>)</span><br><span class="line">print(X_data.shape， type(X_data))</span><br><span class="line">print(y_data.shape， type(y_data))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建显性回归模型</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line">epoch = <span class="number">500</span></span><br><span class="line"><span class="comment"># 输入x y</span></span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">'input'</span>):</span><br><span class="line">    X = tf.compat.v1.placeholder(tf.float32， X_data.shape)</span><br><span class="line">    y = tf.compat.v1.placeholder(tf.float32， y_data.shape)</span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">'hypothesis'</span>):</span><br><span class="line">    W = tf.compat.v1.get_variable(</span><br><span class="line">        <span class="string">"weights"</span>， (X_data.shape[<span class="number">1</span>]， <span class="number">1</span>)， initializer=tf.constant_initializer())</span><br><span class="line">    y_pred = tf.matmul(X， W)</span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">'loss'</span>):</span><br><span class="line">    loss_op = <span class="number">1</span> / (<span class="number">2</span> * len(X_data)) * tf.matmul((y_pred - y)，</span><br><span class="line">                                                (y_pred - y)， transpose_a=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">'train'</span>):</span><br><span class="line">    train_op = tf.train.GradientDescentOptimizer(</span><br><span class="line">        learning_rate=learning_rate).minimize(loss_op)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建会话</span></span><br><span class="line"><span class="keyword">with</span> tf.compat.v1.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(tf.compat.v1.global_variables_initializer())</span><br><span class="line">    writer = tf.compat.v1.summary.FileWriter(<span class="string">'./summary'</span>， sess.graph)</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> range(<span class="number">1</span>， epoch+<span class="number">1</span>):</span><br><span class="line">        sess.run(train_op， feed_dict=&#123;X: X_data， y: y_data&#125;)</span><br><span class="line">        <span class="keyword">if</span> e % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">            loss， w = sess.run([loss_op， W]， feed_dict=&#123;X: X_data， y: y_data&#125;)</span><br><span class="line">            print(<span class="string">"Epoch %d \t Loss=%.4g \t Model: y = %.4gx1 + %.4gx2 + %.4g"</span> %</span><br><span class="line">                  (e， loss， w[<span class="number">1</span>]， w[<span class="number">2</span>]， w[<span class="number">0</span>]))</span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><p>其中，定义的<code>with tf.name_scope(&#39;xxx&#39;):</code>是为了将相关的部分视为整体展示在tensorboard中，可以更加方便地展开和隐藏，能够更有效地展示模型的结构.</p><p><strong>第4步：可视化损失loss</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize</span><span class="params">(df)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> df.apply(<span class="keyword">lambda</span> col: (col-col.mean())/col.std())</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">'房价预测线性回归/data1.csv'</span>， names=[<span class="string">'square'</span>， <span class="string">'bedrooms'</span>， <span class="string">'price'</span>])</span><br><span class="line">df = normalize(df)</span><br><span class="line">ones = pd.DataFrame(&#123;<span class="string">'ones'</span>: np.ones(len(df))&#125;)</span><br><span class="line">df = pd.concat([ones， df]， axis=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># print(df.head())</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据处理</span></span><br><span class="line">X_data = np.array(df[df.columns[<span class="number">0</span>:<span class="number">3</span>]])</span><br><span class="line">y_data = np.array(df[df.columns[<span class="number">-1</span>]]).reshape(len(df)， <span class="number">1</span>)</span><br><span class="line">print(X_data.shape， type(X_data))</span><br><span class="line">print(y_data.shape， type(y_data))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建显性回归模型</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line">epoch = <span class="number">500</span></span><br><span class="line"><span class="comment"># 输入x y</span></span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">'input'</span>):</span><br><span class="line">    X = tf.compat.v1.placeholder(tf.float32， X_data.shape)</span><br><span class="line">    y = tf.compat.v1.placeholder(tf.float32， y_data.shape)</span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">'hypothesis'</span>):</span><br><span class="line">    W = tf.compat.v1.get_variable(</span><br><span class="line">        <span class="string">"weights"</span>， (X_data.shape[<span class="number">1</span>]， <span class="number">1</span>)， initializer=tf.constant_initializer())</span><br><span class="line">    y_pred = tf.matmul(X， W)</span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">'loss'</span>):</span><br><span class="line">    loss_op = <span class="number">1</span> / (<span class="number">2</span> * len(X_data)) * tf.matmul((y_pred - y)，</span><br><span class="line">                                                (y_pred - y)， transpose_a=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">'train'</span>):</span><br><span class="line">    train_op = tf.train.GradientDescentOptimizer(</span><br><span class="line">        learning_rate=learning_rate).minimize(loss_op)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建会话</span></span><br><span class="line"><span class="keyword">with</span> tf.compat.v1.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(tf.compat.v1.global_variables_initializer())</span><br><span class="line">    writer = tf.compat.v1.summary.FileWriter(<span class="string">'./summary'</span>， sess.graph)</span><br><span class="line">    <span class="comment"># 记录所有损失值</span></span><br><span class="line">    loss_data = []</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> range(<span class="number">1</span>， epoch+<span class="number">1</span>):</span><br><span class="line">        _， loss， w = sess.run([train_op， loss_op， W]，</span><br><span class="line">                              feed_dict=&#123;X: X_data， y: y_data&#125;)</span><br><span class="line">        loss_data.append(float(loss))</span><br><span class="line">        <span class="keyword">if</span> e % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            log_str = <span class="string">"Epoch %d \t Loss=%.4g \t Model: y = %.4gx1 + %.4gx2 + %.4g"</span></span><br><span class="line">            print(log_str % (e， loss， w[<span class="number">1</span>]， w[<span class="number">2</span>]， w[<span class="number">0</span>]))</span><br><span class="line">writer.close()</span><br><span class="line"><span class="comment"># print(len(loss_data))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化损失值</span></span><br><span class="line">sns.set(context=<span class="string">"notebook"</span>， style=<span class="string">"whitegrid"</span>， palette=<span class="string">"dark"</span>)</span><br><span class="line">ax = sns.lineplot(x=<span class="string">'epoch'</span>， y=<span class="string">'loss'</span>， data=pd.DataFrame(</span><br><span class="line">    &#123;<span class="string">'loss'</span>: loss_data， <span class="string">'epoch'</span>: np.arange(epoch)&#125;))</span><br><span class="line">ax.set_xlabel(<span class="string">'epoch'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'loss'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>每次迭代过程中，损失值的变化趋势如下:<br><img alt="回归模型4" src="https://i.loli.net/2019/12/04/Kf2Wnlhwq1uXaQd.jpg" width="40%"><br>由此可见，随着迭代次数的增多，损失值越来越小，最后趋于平稳，模型越来越优.</p><h4 id="手写数字识别"><a href="#手写数字识别" class="headerlink" title="手写数字识别"></a>手写数字识别</h4><p><strong>第1步：加载数据集mnist</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取mnist数据集</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> keras.datasets <span class="keyword">import</span> mnist</span><br><span class="line"></span><br><span class="line">(train_x， train_y)， (test_x， test_y) = mnist.load_data()</span><br><span class="line">print(train_x.shape， train_y.shape)</span><br><span class="line">print(test_x.shape， test_y.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化数据集</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">15</span>):</span><br><span class="line">    plt.subplot(<span class="number">3</span>， <span class="number">5</span>， i+<span class="number">1</span>)</span><br><span class="line">    plt.tight_layout()</span><br><span class="line">    plt.imshow(train_x[i]， cmap=<span class="string">'Greys'</span>)</span><br><span class="line">    plt.title(<span class="string">'label:&#123;&#125;'</span>.format(train_y[i]))</span><br><span class="line">    plt.xticks([])</span><br><span class="line">    plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>最后得到的数据集如下:<br><img alt="手写数字1" src="https://i.loli.net/2019/12/04/9WyiPqcbEkVTmrl.jpg" width="40%"></p><p><strong>第2步：利用softmax进行手写数字识别</strong></p><p>具体流程: </p><ol><li>统计训练数据中各标签数量，并可视化标签数量，保证各类数字数量差不多，这样可以保证接下来训练模型的可靠性</li><li>数据处理:one-hot 编码</li><li>使用 Keras sequential model 定义神经网络(在这里，简单地使用了<code>Dense-Activation(relu)-Dense-Activation(relu)-Dense-Activation(softmax)</code>的结构)，通过softmax计算的概率值大小判断是哪个数字的可能性最大</li><li>编译模型(利用<code>model.compile()</code>进行模型的编译)</li><li>训练模型，并将指标保存到 history 中</li><li>保存模型(利用<code>model.save()</code>将模型保存到本地，下次可以直接使用此模型)，官方解释如下:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">You can use model.save(filepath) to save a Keras model into a single HDF5 file which will contain:</span><br><span class="line"></span><br><span class="line">the architecture of the model， allowing to re-create the model</span><br><span class="line">the weights of the model</span><br><span class="line">the training configuration (loss， optimizer)</span><br><span class="line">the state of the optimizer， allowing to resume training exactly where you left off.</span><br><span class="line">You can then use keras.models.load_model(filepath) to reinstantiate your model. load_model will also take care of compiling the model using the saved training configuration (unless the model was never compiled in the first place).</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> keras.layers.core <span class="keyword">import</span> Dense， Activation</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.utils <span class="keyword">import</span> np_utils</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> keras.datasets <span class="keyword">import</span> mnist</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据集</span></span><br><span class="line">(x_train， y_train)， (x_test， y_test) = mnist.load_data()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 规范化</span></span><br><span class="line">X_train = x_train.reshape(<span class="number">60000</span>， <span class="number">784</span>)</span><br><span class="line">X_test = x_test.reshape(<span class="number">10000</span>， <span class="number">784</span>)</span><br><span class="line">X_train = X_train.astype(<span class="string">'float32'</span>)</span><br><span class="line">X_test = X_test.astype(<span class="string">'float32'</span>)</span><br><span class="line">X_train /= <span class="number">255</span></span><br><span class="line">X_test /= <span class="number">255</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计各标签数量</span></span><br><span class="line">label， count = np.unique(y_train， return_counts=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># print(label， count)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化标签数量</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">plt.bar(label， count， width=<span class="number">0.7</span>， align=<span class="string">'center'</span>)</span><br><span class="line">plt.title(<span class="string">"Label Distribution"</span>)</span><br><span class="line">plt.xlabel(<span class="string">"Label"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Count"</span>)</span><br><span class="line">plt.xticks(label)</span><br><span class="line">plt.ylim(<span class="number">0</span>， <span class="number">7500</span>)</span><br><span class="line"><span class="keyword">for</span> label， count <span class="keyword">in</span> zip(label， count):</span><br><span class="line">    plt.text(label， count， <span class="string">'%d'</span> % count， ha=<span class="string">'center'</span>， va=<span class="string">'bottom'</span>， fontsize=<span class="number">10</span>)</span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># one-hot编码</span></span><br><span class="line">n_classes = <span class="number">10</span></span><br><span class="line"><span class="comment"># print('before one-hot:'， y_train.shape)</span></span><br><span class="line">Y_train = np_utils.to_categorical(y_train， n_classes)</span><br><span class="line"><span class="comment"># print('after one-hot:'， Y_train.shape)</span></span><br><span class="line">Y_test = np_utils.to_categorical(y_test， n_classes)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义神经网络</span></span><br><span class="line">model = Sequential()</span><br><span class="line"></span><br><span class="line">model.add(Dense(<span class="number">512</span>， input_shape=(<span class="number">784</span>，)))</span><br><span class="line">model.add(Activation(<span class="string">'relu'</span>))</span><br><span class="line"></span><br><span class="line">model.add(Dense(<span class="number">512</span>))</span><br><span class="line">model.add(Activation(<span class="string">'relu'</span>))</span><br><span class="line"></span><br><span class="line">model.add(Dense(<span class="number">10</span>))</span><br><span class="line">model.add(Activation(<span class="string">'softmax'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译模型</span></span><br><span class="line">model.compile(loss=<span class="string">'categorical_crossentropy'</span>，</span><br><span class="line">              metrics=[<span class="string">'accuracy'</span>]， optimizer=<span class="string">'adam'</span>)</span><br><span class="line"><span class="comment"># 开始训练</span></span><br><span class="line">history = model.fit(</span><br><span class="line">    X_train，</span><br><span class="line">    Y_train，</span><br><span class="line">    batch_size=<span class="number">128</span>，</span><br><span class="line">    epochs=<span class="number">5</span>，</span><br><span class="line">    verbose=<span class="number">2</span>，</span><br><span class="line">    validation_data=(X_test， Y_test)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化指标</span></span><br><span class="line"><span class="comment"># print(history.history)</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>， <span class="number">1</span>， <span class="number">1</span>)</span><br><span class="line">plt.plot(history.history[<span class="string">'accuracy'</span>])</span><br><span class="line">plt.plot(history.history[<span class="string">'val_accuracy'</span>])</span><br><span class="line">plt.title(<span class="string">'Model Accuracy'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'accuracy'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'epoch'</span>)</span><br><span class="line">plt.legend([<span class="string">'train'</span>， <span class="string">'test'</span>]， loc=<span class="string">'lower right'</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>， <span class="number">1</span>， <span class="number">2</span>)</span><br><span class="line">plt.plot(history.history[<span class="string">'loss'</span>])  <span class="comment"># 损失</span></span><br><span class="line">plt.plot(history.history[<span class="string">'val_loss'</span>])  <span class="comment"># 测试集上的损失</span></span><br><span class="line">plt.title(<span class="string">'Model Loss'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'loss'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'epoch'</span>)</span><br><span class="line">plt.legend([<span class="string">'train'</span>， <span class="string">'test'</span>]， loc=<span class="string">'upper right'</span>)</span><br><span class="line">plt.tight_layout()</span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存模型</span></span><br><span class="line">save_dir = <span class="string">"./mnist/model/"</span></span><br><span class="line"><span class="keyword">if</span> tf.io.gfile.exists(save_dir):</span><br><span class="line">    tf.io.gfile.rmtree(save_dir)</span><br><span class="line">tf.io.gfile.makedirs(save_dir)</span><br><span class="line"></span><br><span class="line">model_name = <span class="string">'keras_mnist.h5'</span></span><br><span class="line">model_path = os.path.join(save_dir， model_name)</span><br><span class="line">model.save(model_path)</span><br><span class="line">print(<span class="string">'Saved trained model at %s '</span> % model_path)</span><br></pre></td></tr></table></figure><p>训练的结果为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Train on 60000 samples， validate on 10000 samples</span><br><span class="line">Epoch 1/5</span><br><span class="line"> - 10s - loss: 0.2186 - acc: 0.9353 - val_loss: 0.0935 - val_acc: 0.9709</span><br><span class="line">Epoch 2/5</span><br><span class="line"> - 11s - loss: 0.0788 - acc: 0.9754 - val_loss: 0.0757 - val_acc: 0.9749</span><br><span class="line">Epoch 3/5</span><br><span class="line"> - 11s - loss: 0.0494 - acc: 0.9837 - val_loss: 0.0636 - val_acc: 0.9807</span><br><span class="line">Epoch 4/5</span><br><span class="line"> - 12s - loss: 0.0353 - acc: 0.9888 - val_loss: 0.0762 - val_acc: 0.9769</span><br><span class="line">Epoch 5/5</span><br><span class="line"> - 11s - loss: 0.0265 - acc: 0.9910 - val_loss: 0.0724 - val_acc: 0.9786</span><br></pre></td></tr></table></figure><p>可视化指标效果如下:<br><img alt="手写数字2" src="https://i.loli.net/2019/12/04/2eY6HaTyqbkKZOr.jpg" width="40%"></p><p>保存模型后，如果要实现模型的加载，则可以使用<code>load_model</code>函数，其中<code>model_path</code>是模型的路径.使用训练好的此模型统计测试集上的分类结果，具体代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> load_model</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> keras.utils <span class="keyword">import</span> np_utils</span><br><span class="line"><span class="keyword">from</span> keras.datasets <span class="keyword">import</span> mnist</span><br><span class="line"></span><br><span class="line">(x_train， y_train)， (x_test， y_test) = mnist.load_data()</span><br><span class="line"><span class="comment"># 规范化</span></span><br><span class="line">X_test = x_test.reshape(<span class="number">10000</span>， <span class="number">784</span>)</span><br><span class="line">X_test = X_test.astype(<span class="string">'float32'</span>)</span><br><span class="line">X_test /= <span class="number">255</span></span><br><span class="line"></span><br><span class="line">n_classes = <span class="number">10</span></span><br><span class="line">Y_test = np_utils.to_categorical(y_test， n_classes)</span><br><span class="line"></span><br><span class="line">save_dir = <span class="string">"./mnist/model/"</span></span><br><span class="line">model_name = <span class="string">'keras_mnist.h5'</span></span><br><span class="line">model_path = os.path.join(save_dir， model_name)</span><br><span class="line">mnist_model = load_model(model_path)</span><br><span class="line"></span><br><span class="line">loss_and_metrics = mnist_model.evaluate(X_test， Y_test， verbose=<span class="number">2</span>)</span><br><span class="line">print(<span class="string">"Test Loss: &#123;&#125;"</span>.format(loss_and_metrics[<span class="number">0</span>]))</span><br><span class="line">print(<span class="string">"Test Accuracy: &#123;&#125;%"</span>.format(loss_and_metrics[<span class="number">1</span>]*<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">predicted_classes = mnist_model.predict_classes(X_test)</span><br><span class="line"></span><br><span class="line">correct = np.nonzero(predicted_classes == y_test)[<span class="number">0</span>]</span><br><span class="line">incorrect = np.nonzero(predicted_classes != y_test)[<span class="number">0</span>]</span><br><span class="line">print(<span class="string">"Classified correctly count: &#123;&#125;"</span>.format(len(correct)))</span><br><span class="line">print(<span class="string">"Classified incorrectly count: &#123;&#125;"</span>.format(len(incorrect)))</span><br></pre></td></tr></table></figure><p>得到的结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Test Loss: 0.07241645678399945</span><br><span class="line">Test Accuracy: 97.86%</span><br><span class="line">Classified correctly count: 9786</span><br><span class="line">Classified incorrectly count: 214</span><br></pre></td></tr></table></figure><p>由此可见，训练结果还是相当不错的，准确率达到了97.86%.</p><p><strong>第3步：利用CNN进行手写数字识别</strong></p><p>整体的流程和第2步是非常类似的，只是在模型训练的过程中，采用的是CNN卷积神经网络，加入了更多的隐藏层，增加了模型的复杂度，也提高了模型的准确性.</p><p>具体的神经网络设计如下，分别为<code>卷积层-卷积层-池化层-dropout层-flatten层-全连接层-dropout层-softmax全连接层</code>，具体参数如下:</p><ol><li>第1层卷积，32个3x3的卷积核 ，激活函数使用 relu</li><li>第2层卷积，64个3x3的卷积核，激活函数使用 relu</li><li>最大池化层，池化窗口 2x2</li><li>Dropout 25% 的输入神经元</li><li>将 Pooled feature map 摊平后输入全连接网络</li><li>全联接层，激活函数使用 relu</li><li>Dropout 50% 的输入神经元</li><li>使用 softmax 激活函数做多分类，输出各数字的概率</li></ol><p>查看 MNIST CNN 模型网络结构:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Layer (type)                 Output Shape              Param #   </span><br><span class="line">=================================================================</span><br><span class="line">conv2d_1 (Conv2D)            (None， 26， 26， 32)        320       </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_2 (Conv2D)            (None， 24， 24， 64)        18496     </span><br><span class="line">_________________________________________________________________</span><br><span class="line">max_pooling2d_1 (MaxPooling2 (None， 12， 12， 64)        0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dropout_1 (Dropout)          (None， 12， 12， 64)        0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">flatten_1 (Flatten)          (None， 9216)              0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_1 (Dense)              (None， 128)               1179776   </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dropout_2 (Dropout)          (None， 128)               0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_2 (Dense)              (None， 10)                1290      </span><br><span class="line">=================================================================</span><br><span class="line">Total params: 1，199，882</span><br><span class="line">Trainable params: 1，199，882</span><br><span class="line">Non-trainable params: 0</span><br></pre></td></tr></table></figure><p>具体代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense， Dropout， Flatten， Conv2D， MaxPooling2D</span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> backend <span class="keyword">as</span> K</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.utils <span class="keyword">import</span> np_utils</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> keras.datasets <span class="keyword">import</span> mnist</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据集</span></span><br><span class="line">(x_train， y_train)， (x_test， y_test) = mnist.load_data()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 规范化</span></span><br><span class="line">img_rows， img_cols = <span class="number">28</span>， <span class="number">28</span></span><br><span class="line"><span class="keyword">if</span> K.image_data_format() == <span class="string">'channels_first'</span>:</span><br><span class="line">    x_train = x_train.reshape(x_train.shape[<span class="number">0</span>]， <span class="number">1</span>， img_rows， img_cols)</span><br><span class="line">    x_test = x_test.reshape(x_test.shape[<span class="number">0</span>]， <span class="number">1</span>， img_rows， img_cols)</span><br><span class="line">    input_shape = (<span class="number">1</span>， img_rows， img_cols)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    x_train = x_train.reshape(x_train.shape[<span class="number">0</span>]， img_rows， img_cols， <span class="number">1</span>)</span><br><span class="line">    x_test = x_test.reshape(x_test.shape[<span class="number">0</span>]， img_rows， img_cols， <span class="number">1</span>)</span><br><span class="line">    input_shape = (img_rows， img_cols， <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">X_train = x_train.astype(<span class="string">'float32'</span>)</span><br><span class="line">X_test = x_test.astype(<span class="string">'float32'</span>)</span><br><span class="line">X_train /= <span class="number">255</span></span><br><span class="line">X_test /= <span class="number">255</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计各标签数量</span></span><br><span class="line">label， count = np.unique(y_train， return_counts=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># print(label， count)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化标签数量</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">plt.bar(label， count， width=<span class="number">0.7</span>， align=<span class="string">'center'</span>)</span><br><span class="line">plt.title(<span class="string">"Label Distribution"</span>)</span><br><span class="line">plt.xlabel(<span class="string">"Label"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Count"</span>)</span><br><span class="line">plt.xticks(label)</span><br><span class="line">plt.ylim(<span class="number">0</span>， <span class="number">7500</span>)</span><br><span class="line"><span class="keyword">for</span> label， count <span class="keyword">in</span> zip(label， count):</span><br><span class="line">    plt.text(label， count， <span class="string">'%d'</span> % count， ha=<span class="string">'center'</span>， va=<span class="string">'bottom'</span>， fontsize=<span class="number">10</span>)</span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># one-hot编码</span></span><br><span class="line">n_classes = <span class="number">10</span></span><br><span class="line"><span class="comment"># print('before one-hot:'， y_train.shape)</span></span><br><span class="line">Y_train = np_utils.to_categorical(y_train， n_classes)</span><br><span class="line"><span class="comment"># print('after one-hot:'， Y_train.shape)</span></span><br><span class="line">Y_test = np_utils.to_categorical(y_test， n_classes)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 Keras sequential model 定义 MNIST CNN 网络</span></span><br><span class="line">model = Sequential()</span><br><span class="line"><span class="comment"># 第1层卷积，32个3x3的卷积核 ，激活函数使用 relu</span></span><br><span class="line">model.add(Conv2D(filters=<span class="number">32</span>， kernel_size=(<span class="number">3</span>， <span class="number">3</span>)， activation=<span class="string">'relu'</span>，</span><br><span class="line">                 input_shape=input_shape))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第2层卷积，64个3x3的卷积核，激活函数使用 relu</span></span><br><span class="line">model.add(Conv2D(filters=<span class="number">64</span>， kernel_size=(<span class="number">3</span>， <span class="number">3</span>)， activation=<span class="string">'relu'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大池化层，池化窗口 2x2</span></span><br><span class="line">model.add(MaxPooling2D(pool_size=(<span class="number">2</span>， <span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dropout 25% 的输入神经元</span></span><br><span class="line">model.add(Dropout(<span class="number">0.25</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 Pooled feature map 摊平后输入全连接网络</span></span><br><span class="line">model.add(Flatten())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全联接层</span></span><br><span class="line">model.add(Dense(<span class="number">128</span>， activation=<span class="string">'relu'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dropout 50% 的输入神经元</span></span><br><span class="line">model.add(Dropout(<span class="number">0.5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 softmax 激活函数做多分类，输出各数字的概率</span></span><br><span class="line">model.add(Dense(n_classes， activation=<span class="string">'softmax'</span>))</span><br><span class="line"></span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> layer <span class="keyword">in</span> model.layers:</span><br><span class="line">    print(layer.get_output_at(<span class="number">0</span>).get_shape().as_list())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译模型</span></span><br><span class="line">model.compile(loss=<span class="string">'categorical_crossentropy'</span>，</span><br><span class="line">              metrics=[<span class="string">'accuracy'</span>]， optimizer=<span class="string">'adam'</span>)</span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">history = model.fit(</span><br><span class="line">    X_train，</span><br><span class="line">    Y_train，</span><br><span class="line">    batch_size=<span class="number">128</span>，</span><br><span class="line">    epochs=<span class="number">5</span>，</span><br><span class="line">    verbose=<span class="number">2</span>，</span><br><span class="line">    validation_data=(X_test， Y_test)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化指标</span></span><br><span class="line"><span class="comment"># print(history.history)</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>， <span class="number">1</span>， <span class="number">1</span>)</span><br><span class="line">plt.plot(history.history[<span class="string">'accuracy'</span>])</span><br><span class="line">plt.plot(history.history[<span class="string">'val_accuracy'</span>])</span><br><span class="line">plt.title(<span class="string">'Model Accuracy'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'accuracy'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'epoch'</span>)</span><br><span class="line">plt.legend([<span class="string">'train'</span>， <span class="string">'test'</span>]， loc=<span class="string">'lower right'</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>， <span class="number">1</span>， <span class="number">2</span>)</span><br><span class="line">plt.plot(history.history[<span class="string">'loss'</span>])  <span class="comment"># 损失</span></span><br><span class="line">plt.plot(history.history[<span class="string">'val_loss'</span>])  <span class="comment"># 测试集上的损失</span></span><br><span class="line">plt.title(<span class="string">'Model Loss'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'loss'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'epoch'</span>)</span><br><span class="line">plt.legend([<span class="string">'train'</span>， <span class="string">'test'</span>]， loc=<span class="string">'upper right'</span>)</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存模型</span></span><br><span class="line">save_dir = <span class="string">"./mnist/model/"</span></span><br><span class="line"><span class="keyword">if</span> tf.io.gfile.exists(save_dir):</span><br><span class="line">    tf.io.gfile.rmtree(save_dir)</span><br><span class="line">tf.io.gfile.makedirs(save_dir)</span><br><span class="line"></span><br><span class="line">model_name = <span class="string">'keras_mnist.h5'</span></span><br><span class="line">model_path = os.path.join(save_dir， model_name)</span><br><span class="line">model.save(model_path)</span><br><span class="line">print(<span class="string">'Saved trained model at %s '</span> % model_path)</span><br></pre></td></tr></table></figure><p>利用CNN卷积神经网络训练后，可视化指标如下:<br><img alt="手写数字3" src="https://i.loli.net/2019/12/04/xtWKq3zBeJHVr98.jpg" width="40%"></p><h4 id="验证码识别"><a href="#验证码识别" class="headerlink" title="验证码识别"></a>验证码识别</h4><p><strong>第1步：创建验证码数据集</strong></p><p>具体步骤如下:</p><ol><li>引入第三方包<code>ImageCaptcha</code></li><li>定义常量和字符集(验证码字符集(包括数字/大小字母/小写字母) 验证码参数(长度/高度/宽度) 数据集参数(训练数据集大小/测试数据集大小/训练数据集目录/测试数据集目录))</li><li>定义生成随机字符的方法</li><li>创建并保存验证码数据集的方法</li><li>创建并保存训练集</li><li>创建并保存测试集</li><li>生成并返回验证码数据集的方法</li><li>生成 100 张验证码图像和字符</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> captcha.image <span class="keyword">import</span> ImageCaptcha</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> PIL.Image <span class="keyword">as</span> Image</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义常量</span></span><br><span class="line">NUMBER = [<span class="string">'0'</span>， <span class="string">'1'</span>， <span class="string">'2'</span>， <span class="string">'3'</span>， <span class="string">'4'</span>， <span class="string">'5'</span>， <span class="string">'6'</span>， <span class="string">'7'</span>， <span class="string">'8'</span>， <span class="string">'9'</span>]</span><br><span class="line">LOWERCASE = [<span class="string">'a'</span>， <span class="string">'b'</span>， <span class="string">'c'</span>， <span class="string">'d'</span>， <span class="string">'e'</span>， <span class="string">'f'</span>， <span class="string">'g'</span>， <span class="string">'h'</span>， <span class="string">'i'</span>， <span class="string">'j'</span>， <span class="string">'k'</span>， <span class="string">'l'</span>， <span class="string">'m'</span>， <span class="string">'n'</span>， <span class="string">'o'</span>， <span class="string">'p'</span>， <span class="string">'q'</span>， <span class="string">'r'</span>， <span class="string">'s'</span>， <span class="string">'t'</span>， <span class="string">'u'</span>，</span><br><span class="line">             <span class="string">'v'</span>， <span class="string">'w'</span>， <span class="string">'x'</span>， <span class="string">'y'</span>， <span class="string">'z'</span>]</span><br><span class="line">UPPERCASE = [<span class="string">'A'</span>， <span class="string">'B'</span>， <span class="string">'C'</span>， <span class="string">'D'</span>， <span class="string">'E'</span>， <span class="string">'F'</span>， <span class="string">'G'</span>， <span class="string">'H'</span>， <span class="string">'I'</span>， <span class="string">'J'</span>， <span class="string">'K'</span>， <span class="string">'L'</span>， <span class="string">'M'</span>， <span class="string">'N'</span>， <span class="string">'O'</span>， <span class="string">'P'</span>， <span class="string">'Q'</span>， <span class="string">'R'</span>， <span class="string">'S'</span>， <span class="string">'T'</span>， <span class="string">'U'</span>，</span><br><span class="line">             <span class="string">'V'</span>， <span class="string">'W'</span>， <span class="string">'X'</span>， <span class="string">'Y'</span>， <span class="string">'Z'</span>]</span><br><span class="line"></span><br><span class="line">CAPTCHA_CHARSET = NUMBER   <span class="comment"># 验证码字符集</span></span><br><span class="line">CAPTCHA_LEN = <span class="number">4</span>            <span class="comment"># 验证码长度</span></span><br><span class="line">CAPTCHA_HEIGHT = <span class="number">60</span>        <span class="comment"># 验证码高度</span></span><br><span class="line">CAPTCHA_WIDTH = <span class="number">160</span>        <span class="comment"># 验证码宽度</span></span><br><span class="line"></span><br><span class="line">TRAIN_DATASET_SIZE = <span class="number">5000</span>     <span class="comment"># 验证码数据集大小</span></span><br><span class="line">TEST_DATASET_SIZE = <span class="number">1000</span></span><br><span class="line">TRAIN_DATA_DIR = <span class="string">'./train-data/'</span>  <span class="comment"># 验证码数据集目录</span></span><br><span class="line">TEST_DATA_DIR = <span class="string">'./test-data/'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成随机字符</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_random_text</span><span class="params">(charset=CAPTCHA_CHARSET， length=CAPTCHA_LEN)</span>:</span></span><br><span class="line">    text = [random.choice(charset) <span class="keyword">for</span> _ <span class="keyword">in</span> range(length)]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并保存验证码数据集</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_captcha_dataset</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        size=<span class="number">100</span>，</span></span></span><br><span class="line"><span class="function"><span class="params">        data_dir=<span class="string">'./data/'</span>，</span></span></span><br><span class="line"><span class="function"><span class="params">        height=<span class="number">60</span>，</span></span></span><br><span class="line"><span class="function"><span class="params">        width=<span class="number">160</span>，</span></span></span><br><span class="line"><span class="function"><span class="params">        image_format=<span class="string">'.png'</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> tf.io.gfile.exists(data_dir):</span><br><span class="line">        tf.io.gfile.rmtree(data_dir)</span><br><span class="line">    tf.io.gfile.makedirs(data_dir)</span><br><span class="line"></span><br><span class="line">    captcha = ImageCaptcha(width=width， height=height)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(size):</span><br><span class="line">        text = gen_random_text(CAPTCHA_CHARSET， CAPTCHA_LEN)</span><br><span class="line">        captcha.write(text， data_dir+text+image_format)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练集</span></span><br><span class="line">create_captcha_dataset(TRAIN_DATASET_SIZE， TRAIN_DATA_DIR)</span><br><span class="line"><span class="comment"># 测试集</span></span><br><span class="line">create_captcha_dataset(TEST_DATASET_SIZE， TEST_DATA_DIR)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_captcha_dataset</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        size=<span class="number">100</span>，</span></span></span><br><span class="line"><span class="function"><span class="params">        height=<span class="number">60</span>，</span></span></span><br><span class="line"><span class="function"><span class="params">        width=<span class="number">160</span>，</span></span></span><br><span class="line"><span class="function"><span class="params">        image_format=<span class="string">'.png'</span>)</span>:</span></span><br><span class="line">    captcha = ImageCaptcha(width=width， height=height)</span><br><span class="line">    images， texts = [<span class="literal">None</span>]*size， [<span class="literal">None</span>]*size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(size):</span><br><span class="line">        texts[i] = gen_random_text(CAPTCHA_CHARSET， CAPTCHA_LEN)</span><br><span class="line">        images[i] = np.array(Image.open(captcha.generate(texts[i])))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> images， texts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成100张验证码图像</span></span><br><span class="line">images， texts = gen_captcha_dataset()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化验证码前20张图片</span></span><br><span class="line">plt.figure()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">    plt.subplot(<span class="number">5</span>， <span class="number">4</span>， i+<span class="number">1</span>)</span><br><span class="line">    plt.tight_layout()</span><br><span class="line">    plt.imshow(images[i])</span><br><span class="line">    plt.title(<span class="string">"Label: &#123;&#125;"</span>.format(texts[i]))</span><br><span class="line">    plt.xticks([])</span><br><span class="line">    plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>最后生成 100 张验证码图像和字符如下:<br><img alt="验证码1" src="https://i.loli.net/2019/12/04/cmGYqsn6NyEuL3r.jpg" width="40%"></p><p><strong>第2步：数据处理</strong></p><p>具体步骤:</p><ol><li>读取训练集前 100 张图片，并通过文件名解析验证码（标签）</li><li>数据可视化</li><li>将 RGB 验证码图像转为灰度图</li><li>数据规范化</li><li>适配 Keras 图像数据格式</li><li>对验证码中每个字符进行 one-hot 编码</li><li>将验证码向量解码为对应字符</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> backend <span class="keyword">as</span> K</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">NUMBER = [<span class="string">'0'</span>， <span class="string">'1'</span>， <span class="string">'2'</span>， <span class="string">'3'</span>， <span class="string">'4'</span>， <span class="string">'5'</span>， <span class="string">'6'</span>， <span class="string">'7'</span>， <span class="string">'8'</span>， <span class="string">'9'</span>]</span><br><span class="line">LOWERCASE = [<span class="string">'a'</span>， <span class="string">'b'</span>， <span class="string">'c'</span>， <span class="string">'d'</span>， <span class="string">'e'</span>， <span class="string">'f'</span>， <span class="string">'g'</span>， <span class="string">'h'</span>， <span class="string">'i'</span>， <span class="string">'j'</span>， <span class="string">'k'</span>， <span class="string">'l'</span>， <span class="string">'m'</span>， <span class="string">'n'</span>， <span class="string">'o'</span>， <span class="string">'p'</span>， <span class="string">'q'</span>， <span class="string">'r'</span>， <span class="string">'s'</span>， <span class="string">'t'</span>， <span class="string">'u'</span>，</span><br><span class="line">             <span class="string">'v'</span>， <span class="string">'w'</span>， <span class="string">'x'</span>， <span class="string">'y'</span>， <span class="string">'z'</span>]</span><br><span class="line">UPPERCASE = [<span class="string">'A'</span>， <span class="string">'B'</span>， <span class="string">'C'</span>， <span class="string">'D'</span>， <span class="string">'E'</span>， <span class="string">'F'</span>， <span class="string">'G'</span>， <span class="string">'H'</span>， <span class="string">'I'</span>， <span class="string">'J'</span>， <span class="string">'K'</span>， <span class="string">'L'</span>， <span class="string">'M'</span>， <span class="string">'N'</span>， <span class="string">'O'</span>， <span class="string">'P'</span>， <span class="string">'Q'</span>， <span class="string">'R'</span>， <span class="string">'S'</span>， <span class="string">'T'</span>， <span class="string">'U'</span>，</span><br><span class="line">             <span class="string">'V'</span>， <span class="string">'W'</span>， <span class="string">'X'</span>， <span class="string">'Y'</span>， <span class="string">'Z'</span>]</span><br><span class="line"></span><br><span class="line">CAPTCHA_CHARSET = NUMBER   <span class="comment"># 验证码字符集</span></span><br><span class="line">CAPTCHA_LEN = <span class="number">4</span>            <span class="comment"># 验证码长度</span></span><br><span class="line">CAPTCHA_HEIGHT = <span class="number">60</span>        <span class="comment"># 验证码高度</span></span><br><span class="line">CAPTCHA_WIDTH = <span class="number">160</span>        <span class="comment"># 验证码宽度</span></span><br><span class="line"></span><br><span class="line">TRAIN_DATA_DIR = <span class="string">'./train-data/'</span>  <span class="comment"># 验证码数据集目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取训练集前100张图像</span></span><br><span class="line">image = []</span><br><span class="line">text = []</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> glob.glob(TRAIN_DATA_DIR+<span class="string">'*.png'</span>):</span><br><span class="line">    image.append(np.array(Image.open(filename)))</span><br><span class="line">    text.append(filename.lstrip(TRAIN_DATA_DIR).rstrip(<span class="string">'.png'</span>)[<span class="number">1</span>:])</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> count &gt;= <span class="number">100</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据可视化</span></span><br><span class="line"><span class="comment"># plt.figure()</span></span><br><span class="line"><span class="comment"># for i in range(20):</span></span><br><span class="line"><span class="comment">#     plt.subplot(5， 4， i+1)</span></span><br><span class="line"><span class="comment">#     plt.tight_layout()</span></span><br><span class="line"><span class="comment">#     plt.imshow(image[i])</span></span><br><span class="line"><span class="comment">#     plt.title("Label: &#123;&#125;".format(text[i]))</span></span><br><span class="line"><span class="comment">#     plt.xticks([])</span></span><br><span class="line"><span class="comment">#     plt.yticks([])</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line">image = np.array(image， dtype=np.float32)</span><br><span class="line"><span class="comment"># print(image.shape)  # (100， 60， 160， 3)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将RGB转化为灰度图</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rgb2grey</span><span class="params">(img)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.dot(img[...， :<span class="number">3</span>]， [<span class="number">0.299</span>， <span class="number">0.587</span>， <span class="number">0.114</span>])</span><br><span class="line"></span><br><span class="line">image = rgb2grey(image)</span><br><span class="line"><span class="comment"># print(image.shape)  # (100， 60， 160)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据可视化</span></span><br><span class="line"><span class="comment"># plt.figure()</span></span><br><span class="line"><span class="comment"># for i in range(20):</span></span><br><span class="line"><span class="comment">#     plt.subplot(5， 4， i+1)</span></span><br><span class="line"><span class="comment">#     plt.tight_layout()</span></span><br><span class="line"><span class="comment">#     plt.imshow(image[i]， cmap='Greys')</span></span><br><span class="line"><span class="comment">#     plt.title("Label: &#123;&#125;".format(text[i]))</span></span><br><span class="line"><span class="comment">#     plt.xticks([])</span></span><br><span class="line"><span class="comment">#     plt.yticks([])</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据规范化</span></span><br><span class="line">image = image/<span class="number">255</span></span><br><span class="line"><span class="comment"># 适配keras图像数据格式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fit_keras_channels</span><span class="params">(batch， rows=CAPTCHA_HEIGHT， cols=CAPTCHA_WIDTH)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> K.image_data_format() == <span class="string">'channels_first'</span>:</span><br><span class="line">        batch = batch.reshape(batch.shape[<span class="number">0</span>]， <span class="number">1</span>， rows， cols)</span><br><span class="line">        input_shape = (<span class="number">1</span>， rows， cols)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        batch = batch.reshape(batch.shape[<span class="number">0</span>]， rows， cols， <span class="number">1</span>)</span><br><span class="line">        input_shape = (rows， cols， <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> batch， input_shape</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">image， input_shape = fit_keras_channels(image)</span><br><span class="line"><span class="comment"># print(image.shape)  # (100， 60， 160， 1)</span></span><br><span class="line"><span class="comment"># print(input_shape)  # (60， 160， 1)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对验证码中每个字符进行 one-hot 编码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">text2vec</span><span class="params">(text， length=CAPTCHA_LEN， charset=CAPTCHA_CHARSET)</span>:</span></span><br><span class="line">    text_len = len(text)</span><br><span class="line">    <span class="comment"># 验证码长度校验</span></span><br><span class="line">    <span class="keyword">if</span> text_len != length:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(</span><br><span class="line">            <span class="string">'Error: length of captcha should be &#123;&#125;， but got &#123;&#125;'</span>.format(length， text_len))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成一个形如（CAPTCHA_LEN*CAPTHA_CHARSET，) 的一维向量</span></span><br><span class="line">    <span class="comment"># 例如，4个纯数字的验证码生成形如(4*10，)的一维向量</span></span><br><span class="line">    vec = np.zeros(length * len(charset))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">        <span class="comment"># One-hot 编码验证码中的每个数字</span></span><br><span class="line">        <span class="comment"># 每个字符的热码 = 索引 + 偏移量</span></span><br><span class="line">        vec[charset.index(text[i]) + i*len(charset)] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> vec</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">text = list(text)</span><br><span class="line">vec = [<span class="literal">None</span>]*len(text)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(vec)):</span><br><span class="line">    vec[i] = text2vec(text[i])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将验证码向量解码为对应字符</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vec2text</span><span class="params">(vector)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(vector， np.ndarray):</span><br><span class="line">        vector = np.asarray(vector)</span><br><span class="line">    vector = np.reshape(vector， [CAPTCHA_LEN， <span class="number">-1</span>])</span><br><span class="line">    text = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> vector:</span><br><span class="line">        text += CAPTCHA_CHARSET[np.argmax(item)]</span><br><span class="line">    <span class="keyword">return</span> text</span><br></pre></td></tr></table></figure><p>最后生成的数字灰度图效果如下:<br><img alt="验证码2" src="https://i.loli.net/2019/12/06/c4yFqEJgYQPSaGZ.jpg" width="40%"></p><p><strong>第3步：训练模型</strong></p><p>具体步骤(前6步准备工作已经做过了，主要是要进行7-15步的模型训练过程，16-17步是做对应的保存工作):</p><ol><li>引入第三方包</li><li>定义超参数和字符集</li><li>将 RGB 验证码图像转为灰度图</li><li>对验证码中每个字符进行 one-hot 编码</li><li>将验证码向量解码为对应字符</li><li>适配 Keras 图像数据格式</li><li>读取训练集</li><li>处理训练集图像</li><li>处理训练集标签</li><li>读取测试集，处理对应图像和标签</li><li>创建验证码识别模型</li><li>查看模型摘要</li><li>模型可视化</li><li>训练模型</li><li>预测样例</li><li>保存模型</li><li>保存训练过程记录</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> backend <span class="keyword">as</span> K</span><br><span class="line"><span class="keyword">from</span> keras.utils.vis_utils <span class="keyword">import</span> plot_model</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NUMBER = [<span class="string">'0'</span>， <span class="string">'1'</span>， <span class="string">'2'</span>， <span class="string">'3'</span>， <span class="string">'4'</span>， <span class="string">'5'</span>， <span class="string">'6'</span>， <span class="string">'7'</span>， <span class="string">'8'</span>， <span class="string">'9'</span>]</span><br><span class="line">LOWERCASE = [<span class="string">'a'</span>， <span class="string">'b'</span>， <span class="string">'c'</span>， <span class="string">'d'</span>， <span class="string">'e'</span>， <span class="string">'f'</span>， <span class="string">'g'</span>， <span class="string">'h'</span>， <span class="string">'i'</span>， <span class="string">'j'</span>， <span class="string">'k'</span>， <span class="string">'l'</span>， <span class="string">'m'</span>， <span class="string">'n'</span>， <span class="string">'o'</span>， <span class="string">'p'</span>， <span class="string">'q'</span>， <span class="string">'r'</span>， <span class="string">'s'</span>， <span class="string">'t'</span>， <span class="string">'u'</span>，</span><br><span class="line">             <span class="string">'v'</span>， <span class="string">'w'</span>， <span class="string">'x'</span>， <span class="string">'y'</span>， <span class="string">'z'</span>]</span><br><span class="line">UPPERCASE = [<span class="string">'A'</span>， <span class="string">'B'</span>， <span class="string">'C'</span>， <span class="string">'D'</span>， <span class="string">'E'</span>， <span class="string">'F'</span>， <span class="string">'G'</span>， <span class="string">'H'</span>， <span class="string">'I'</span>， <span class="string">'J'</span>， <span class="string">'K'</span>， <span class="string">'L'</span>， <span class="string">'M'</span>， <span class="string">'N'</span>， <span class="string">'O'</span>， <span class="string">'P'</span>， <span class="string">'Q'</span>， <span class="string">'R'</span>， <span class="string">'S'</span>， <span class="string">'T'</span>， <span class="string">'U'</span>，</span><br><span class="line">             <span class="string">'V'</span>， <span class="string">'W'</span>， <span class="string">'X'</span>， <span class="string">'Y'</span>， <span class="string">'Z'</span>]</span><br><span class="line"></span><br><span class="line">CAPTCHA_CHARSET = NUMBER   <span class="comment"># 验证码字符集</span></span><br><span class="line">CAPTCHA_LEN = <span class="number">4</span>            <span class="comment"># 验证码长度</span></span><br><span class="line">CAPTCHA_HEIGHT = <span class="number">60</span>        <span class="comment"># 验证码高度</span></span><br><span class="line">CAPTCHA_WIDTH = <span class="number">160</span>        <span class="comment"># 验证码宽度</span></span><br><span class="line"></span><br><span class="line">TRAIN_DATA_DIR = <span class="string">'./train-data/'</span>  <span class="comment"># 验证码数据集目录</span></span><br><span class="line">TEST_DATA_DIR = <span class="string">'./test-data/'</span></span><br><span class="line"></span><br><span class="line">BATCH_SIZE = <span class="number">100</span></span><br><span class="line">EPOCHS = <span class="number">10</span></span><br><span class="line">OPT = <span class="string">'adam'</span></span><br><span class="line">LOSS = <span class="string">'binary_crossentropy'</span></span><br><span class="line"></span><br><span class="line">MODEL_DIR = <span class="string">'./model/train_demo/'</span></span><br><span class="line">MODEL_FORMAT = <span class="string">'.h5'</span></span><br><span class="line">HISTORY_DIR = <span class="string">'./history/train_demo/'</span></span><br><span class="line">HISTORY_FORMAT = <span class="string">'.history'</span></span><br><span class="line"></span><br><span class="line">filename_str = <span class="string">"&#123;&#125;captcha_&#123;&#125;_&#123;&#125;_bs_&#123;&#125;_epochs_&#123;&#125;&#123;&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型网络结构文件</span></span><br><span class="line">MODEL_VIS_FILE = <span class="string">'captcha_classfication'</span> + <span class="string">'.png'</span></span><br><span class="line"><span class="comment"># 模型文件</span></span><br><span class="line">MODEL_FILE = filename_str.format(</span><br><span class="line">    MODEL_DIR， OPT， LOSS， str(BATCH_SIZE)， str(EPOCHS)， MODEL_FORMAT)</span><br><span class="line"><span class="comment"># 训练记录文件</span></span><br><span class="line">HISTORY_FILE = filename_str.format(</span><br><span class="line">    HISTORY_DIR， OPT， LOSS， str(BATCH_SIZE)， str(EPOCHS)， HISTORY_FORMAT)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rgb2gray</span><span class="params">(img)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.dot(img[...， :<span class="number">3</span>]， [<span class="number">0.299</span>， <span class="number">0.587</span>， <span class="number">0.114</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对验证码中每个字符进行 one-hot 编码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">text2vec</span><span class="params">(text， length=CAPTCHA_LEN， charset=CAPTCHA_CHARSET)</span>:</span></span><br><span class="line">    text_len = len(text)</span><br><span class="line">    <span class="comment"># 验证码长度校验</span></span><br><span class="line">    <span class="keyword">if</span> text_len != length:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(</span><br><span class="line">            <span class="string">'Error: length of captcha should be &#123;&#125;， but got &#123;&#125;'</span>.format(length， text_len))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成一个形如（CAPTCHA_LEN*CAPTHA_CHARSET，) 的一维向量</span></span><br><span class="line">    <span class="comment"># 例如，4个纯数字的验证码生成形如(4*10，)的一维向量</span></span><br><span class="line">    vec = np.zeros(length * len(charset))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">        <span class="comment"># One-hot 编码验证码中的每个数字</span></span><br><span class="line">        <span class="comment"># 每个字符的热码 = 索引 + 偏移量</span></span><br><span class="line">        vec[charset.index(text[i]) + i*len(charset)] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> vec</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将验证码向量解码为对应字符</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vec2text</span><span class="params">(vector)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(vector， np.ndarray):</span><br><span class="line">        vector = np.asarray(vector)</span><br><span class="line">    vector = np.reshape(vector， [CAPTCHA_LEN， <span class="number">-1</span>])</span><br><span class="line">    text = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> vector:</span><br><span class="line">        text += CAPTCHA_CHARSET[np.argmax(item)]</span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fit_keras_channels</span><span class="params">(batch， rows=CAPTCHA_HEIGHT， cols=CAPTCHA_WIDTH)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> K.image_data_format() == <span class="string">'channels_first'</span>:</span><br><span class="line">        batch = batch.reshape(batch.shape[<span class="number">0</span>]， <span class="number">1</span>， rows， cols)</span><br><span class="line">        input_shape = (<span class="number">1</span>， rows， cols)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        batch = batch.reshape(batch.shape[<span class="number">0</span>]， rows， cols， <span class="number">1</span>)</span><br><span class="line">        input_shape = (rows， cols， <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> batch， input_shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取训练集</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">X_train = []</span><br><span class="line">Y_train = []</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> glob.glob(TRAIN_DATA_DIR + <span class="string">'*.png'</span>):</span><br><span class="line">    X_train.append(np.array(Image.open(filename)))</span><br><span class="line">    Y_train.append(filename.lstrip(TRAIN_DATA_DIR).rstrip(<span class="string">'.png'</span>)[<span class="number">1</span>:])</span><br><span class="line">X_train = np.array(X_train， dtype=np.float32)</span><br><span class="line">X_train = rgb2gray(X_train)</span><br><span class="line">X_train = X_train / <span class="number">255</span></span><br><span class="line">X_train， input_shape = fit_keras_channels(X_train)</span><br><span class="line"><span class="comment"># (3948， 60， 160， 1) &lt;class 'numpy.ndarray'&gt;</span></span><br><span class="line">print(X_train.shape， type(X_train))</span><br><span class="line">print(input_shape)  <span class="comment"># (60， 160， 1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理训练集标签</span></span><br><span class="line">Y_train = list(Y_train)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(Y_train)):</span><br><span class="line">    Y_train[i] = text2vec(Y_train[i])</span><br><span class="line">Y_train = np.asarray(Y_train)</span><br><span class="line">print(Y_train.shape， type(Y_train))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取测试集，处理对应图像和标签</span></span><br><span class="line">X_test = []</span><br><span class="line">Y_test = []</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> glob.glob(TEST_DATA_DIR + <span class="string">'*.png'</span>):</span><br><span class="line">    X_test.append(np.array(Image.open(filename)))</span><br><span class="line">    Y_test.append(filename.lstrip(TEST_DATA_DIR).rstrip(<span class="string">'.png'</span>)[<span class="number">1</span>:])</span><br><span class="line"><span class="comment"># list -&gt; rgb -&gt; gray -&gt; normalization -&gt; fit keras</span></span><br><span class="line">X_test = np.array(X_test， dtype=np.float32)</span><br><span class="line">X_test = rgb2gray(X_test)</span><br><span class="line">X_test = X_test / <span class="number">255</span></span><br><span class="line">X_test， _ = fit_keras_channels(X_test)</span><br><span class="line">Y_test = list(Y_test)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(Y_test)):</span><br><span class="line">    Y_test[i] = text2vec(Y_test[i])</span><br><span class="line">Y_test = np.asarray(Y_test)</span><br><span class="line">print(X_test.shape， type(X_test))</span><br><span class="line">print(Y_test.shape， type(Y_test))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建验证码识别模型</span></span><br><span class="line">inputs = Input(shape=input_shape， name=<span class="string">"inputs"</span>)</span><br><span class="line"><span class="comment"># 第1层卷积</span></span><br><span class="line">conv1 = Conv2D(<span class="number">32</span>， (<span class="number">3</span>， <span class="number">3</span>)， name=<span class="string">"conv1"</span>)(inputs)</span><br><span class="line">relu1 = Activation(<span class="string">'relu'</span>， name=<span class="string">"relu1"</span>)(conv1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第2层卷积</span></span><br><span class="line">conv2 = Conv2D(<span class="number">32</span>， (<span class="number">3</span>， <span class="number">3</span>)， name=<span class="string">"conv2"</span>)(relu1)</span><br><span class="line">relu2 = Activation(<span class="string">'relu'</span>， name=<span class="string">"relu2"</span>)(conv2)</span><br><span class="line">pool2 = MaxPooling2D(pool_size=(<span class="number">2</span>， <span class="number">2</span>)， padding=<span class="string">'same'</span>， name=<span class="string">"pool2"</span>)(relu2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第3层卷积</span></span><br><span class="line">conv3 = Conv2D(<span class="number">64</span>， (<span class="number">3</span>， <span class="number">3</span>)， name=<span class="string">"conv3"</span>)(pool2)</span><br><span class="line">relu3 = Activation(<span class="string">'relu'</span>， name=<span class="string">"relu3"</span>)(conv3)</span><br><span class="line">pool3 = MaxPooling2D(pool_size=(<span class="number">2</span>， <span class="number">2</span>)， padding=<span class="string">'same'</span>， name=<span class="string">"pool3"</span>)(relu3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 Pooled feature map 摊平后输入全连接网络</span></span><br><span class="line">x = Flatten()(pool3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dropout</span></span><br><span class="line">x = Dropout(<span class="number">0.25</span>)(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4个全连接层分别做10分类，分别对应4个字符。</span></span><br><span class="line">x = [Dense(<span class="number">10</span>， activation=<span class="string">'softmax'</span>， name=<span class="string">'fc%d'</span> % (i+<span class="number">1</span>))(x) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4个字符向量拼接在一起，与标签向量形式一致，作为模型输出。</span></span><br><span class="line">outs = Concatenate()(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义模型的输入与输出</span></span><br><span class="line">model = Model(inputs=inputs， outputs=outs)</span><br><span class="line">model.compile(optimizer=OPT， loss=LOSS， metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line"></span><br><span class="line">model.summary()</span><br><span class="line">plot_model(model， to_file=MODEL_VIS_FILE， show_shapes=<span class="literal">True</span>)</span><br><span class="line">history = model.fit(X_train，</span><br><span class="line">                    Y_train，</span><br><span class="line">                    batch_size=BATCH_SIZE，</span><br><span class="line">                    epochs=EPOCHS，</span><br><span class="line">                    verbose=<span class="number">2</span>，</span><br><span class="line">                    validation_data=(X_test， Y_test))</span><br><span class="line"></span><br><span class="line">print(vec2text(Y_test[<span class="number">9</span>]))</span><br><span class="line">yy = model.predict(X_test[<span class="number">9</span>].reshape(<span class="number">1</span>， <span class="number">60</span>， <span class="number">160</span>， <span class="number">1</span>))</span><br><span class="line">print(vec2text(yy))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> tf.io.gfile.exists(MODEL_DIR):</span><br><span class="line">    tf.io.gfile.makedirs(MODEL_DIR)</span><br><span class="line">model.save(MODEL_DIR)</span><br><span class="line">print(<span class="string">'Saved trained model at %s '</span> % MODEL_FILE)</span><br></pre></td></tr></table></figure><p>训练模型得到的参数如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Train on 3956 samples， validate on 954 samples</span><br><span class="line">Epoch 1/10</span><br><span class="line"> - 149s - loss: 0.3270 - acc: 0.9000 - val_loss: 0.3247 - val_acc: 0.9000</span><br><span class="line">Epoch 2/10</span><br><span class="line"> - 122s - loss: 0.3229 - acc: 0.9000 - val_loss: 0.3195 - val_acc: 0.9000</span><br><span class="line">Epoch 3/10</span><br><span class="line"> - 114s - loss: 0.2987 - acc: 0.9004 - val_loss: 0.2726 - val_acc: 0.9028</span><br><span class="line">Epoch 4/10</span><br><span class="line"> - 106s - loss: 0.2257 - acc: 0.9164 - val_loss: 0.2303 - val_acc: 0.9171</span><br><span class="line">Epoch 5/10</span><br><span class="line"> - 103s - loss: 0.1799 - acc: 0.9337 - val_loss: 0.2171 - val_acc: 0.9209</span><br><span class="line">Epoch 6/10</span><br><span class="line"> - 113s - loss: 0.1523 - acc: 0.9447 - val_loss: 0.2062 - val_acc: 0.9254</span><br><span class="line">Epoch 7/10</span><br><span class="line"> - 112s - loss: 0.1383 - acc: 0.9498 - val_loss: 0.2048 - val_acc: 0.9260</span><br><span class="line">Epoch 8/10</span><br><span class="line"> - 127s - loss: 0.1251 - acc: 0.9550 - val_loss: 0.2052 - val_acc: 0.9260</span><br><span class="line">Epoch 9/10</span><br><span class="line"> - 161s - loss: 0.1144 - acc: 0.9587 - val_loss: 0.2013 - val_acc: 0.9285</span><br><span class="line">Epoch 10/10</span><br><span class="line"> - 159s - loss: 0.1063 - acc: 0.9618 - val_loss: 0.2045 - val_acc: 0.9268</span><br></pre></td></tr></table></figure><h4 id="实现词云"><a href="#实现词云" class="headerlink" title="实现词云"></a>实现词云</h4><p>要实现词云效果，首先需要安装wordcloud库，<code>pip install wordcloud</code>进行安装即可。<br><strong>1. 英文词云</strong></p><p>实现基本的英文词云:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文本</span></span><br><span class="line">text = open(<span class="string">'./text/constitution.txt'</span>).read()</span><br><span class="line"><span class="comment"># 生成对象</span></span><br><span class="line">wc = WordCloud().generate(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示词云</span></span><br><span class="line">plt.imshow(wc， interpolation=<span class="string">'bilinear'</span>)</span><br><span class="line">plt.axis(<span class="string">'off'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存到文件</span></span><br><span class="line">wc.to_file(<span class="string">'./img/word1.png'</span>)</span><br></pre></td></tr></table></figure><p>效果展示:<br><img alt="word1" src="https://i.loli.net/2019/12/05/JH9ISij5pf3s4c7.png" width="40%"><br><strong>2. 中文词云</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文本</span></span><br><span class="line">text = open(<span class="string">'./text/xyj.txt'</span>，encoding=<span class="string">'UTF-8'</span>).read()</span><br><span class="line"><span class="comment"># 生成对象</span></span><br><span class="line">wc = WordCloud(font_path=<span class="string">'Hiragino.ttf'</span>， width=<span class="number">800</span>， height=<span class="number">600</span>， mode=<span class="string">'RGBA'</span>， background_color=<span class="literal">None</span>).generate(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示词云</span></span><br><span class="line">plt.imshow(wc， interpolation=<span class="string">'bilinear'</span>)</span><br><span class="line">plt.axis(<span class="string">'off'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存到文件</span></span><br><span class="line">wc.to_file(<span class="string">'./img/word2.png'</span>)</span><br></pre></td></tr></table></figure><p>其中读取文件使用<code>text = open(&#39;xxx.txt&#39;，encoding=&#39;UTF-8&#39;).read()</code>，注意这里要写<code>encoding=&#39;UTF-8&#39;</code>，否则无法正确读取内容。要额外引入字体文件，如上例引入了<code>Hiragino.ttf</code>字体。最后生成的效果如下，但是有个问题就是每个词并不是按照中文意思进行断开的，无实际意义，接下来我们处理中文分词问题。</p><img alt="word2" src="https://i.loli.net/2019/12/05/uULNjfAvbi1Qzog.png" width="40%"><p><strong>3. 中文词云+分词</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文本</span></span><br><span class="line">text = open(<span class="string">'./text/xyj.txt'</span>，encoding=<span class="string">'UTF-8'</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中文分词</span></span><br><span class="line">text=<span class="string">' '</span>.join(jieba.cut(text))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成对象</span></span><br><span class="line">wc = WordCloud(font_path=<span class="string">'Hiragino.ttf'</span>， width=<span class="number">800</span>， height=<span class="number">600</span>， mode=<span class="string">'RGBA'</span>， background_color=<span class="literal">None</span>).generate(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示词云</span></span><br><span class="line">plt.imshow(wc， interpolation=<span class="string">'bilinear'</span>)</span><br><span class="line">plt.axis(<span class="string">'off'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存到文件</span></span><br><span class="line">wc.to_file(<span class="string">'./img/word3.png'</span>)</span><br></pre></td></tr></table></figure><p>因为英文文章中每个单词都是使用空格隔开的，因此不需要手动分词，而中文文章每个词是连在一起的，需要引入第三方包jieba进行中文分词操作。核心代码是<code>text=&#39; &#39;.join(jieba.cut(text))</code>，这样可以使得每个独立的词用空格隔开。最后生成的效果如下:</p><img alt="word3" src="https://i.loli.net/2019/12/05/6cnprdOQqC1Hg9y.png" width="40%"><p><strong>4. 中文词云+分词+黑白蒙版</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文本</span></span><br><span class="line">text = open(<span class="string">'./text/xyj.txt'</span>，encoding=<span class="string">'UTF-8'</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中文分词</span></span><br><span class="line">text=<span class="string">' '</span>.join(jieba.cut(text))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用黑白蒙版</span></span><br><span class="line">mask=np.array(Image.open(<span class="string">'./mask/black_mask.png'</span>))</span><br><span class="line">wc = WordCloud(mask=mask，font_path=<span class="string">'Hiragino.ttf'</span>， width=<span class="number">800</span>， height=<span class="number">600</span>， mode=<span class="string">'RGBA'</span>， background_color=<span class="literal">None</span>).generate(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示词云</span></span><br><span class="line">plt.imshow(wc， interpolation=<span class="string">'bilinear'</span>)</span><br><span class="line">plt.axis(<span class="string">'off'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存到文件</span></span><br><span class="line">wc.to_file(<span class="string">'./img/word4.png'</span>)</span><br></pre></td></tr></table></figure><p>这里使用了黑白图片作为蒙版，WordCloud()函数中传入mask参数，则可以启用对应的蒙版，这样生成的词云会与蒙版的图形相同。效果如下:</p><img alt="black_mask" src="https://i.loli.net/2019/12/05/tL2DrkwCBfImVjX.png" width="40%"><img alt="word4" src="https://i.loli.net/2019/12/05/rtBYgubj2FHWRax.png" width="40%"><p><strong>5. 中文词云+分词+彩色蒙版</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud，ImageColorGenerator</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文本</span></span><br><span class="line">text = open(<span class="string">'./text/xyj.txt'</span>，encoding=<span class="string">'UTF-8'</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中文分词</span></span><br><span class="line">text=<span class="string">' '</span>.join(jieba.cut(text))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用彩色蒙版</span></span><br><span class="line">mask=np.array(Image.open(<span class="string">'./mask/color_mask.png'</span>))</span><br><span class="line">wc = WordCloud(mask=mask，font_path=<span class="string">'Hiragino.ttf'</span>， width=<span class="number">800</span>， height=<span class="number">600</span>， mode=<span class="string">'RGBA'</span>， background_color=<span class="literal">None</span>).generate(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从图片中生成颜色</span></span><br><span class="line">image_colors=ImageColorGenerator(mask)</span><br><span class="line">wc.recolor(color_func=image_colors)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示词云</span></span><br><span class="line">plt.imshow(wc， interpolation=<span class="string">'bilinear'</span>)</span><br><span class="line">plt.axis(<span class="string">'off'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存到文件</span></span><br><span class="line">wc.to_file(<span class="string">'./img/word5.png'</span>)</span><br></pre></td></tr></table></figure><p>这里使用了彩色图片作为蒙版，从<code>wordcloud</code>引入<code>ImageColorGenerator</code>函数，从图片中生成颜色，这样生成的词云颜色和蒙版的颜色是相同的（每个部分的颜色都是大致对应的），效果如下:</p><img alt="color_mask" src="https://i.loli.net/2019/12/05/CPoBbah9xpc8vQw.png" width="40%"><img alt="word5" src="https://i.loli.net/2019/12/05/gM61KJWk2CfFbtP.png" width="40%"><p><strong>6. 中文词云+分词+彩色蒙版+自定义颜色</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文本</span></span><br><span class="line">text = open(<span class="string">'./text/xyj.txt'</span>，encoding=<span class="string">'UTF-8'</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中文分词</span></span><br><span class="line">text=<span class="string">' '</span>.join(jieba.cut(text))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义颜色函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_color</span><span class="params">(word， font_size， position， orientation， font_path， random_state)</span>:</span></span><br><span class="line">s = <span class="string">'hsl(0， %d%%， %d%%)'</span> % (random.randint(<span class="number">60</span>， <span class="number">80</span>)， random.randint(<span class="number">60</span>， <span class="number">80</span>))</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用彩色蒙版</span></span><br><span class="line">mask=np.array(Image.open(<span class="string">'./mask/color_mask.png'</span>))</span><br><span class="line">wc = WordCloud(color_func=random_color，mask=mask，font_path=<span class="string">'Hiragino.ttf'</span>， width=<span class="number">800</span>， height=<span class="number">600</span>， mode=<span class="string">'RGBA'</span>， background_color=<span class="literal">None</span>).generate(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示词云</span></span><br><span class="line">plt.imshow(wc， interpolation=<span class="string">'bilinear'</span>)</span><br><span class="line">plt.axis(<span class="string">'off'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存到文件</span></span><br><span class="line">wc.to_file(<span class="string">'./img/word6.png'</span>)</span><br></pre></td></tr></table></figure><p>为了实现为词云自定义颜色，我们可以单独实现一个上色函数random_color，在WordCloud()函数中传入color_func参数即可，效果如下:<br><img alt="word6" src="https://i.loli.net/2019/12/05/NR35QBMyviqaPLE.png" width="40%"></p><p><strong>7. 中文词云+分词+彩色蒙版+关键词权重</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud，ImageColorGenerator</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> jieba.analyse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文本</span></span><br><span class="line">text = open(<span class="string">'./text/xyj.txt'</span>，encoding=<span class="string">'UTF-8'</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取关键词和权重</span></span><br><span class="line">freq=jieba.analyse.extract_tags(text，topK=<span class="number">200</span>，withWeight=<span class="literal">True</span>)</span><br><span class="line">freq = &#123;i[<span class="number">0</span>]: i[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> freq&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中文分词</span></span><br><span class="line">text=<span class="string">' '</span>.join(jieba.cut(text))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用彩色蒙版</span></span><br><span class="line">mask=np.array(Image.open(<span class="string">'./mask/color_mask.png'</span>))</span><br><span class="line">wc = WordCloud(mask=mask，font_path=<span class="string">'Hiragino.ttf'</span>， width=<span class="number">800</span>， height=<span class="number">600</span>， mode=<span class="string">'RGBA'</span>， background_color=<span class="literal">None</span>).generate_from_frequencies(freq)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从图片中生成颜色</span></span><br><span class="line">image_colors=ImageColorGenerator(mask)</span><br><span class="line">wc.recolor(color_func=image_colors)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示词云</span></span><br><span class="line">plt.imshow(wc， interpolation=<span class="string">'bilinear'</span>)</span><br><span class="line">plt.axis(<span class="string">'off'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存到文件</span></span><br><span class="line">wc.to_file(<span class="string">'./img/word7.png'</span>)</span><br></pre></td></tr></table></figure><p>为了在词云中凸显词语出现的频率，我们可以采用根据频率上色的方法，频率出现越高则着色越深。先提取关键词和权重，再通过<code>WordCloud().generate_from_frequencies(freq)</code>生成词云即可，注意这里的freq是词与频次关系的字典。最后生成的效果如下:<br><img alt="word7" src="https://i.loli.net/2019/12/05/3QJc5DhoREsryuz.png" width="40%"></p><h4 id="自编码器图像去噪AE"><a href="#自编码器图像去噪AE" class="headerlink" title="自编码器图像去噪AE"></a>自编码器图像去噪AE</h4><p>自编码器深度学习中的一类无监督学习模型，由encoder和decoder两个部分组成</p><p>自编码器主要是一种思想，encoder和decoder可以由全连接层\CNN\RNN等模型实现</p><p>自编码器Auto-Encoder的原理：<br><img alt="自编码3" src="https://i.loli.net/2019/12/06/7Kb6U1MCRWBnhto.jpg" width="60%"></p><p><strong>第1步：完成模型训练，并保存模型</strong></p><p>具体步骤:</p><ol><li>获取训练集和测试集</li><li>随机添加噪声点</li><li>可视化噪声图</li><li>构建模型</li><li>训练模型</li><li>保存模型</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> keras.datasets <span class="keyword">import</span> mnist</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Input， Dense， Conv2D， MaxPooling2D， UpSampling2D</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Model， load_model</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取训练集和测试集</span></span><br><span class="line">(x_train， _)， (x_test， _) = mnist.load_data()</span><br><span class="line">x_train = x_train.astype(<span class="string">'float32'</span>) / <span class="number">255.</span></span><br><span class="line">x_test = x_test.astype(<span class="string">'float32'</span>) / <span class="number">255.</span></span><br><span class="line">x_train = np.reshape(x_train， (len(x_train)， <span class="number">28</span>， <span class="number">28</span>， <span class="number">1</span>))</span><br><span class="line">x_test = np.reshape(x_test， (len(x_test)， <span class="number">28</span>， <span class="number">28</span>， <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机添加噪声点</span></span><br><span class="line">noise_factor = <span class="number">0.5</span></span><br><span class="line">x_train_noisy = x_train + noise_factor * np.random.normal(loc=<span class="number">0.0</span>， scale=<span class="number">1.0</span>， size=x_train.shape) </span><br><span class="line">x_test_noisy = x_test + noise_factor * np.random.normal(loc=<span class="number">0.0</span>， scale=<span class="number">1.0</span>， size=x_test.shape) </span><br><span class="line">x_train_noisy = np.clip(x_train_noisy， <span class="number">0.</span>， <span class="number">1.</span>)</span><br><span class="line">x_test_noisy = np.clip(x_test_noisy， <span class="number">0.</span>， <span class="number">1.</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化噪声图</span></span><br><span class="line">n = <span class="number">10</span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>， <span class="number">2</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    ax = plt.subplot(<span class="number">1</span>， n， i + <span class="number">1</span>)</span><br><span class="line">    plt.imshow(x_test_noisy[i].reshape(<span class="number">28</span>， <span class="number">28</span>))</span><br><span class="line">    plt.gray()</span><br><span class="line">    ax.get_xaxis().set_visible(<span class="literal">False</span>)</span><br><span class="line">    ax.get_yaxis().set_visible(<span class="literal">False</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建模型</span></span><br><span class="line">input_img = Input(shape=(<span class="number">28</span>， <span class="number">28</span>， <span class="number">1</span>，)) <span class="comment"># N * 28 * 28 * 1</span></span><br><span class="line">x = Conv2D(<span class="number">32</span>， (<span class="number">3</span>， <span class="number">3</span>)， padding=<span class="string">'same'</span>， activation=<span class="string">'relu'</span>)(input_img) <span class="comment"># 28 * 28 * 32</span></span><br><span class="line">x = MaxPooling2D((<span class="number">2</span>， <span class="number">2</span>)， padding=<span class="string">'same'</span>)(x) <span class="comment"># 14 * 14 * 32</span></span><br><span class="line">x = Conv2D(<span class="number">32</span>， (<span class="number">3</span>， <span class="number">3</span>)， padding=<span class="string">'same'</span>， activation=<span class="string">'relu'</span>)(x) <span class="comment"># 14 * 14 * 32</span></span><br><span class="line">encoded = MaxPooling2D((<span class="number">2</span>， <span class="number">2</span>)， padding=<span class="string">'same'</span>)(x) <span class="comment"># 7 * 7 * 32</span></span><br><span class="line">x = Conv2D(<span class="number">32</span>， (<span class="number">3</span>， <span class="number">3</span>)， padding=<span class="string">'same'</span>， activation=<span class="string">'relu'</span>)(encoded) <span class="comment"># 7 * 7 * 32</span></span><br><span class="line">x = UpSampling2D((<span class="number">2</span>， <span class="number">2</span>))(x) <span class="comment"># 14 * 14 * 32</span></span><br><span class="line">x = Conv2D(<span class="number">32</span>， (<span class="number">3</span>， <span class="number">3</span>)， padding=<span class="string">'same'</span>， activation=<span class="string">'relu'</span>)(x) <span class="comment"># 14 * 14 * 32</span></span><br><span class="line">x = UpSampling2D((<span class="number">2</span>， <span class="number">2</span>))(x) <span class="comment"># 28 * 28 * 32</span></span><br><span class="line">decoded = Conv2D(<span class="number">1</span>， (<span class="number">3</span>， <span class="number">3</span>)， padding=<span class="string">'same'</span>， activation=<span class="string">'sigmoid'</span>)(x) <span class="comment"># 28 * 28 * 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">autoencoder = Model(input_img， decoded)</span><br><span class="line">autoencoder.compile(optimizer=<span class="string">'adadelta'</span>， loss=<span class="string">'binary_crossentropy'</span>)</span><br><span class="line">autoencoder.fit(x_train_noisy， x_train，</span><br><span class="line">                epochs=<span class="number">100</span>，</span><br><span class="line">                batch_size=<span class="number">128</span>，</span><br><span class="line">                shuffle=<span class="literal">True</span>，</span><br><span class="line">                validation_data=(x_test_noisy， x_test))</span><br><span class="line"><span class="comment"># 保存模型</span></span><br><span class="line">autoencoder.save(<span class="string">'autoencoder.h5'</span>)</span><br></pre></td></tr></table></figure><p>可视化噪声图片效果如下:<br><img alt="自编码1" src="https://i.loli.net/2019/12/06/jF5SXZAWdVzf1HM.jpg" width="60%"></p><p><strong>第2步：加载训练好的模型，用来图像去噪</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.datasets <span class="keyword">import</span> mnist</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Model，load_model</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载训练好了的模型</span></span><br><span class="line">autoencoder = load_model(<span class="string">'autoencoder.h5'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取训练集和测试集</span></span><br><span class="line">(x_train， _)， (x_test， _) = mnist.load_data()</span><br><span class="line">x_train = x_train.astype(<span class="string">'float32'</span>) / <span class="number">255.</span></span><br><span class="line">x_test = x_test.astype(<span class="string">'float32'</span>) / <span class="number">255.</span></span><br><span class="line">x_train = np.reshape(x_train， (len(x_train)， <span class="number">28</span>， <span class="number">28</span>， <span class="number">1</span>))</span><br><span class="line">x_test = np.reshape(x_test， (len(x_test)， <span class="number">28</span>， <span class="number">28</span>， <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机添加噪声点</span></span><br><span class="line">noise_factor = <span class="number">0.5</span></span><br><span class="line">x_train_noisy = x_train + noise_factor * np.random.normal(loc=<span class="number">0.0</span>， scale=<span class="number">1.0</span>， size=x_train.shape) </span><br><span class="line">x_test_noisy = x_test + noise_factor * np.random.normal(loc=<span class="number">0.0</span>， scale=<span class="number">1.0</span>， size=x_test.shape) </span><br><span class="line">x_train_noisy = np.clip(x_train_noisy， <span class="number">0.</span>， <span class="number">1.</span>)</span><br><span class="line">x_test_noisy = np.clip(x_test_noisy， <span class="number">0.</span>， <span class="number">1.</span>)</span><br><span class="line"></span><br><span class="line">decoded_imgs = autoencoder.predict(x_test_noisy)</span><br><span class="line">n = <span class="number">10</span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>， <span class="number">4</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    <span class="comment"># 展示原始噪声图</span></span><br><span class="line">    ax = plt.subplot(<span class="number">2</span>， n， i + <span class="number">1</span>)</span><br><span class="line">    plt.imshow(x_test_noisy[i].reshape(<span class="number">28</span>， <span class="number">28</span>))</span><br><span class="line">    plt.gray()</span><br><span class="line">    ax.get_xaxis().set_visible(<span class="literal">False</span>)</span><br><span class="line">    ax.get_yaxis().set_visible(<span class="literal">False</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 展示去噪后的图片</span></span><br><span class="line">    ax = plt.subplot(<span class="number">2</span>， n， i + <span class="number">1</span> + n)</span><br><span class="line">    plt.imshow(decoded_imgs[i].reshape(<span class="number">28</span>， <span class="number">28</span>))</span><br><span class="line">    plt.gray()</span><br><span class="line">    ax.get_xaxis().set_visible(<span class="literal">False</span>)</span><br><span class="line">    ax.get_yaxis().set_visible(<span class="literal">False</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>原始噪声图 vs 去噪后的图片 的效果如下:<br><img alt="自编码2" src="https://i.loli.net/2019/12/06/Nl3fRZ9b7viKWPV.jpg" width="60%"></p><h4 id="变分自编码器VAE"><a href="#变分自编码器VAE" class="headerlink" title="变分自编码器VAE"></a>变分自编码器VAE</h4><p>我们经常会有这样的需求:根据很多个样本，学会生成新的样本</p><p>以mnist为例，在看过成百上千张图片后，让计算机能够模仿生成一些类似的图片，这些图片在原始数据中并不存在，但是与原来图片看起来相似</p><p>简言之就是需要学会数据x的分布，根据数据分布产生新样本</p><p><strong>VAE(变分自编码器)和AE(自编码器)的区别:</strong></p><ol><li>AE中隐层表示的分布未知，而VAE中隐层变量服从高斯分布</li><li>AE中学习的是encoder和decoder，VAE中还学习隐变量的分布，包括高斯分布的均值和方差</li><li>AE只能从1个x得到对应的重构x</li><li>VAE可以产生新的z，从而得到新的x，即生成新的样本(VAE是一种常见的生成式模型)</li></ol><p>可以使用<code>keras.datasets</code>中的<code>mnist</code>或<code>fashion_mnist</code>进行测试:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Input， Dense， Lambda</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Model</span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> backend <span class="keyword">as</span> K</span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> objectives</span><br><span class="line"><span class="keyword">from</span> keras.datasets <span class="keyword">import</span> mnist</span><br><span class="line"><span class="comment"># from keras.datasets import fashion_mnist</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义常数</span></span><br><span class="line">batch_size = <span class="number">100</span></span><br><span class="line">original_dim = <span class="number">784</span> <span class="comment"># 28*28</span></span><br><span class="line">intermediate_dim = <span class="number">256</span></span><br><span class="line">latent_dim = <span class="number">2</span></span><br><span class="line">epochs = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">x = Input(shape=(original_dim，)) <span class="comment"># 维度28*28，数据数量不确定</span></span><br><span class="line">h = Dense(intermediate_dim， activation=<span class="string">'relu'</span>)(x) <span class="comment"># 输出维度是256</span></span><br><span class="line">z_mean = Dense(latent_dim)(h) <span class="comment"># 全连接层</span></span><br><span class="line">z_log_var = Dense(latent_dim)(h) <span class="comment"># 全连接层</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据均值和方差生成z</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sampling</span><span class="params">(args)</span>:</span></span><br><span class="line">    z_mean， z_log_var = args</span><br><span class="line">    epsilon = K.random_normal(shape=(batch_size， latent_dim)， mean=<span class="number">0.</span>)</span><br><span class="line">    <span class="keyword">return</span> z_mean + K.exp(z_log_var / <span class="number">2</span>) * epsilon</span><br><span class="line"><span class="comment"># Lambda层不参与训练，只参与计算，用于后面产生新的z</span></span><br><span class="line">z = Lambda(sampling， output_shape=(latent_dim，))([z_mean， z_log_var])</span><br><span class="line"></span><br><span class="line"><span class="comment"># decoder部分包含两个全连接层</span></span><br><span class="line">decoder_h = Dense(intermediate_dim， activation=<span class="string">'relu'</span>)</span><br><span class="line">decoder_mean = Dense(original_dim， activation=<span class="string">'sigmoid'</span>)</span><br><span class="line">h_decoded = decoder_h(z)</span><br><span class="line">x_decoded_mean = decoder_mean(h_decoded)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 总的损失函数，计算交叉熵</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vae_loss</span><span class="params">(x， x_decoded_mean)</span>:</span></span><br><span class="line">    xent_loss = original_dim * objectives.binary_crossentropy(x， x_decoded_mean)</span><br><span class="line">    kl_loss = <span class="number">-0.5</span> * K.sum(<span class="number">1</span> + z_log_var - K.square(z_mean) - K.exp(z_log_var)， axis=<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> xent_loss + kl_loss</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里使用rmsprop优化算法和手写的loss函数vae_loss</span></span><br><span class="line">vae = Model(x， x_decoded_mean)</span><br><span class="line">vae.compile(optimizer=<span class="string">'rmsprop'</span>， loss=vae_loss)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载并训练数据</span></span><br><span class="line">(x_train， y_train)， (x_test， y_test) = mnist.load_data()</span><br><span class="line">x_train = x_train.astype(<span class="string">'float32'</span>) / <span class="number">255.</span></span><br><span class="line">x_test = x_test.astype(<span class="string">'float32'</span>) / <span class="number">255.</span></span><br><span class="line">x_train = x_train.reshape((len(x_train)， np.prod(x_train.shape[<span class="number">1</span>:])))</span><br><span class="line">x_test = x_test.reshape((len(x_test)， np.prod(x_test.shape[<span class="number">1</span>:])))</span><br><span class="line"></span><br><span class="line">vae.fit(x_train， x_train，</span><br><span class="line">        shuffle=<span class="literal">True</span>，</span><br><span class="line">        epochs=epochs，</span><br><span class="line">        batch_size=batch_size，</span><br><span class="line">        validation_data=(x_test， x_test))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个encoder，看看mnist中的数据在隐层中是怎么样的，前面将latent_dim定位为2，是为了输出二维平面化图</span></span><br><span class="line">encoder = Model(x， z_mean)</span><br><span class="line"></span><br><span class="line">x_test_encoded = encoder.predict(x_test， batch_size=batch_size)</span><br><span class="line">plt.figure(figsize=(<span class="number">6</span>， <span class="number">6</span>))</span><br><span class="line">plt.scatter(x_test_encoded[:， <span class="number">0</span>]， x_test_encoded[:， <span class="number">1</span>]， c=y_test)</span><br><span class="line">plt.colorbar()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义生成器</span></span><br><span class="line">decoder_input = Input(shape=(latent_dim，))</span><br><span class="line">_h_decoded = decoder_h(decoder_input)</span><br><span class="line">_x_decoded_mean = decoder_mean(_h_decoded)</span><br><span class="line">generator = Model(decoder_input， _x_decoded_mean)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证生成器能生成什么样的图片</span></span><br><span class="line">n = <span class="number">20</span></span><br><span class="line">digit_size = <span class="number">28</span></span><br><span class="line">figure = np.zeros((digit_size * n， digit_size * n))</span><br><span class="line">grid_x = np.linspace(<span class="number">-4</span>， <span class="number">4</span>， n)</span><br><span class="line">grid_y = np.linspace(<span class="number">-4</span>， <span class="number">4</span>， n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i， xi <span class="keyword">in</span> enumerate(grid_x):</span><br><span class="line">    <span class="keyword">for</span> j， yi <span class="keyword">in</span> enumerate(grid_y):</span><br><span class="line">        z_sample = np.array([[yi， xi]])</span><br><span class="line">        x_decoded = generator.predict(z_sample)</span><br><span class="line">        digit = x_decoded[<span class="number">0</span>].reshape(digit_size， digit_size)</span><br><span class="line">        figure[(n - i - <span class="number">1</span>) * digit_size: (n - i) * digit_size，</span><br><span class="line">               j * digit_size: (j + <span class="number">1</span>) * digit_size] = digit</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>， <span class="number">10</span>))</span><br><span class="line">plt.imshow(figure)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>encoder的可视化效果(mnist中的数据在隐层中的形态):<br><img alt="变分自编码器1" src="https://i.loli.net/2019/12/06/pGhBjnA2Z8V6Cfy.jpg" width="40%"><br>验证生成器能生成什么样的图片:<br><img alt="变分自编码器2" src="https://i.loli.net/2019/12/06/Kd8aIAczRDxqitO.jpg" width="40%"></p><h4 id="生成式对抗网络GAN"><a href="#生成式对抗网络GAN" class="headerlink" title="生成式对抗网络GAN"></a>生成式对抗网络GAN</h4><p>除VAE以外，生成式对抗网络(GAN)也是一种非常流行的无监督生成式模型.</p><p>GAN中包括两个核心网络:</p><ol><li>生成器(generator):记作G，通过对大量样本的学习，能够生成一些以假乱真的样本，和VAE类似</li><li>判别器(discriminator):记作D，接受真实样本和G生成的样本，并进行判别和区分</li><li>G和D相互博弈，通过学习，G的生成能力和D的判别能力都逐渐增强并收敛</li></ol><p>GAN的训练非常困难，有很多需要注意的细节，才能生成质量较高的图片:</p><ol><li>恰当地使用BN(Batch Normalization) / LeakyReLU等</li><li>用strides为2的卷积代替池化</li><li>交替训练，避免一方过强</li></ol><p>完整代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> os， imageio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载手写数据集</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">'MNIST_data'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义参数</span></span><br><span class="line">batch_size = <span class="number">100</span> <span class="comment"># 每次训练的样本数</span></span><br><span class="line">z_dim = <span class="number">100</span> <span class="comment"># 输出大小</span></span><br><span class="line">OUTPUT_DIR = <span class="string">'samples'</span> <span class="comment"># 输出目录</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(OUTPUT_DIR):</span><br><span class="line">    os.mkdir(OUTPUT_DIR)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义X、noise、is_training变量</span></span><br><span class="line">X = tf.placeholder(dtype=tf.float32， shape=[<span class="literal">None</span>， <span class="number">28</span>， <span class="number">28</span>， <span class="number">1</span>]， name=<span class="string">'X'</span>)</span><br><span class="line">noise = tf.placeholder(dtype=tf.float32， shape=[<span class="literal">None</span>， z_dim]， name=<span class="string">'noise'</span>)</span><br><span class="line">is_training = tf.placeholder(dtype=tf.bool， name=<span class="string">'is_training'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活函数leakyRelu</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lrelu</span><span class="params">(x， leak=<span class="number">0.2</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.maximum(x， leak * x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 损失函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid_cross_entropy_with_logits</span><span class="params">(x， y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.sigmoid_cross_entropy_with_logits(logits=x， labels=y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关键点---判别器/生成器的定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 判别器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">discriminator</span><span class="params">(image， reuse=None， is_training=is_training)</span>:</span></span><br><span class="line">    momentum = <span class="number">0.9</span> <span class="comment"># 动量</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">'discriminator'</span>， reuse=reuse):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 卷积开始，filters越来越多，图片越来越小</span></span><br><span class="line">        <span class="comment"># h0: -1，28，28，1</span></span><br><span class="line">        <span class="comment"># h1: -1，24，24，64</span></span><br><span class="line">        <span class="comment"># h2: -1，12，12，128</span></span><br><span class="line">        <span class="comment"># h3: -1，6，6，256</span></span><br><span class="line">        <span class="comment"># h4: -1，3，3，512</span></span><br><span class="line">        <span class="comment"># h4作为判别器输出</span></span><br><span class="line">        </span><br><span class="line">        h0 = lrelu(tf.layers.conv2d(image， kernel_size=<span class="number">5</span>， filters=<span class="number">64</span>， strides=<span class="number">2</span>， padding=<span class="string">'same'</span>))</span><br><span class="line">        </span><br><span class="line">        h1 = tf.layers.conv2d(h0， kernel_size=<span class="number">5</span>， filters=<span class="number">128</span>， strides=<span class="number">2</span>， padding=<span class="string">'same'</span>)</span><br><span class="line">        <span class="comment"># batch_norm转化为标准的高斯分布，指数加权滑动平均算法，decay是衰减系数</span></span><br><span class="line">        h1 = lrelu(tf.contrib.layers.batch_norm(h1， is_training=is_training， decay=momentum))</span><br><span class="line">        </span><br><span class="line">        h2 = tf.layers.conv2d(h1， kernel_size=<span class="number">5</span>， filters=<span class="number">256</span>， strides=<span class="number">2</span>， padding=<span class="string">'same'</span>)</span><br><span class="line">        h2 = lrelu(tf.contrib.layers.batch_norm(h2， is_training=is_training， decay=momentum))</span><br><span class="line">        </span><br><span class="line">        h3 = tf.layers.conv2d(h2， kernel_size=<span class="number">5</span>， filters=<span class="number">512</span>， strides=<span class="number">2</span>， padding=<span class="string">'same'</span>)</span><br><span class="line">        h3 = lrelu(tf.contrib.layers.batch_norm(h3， is_training=is_training， decay=momentum))</span><br><span class="line">        </span><br><span class="line">        h4 = tf.contrib.layers.flatten(h3)</span><br><span class="line">        h4 = tf.layers.dense(h4， units=<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 返回经过sigmoid处理后的h4和未被激活的h4</span></span><br><span class="line">        <span class="keyword">return</span> tf.nn.sigmoid(h4)， h4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 生成器(输入的z是噪音，为二维tensor)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generator</span><span class="params">(z， is_training=is_training)</span>:</span></span><br><span class="line">    momentum = <span class="number">0.9</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">'generator'</span>， reuse=<span class="literal">None</span>):</span><br><span class="line">        d = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 逆卷积开始，filters越来越少</span></span><br><span class="line">        <span class="comment"># h0: -1，3，3，512</span></span><br><span class="line">        <span class="comment"># h1: -1，6，6，256</span></span><br><span class="line">        <span class="comment"># h2: -1，12，12，128</span></span><br><span class="line">        <span class="comment"># h3: -1，24，24，64</span></span><br><span class="line">        <span class="comment"># h4: -1，28，28，1</span></span><br><span class="line">        <span class="comment"># h4作为生成器的输出</span></span><br><span class="line"></span><br><span class="line">        h0 = tf.layers.dense(z， units=d * d * <span class="number">512</span>)</span><br><span class="line">        h0 = tf.reshape(h0， shape=[<span class="number">-1</span>， d， d， <span class="number">512</span>])</span><br><span class="line">        h0 = tf.nn.relu(tf.contrib.layers.batch_norm(h0， is_training=is_training， decay=momentum))</span><br><span class="line">        </span><br><span class="line">        h1 = tf.layers.conv2d_transpose(h0， kernel_size=<span class="number">5</span>， filters=<span class="number">256</span>， strides=<span class="number">2</span>， padding=<span class="string">'same'</span>)</span><br><span class="line">        h1 = tf.nn.relu(tf.contrib.layers.batch_norm(h1， is_training=is_training， decay=momentum))</span><br><span class="line">        </span><br><span class="line">        h2 = tf.layers.conv2d_transpose(h1， kernel_size=<span class="number">5</span>， filters=<span class="number">128</span>， strides=<span class="number">2</span>， padding=<span class="string">'same'</span>)</span><br><span class="line">        h2 = tf.nn.relu(tf.contrib.layers.batch_norm(h2， is_training=is_training， decay=momentum))</span><br><span class="line">        </span><br><span class="line">        h3 = tf.layers.conv2d_transpose(h2， kernel_size=<span class="number">5</span>， filters=<span class="number">64</span>， strides=<span class="number">2</span>， padding=<span class="string">'same'</span>)</span><br><span class="line">        h3 = tf.nn.relu(tf.contrib.layers.batch_norm(h3， is_training=is_training， decay=momentum))</span><br><span class="line">        </span><br><span class="line">        h4 = tf.layers.conv2d_transpose(h3， kernel_size=<span class="number">5</span>， filters=<span class="number">1</span>， strides=<span class="number">1</span>， padding=<span class="string">'valid'</span>， activation=tf.nn.tanh， name=<span class="string">'g'</span>)</span><br><span class="line">        <span class="keyword">return</span> h4</span><br><span class="line"></span><br><span class="line">g = generator(noise) <span class="comment"># 生成的假图片</span></span><br><span class="line">d_real， d_real_logits = discriminator(X) <span class="comment"># 真图片激活后h4和未激活h4的值</span></span><br><span class="line">d_fake， d_fake_logits = discriminator(g， reuse=<span class="literal">True</span>) <span class="comment"># 假图片激活后h4和未激活h4的值</span></span><br><span class="line"></span><br><span class="line">vars_g = [var <span class="keyword">for</span> var <span class="keyword">in</span> tf.trainable_variables() <span class="keyword">if</span> var.name.startswith(<span class="string">'generator'</span>)] <span class="comment"># 和generator相关的参数</span></span><br><span class="line">vars_d = [var <span class="keyword">for</span> var <span class="keyword">in</span> tf.trainable_variables() <span class="keyword">if</span> var.name.startswith(<span class="string">'discriminator'</span>)] <span class="comment"># 和discriminator相关的参数</span></span><br><span class="line"></span><br><span class="line">loss_d_real = tf.reduce_mean(sigmoid_cross_entropy_with_logits(d_real_logits， tf.ones_like(d_real))) <span class="comment"># 真图片导致的判别器损失</span></span><br><span class="line">loss_d_fake = tf.reduce_mean(sigmoid_cross_entropy_with_logits(d_fake_logits， tf.zeros_like(d_fake))) <span class="comment"># 假图片导致的判别器损失</span></span><br><span class="line">loss_g = tf.reduce_mean(sigmoid_cross_entropy_with_logits(d_fake_logits， tf.ones_like(d_fake))) <span class="comment"># 生成器损失</span></span><br><span class="line">loss_d = loss_d_real + loss_d_fake <span class="comment"># 判别器损失(真图片+假图片)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 优化函数</span></span><br><span class="line"><span class="comment"># 先完成update_ops的相关操作(如BN的参数更新)，再完成后续的优化操作</span></span><br><span class="line">update_ops = tf.get_collection(tf.GraphKeys.UPDATE_OPS)</span><br><span class="line"><span class="keyword">with</span> tf.control_dependencies(update_ops):</span><br><span class="line">    optimizer_d = tf.train.AdamOptimizer(learning_rate=<span class="number">0.0002</span>， beta1=<span class="number">0.5</span>).minimize(loss_d， var_list=vars_d)</span><br><span class="line">    optimizer_g = tf.train.AdamOptimizer(learning_rate=<span class="number">0.0002</span>， beta1=<span class="number">0.5</span>).minimize(loss_g， var_list=vars_g)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 辅助函数，用于将多张图片以网格状拼接在一起</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">montage</span><span class="params">(images)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(images， list):</span><br><span class="line">        images = np.array(images)</span><br><span class="line">    img_h = images.shape[<span class="number">1</span>]</span><br><span class="line">    img_w = images.shape[<span class="number">2</span>]</span><br><span class="line">    n_plots = int(np.ceil(np.sqrt(images.shape[<span class="number">0</span>])))</span><br><span class="line">    m = np.ones((images.shape[<span class="number">1</span>] * n_plots + n_plots + <span class="number">1</span>， images.shape[<span class="number">2</span>] * n_plots + n_plots + <span class="number">1</span>)) * <span class="number">0.5</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n_plots):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(n_plots):</span><br><span class="line">            this_filter = i * n_plots + j</span><br><span class="line">            <span class="keyword">if</span> this_filter &lt; images.shape[<span class="number">0</span>]:</span><br><span class="line">                this_img = images[this_filter]</span><br><span class="line">                m[<span class="number">1</span> + i + i * img_h:<span class="number">1</span> + i + (i + <span class="number">1</span>) * img_h，</span><br><span class="line">                  <span class="number">1</span> + j + j * img_w:<span class="number">1</span> + j + (j + <span class="number">1</span>) * img_w] = this_img</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始训练(需要交替训练，如每次迭代训练G两次)</span></span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(tf.global_variables_initializer())</span><br><span class="line">z_samples = np.random.uniform(<span class="number">-1.0</span>， <span class="number">1.0</span>， [batch_size， z_dim]).astype(np.float32)</span><br><span class="line">samples = []</span><br><span class="line">loss = &#123;<span class="string">'d'</span>: []， <span class="string">'g'</span>: []&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">60000</span>):</span><br><span class="line">    <span class="comment"># 产生随机noise</span></span><br><span class="line">    n = np.random.uniform(<span class="number">-1.0</span>， <span class="number">1.0</span>， [batch_size， z_dim]).astype(np.float32)</span><br><span class="line">    <span class="comment"># 依次取数据</span></span><br><span class="line">    batch = mnist.train.next_batch(batch_size=batch_size)[<span class="number">0</span>]</span><br><span class="line">    batch = np.reshape(batch， [<span class="number">-1</span>， <span class="number">28</span>， <span class="number">28</span>， <span class="number">1</span>])</span><br><span class="line">    <span class="comment"># batch是0~1(relu)，我们要将它映射到-1~1(tanh的取值范围)</span></span><br><span class="line">    batch = (batch - <span class="number">0.5</span>) * <span class="number">2</span> </span><br><span class="line">    </span><br><span class="line">    d_ls， g_ls = sess.run([loss_d， loss_g]， feed_dict=&#123;X: batch， noise: n， is_training: <span class="literal">True</span>&#125;)</span><br><span class="line">    loss[<span class="string">'d'</span>].append(d_ls)</span><br><span class="line">    loss[<span class="string">'g'</span>].append(g_ls)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#依次训练D-G-G(判别器训练1次，生成器训练2次)</span></span><br><span class="line">    sess.run(optimizer_d， feed_dict=&#123;X: batch， noise: n， is_training: <span class="literal">True</span>&#125;)</span><br><span class="line">    sess.run(optimizer_g， feed_dict=&#123;X: batch， noise: n， is_training: <span class="literal">True</span>&#125;)</span><br><span class="line">    sess.run(optimizer_g， feed_dict=&#123;X: batch， noise: n， is_training: <span class="literal">True</span>&#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 每迭代1000轮，打印样本</span></span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">        print(i， d_ls， g_ls)</span><br><span class="line">        gen_imgs = sess.run(g， feed_dict=&#123;noise: z_samples， is_training: <span class="literal">False</span>&#125;)</span><br><span class="line">        <span class="comment"># -1~1转0~1</span></span><br><span class="line">        gen_imgs = (gen_imgs + <span class="number">1</span>) / <span class="number">2</span></span><br><span class="line">        imgs = [img[:， :， <span class="number">0</span>] <span class="keyword">for</span> img <span class="keyword">in</span> gen_imgs]</span><br><span class="line">        gen_imgs = montage(imgs)</span><br><span class="line">        plt.axis(<span class="string">'off'</span>)</span><br><span class="line">        plt.imshow(gen_imgs， cmap=<span class="string">'gray'</span>)</span><br><span class="line">        plt.savefig(os.path.join(OUTPUT_DIR， <span class="string">'sample_%d.jpg'</span> % i))</span><br><span class="line">        plt.show()</span><br><span class="line">        samples.append(gen_imgs)</span><br><span class="line"></span><br><span class="line">plt.plot(loss[<span class="string">'d'</span>]， label=<span class="string">'Discriminator'</span>)</span><br><span class="line">plt.plot(loss[<span class="string">'g'</span>]， label=<span class="string">'Generator'</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'upper right'</span>)</span><br><span class="line">plt.savefig(<span class="string">'Loss.png'</span>)</span><br><span class="line">plt.show()</span><br><span class="line">imageio.mimsave(os.path.join(OUTPUT_DIR， <span class="string">'samples.gif'</span>)， samples， fps=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存模型</span></span><br><span class="line">saver = tf.train.Saver()</span><br><span class="line">saver.save(sess， <span class="string">'./mnist_dcgan'</span>， global_step=<span class="number">60000</span>)</span><br></pre></td></tr></table></figure><p>图片经过卷积的基本结构变化如下:<br><img alt="GAN1" src="https://i.loli.net/2019/12/06/o1SbOdCWfzRrM5P.png" width="80%"><br>生成的手写数字图片的动图效果为:<br><img alt="GAN2" src="https://i.loli.net/2019/12/06/HorfvGPthVemqK1.gif" width="40%"></p><p>训练好模型后，可直接加载模型，自动生成类似图片:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">100</span></span><br><span class="line">z_dim = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">montage</span><span class="params">(images)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(images， list):</span><br><span class="line">        images = np.array(images)</span><br><span class="line">    img_h = images.shape[<span class="number">1</span>]</span><br><span class="line">    img_w = images.shape[<span class="number">2</span>]</span><br><span class="line">    n_plots = int(np.ceil(np.sqrt(images.shape[<span class="number">0</span>])))</span><br><span class="line">    m = np.ones((images.shape[<span class="number">1</span>] * n_plots + n_plots + <span class="number">1</span>， images.shape[<span class="number">2</span>] * n_plots + n_plots + <span class="number">1</span>)) * <span class="number">0.5</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n_plots):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(n_plots):</span><br><span class="line">            this_filter = i * n_plots + j</span><br><span class="line">            <span class="keyword">if</span> this_filter &lt; images.shape[<span class="number">0</span>]:</span><br><span class="line">                this_img = images[this_filter]</span><br><span class="line">                m[<span class="number">1</span> + i + i * img_h:<span class="number">1</span> + i + (i + <span class="number">1</span>) * img_h，</span><br><span class="line">                  <span class="number">1</span> + j + j * img_w:<span class="number">1</span> + j + (j + <span class="number">1</span>) * img_w] = this_img</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(tf.global_variables_initializer())</span><br><span class="line"></span><br><span class="line">saver = tf.train.import_meta_graph(<span class="string">'./mnist_dcgan-60000.meta'</span>)</span><br><span class="line">saver.restore(sess， tf.train.latest_checkpoint(<span class="string">'./'</span>))</span><br><span class="line"></span><br><span class="line">graph = tf.get_default_graph()</span><br><span class="line">g = graph.get_tensor_by_name(<span class="string">'generator/g/Tanh:0'</span>)</span><br><span class="line">noise = graph.get_tensor_by_name(<span class="string">'noise:0'</span>)</span><br><span class="line">is_training = graph.get_tensor_by_name(<span class="string">'is_training:0'</span>)</span><br><span class="line"></span><br><span class="line">n = np.random.uniform(<span class="number">-1.0</span>， <span class="number">1.0</span>， [batch_size， z_dim]).astype(np.float32)</span><br><span class="line">gen_imgs = sess.run(g， feed_dict=&#123;noise: n， is_training: <span class="literal">False</span>&#125;)</span><br><span class="line">gen_imgs = (gen_imgs + <span class="number">1</span>) / <span class="number">2</span></span><br><span class="line">imgs = [img[:， :， <span class="number">0</span>] <span class="keyword">for</span> img <span class="keyword">in</span> gen_imgs]</span><br><span class="line">gen_imgs = montage(imgs)</span><br><span class="line">plt.axis(<span class="string">'off'</span>)</span><br><span class="line">plt.imshow(gen_imgs， cmap=<span class="string">'gray'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="人脸图片生成DCGAN"><a href="#人脸图片生成DCGAN" class="headerlink" title="人脸图片生成DCGAN"></a>人脸图片生成DCGAN</h4><p>在人脸数据上训练DCGAN，并生成一些人脸图片 (使用两个数据集:LFW和CelebA)</p><p>和GAN的训练过程类似，代码几乎都一样，只是要处理的是彩色图片，注意图片通道</p><p>训练模型:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">from</span> imageio <span class="keyword">import</span> imread， imsave， mimsave</span><br><span class="line"><span class="keyword">from</span> scipy.misc <span class="keyword">import</span> imresize</span><br><span class="line"><span class="keyword">import</span> glob <span class="comment"># 读取图片路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载和处理LFW数据</span></span><br><span class="line"><span class="comment"># 因为下载的文件夹中含有各个人名子文件夹，我们现在的任务是将它们全部转移保存到同一文件夹中</span></span><br><span class="line">url = <span class="string">'http://vis-www.cs.umass.edu/lfw/lfw.tgz'</span></span><br><span class="line">filename = <span class="string">'lfw.tgz'</span></span><br><span class="line">directory = <span class="string">'lfw_imgs'</span></span><br><span class="line">new_dir = <span class="string">'lfw_new_imgs'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(new_dir):</span><br><span class="line">    os.mkdir(new_dir)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(directory):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(filename):</span><br><span class="line">            urllib.request.urlretrieve(url， filename)</span><br><span class="line">        tar = tarfile.open(filename， <span class="string">'r:gz'</span>)</span><br><span class="line">        tar.extractall(path=directory)</span><br><span class="line">        tar.close()</span><br><span class="line">    </span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> dir_， _， files <span class="keyword">in</span> os.walk(directory):</span><br><span class="line">        <span class="keyword">for</span> file_ <span class="keyword">in</span> files:</span><br><span class="line">            img = imread(os.path.join(dir_， file_))</span><br><span class="line">            imsave(os.path.join(new_dir， <span class="string">'%d.png'</span> % count)， img)</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定要用哪个数据集</span></span><br><span class="line"><span class="comment"># dataset = 'lfw_new_imgs' # LFW</span></span><br><span class="line">dataset = <span class="string">'celeba'</span> <span class="comment"># CelebA</span></span><br><span class="line">images = glob.glob(os.path.join(dataset， <span class="string">'*.*'</span>)) </span><br><span class="line"><span class="comment"># print(len(images))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">100</span></span><br><span class="line">z_dim = <span class="number">100</span></span><br><span class="line">WIDTH = <span class="number">64</span></span><br><span class="line">HEIGHT = <span class="number">64</span></span><br><span class="line"></span><br><span class="line">OUTPUT_DIR = <span class="string">'samples_'</span> + dataset</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(OUTPUT_DIR):</span><br><span class="line">    os.mkdir(OUTPUT_DIR)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 彩色图，3通道</span></span><br><span class="line">X = tf.placeholder(dtype=tf.float32， shape=[<span class="literal">None</span>， HEIGHT， WIDTH， <span class="number">3</span>]， name=<span class="string">'X'</span>)</span><br><span class="line">noise = tf.placeholder(dtype=tf.float32， shape=[<span class="literal">None</span>， z_dim]， name=<span class="string">'noise'</span>)</span><br><span class="line">is_training = tf.placeholder(dtype=tf.bool， name=<span class="string">'is_training'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lrelu</span><span class="params">(x， leak=<span class="number">0.2</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.maximum(x， leak * x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid_cross_entropy_with_logits</span><span class="params">(x， y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.sigmoid_cross_entropy_with_logits(logits=x， labels=y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判别器(和GAN相同)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">discriminator</span><span class="params">(image， reuse=None， is_training=is_training)</span>:</span></span><br><span class="line">    momentum = <span class="number">0.9</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">'discriminator'</span>， reuse=reuse):</span><br><span class="line">        h0 = lrelu(tf.layers.conv2d(image， kernel_size=<span class="number">5</span>， filters=<span class="number">64</span>， strides=<span class="number">2</span>， padding=<span class="string">'same'</span>))</span><br><span class="line">        </span><br><span class="line">        h1 = tf.layers.conv2d(h0， kernel_size=<span class="number">5</span>， filters=<span class="number">128</span>， strides=<span class="number">2</span>， padding=<span class="string">'same'</span>)</span><br><span class="line">        h1 = lrelu(tf.contrib.layers.batch_norm(h1， is_training=is_training， decay=momentum))</span><br><span class="line">        </span><br><span class="line">        h2 = tf.layers.conv2d(h1， kernel_size=<span class="number">5</span>， filters=<span class="number">256</span>， strides=<span class="number">2</span>， padding=<span class="string">'same'</span>)</span><br><span class="line">        h2 = lrelu(tf.contrib.layers.batch_norm(h2， is_training=is_training， decay=momentum))</span><br><span class="line">        </span><br><span class="line">        h3 = tf.layers.conv2d(h2， kernel_size=<span class="number">5</span>， filters=<span class="number">512</span>， strides=<span class="number">2</span>， padding=<span class="string">'same'</span>)</span><br><span class="line">        h3 = lrelu(tf.contrib.layers.batch_norm(h3， is_training=is_training， decay=momentum))</span><br><span class="line">        </span><br><span class="line">        h4 = tf.contrib.layers.flatten(h3)</span><br><span class="line">        h4 = tf.layers.dense(h4， units=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> tf.nn.sigmoid(h4)， h4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成器(d改为4，GAN的d是3)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generator</span><span class="params">(z， is_training=is_training)</span>:</span></span><br><span class="line">    momentum = <span class="number">0.9</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">'generator'</span>， reuse=<span class="literal">None</span>):</span><br><span class="line">        d = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># h0: -1，4，4，512</span></span><br><span class="line">        <span class="comment"># h1: -1，8，8，256</span></span><br><span class="line">        <span class="comment"># h2: -1，16，16，128</span></span><br><span class="line">        <span class="comment"># h3: -1，32，32，64</span></span><br><span class="line">        <span class="comment"># h4: -1，64，64，3</span></span><br><span class="line">        <span class="comment"># h4作为判别器输出</span></span><br><span class="line"></span><br><span class="line">        h0 = tf.layers.dense(z， units=d * d * <span class="number">512</span>)</span><br><span class="line">        h0 = tf.reshape(h0， shape=[<span class="number">-1</span>， d， d， <span class="number">512</span>])</span><br><span class="line">        h0 = tf.nn.relu(tf.contrib.layers.batch_norm(h0， is_training=is_training， decay=momentum))</span><br><span class="line">        </span><br><span class="line">        h1 = tf.layers.conv2d_transpose(h0， kernel_size=<span class="number">5</span>， filters=<span class="number">256</span>， strides=<span class="number">2</span>， padding=<span class="string">'same'</span>)</span><br><span class="line">        h1 = tf.nn.relu(tf.contrib.layers.batch_norm(h1， is_training=is_training， decay=momentum))</span><br><span class="line">        </span><br><span class="line">        h2 = tf.layers.conv2d_transpose(h1， kernel_size=<span class="number">5</span>， filters=<span class="number">128</span>， strides=<span class="number">2</span>， padding=<span class="string">'same'</span>)</span><br><span class="line">        h2 = tf.nn.relu(tf.contrib.layers.batch_norm(h2， is_training=is_training， decay=momentum))</span><br><span class="line">        </span><br><span class="line">        h3 = tf.layers.conv2d_transpose(h2， kernel_size=<span class="number">5</span>， filters=<span class="number">64</span>， strides=<span class="number">2</span>， padding=<span class="string">'same'</span>)</span><br><span class="line">        h3 = tf.nn.relu(tf.contrib.layers.batch_norm(h3， is_training=is_training， decay=momentum))</span><br><span class="line">        </span><br><span class="line">        h4 = tf.layers.conv2d_transpose(h3， kernel_size=<span class="number">5</span>， filters=<span class="number">3</span>， strides=<span class="number">2</span>， padding=<span class="string">'same'</span>， activation=tf.nn.tanh， name=<span class="string">'g'</span>)</span><br><span class="line">        <span class="keyword">return</span> h4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = generator(noise)</span><br><span class="line">d_real， d_real_logits = discriminator(X)</span><br><span class="line">d_fake， d_fake_logits = discriminator(g， reuse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">vars_g = [var <span class="keyword">for</span> var <span class="keyword">in</span> tf.trainable_variables() <span class="keyword">if</span> var.name.startswith(<span class="string">'generator'</span>)]</span><br><span class="line">vars_d = [var <span class="keyword">for</span> var <span class="keyword">in</span> tf.trainable_variables() <span class="keyword">if</span> var.name.startswith(<span class="string">'discriminator'</span>)]</span><br><span class="line"></span><br><span class="line">loss_d_real = tf.reduce_mean(sigmoid_cross_entropy_with_logits(d_real_logits， tf.ones_like(d_real)))</span><br><span class="line">loss_d_fake = tf.reduce_mean(sigmoid_cross_entropy_with_logits(d_fake_logits， tf.zeros_like(d_fake)))</span><br><span class="line">loss_g = tf.reduce_mean(sigmoid_cross_entropy_with_logits(d_fake_logits， tf.ones_like(d_fake)))</span><br><span class="line">loss_d = loss_d_real + loss_d_fake</span><br><span class="line"></span><br><span class="line">update_ops = tf.get_collection(tf.GraphKeys.UPDATE_OPS)</span><br><span class="line"><span class="keyword">with</span> tf.control_dependencies(update_ops):</span><br><span class="line">    optimizer_d = tf.train.AdamOptimizer(learning_rate=<span class="number">0.0002</span>， beta1=<span class="number">0.5</span>).minimize(loss_d， var_list=vars_d)</span><br><span class="line">    optimizer_g = tf.train.AdamOptimizer(learning_rate=<span class="number">0.0002</span>， beta1=<span class="number">0.5</span>).minimize(loss_g， var_list=vars_g)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 读取图片的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_image</span><span class="params">(path， height， width)</span>:</span></span><br><span class="line">    image = imread(path)</span><br><span class="line">    h = image.shape[<span class="number">0</span>]</span><br><span class="line">    w = image.shape[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> h &gt; w:</span><br><span class="line">        image = image[h // <span class="number">2</span> - w // <span class="number">2</span>: h // <span class="number">2</span> + w // <span class="number">2</span>， :， :]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        image = image[:， w // <span class="number">2</span> - h // <span class="number">2</span>: w // <span class="number">2</span> + h // <span class="number">2</span>， :]    </span><br><span class="line">    </span><br><span class="line">    image = imresize(image， (height， width))</span><br><span class="line">    <span class="comment"># image是1-255</span></span><br><span class="line">    <span class="keyword">return</span> image / <span class="number">255.</span> <span class="comment"># 0-1之间   </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 合成图片的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">montage</span><span class="params">(images)</span>:</span>    </span><br><span class="line">    <span class="keyword">if</span> isinstance(images， list):</span><br><span class="line">        images = np.array(images)</span><br><span class="line">    img_h = images.shape[<span class="number">1</span>]</span><br><span class="line">    img_w = images.shape[<span class="number">2</span>]</span><br><span class="line">    n_plots = int(np.ceil(np.sqrt(images.shape[<span class="number">0</span>])))</span><br><span class="line">    <span class="keyword">if</span> len(images.shape) == <span class="number">4</span> <span class="keyword">and</span> images.shape[<span class="number">3</span>] == <span class="number">3</span>:</span><br><span class="line">        m = np.ones(</span><br><span class="line">            (images.shape[<span class="number">1</span>] * n_plots + n_plots + <span class="number">1</span>，</span><br><span class="line">             images.shape[<span class="number">2</span>] * n_plots + n_plots + <span class="number">1</span>， <span class="number">3</span>)) * <span class="number">0.5</span></span><br><span class="line">    <span class="keyword">elif</span> len(images.shape) == <span class="number">4</span> <span class="keyword">and</span> images.shape[<span class="number">3</span>] == <span class="number">1</span>:</span><br><span class="line">        m = np.ones(</span><br><span class="line">            (images.shape[<span class="number">1</span>] * n_plots + n_plots + <span class="number">1</span>，</span><br><span class="line">             images.shape[<span class="number">2</span>] * n_plots + n_plots + <span class="number">1</span>， <span class="number">1</span>)) * <span class="number">0.5</span></span><br><span class="line">    <span class="keyword">elif</span> len(images.shape) == <span class="number">3</span>:</span><br><span class="line">        m = np.ones(</span><br><span class="line">            (images.shape[<span class="number">1</span>] * n_plots + n_plots + <span class="number">1</span>，</span><br><span class="line">             images.shape[<span class="number">2</span>] * n_plots + n_plots + <span class="number">1</span>)) * <span class="number">0.5</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'Could not parse image shape of &#123;&#125;'</span>.format(images.shape))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n_plots):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(n_plots):</span><br><span class="line">            this_filter = i * n_plots + j</span><br><span class="line">            <span class="keyword">if</span> this_filter &lt; images.shape[<span class="number">0</span>]:</span><br><span class="line">                this_img = images[this_filter]</span><br><span class="line">                m[<span class="number">1</span> + i + i * img_h:<span class="number">1</span> + i + (i + <span class="number">1</span>) * img_h，</span><br><span class="line">                  <span class="number">1</span> + j + j * img_w:<span class="number">1</span> + j + (j + <span class="number">1</span>) * img_w] = this_img</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始训练</span></span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(tf.global_variables_initializer())</span><br><span class="line">z_samples = np.random.uniform(<span class="number">-1.0</span>， <span class="number">1.0</span>， [batch_size， z_dim]).astype(np.float32)</span><br><span class="line">samples = []</span><br><span class="line">loss = &#123;<span class="string">'d'</span>: []， <span class="string">'g'</span>: []&#125;</span><br><span class="line"></span><br><span class="line">offset = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">60000</span>):</span><br><span class="line">    n = np.random.uniform(<span class="number">-1.0</span>， <span class="number">1.0</span>， [batch_size， z_dim]).astype(np.float32)</span><br><span class="line">    </span><br><span class="line">    offset = (offset + batch_size) % len(images)</span><br><span class="line">    batch = np.array([read_image(img， HEIGHT， WIDTH) <span class="keyword">for</span> img <span class="keyword">in</span> images[offset: offset + batch_size]])</span><br><span class="line">    batch = (batch - <span class="number">0.5</span>) * <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    d_ls， g_ls = sess.run([loss_d， loss_g]， feed_dict=&#123;X: batch， noise: n， is_training: <span class="literal">True</span>&#125;)</span><br><span class="line">    loss[<span class="string">'d'</span>].append(d_ls)</span><br><span class="line">    loss[<span class="string">'g'</span>].append(g_ls)</span><br><span class="line">    </span><br><span class="line">    sess.run(optimizer_d， feed_dict=&#123;X: batch， noise: n， is_training: <span class="literal">True</span>&#125;)</span><br><span class="line">    sess.run(optimizer_g， feed_dict=&#123;X: batch， noise: n， is_training: <span class="literal">True</span>&#125;)</span><br><span class="line">    sess.run(optimizer_g， feed_dict=&#123;X: batch， noise: n， is_training: <span class="literal">True</span>&#125;)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">500</span> == <span class="number">0</span>:</span><br><span class="line">        print(i， d_ls， g_ls)</span><br><span class="line">        gen_imgs = sess.run(g， feed_dict=&#123;noise: z_samples， is_training: <span class="literal">False</span>&#125;)</span><br><span class="line">        gen_imgs = (gen_imgs + <span class="number">1</span>) / <span class="number">2</span></span><br><span class="line">        imgs = [img[:， :， :] <span class="keyword">for</span> img <span class="keyword">in</span> gen_imgs]</span><br><span class="line">        gen_imgs = montage(imgs)</span><br><span class="line">        plt.axis(<span class="string">'off'</span>)</span><br><span class="line">        plt.imshow(gen_imgs)</span><br><span class="line">        imsave(os.path.join(OUTPUT_DIR， <span class="string">'sample_%d.jpg'</span> % i)， gen_imgs)</span><br><span class="line">        plt.show()</span><br><span class="line">        samples.append(gen_imgs)</span><br><span class="line"></span><br><span class="line">plt.plot(loss[<span class="string">'d'</span>]， label=<span class="string">'Discriminator'</span>)</span><br><span class="line">plt.plot(loss[<span class="string">'g'</span>]， label=<span class="string">'Generator'</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'upper right'</span>)</span><br><span class="line">plt.savefig(os.path.join(OUTPUT_DIR， <span class="string">'Loss.png'</span>))</span><br><span class="line">plt.show()</span><br><span class="line">mimsave(os.path.join(OUTPUT_DIR， <span class="string">'samples.gif'</span>)， samples， fps=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">saver = tf.train.Saver()</span><br><span class="line">saver.save(sess， os.path.join(OUTPUT_DIR， <span class="string">'dcgan_'</span> + dataset)， global_step=<span class="number">60000</span>)</span><br></pre></td></tr></table></figure><p>加载已训练好的模型，自动生成人脸图片:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">100</span></span><br><span class="line">z_dim = <span class="number">100</span></span><br><span class="line"><span class="comment"># dataset = 'lfw_new_imgs'</span></span><br><span class="line">dataset = <span class="string">'celeba'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">montage</span><span class="params">(images)</span>:</span>    </span><br><span class="line">    <span class="keyword">if</span> isinstance(images， list):</span><br><span class="line">        images = np.array(images)</span><br><span class="line">    img_h = images.shape[<span class="number">1</span>]</span><br><span class="line">    img_w = images.shape[<span class="number">2</span>]</span><br><span class="line">    n_plots = int(np.ceil(np.sqrt(images.shape[<span class="number">0</span>])))</span><br><span class="line">    <span class="keyword">if</span> len(images.shape) == <span class="number">4</span> <span class="keyword">and</span> images.shape[<span class="number">3</span>] == <span class="number">3</span>:</span><br><span class="line">        m = np.ones(</span><br><span class="line">            (images.shape[<span class="number">1</span>] * n_plots + n_plots + <span class="number">1</span>，</span><br><span class="line">             images.shape[<span class="number">2</span>] * n_plots + n_plots + <span class="number">1</span>， <span class="number">3</span>)) * <span class="number">0.5</span></span><br><span class="line">    <span class="keyword">elif</span> len(images.shape) == <span class="number">4</span> <span class="keyword">and</span> images.shape[<span class="number">3</span>] == <span class="number">1</span>:</span><br><span class="line">        m = np.ones(</span><br><span class="line">            (images.shape[<span class="number">1</span>] * n_plots + n_plots + <span class="number">1</span>，</span><br><span class="line">             images.shape[<span class="number">2</span>] * n_plots + n_plots + <span class="number">1</span>， <span class="number">1</span>)) * <span class="number">0.5</span></span><br><span class="line">    <span class="keyword">elif</span> len(images.shape) == <span class="number">3</span>:</span><br><span class="line">        m = np.ones(</span><br><span class="line">            (images.shape[<span class="number">1</span>] * n_plots + n_plots + <span class="number">1</span>，</span><br><span class="line">             images.shape[<span class="number">2</span>] * n_plots + n_plots + <span class="number">1</span>)) * <span class="number">0.5</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'Could not parse image shape of &#123;&#125;'</span>.format(images.shape))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n_plots):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(n_plots):</span><br><span class="line">            this_filter = i * n_plots + j</span><br><span class="line">            <span class="keyword">if</span> this_filter &lt; images.shape[<span class="number">0</span>]:</span><br><span class="line">                this_img = images[this_filter]</span><br><span class="line">                m[<span class="number">1</span> + i + i * img_h:<span class="number">1</span> + i + (i + <span class="number">1</span>) * img_h，</span><br><span class="line">                  <span class="number">1</span> + j + j * img_w:<span class="number">1</span> + j + (j + <span class="number">1</span>) * img_w] = this_img</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(tf.global_variables_initializer())</span><br><span class="line"></span><br><span class="line">saver = tf.train.import_meta_graph(os.path.join(<span class="string">'samples_'</span> + dataset， <span class="string">'dcgan_'</span> + dataset + <span class="string">'-60000.meta'</span>))</span><br><span class="line">saver.restore(sess， tf.train.latest_checkpoint(<span class="string">'samples_'</span> + dataset))</span><br><span class="line">graph = tf.get_default_graph()</span><br><span class="line">g = graph.get_tensor_by_name(<span class="string">'generator/g/Tanh:0'</span>)</span><br><span class="line">noise = graph.get_tensor_by_name(<span class="string">'noise:0'</span>)</span><br><span class="line">is_training = graph.get_tensor_by_name(<span class="string">'is_training:0'</span>)</span><br><span class="line"></span><br><span class="line">n = np.random.uniform(<span class="number">-1.0</span>， <span class="number">1.0</span>， [batch_size， z_dim]).astype(np.float32)</span><br><span class="line">gen_imgs = sess.run(g， feed_dict=&#123;noise: n， is_training: <span class="literal">False</span>&#125;)</span><br><span class="line">gen_imgs = (gen_imgs + <span class="number">1</span>) / <span class="number">2</span></span><br><span class="line">imgs = [img[:， :， :] <span class="keyword">for</span> img <span class="keyword">in</span> gen_imgs]</span><br><span class="line">gen_imgs = montage(imgs)</span><br><span class="line">gen_imgs = np.clip(gen_imgs， <span class="number">0</span>， <span class="number">1</span>)</span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>， <span class="number">8</span>))</span><br><span class="line">plt.axis(<span class="string">'off'</span>)</span><br><span class="line">plt.imshow(gen_imgs)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="Inception-v3图片分类"><a href="#Inception-v3图片分类" class="headerlink" title="Inception-v3图片分类"></a>Inception-v3图片分类</h4><p>Inception-v3是由Google提出，用于实现ImageNet大规模视觉识别任务的一种神经网络</p><p>Inception-v3反复使用了Inception Block，涉及大量的卷积和池化. 这里我们选择加载pre-trained的Inception-v3模型，来完成一些图片分类任务.</p><p>Inception-v3的模型结构:<br><img alt="Inception-v3" src="https://i.loli.net/2019/12/06/o2V9uhQRzCvDOj7.png" width="80%"></p><p><strong>训练好的模型包括3个部分:</strong></p><ol><li>classify_image_graph_def.pb: Inception-v3模型结构和参数</li><li>imagenet_2012_challenge_label_map_proto.pbtxt: 从类别编码到类别字符串的对应关系</li><li>imagenet_synset_to_human_label_map.txt: 从类别字符串到类别名的对应关系</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串id到name的映射字典</span></span><br><span class="line"><span class="comment"># n00004475organism， being</span></span><br><span class="line"><span class="comment"># n00005787benthos</span></span><br><span class="line"><span class="comment"># n00006024heterotroph</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">uid_to_human = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> tf.gfile.GFile(<span class="string">'imagenet_synset_to_human_label_map.txt'</span>).readlines():</span><br><span class="line">items = line.strip().split(<span class="string">'\t'</span>)</span><br><span class="line">uid_to_human[items[<span class="number">0</span>]] = items[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># node到字符串id的映射字典</span></span><br><span class="line"><span class="comment"># entry &#123;</span></span><br><span class="line"><span class="comment">#   target_class: 449</span></span><br><span class="line"><span class="comment">#   target_class_string: "n01440764"</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment"># entry &#123;</span></span><br><span class="line"><span class="comment">#   target_class: 450</span></span><br><span class="line"><span class="comment">#   target_class_string: "n01443537"</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line">node_id_to_uid = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> tf.gfile.GFile(<span class="string">'imagenet_2012_challenge_label_map_proto.pbtxt'</span>).readlines():</span><br><span class="line"><span class="keyword">if</span> line.startswith(<span class="string">'  target_class:'</span>):</span><br><span class="line">target_class = int(line.split(<span class="string">': '</span>)[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> line.startswith(<span class="string">'  target_class_string:'</span>):</span><br><span class="line">target_class_string = line.split(<span class="string">': '</span>)[<span class="number">1</span>].strip(<span class="string">'\n'</span>).strip(<span class="string">'\"'</span>)</span><br><span class="line">node_id_to_uid[target_class] = target_class_string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># node到name的映射字典（很具上述得到的node_id_to_uid和uid_to_human生成）</span></span><br><span class="line">node_id_to_name = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> key， value <span class="keyword">in</span> node_id_to_uid.items():</span><br><span class="line">node_id_to_name[key] = uid_to_human[value]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载模型</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_graph</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">with</span> tf.gfile.FastGFile(<span class="string">'classify_image_graph_def.pb'</span>， <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">graph_def = tf.GraphDef()</span><br><span class="line">graph_def.ParseFromString(f.read())</span><br><span class="line">_ = tf.import_graph_def(graph_def， name=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分类图片的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">classify_image</span><span class="params">(image， top_k=<span class="number">1</span>)</span>:</span></span><br><span class="line">image_data = tf.gfile.FastGFile(image， <span class="string">'rb'</span>).read()</span><br><span class="line"></span><br><span class="line">create_graph()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line"><span class="comment"># 'softmax:0': A tensor containing the normalized prediction across 1000 labels</span></span><br><span class="line"><span class="comment"># 'pool_3:0': A tensor containing the next-to-last layer containing 2048 float description of the image</span></span><br><span class="line"><span class="comment"># 'DecodeJpeg/contents:0': A tensor containing a string providing JPEG encoding of the image</span></span><br><span class="line">softmax_tensor = sess.graph.get_tensor_by_name(<span class="string">'softmax:0'</span>)</span><br><span class="line">predictions = sess.run(softmax_tensor， feed_dict=&#123;<span class="string">'DecodeJpeg/contents:0'</span>: image_data&#125;)</span><br><span class="line">predictions = np.squeeze(predictions)</span><br><span class="line"></span><br><span class="line">top_k = predictions.argsort()[-top_k:]</span><br><span class="line"><span class="keyword">for</span> node_id <span class="keyword">in</span> top_k:</span><br><span class="line">human_string = node_id_to_name[node_id]</span><br><span class="line">score = predictions[node_id]</span><br><span class="line">print(<span class="string">'%s (score = %.5f)'</span> % (human_string， score))</span><br><span class="line"></span><br><span class="line">classify_image(<span class="string">'./img/test3.png'</span>)</span><br></pre></td></tr></table></figure><p><strong>定制分类任务</strong></p><p>Inception-v3是针对ImageNet图片分类设计的，因此最后一层全连接层的神经元个数和分类标签的个数相同。如果需要特别定制分类任务的话，只需要使用自己的标注数据，然后替换掉最后一层全连接层即可。</p><p>最后一层全连接层的神经元个数等于定制分类任务的标签个数，模型只训练最后一层的参数，其他参数保持不变。这样的话保留了Inception-v3对于图像的理解和抽象能力，同时满足了定制的分类任务，属于迁移学习的一种典型应用场景。</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ML系列5：tensorflow入门-2</title>
      <link href="/2020/01/10/ML-05/"/>
      <url>/2020/01/10/ML-05/</url>
      
        <content type="html"><![CDATA[<p>核心内容：以下介绍tensorflow的进阶使用(以tensorflow v2.0为例)。如果上手机器学习直接接触的是tensorflow v2.0，则没有必要去学习tensorflow v1的版本。tensorflow v2.0极大地简化了使用，对用户非常友好。</p><a id="more"></a><p><a href="https://iloveyou11.github.io/2019/12/04/ML-01/" target="_blank" rel="noopener">ML系列1：AI学习资源与知识点</a><br><a href="https://iloveyou11.github.io/2019/12/10/ML-02/" target="_blank" rel="noopener">ML系列2：机器学习必会算法</a><br><a href="https://iloveyou11.github.io/2019/12/29/ML-04/" target="_blank" rel="noopener">ML系列3：深度学习中的问题解答</a><br><a href="https://iloveyou11.github.io/2020/01/02/ML-05/" target="_blank" rel="noopener">ML系列4：tensorflow入门-1</a><br><a href="https://iloveyou11.github.io/2020/01/10/ML-06/" target="_blank" rel="noopener">ML系列5：tensorflow入门-2</a><br><a href="https://iloveyou11.github.io/2020/01/30/ML-07/" target="_blank" rel="noopener">ML系列6：tensorflow项目实战</a></p><p>具体教程详见<a href="https://zhuanlan.zhihu.com/p/59507137" target="_blank" rel="noopener">最全Tensorflow2.0 入门教程持续更新</a></p><h3 id="一、tensorflow2-0安装"><a href="#一、tensorflow2-0安装" class="headerlink" title="一、tensorflow2.0安装"></a>一、tensorflow2.0安装</h3><p>Tensorflow2.0可以直接用pip安装:<code>pip install tensorflow==2.0.0-alpha0</code><br>如果速度比较慢，可以换国内清华源， 在终端执行下面命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 升级 pip 到最新的版本 (&gt;=10.0.0) 后进行配置：</span></span><br><span class="line">pip install pip -U</span><br><span class="line">pip config set <span class="keyword">global</span>.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>然后重新运行安装命令：<code>pip install tensorflow==2.0.0-alpha0</code> ,这样，就可以开始使用tensorflow 2.0了</p><h3 id="二、tensorflow2-0使用"><a href="#二、tensorflow2-0使用" class="headerlink" title="二、tensorflow2.0使用"></a>二、tensorflow2.0使用</h3><h4 id="Keras-快速入门"><a href="#Keras-快速入门" class="headerlink" title="Keras 快速入门"></a>Keras 快速入门</h4><p><strong>tf.keras是tensorflow2.0的核心高阶API。</strong><br>Keras 是一个用于构建和训练深度学习模型的高阶 API。它可用于快速设计原型、高级研究和生产。<br><strong>tensorflow2推荐使用keras构建网络</strong>，常见的神经网络都包含在keras.layer中(最新的tf.keras的版本可能和keras不同)</p><p><strong>训练的6部曲</strong></p><ul><li>import</li><li>train, test</li><li>model=tf.keras.models.Sequential()</li><li>model.compile()</li><li>model.fit</li><li>model.summary(非必须)</li></ul><p><strong>导入tf.keras</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line">print(tf.__version__)</span><br><span class="line">print(keras.__version__)</span><br></pre></td></tr></table></figure><p><strong>构建模型</strong></p><ol><li>直接堆叠构建模型</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接叠加层构建模型</span></span><br><span class="line">model = tf.keras.Sequential()</span><br><span class="line">model.add(layers.Dense(<span class="number">32</span>, activation=<span class="string">'relu'</span>))</span><br><span class="line">model.add(layers.Dense(<span class="number">32</span>, activation=<span class="string">'relu'</span>))</span><br><span class="line">model.add(layers.Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用函数api构建模型</span></span><br><span class="line">input_x = tf.keras.Input(shape=(<span class="number">72</span>,))</span><br><span class="line">hidden1 = layers.Dense(<span class="number">32</span>, activation=<span class="string">'relu'</span>)(input_x)</span><br><span class="line">hidden2 = layers.Dense(<span class="number">16</span>, activation=<span class="string">'relu'</span>)(hidden1)</span><br><span class="line">pred = layers.Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>)(hidden2)</span><br><span class="line">model = tf.keras.Model(inputs=input_x, outputs=pred)</span><br></pre></td></tr></table></figure><ol start="2"><li>使用Sequential批量构建模型</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">model=tf.keras.models.Sequential([</span><br><span class="line">    tf.keras.layers.Flatten(),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">128</span>,activation=<span class="string">'relu'</span>),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">10</span>,activation=<span class="string">'softmax'</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure><ol start="3"><li>使用class构建模型</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MnistModel</span><span class="params">(Model)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(MnistModel,self).__init__()</span><br><span class="line">        self.flatten=Flatten()</span><br><span class="line">        self.d1=Dense(<span class="number">128</span>,activation=<span class="string">'relu'</span>)</span><br><span class="line">        self.d2=Dense(<span class="number">10</span>,activation=<span class="string">'softmax'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self,x)</span>:</span></span><br><span class="line">        x=self.flatten(x)</span><br><span class="line">        x=self.d1(x)</span><br><span class="line">        y=self.d2(x)</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line">model=MnistModel()</span><br></pre></td></tr></table></figure><p><strong>tf.keras.layers中layer配置：</strong></p><ul><li>activation：设置层的激活函数。此参数由内置函数的名称指定，或指定为可调用对象。默认情况下，系统不会应用任何激活函数。</li><li>kernel_initializer 和 bias_initializer：创建层权重（核和偏差）的初始化方案。此参数是一个名称或可调用对象，默认为 “Glorot uniform” 初始化器。</li><li>kernel_regularizer 和 bias_regularizer：应用层权重（核和偏差）的正则化方案，例如 L1 或 L2 正则化。默认情况下，系统不会应用正则化函数。<br>如:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">layers.Dense(<span class="number">32</span>, activation=<span class="string">'sigmoid'</span>)</span><br><span class="line">layers.Dense(<span class="number">32</span>, activation=tf.sigmoid)</span><br><span class="line">layers.Dense(<span class="number">32</span>, kernel_initializer=<span class="string">'orthogonal'</span>)</span><br><span class="line">layers.Dense(<span class="number">32</span>, kernel_initializer=tf.keras.initializers.glorot_normal)</span><br><span class="line">layers.Dense(<span class="number">32</span>, kernel_regularizer=tf.keras.regularizers.l2(<span class="number">0.01</span>))</span><br><span class="line">layers.Dense(<span class="number">32</span>, kernel_regularizer=tf.keras.regularizers.l1(<span class="number">0.01</span>))</span><br></pre></td></tr></table></figure><p><strong>设置训练流程</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">model.compile(</span><br><span class="line">    optimizer=<span class="string">'adam'</span>,</span><br><span class="line">    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">False</span>),</span><br><span class="line">    metrics=[<span class="string">'sparse_categorical_accuracy'</span>]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>开始训练</strong><br><code>model.fit(train_x, train_y, batch_size=32, epochs=5)</code></p><p><strong>其他:</strong></p><ul><li><p><strong>自定义层</strong><br>通过对 tf.keras.layers.Layer 进行子类化并实现以下方法来创建自定义层, 其中, build是创建层的权重, call是定义前向传播, compute_output_shape指定在给定输入形状的情况下如何计算层的输出形状.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDense</span><span class="params">(tf.keras.layers.Layer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n_outputs)</span>:</span></span><br><span class="line">        super(MyDense, self).__init__()</span><br><span class="line">        self.n_outputs = n_outputs</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(self, input_shape)</span>:</span></span><br><span class="line">        self.kernel = self.add_variable(<span class="string">'kernel'</span>,shape=[int(input_shape[<span class="number">-1</span>]),self.n_outputs])</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, input)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> tf.matmul(input, self.kernel)</span><br><span class="line">layer = MyDense(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># print(layer(tf.ones([6, 5])))</span></span><br><span class="line"><span class="comment"># print(layer.trainable_variables)</span></span><br></pre></td></tr></table></figure></li><li><p><strong>回调</strong><br>常见的回调函数有EarlyStopping、TensorBoard、ModelCheckpoint等等, 具体详见<a href="https://tensorflow.google.cn/api_docs/python/tf/keras/callbacks" target="_blank" rel="noopener">https://tensorflow.google.cn/api_docs/python/tf/keras/callbacks</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">callbacks = [</span><br><span class="line">    tf.keras.callbacks.EarlyStopping(patience=<span class="number">2</span>, monitor=<span class="string">'val_loss'</span>),</span><br><span class="line">    tf.keras.callbacks.TensorBoard(log_dir=<span class="string">'./logs'</span>)</span><br><span class="line">]</span><br><span class="line">model.fit(train_x, train_y, batch_size=<span class="number">16</span>, epochs=<span class="number">5</span>,</span><br><span class="line">         callbacks=callbacks, validation_data=(val_x, val_y))</span><br></pre></td></tr></table></figure></li><li><p><strong>模型保存</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">这里加入保存模型的代码</span><br><span class="line">checkpoint_save_path=<span class="string">'./checkpoint/fashion_mnist.ckpt'</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(checkpoint_save_path+<span class="string">'.index'</span>):</span><br><span class="line">    print(<span class="string">'-----------load model_____________'</span>)</span><br><span class="line">    model.load_weights(checkpoint_save_path)</span><br><span class="line"></span><br><span class="line">cp_callback=tf.keras.callbacks.ModelCheckpoint(</span><br><span class="line">    filepath=checkpoint_save_path,</span><br><span class="line">    save_weights_only=<span class="literal">True</span>,</span><br><span class="line">    save_best_only=<span class="literal">True</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p><strong>权重保存</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将模型参数存入文本</span></span><br><span class="line"><span class="comment"># print(model.trainable_variables)</span></span><br><span class="line">file=open(<span class="string">'./weights.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> model.trainable_variables:</span><br><span class="line">    file.write(str(v.name)+<span class="string">'\n'</span>)</span><br><span class="line">    file.write(str(v.shape)+<span class="string">'\n'</span>)</span><br><span class="line">    file.write(str(v.numpy())+<span class="string">'\n'</span>)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p><strong>图片增强</strong><br>图片增强. 提高模型的鲁棒性.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里新增图片增强部分</span></span><br><span class="line">image_gen_train=ImageDataGenerator(</span><br><span class="line">    rescale=<span class="number">1.</span>/<span class="number">1.</span>,</span><br><span class="line">    rotation_range=<span class="number">45</span>,</span><br><span class="line">    width_shift_range=<span class="number">0.15</span>,</span><br><span class="line">    height_shift_range=<span class="number">0.15</span>,</span><br><span class="line">    horizontal_flip=<span class="literal">True</span>,</span><br><span class="line">    zoom_range=<span class="number">0.5</span></span><br><span class="line">)</span><br><span class="line">image_gen_train.fit(x_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...中间定义模型model</span></span><br><span class="line"></span><br><span class="line">history=model.fit(</span><br><span class="line">    image_gen_train.flow(x_train,y_train,batch_size=<span class="number">32</span>),<span class="comment">#这里注意使用image_gen_train.flow()</span></span><br><span class="line">    epochs=<span class="number">5</span>,</span><br><span class="line">    validation_data=(x_test,y_test),</span><br><span class="line">    validation_freq=<span class="number">1</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><h4 id="keras-函数api"><a href="#keras-函数api" class="headerlink" title="keras 函数api"></a>keras 函数api</h4><ol><li>构建简单的网络</li></ol><ul><li>创建网络</li><li>训练、验证及测试</li><li>模型保存和序列化</li></ul><ol start="2"><li>使用共享网络创建多个模型</li></ol><ul><li>在函数API中，通过在图层图中指定其输入和输出来创建模型。 这意味着可以使用单个图层图来生成多个模型。可以把整个模型，当作一层网络使用。</li></ul><ol start="3"><li>复杂网络结构构建</li></ol><ul><li>多输入与多输出网络</li><li>小型残差网络</li></ul><ol start="4"><li>共享网络层</li><li>模型复用</li><li>自定义网络层</li></ol><h4 id="使用keras训练模型"><a href="#使用keras训练模型" class="headerlink" title="使用keras训练模型"></a>使用keras训练模型</h4><ol><li>一般的模型构造、训练、测试流程</li><li>自定义损失和指标</li><li>使用tf.data构造数据</li><li>样本权重和类权重</li><li>多输入多输出模型</li><li>使用回调</li></ol><p>Keras中的回调是在训练期间（在epoch开始时，batch结束时，epoch结束时等）在不同点调用的对象，可用于实现以下行为：</p><ul><li>在培训期间的不同时间点进行验证（超出内置的每个时期验证）</li><li>定期检查模型或超过某个精度阈值</li><li>在训练似乎平稳时改变模型的学习率</li><li>在训练似乎平稳时对顶层进行微调</li><li>在培训结束或超出某个性能阈值时发送电子邮件或即时消息通知等等。</li></ul><p><strong>可使用的内置回调有</strong></p><ul><li>ModelCheckpoint：定期保存模型。</li><li>EarlyStopping：当训练不再改进验证指标时停止培训。</li><li>TensorBoard：定期编写可在TensorBoard中显示的模型日志（更多细节见“可视化”）。</li><li>CSVLogger：将丢失和指标数据流式传输到CSV文件。</li><li>…<br>还可以创建自己的回调方法.</li></ul><ol start="7"><li>自己构造训练和验证循环</li></ol><h4 id="用keras构建自己的网络层"><a href="#用keras构建自己的网络层" class="headerlink" title="用keras构建自己的网络层"></a>用keras构建自己的网络层</h4><ol><li>构建一个简单的网络层</li><li>使用子层递归构建网络层</li><li>其他网络层配置</li><li>构建自己的模型</li></ol><h4 id="keras模型保存和序列化"><a href="#keras模型保存和序列化" class="headerlink" title="keras模型保存和序列化"></a>keras模型保存和序列化</h4><ol><li>保存全模型<br>可以对整个模型进行保存，其保存的内容包括：</li></ol><ul><li>该模型的架构</li><li>模型的权重（在训练期间学到的）</li><li>模型的训练配置（你传递给编译的）</li><li>优化器及其状态（可以从中断的地方重新启动训练）<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">model.save(<span class="string">'the_save_model.h5'</span>)</span><br><span class="line">new_model = keras.models.load_model(<span class="string">'the_save_model.h5'</span>)</span><br><span class="line">new_prediction = new_model.predict(x_test)</span><br><span class="line">np.testing.assert_allclose(predictions, new_prediction, atol=<span class="number">1e-6</span>) <span class="comment"># 预测结果一样</span></span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>保存为SavedModel文件</li><li>仅保存网络结构</li><li>仅保存网络参数</li><li>完整的模型保存方法</li><li>保存网络权重为SavedModel格式</li><li>子类模型参数保存</li></ol><h3 id="三、tensorflow2-0基础网络结构"><a href="#三、tensorflow2-0基础网络结构" class="headerlink" title="三、tensorflow2.0基础网络结构"></a>三、tensorflow2.0基础网络结构</h3><h4 id="基础MLP网络"><a href="#基础MLP网络" class="headerlink" title="基础MLP网络"></a>基础MLP网络</h4><p><strong>回归任务</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 回归任务</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> tensorflow.keras <span class="keyword">as</span> keras</span><br><span class="line"><span class="keyword">import</span> tensorflow.keras.layers <span class="keyword">as</span> layers</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">(x_train, y_train), (x_test, y_test) = keras.datasets.boston_housing.load_data()</span><br><span class="line"><span class="comment"># print(x_train.shape, ' ', y_train.shape)</span></span><br><span class="line"><span class="comment"># print(x_test.shape, ' ', y_test.shape)</span></span><br><span class="line">model = keras.Sequential([</span><br><span class="line">    layers.Dense(<span class="number">32</span>, activation=<span class="string">'sigmoid'</span>, input_shape=(<span class="number">13</span>,)),</span><br><span class="line">    layers.Dense(<span class="number">32</span>, activation=<span class="string">'sigmoid'</span>),</span><br><span class="line">    layers.Dense(<span class="number">32</span>, activation=<span class="string">'sigmoid'</span>),</span><br><span class="line">    layers.Dense(<span class="number">1</span>)</span><br><span class="line">])</span><br><span class="line">model.compile(optimizer=keras.optimizers.SGD(<span class="number">0.1</span>),</span><br><span class="line">             loss=<span class="string">'mean_squared_error'</span>,  <span class="comment"># keras.losses.mean_squared_error</span></span><br><span class="line">             metrics=[<span class="string">'mse'</span>])</span><br><span class="line"><span class="comment"># model.summary()</span></span><br><span class="line">history =model.fit(x_train, y_train, batch_size=<span class="number">50</span>, epochs=<span class="number">50</span>, validation_split=<span class="number">0.1</span>, verbose=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">result = model.evaluate(x_test, y_test)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p><strong>分类任务</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分类任务</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_breast_cancer</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">whole_data = load_breast_cancer()</span><br><span class="line">x_data = whole_data.data</span><br><span class="line">y_data = whole_data.target</span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(x_data, y_data, test_size=<span class="number">0.3</span>, random_state=<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建模型</span></span><br><span class="line">model = keras.Sequential([</span><br><span class="line">    layers.Dense(<span class="number">32</span>, activation=<span class="string">'relu'</span>, input_shape=(<span class="number">30</span>,)),</span><br><span class="line">    layers.Dense(<span class="number">32</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    layers.Dense(<span class="number">1</span>, activation=<span class="string">'sigmoid'</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">model.compile(</span><br><span class="line">    optimizer=keras.optimizers.Adam(),</span><br><span class="line">    loss=keras.losses.binary_crossentropy,</span><br><span class="line">    metrics=[<span class="string">'accuracy'</span>]</span><br><span class="line">)</span><br><span class="line">model.fit(x_train, y_train, batch_size=<span class="number">64</span>, epochs=<span class="number">10</span>, verbose=<span class="number">1</span>)</span><br><span class="line">model.evaluate(x_test, y_test)</span><br><span class="line">print(model.metrics_names)</span><br></pre></td></tr></table></figure><h4 id="MLP及深度学习常见技巧"><a href="#MLP及深度学习常见技巧" class="headerlink" title="MLP及深度学习常见技巧"></a>MLP及深度学习常见技巧</h4><ol><li>权重初始化方案</li><li>激活函数</li><li>优化器</li><li>批正则化BN</li><li>dropout</li><li>.模型集成</li></ol><h4 id="基础CNN网络"><a href="#基础CNN网络" class="headerlink" title="基础CNN网络"></a>基础CNN网络</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">model = keras.Sequential()</span><br><span class="line"><span class="comment"># 卷积层</span></span><br><span class="line">model.add(layers.Conv2D(input_shape=(x_train.shape[<span class="number">1</span>], x_train.shape[<span class="number">2</span>], x_train.shape[<span class="number">3</span>]),</span><br><span class="line">                        filters=<span class="number">32</span>, kernel_size=(<span class="number">3</span>,<span class="number">3</span>), strides=(<span class="number">1</span>,<span class="number">1</span>), padding=<span class="string">'valid'</span>,</span><br><span class="line">                       activation=<span class="string">'relu'</span>))</span><br><span class="line"><span class="comment"># 池化层</span></span><br><span class="line">model.add(layers.MaxPool2D(pool_size=(<span class="number">2</span>,<span class="number">2</span>)))</span><br><span class="line"><span class="comment"># 全连接层</span></span><br><span class="line">model.add(layers.Flatten())</span><br><span class="line">model.add(layers.Dense(<span class="number">32</span>, activation=<span class="string">'relu'</span>))</span><br><span class="line"><span class="comment"># softmax层</span></span><br><span class="line">model.add(layers.Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>))</span><br></pre></td></tr></table></figure><h4 id="CNN变体网络"><a href="#CNN变体网络" class="headerlink" title="CNN变体网络"></a>CNN变体网络</h4><p><strong>AlexNet</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">deep_model = keras.Sequential([</span><br><span class="line">    layers.Conv2D(input_shape=((x_shape[<span class="number">1</span>], x_shape[<span class="number">2</span>], x_shape[<span class="number">3</span>])),</span><br><span class="line">                 filters=<span class="number">32</span>, kernel_size=(<span class="number">3</span>,<span class="number">3</span>), strides=(<span class="number">1</span>,<span class="number">1</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    layers.Conv2D(filters=<span class="number">32</span>, kernel_size=(<span class="number">3</span>,<span class="number">3</span>), strides=(<span class="number">1</span>,<span class="number">1</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    layers.MaxPool2D(pool_size=(<span class="number">2</span>,<span class="number">2</span>)),</span><br><span class="line">    layers.Conv2D(filters=<span class="number">32</span>, kernel_size=(<span class="number">3</span>,<span class="number">3</span>), strides=(<span class="number">1</span>,<span class="number">1</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    layers.Conv2D(filters=<span class="number">32</span>, kernel_size=(<span class="number">3</span>,<span class="number">3</span>), strides=(<span class="number">1</span>,<span class="number">1</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    layers.MaxPool2D(pool_size=(<span class="number">2</span>,<span class="number">2</span>)),</span><br><span class="line">    layers.Flatten(),</span><br><span class="line">    layers.Dense(<span class="number">32</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    layers.Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p><strong>添加了其它功能层的深度卷积</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">deep_model = keras.Sequential([</span><br><span class="line">    layers.Conv2D(input_shape=((x_shape[<span class="number">1</span>], x_shape[<span class="number">2</span>], x_shape[<span class="number">3</span>])),</span><br><span class="line">                 filters=<span class="number">32</span>, kernel_size=(<span class="number">3</span>,<span class="number">3</span>), strides=(<span class="number">1</span>,<span class="number">1</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    layers.BatchNormalization(),</span><br><span class="line">    layers.Conv2D(filters=<span class="number">32</span>, kernel_size=(<span class="number">3</span>,<span class="number">3</span>), strides=(<span class="number">1</span>,<span class="number">1</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    layers.BatchNormalization(),</span><br><span class="line">    layers.MaxPool2D(pool_size=(<span class="number">2</span>,<span class="number">2</span>)),</span><br><span class="line">    layers.Conv2D(filters=<span class="number">32</span>, kernel_size=(<span class="number">3</span>,<span class="number">3</span>), strides=(<span class="number">1</span>,<span class="number">1</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    layers.BatchNormalization(),</span><br><span class="line">    layers.BatchNormalization(),</span><br><span class="line">    layers.Conv2D(filters=<span class="number">32</span>, kernel_size=(<span class="number">3</span>,<span class="number">3</span>), strides=(<span class="number">1</span>,<span class="number">1</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    layers.MaxPool2D(pool_size=(<span class="number">2</span>,<span class="number">2</span>)),</span><br><span class="line">    layers.Flatten(),</span><br><span class="line">    layers.Dense(<span class="number">32</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    layers.Dropout(<span class="number">0.2</span>),</span><br><span class="line">    layers.Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p><strong>NIN网络 (GoogleNet 中就用到了NIN结构)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">deep_model = keras.Sequential([</span><br><span class="line">    layers.Conv2D(input_shape=((x_shape[<span class="number">1</span>], x_shape[<span class="number">2</span>], x_shape[<span class="number">3</span>])),</span><br><span class="line">                 filters=<span class="number">32</span>, kernel_size=(<span class="number">3</span>,<span class="number">3</span>), strides=(<span class="number">1</span>,<span class="number">1</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    layers.BatchNormalization(),</span><br><span class="line">    layers.Conv2D(filters=<span class="number">16</span>, kernel_size=(<span class="number">1</span>,<span class="number">1</span>), strides=(<span class="number">1</span>,<span class="number">1</span>), padding=<span class="string">'valid'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    layers.BatchNormalization(),</span><br><span class="line">    layers.MaxPool2D(pool_size=(<span class="number">2</span>,<span class="number">2</span>)),</span><br><span class="line">    layers.Conv2D(filters=<span class="number">32</span>, kernel_size=(<span class="number">3</span>,<span class="number">3</span>), strides=(<span class="number">1</span>,<span class="number">1</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    layers.BatchNormalization(),</span><br><span class="line">    layers.Conv2D(filters=<span class="number">16</span>, kernel_size=(<span class="number">1</span>,<span class="number">1</span>), strides=(<span class="number">1</span>,<span class="number">1</span>), padding=<span class="string">'valid'</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    layers.BatchNormalization(),</span><br><span class="line">    layers.MaxPool2D(pool_size=(<span class="number">2</span>,<span class="number">2</span>)),</span><br><span class="line">    layers.Flatten(),</span><br><span class="line">    layers.Dense(<span class="number">32</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    layers.Dropout(<span class="number">0.2</span>),</span><br><span class="line">    layers.Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h4 id="文本卷积"><a href="#文本卷积" class="headerlink" title="文本卷积"></a>文本卷积</h4><h4 id="LSTM和GRU"><a href="#LSTM和GRU" class="headerlink" title="LSTM和GRU"></a>LSTM和GRU</h4><h4 id="自编码器"><a href="#自编码器" class="headerlink" title="自编码器"></a>自编码器</h4><h4 id="卷积自编码器"><a href="#卷积自编码器" class="headerlink" title="卷积自编码器"></a>卷积自编码器</h4><h4 id="词嵌入"><a href="#词嵌入" class="headerlink" title="词嵌入"></a>词嵌入</h4><h4 id="DCGAN"><a href="#DCGAN" class="headerlink" title="DCGAN"></a>DCGAN</h4><h4 id="使用Estimator构建Boosted-trees"><a href="#使用Estimator构建Boosted-trees" class="headerlink" title="使用Estimator构建Boosted trees"></a>使用Estimator构建Boosted trees</h4><h4 id="RNN文本分类"><a href="#RNN文本分类" class="headerlink" title="RNN文本分类"></a>RNN文本分类</h4><h4 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h4><h3 id="五、eager模式"><a href="#五、eager模式" class="headerlink" title="五、eager模式"></a>五、eager模式</h3><p>众所周知，Tensorflow入门之所以困难，与其采用的Graph 和 Session 模式有关，这与原生的 Python 代码简单、直观的印象格格不入。同时，由于计算仅仅发生在Session里面，所以初始化参数和变量的时候没办法将结果打印出来，以至于调试起来也十分困难。</p><p>当然Google官方也意识到了这点，于是引入了Eager模式，在这个模式下tensorflow的常量和变量可以直接计算并打印出来，甚至还可以和numpy数组混合计算。</p><p>运行tensorflow程序，需要导入tensorflow模块。 从TensorFlow 2.0开始，默认情况下会启用Eager模式执行。TensorFlow 的 Eager 模式是一个命令式、由运行定义的接口，一旦从 Python 被调用，其操作立即被执行 ，无需事先构建静态图。这为TensorFlow提供了一个更具交互性能的前端。</p><h4 id="张量极其操作"><a href="#张量极其操作" class="headerlink" title="张量极其操作"></a>张量极其操作</h4><h4 id="自定义层"><a href="#自定义层" class="headerlink" title="自定义层"></a>自定义层</h4><h4 id="自动求导"><a href="#自动求导" class="headerlink" title="自动求导"></a>自动求导</h4><h4 id="使用低级api训练-非tf-keras"><a href="#使用低级api训练-非tf-keras" class="headerlink" title="使用低级api训练(非tf.keras)"></a>使用低级api训练(非tf.keras)</h4><h4 id="自定义训练实战-非tf-keras"><a href="#自定义训练实战-非tf-keras" class="headerlink" title="自定义训练实战(非tf.keras)"></a>自定义训练实战(非tf.keras)</h4><h4 id="TF-fuction和AutoGraph"><a href="#TF-fuction和AutoGraph" class="headerlink" title="TF fuction和AutoGraph"></a>TF fuction和AutoGraph</h4><h3 id="六、tensorflow-js"><a href="#六、tensorflow-js" class="headerlink" title="六、tensorflow.js"></a>六、tensorflow.js</h3><h4 id="如何安装"><a href="#如何安装" class="headerlink" title="如何安装"></a>如何安装</h4><p>Tensorflow.js Converter 依赖<strong>python3.6.8</strong>版本</p><p><strong>搭建虚拟环境：</strong></p><ol><li>安装conda<br>可以使用<a href="https://mirror.tuna.tsinghua.edu.cn/help/anaconda/" target="_blank" rel="noopener">清华镜像源</a>，安装Miniconda 即可（注意配置环境变量）</li><li>在终端检查conda命令是否可用，并创建指定python版本的虚拟环境<br><code>conda create -n [name] python=3.6.8</code> 创建虚拟环境<br><code>conda remove -n [name] --all</code> 删除虚拟环境<br><code>conda info --envs</code> 查看虚拟环境<br><code>conda activate [name]</code> 激活虚拟环境（可以发现python版本已经改变）<br><code>conda deactivate [name]</code> 退出虚拟环境</li><li>安装tfjs converter<br><code>pip install tensorflowjs</code>安装<br><code>tensorflowjs_converter -h</code>检查是否安装成功</li></ol><h4 id="python与js模型的互转"><a href="#python与js模型的互转" class="headerlink" title="python与js模型的互转"></a>python与js模型的互转</h4><ol><li>准备工作<br><code>conda activate [name]</code>激活<br><code>tensorflowjs_converter</code>检查</li><li>开始转换——具体格式建议看文档（github tfjs-converter）<br>1）python模型转js模型<br><code>tensorflowjs_converter --input_format=keras --output_format=tf_layers_model [input_path] [output_path]</code><br>2）js模型转python模型<br><code>tensorflowjs_converter --input_format=tf_layers_model --output_format=keras [input_path] [output_path]</code></li><li>验证模型正确性</li></ol><h4 id="模型加速"><a href="#模型加速" class="headerlink" title="模型加速"></a>模型加速</h4><ol><li>分片(–weight_shared_size_bytes=[size])<br><code>tensorflowjs_converter --input_format=tf_layers_model --output_format=tf_layers_model --weight_shared_size_bytes=100000 [input_path] [output_path]</code><br>在输出文件夹中会发现很多块分片后的模型，这样在加载模型时可以使用并发实现加速</li><li>量化(–quantization_bytes=[n])<br><code>tensorflowjs_converter --input_format=tf_layers_model --output_format=tf_layers_model --quantization_bytes=2 [input_path] [output_path]</code></li><li>通过转为tfjs_graph_model来加速模型——内部实现了凸优化(–output_format=tf_graph_model)<br><code>tensorflowjs_converter --input_format=tf_layers_model --output_format=tf_graph_model [input_path] [output_path]</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ML系列4：tensorflow入门-1</title>
      <link href="/2020/01/02/ML-04/"/>
      <url>/2020/01/02/ML-04/</url>
      
        <content type="html"><![CDATA[<p>核心内容：以下介绍tensorflow的基础概念和使用(以tensorflow v1.3为例)</p><a id="more"></a><p><a href="https://iloveyou11.github.io/2019/12/04/ML-01/" target="_blank" rel="noopener">ML系列1：AI学习资源与知识点</a><br><a href="https://iloveyou11.github.io/2019/12/10/ML-02/" target="_blank" rel="noopener">ML系列2：机器学习必会算法</a><br><a href="https://iloveyou11.github.io/2019/12/29/ML-04/" target="_blank" rel="noopener">ML系列3：深度学习中的问题解答</a><br><a href="https://iloveyou11.github.io/2020/01/02/ML-05/" target="_blank" rel="noopener">ML系列4：tensorflow入门-1</a><br><a href="https://iloveyou11.github.io/2020/01/10/ML-06/" target="_blank" rel="noopener">ML系列5：tensorflow入门-2</a><br><a href="https://iloveyou11.github.io/2020/01/30/ML-07/" target="_blank" rel="noopener">ML系列6：tensorflow项目实战</a></p><h3 id="一、tensorflow基础"><a href="#一、tensorflow基础" class="headerlink" title="一、tensorflow基础"></a>一、tensorflow基础</h3><h4 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h4><p>计算单元有常量<code>c = tf.constant(2)</code>，变量<code>v = tf.Variable(2)</code>，占位符<code>p = tf.placeholder(tf.float32)</code>。常见四则运算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add = tf.add(a, b)</span><br><span class="line">sub = tf.subtract(a, b)</span><br><span class="line">mul = tf.multiply(a, b)</span><br><span class="line">div = tf.divide(a, b)</span><br></pre></td></tr></table></figure><p><strong>session</strong><br>有两种方式：</p><ol><li>sess = tf.Session()直接创建sess，但记得要sess.close()，避免内存泄漏</li><li>使用with tf.Session() as sess，利用with关闭会话，意外关闭也会释放资源</li></ol><p>注意事项：打印值一定要用sess.run()，否则无法正确打印值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">const1 = tf.constant([[<span class="number">2</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">1</span>]])</span><br><span class="line">const2 = tf.constant([[<span class="number">4</span>, <span class="number">5</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># matmul 矩阵乘法</span></span><br><span class="line">mul = tf.matmul(const1, const2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> const1.graph <span class="keyword">is</span> tf.compat.v1.get_default_graph():</span><br><span class="line">    print(<span class="string">'const1所在的图是当前上下文默认的图'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一种方法 sess.close()关闭会话</span></span><br><span class="line">sess = tf.Session()</span><br><span class="line">ret = sess.run(mul)</span><br><span class="line">print(ret)</span><br><span class="line">sess.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种方法 利用with关闭会话，意外关闭也会释放资源</span></span><br><span class="line"><span class="comment"># with tf.Session() as sess:</span></span><br><span class="line"><span class="comment">#     ret2 = sess.run(mul)</span></span><br><span class="line"><span class="comment">#     print(ret2)</span></span><br></pre></td></tr></table></figure><p><strong>下面总结下计算过程：</strong></p><ul><li>创建数据：可以创建常量、变量和占位符。</li><li>构建图：通过前面的数据构建一张图。</li><li>初始化：把变量初始化。</li><li>计算：必须通过开启一个 Session 来计算图</li></ul><h4 id="tensorboard"><a href="#tensorboard" class="headerlink" title="tensorboard"></a>tensorboard</h4><img width="60%" src="https://i.loli.net/2020/04/03/LMWRuPwGUpKTx8B.jpg" alt="tensorboard"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">w = tf.compat.v1.Variable(<span class="number">2.0</span>, dtype=tf.float32, name=<span class="string">"weight"</span>)</span><br><span class="line">b = tf.compat.v1.Variable(<span class="number">1.0</span>, dtype=tf.float32, name=<span class="string">"bias"</span>)</span><br><span class="line">x = tf.placeholder(dtype=tf.float32, name=<span class="string">"input"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">'output'</span>):</span><br><span class="line">    y = w*x+b</span><br><span class="line"></span><br><span class="line">path = <span class="string">'./log'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用于初始化变量的操作</span></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(init)</span><br><span class="line">    writer = tf.compat.v1.summary.FileWriter(path, sess.graph)</span><br><span class="line">    result = sess.run(y, &#123;x: <span class="number">3.0</span>&#125;)</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p>命令：<code>tensorboard --logdir=log</code>,访问<a href="http://localhost:6006/即可。">http://localhost:6006/即可。</a></p><h3 id="二、tensorflow举例"><a href="#二、tensorflow举例" class="headerlink" title="二、tensorflow举例"></a>二、tensorflow举例</h3><h4 id="变量、常量"><a href="#变量、常量" class="headerlink" title="变量、常量"></a>变量、常量</h4><p><strong>constant、Variable、placeholder、Parse</strong><br>hello world</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">hw = tf.constant(<span class="string">'hello world!'</span>)</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line">print(sess.run(hw))</span><br><span class="line"></span><br><span class="line">sess.close()</span><br></pre></td></tr></table></figure><p>变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">state = tf.Variable(<span class="number">0</span>, name=<span class="string">'counter'</span>)</span><br><span class="line">one = tf.constant(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">value = tf.add(state, one)</span><br><span class="line">update = tf.assign(state, value)</span><br><span class="line"></span><br><span class="line">init = tf.compat.v1.global_variables_initializer()</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(init)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        sess.run(update)</span><br><span class="line">        print(sess.run(state))</span><br></pre></td></tr></table></figure><p>placeholder</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">input1 = tf.placeholder(tf.float32)</span><br><span class="line">input2 = tf.placeholder(tf.float32)</span><br><span class="line"></span><br><span class="line">output = tf.multiply(input1, input2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    print(sess.run(output, feed_dict=&#123;input1: [<span class="number">7.</span>], input2: [<span class="number">2.</span>]&#125;))</span><br></pre></td></tr></table></figure><h4 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x_data = np.random.rand(<span class="number">100</span>).astype(np.float32)</span><br><span class="line">y_data = x_data*<span class="number">0.1</span>+<span class="number">0.3</span></span><br><span class="line"></span><br><span class="line">Weigths = tf.Variable(tf.random.uniform([<span class="number">1</span>], <span class="number">-1</span>, <span class="number">1</span>))</span><br><span class="line">biases = tf.Variable(tf.zeros([<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">y = Weigths*x_data+biases</span><br><span class="line"></span><br><span class="line">loss = tf.reduce_mean(tf.square(y-y_data))</span><br><span class="line">optimizer = tf.compat.v1.train.GradientDescentOptimizer(<span class="number">0.5</span>)  <span class="comment"># 学习率</span></span><br><span class="line">train = optimizer.minimize(loss)</span><br><span class="line"></span><br><span class="line">init = tf.compat.v1.global_variables_initializer()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建会话，激活init</span></span><br><span class="line">sess = tf.compat.v1.Session()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> step <span class="keyword">in</span> range(<span class="number">200</span>):</span><br><span class="line">    sess.run(train)</span><br><span class="line">    <span class="keyword">if</span> step % <span class="number">20</span> == <span class="number">0</span>:</span><br><span class="line">        print(step, sess.run(Weigths), sess.run(biases))</span><br><span class="line"></span><br><span class="line"><span class="comment"># result：</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0 [0.85750043] [-0.13565287]</span></span><br><span class="line"><span class="comment"># 20 [0.319864] [0.1856415]</span></span><br><span class="line"><span class="comment"># 40 [0.1624105] [0.26753825]</span></span><br><span class="line"><span class="comment"># 60 [0.11771582] [0.29078543]</span></span><br><span class="line"><span class="comment"># 80 [0.1050288] [0.29738435]</span></span><br><span class="line"><span class="comment"># 100 [0.10142749] [0.29925755]</span></span><br><span class="line"><span class="comment"># 120 [0.10040522] [0.29978925]</span></span><br><span class="line"><span class="comment"># 140 [0.10011502] [0.2999402]</span></span><br><span class="line"><span class="comment"># 160 [0.10003265] [0.29998302]</span></span><br><span class="line"><span class="comment"># 180 [0.10000926] [0.29999518]</span></span><br></pre></td></tr></table></figure><p>激活函数模拟</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">-10</span>, <span class="number">10</span>, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常见激活函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(inputs)</span>:</span></span><br><span class="line">    y = [<span class="number">1</span>/float(<span class="number">1</span>+np.exp(-x)) <span class="keyword">for</span> x <span class="keyword">in</span> inputs]</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">relu</span><span class="params">(inputs)</span>:</span></span><br><span class="line">    y = [x*(x &gt; <span class="number">0</span>) <span class="keyword">for</span> x <span class="keyword">in</span> inputs]</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tanh</span><span class="params">(inputs)</span>:</span></span><br><span class="line">    y = [(np.exp(x)-np.exp(-x))/float(np.exp(x)+np.exp(-x)) <span class="keyword">for</span> x <span class="keyword">in</span> inputs]</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">softplus</span><span class="params">(inputs)</span>:</span></span><br><span class="line">    y = [np.log(<span class="number">1</span>+np.exp(x)) <span class="keyword">for</span> x <span class="keyword">in</span> inputs]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 经过激活函数处理后的y</span></span><br><span class="line">y_sigmoid = tf.nn.sigmoid(x)</span><br><span class="line">y_relu = tf.nn.relu(x)</span><br><span class="line">y_tanh = tf.nn.tanh(x)</span><br><span class="line">y_softplus = tf.nn.softplus(x)</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line">y_sigmoid, y_relu, y_tanh, y_softplus = sess.run(</span><br><span class="line">    [y_sigmoid, y_relu, y_tanh, y_softplus])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建图像</span></span><br><span class="line">plt.subplot(<span class="number">221</span>)</span><br><span class="line">plt.plot(x, y_sigmoid, c=<span class="string">'red'</span>, label=<span class="string">'sigmoid'</span>)</span><br><span class="line">plt.ylim(<span class="number">-0.2</span>, <span class="number">1.2</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'best'</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">222</span>)</span><br><span class="line">plt.plot(x, y_relu, c=<span class="string">'red'</span>, label=<span class="string">'relu'</span>)</span><br><span class="line">plt.ylim(<span class="number">-1</span>, <span class="number">6</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'best'</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">223</span>)</span><br><span class="line">plt.plot(x, y_tanh, c=<span class="string">'red'</span>, label=<span class="string">'tanh'</span>)</span><br><span class="line">plt.ylim(<span class="number">-1.3</span>, <span class="number">1.3</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'best'</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">224</span>)</span><br><span class="line">plt.plot(x, y_softplus, c=<span class="string">'red'</span>, label=<span class="string">'softplus'</span>)</span><br><span class="line">plt.ylim(<span class="number">-1</span>, <span class="number">6</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'best'</span>)</span><br><span class="line">plt.show()</span><br><span class="line">sess.close()</span><br></pre></td></tr></table></figure><h4 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造数据</span></span><br><span class="line">num = <span class="number">100</span></span><br><span class="line">vectors = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正态随机分布函数生成100个点</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">    x1 = np.random.normal(<span class="number">0</span>, <span class="number">0.6</span>)</span><br><span class="line">    y1 = <span class="number">0.1</span>*x1+<span class="number">0.2</span>+np.random.normal(<span class="number">0</span>, <span class="number">0.04</span>)</span><br><span class="line">    vectors.append([x1, y1])</span><br><span class="line"></span><br><span class="line">x_data = [v[<span class="number">0</span>] <span class="keyword">for</span> v <span class="keyword">in</span> vectors]</span><br><span class="line">y_data = [v[<span class="number">1</span>] <span class="keyword">for</span> v <span class="keyword">in</span> vectors]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示所有随机点</span></span><br><span class="line"><span class="comment"># plt.plot(x_data, y_data, 'r*')</span></span><br><span class="line"><span class="comment"># plt.title = 'linear regression using GD'</span></span><br><span class="line"><span class="comment"># plt.legend()</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建线性回归模型</span></span><br><span class="line">w = tf.Variable(tf.random_uniform([<span class="number">1</span>], <span class="number">-1</span>, <span class="number">1</span>))</span><br><span class="line">b = tf.Variable(tf.zeros([<span class="number">1</span>]))</span><br><span class="line">y = w*x_data+b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 损失函数</span></span><br><span class="line">loss = tf.reduce_mean(tf.square(y-y_data))</span><br><span class="line"><span class="comment"># 梯度下降优化器来优化loss function</span></span><br><span class="line">optimizer = tf.train.GradientDescentOptimizer(<span class="number">0.5</span>)  <span class="comment"># 学习率0.5</span></span><br><span class="line">train = optimizer.minimize(loss)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建会话，并初始化变量</span></span><br><span class="line">sess = tf.Session()</span><br><span class="line">init = tf.compat.v1.global_variables_initializer()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练20步</span></span><br><span class="line"><span class="keyword">for</span> step <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">    sess.run(train)</span><br><span class="line">    <span class="comment"># 打印每一步损失，w、b</span></span><br><span class="line">    print(<span class="string">"step:%d,loss:%f,weight:%f,bias:%f"</span> %</span><br><span class="line">          (step, sess.run(loss), sess.run(w), sess.run(b)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制最佳拟合曲线</span></span><br><span class="line">plt.plot(x_data, y_data, <span class="string">'r*'</span>, label=<span class="string">'original line'</span>)</span><br><span class="line">plt.title = <span class="string">'linear regression using GD'</span></span><br><span class="line">plt.plot(x_data, sess.run(w)*x_data+sess.run(b), label=<span class="string">'fitted line'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.xlabel(<span class="string">'x'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">sess.close()</span><br></pre></td></tr></table></figure><h4 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">'mnist_data'</span>, one_hot=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_layer</span><span class="params">(inputs, in_size, out_size, activation_function=None)</span>:</span></span><br><span class="line">    Weights = tf.Variable(tf.random.normal([in_size, out_size]), name=<span class="string">'W'</span>)</span><br><span class="line">    baises = tf.Variable(tf.zeros([<span class="number">1</span>, out_size])+<span class="number">0.1</span>, name=<span class="string">'b'</span>)</span><br><span class="line">    Wx_plus_b = tf.matmul(inputs, Weights)+baises</span><br><span class="line">    <span class="keyword">if</span> activation_function <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        outputs = Wx_plus_b</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        outputs = activation_function(Wx_plus_b)</span><br><span class="line">    <span class="keyword">return</span> outputs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_accuracy</span><span class="params">(v_xs, v_ys)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> prediction</span><br><span class="line">    y_pre = sess.run(prediction, feed_dict=&#123;xs: v_xs&#125;)</span><br><span class="line">    correct_prediction = tf.equal(tf.argmax(y_pre, <span class="number">1</span>), tf.argmax(v_ys, <span class="number">1</span>))</span><br><span class="line">    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</span><br><span class="line">    result = sess.run(accuracy, feed_dict=&#123;xs: v_xs, ys: v_ys&#125;)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入</span></span><br><span class="line">xs = tf.compat.v1.placeholder(tf.float32, [<span class="literal">None</span>, <span class="number">28</span>*<span class="number">28</span>], name=<span class="string">'x_input'</span>)</span><br><span class="line">ys = tf.compat.v1.placeholder(tf.float32, [<span class="literal">None</span>, <span class="number">10</span>], name=<span class="string">'y_input'</span>)</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">prediction = add_layer(xs, <span class="number">784</span>, <span class="number">10</span>, activation_function=tf.nn.softmax)</span><br><span class="line"><span class="comment"># 交叉熵损失</span></span><br><span class="line">cross_entropy = tf.reduce_mean(-tf.reduce_sum(ys *</span><br><span class="line">                                              tf.log(prediction), reduction_indices=[<span class="number">1</span>]))</span><br><span class="line">train_step = tf.train.GradientDescentOptimizer(<span class="number">0.5</span>).minimize(cross_entropy)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 会话</span></span><br><span class="line">init = tf.compat.v1.global_variables_initializer()</span><br><span class="line">sess = tf.compat.v1.Session()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    <span class="comment"># 100个100个学习</span></span><br><span class="line">    batch_xs, batch_ys = mnist.train.next_batch(<span class="number">100</span>)</span><br><span class="line">    sess.run(train_step, feed_dict=&#123;</span><br><span class="line">        xs: batch_xs,</span><br><span class="line">        ys: batch_ys</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">50</span> == <span class="number">0</span>:</span><br><span class="line">        print(compute_accuracy(mnist.test.images, mnist.test.labels))</span><br></pre></td></tr></table></figure><h4 id="卷积神经网络CNN"><a href="#卷积神经网络CNN" class="headerlink" title="卷积神经网络CNN"></a>卷积神经网络CNN</h4><p><strong>示例1： 输入1个神经元，隐藏层10个神经元，输出1个神经元，并且动态模拟曲线生成过程</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_layer</span><span class="params">(inputs, in_size, out_size, activation_function=None)</span>:</span></span><br><span class="line">    Weights = tf.Variable(tf.random.normal([in_size, out_size]))</span><br><span class="line">    baises = tf.Variable(tf.zeros([<span class="number">1</span>, out_size])+<span class="number">0.1</span>)</span><br><span class="line">    Wx_plus_b = tf.matmul(inputs, Weights)+baises</span><br><span class="line">    <span class="keyword">if</span> activation_function <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        outputs = Wx_plus_b</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        outputs = activation_function(Wx_plus_b)</span><br><span class="line">    <span class="keyword">return</span> outputs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造数据</span></span><br><span class="line">x_data = np.linspace(<span class="number">-1</span>, <span class="number">1</span>, <span class="number">300</span>)[:, np.newaxis]</span><br><span class="line">noise = np.random.normal(<span class="number">0</span>, <span class="number">0.05</span>, x_data.shape)</span><br><span class="line">y_data = np.square(x_data)<span class="number">-0.5</span>+noise</span><br><span class="line"></span><br><span class="line">xs = tf.compat.v1.placeholder(tf.float32, [<span class="literal">None</span>, <span class="number">1</span>])</span><br><span class="line">ys = tf.compat.v1.placeholder(tf.float32, [<span class="literal">None</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建神经网络</span></span><br><span class="line">layer1 = add_layer(xs, <span class="number">1</span>, <span class="number">10</span>, activation_function=tf.nn.relu)</span><br><span class="line">prediction = add_layer(layer1, <span class="number">10</span>, <span class="number">1</span>, activation_function=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 损失函数</span></span><br><span class="line">loss = tf.reduce_mean(tf.reduce_sum(</span><br><span class="line">    tf.square(ys-prediction), reduction_indices=[<span class="number">1</span>]))</span><br><span class="line">train = tf.train.GradientDescentOptimizer(<span class="number">0.1</span>).minimize(loss)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">init = tf.compat.v1.global_variables_initializer()</span><br><span class="line">sess = tf.compat.v1.Session()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原始数据散点分布图</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">ax.scatter(x_data, y_data)</span><br><span class="line">plt.ion()  <span class="comment"># 该程序plt.show()后不暂停，继续往下走</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    sess.run(train, feed_dict=&#123;xs: x_data, ys: y_data&#125;)</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">20</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># print(sess.run(loss, feed_dict=&#123;xs: x_data, ys: y_data&#125;))</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 先抹除这条线</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ax.lines.remove(lines[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        prediction_value = sess.run(prediction, feed_dict=&#123;</span><br><span class="line">                                    xs: x_data, ys: y_data&#125;)</span><br><span class="line">        lines = ax.plot(x_data, prediction_value, <span class="string">'r-'</span>, lw=<span class="number">5</span>)</span><br><span class="line">        plt.pause(<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure><p><strong>示例2： 整个流程： 卷积——池化——卷积——池化——全连接——全连接</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卷积神经网络</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">'mnist_data'</span>, one_hot=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_layer</span><span class="params">(inputs, in_size, out_size, activation_function=None)</span>:</span></span><br><span class="line">    Weights = tf.Variable(tf.random.normal([in_size, out_size]), name=<span class="string">'W'</span>)</span><br><span class="line">    baises = tf.Variable(tf.zeros([<span class="number">1</span>, out_size])+<span class="number">0.1</span>, name=<span class="string">'b'</span>)</span><br><span class="line">    Wx_plus_b = tf.matmul(inputs, Weights)+baises</span><br><span class="line">    <span class="keyword">if</span> activation_function <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        outputs = Wx_plus_b</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        outputs = activation_function(Wx_plus_b)</span><br><span class="line">    <span class="keyword">return</span> outputs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_accuracy</span><span class="params">(v_xs, v_ys)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> prediction</span><br><span class="line">    y_pre = sess.run(prediction, feed_dict=&#123;xs: v_xs&#125;)</span><br><span class="line">    correct_prediction = tf.equal(tf.argmax(y_pre, <span class="number">1</span>), tf.argmax(v_ys, <span class="number">1</span>))</span><br><span class="line">    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</span><br><span class="line">    result = sess.run(accuracy, feed_dict=&#123;xs: v_xs, ys: v_ys&#125;)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weight_variables</span><span class="params">(shape)</span>:</span></span><br><span class="line">    initial = tf.truncated_normal(shape, stddev=<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">return</span> tf.Variable(initial)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bias_variables</span><span class="params">(shape)</span>:</span></span><br><span class="line">    initial = tf.constant(<span class="number">0.1</span>, shape=shape)</span><br><span class="line">    <span class="keyword">return</span> tf.Variable(initial)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卷积层</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv2d</span><span class="params">(x, W)</span>:</span></span><br><span class="line">    <span class="comment"># strides格式 [1,x_movement,y_movement,1]</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.conv2d(x, W, strides=[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 池化层</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_pool_2x2</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.max_pool(x, ksize=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], strides=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入</span></span><br><span class="line">xs = tf.compat.v1.placeholder(tf.float32, [<span class="literal">None</span>, <span class="number">28</span>*<span class="number">28</span>], name=<span class="string">'x_input'</span>)</span><br><span class="line">ys = tf.compat.v1.placeholder(tf.float32, [<span class="literal">None</span>, <span class="number">10</span>], name=<span class="string">'y_input'</span>)</span><br><span class="line">keep_prob = tf.compat.v1.placeholder(tf.float32)</span><br><span class="line">x_image = tf.reshape(xs, [<span class="number">-1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 整个流程：</span></span><br><span class="line"><span class="comment"># 卷积——池化——卷积——池化——全连接——全连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># conv1 layer</span></span><br><span class="line">W_conv1 = weight_variables([<span class="number">5</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">32</span>])  <span class="comment"># 5*5 in_size=1 out_size=32</span></span><br><span class="line">b_conv1 = bias_variables([<span class="number">32</span>])</span><br><span class="line">h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1)+b_conv1)  <span class="comment"># output 28*28*32</span></span><br><span class="line">h_pool1 = max_pool_2x2(h_conv1)  <span class="comment"># output 14*14*32</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># conv2 layer</span></span><br><span class="line">W_conv2 = weight_variables([<span class="number">5</span>, <span class="number">5</span>, <span class="number">32</span>, <span class="number">64</span>])  <span class="comment"># 5*5 in_size=32 out_size=64</span></span><br><span class="line">b_conv2 = bias_variables([<span class="number">32</span>])</span><br><span class="line">h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2)+b_conv2)  <span class="comment"># output 14*14*64</span></span><br><span class="line">h_pool2 = max_pool_2x2(h_conv2)  <span class="comment"># output 7*7*64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># func1 layer</span></span><br><span class="line">W_f1 = weight_variables([<span class="number">7</span>*<span class="number">7</span>*<span class="number">64</span>, <span class="number">1024</span>])</span><br><span class="line">b_f1 = bias_variables([<span class="number">1024</span>])</span><br><span class="line">h_pool2_flat = tf.reshape(h_pool2, [<span class="number">-1</span>, <span class="number">7</span>*<span class="number">7</span>*<span class="number">64</span>])</span><br><span class="line">h_f1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_f1)+b_f1)</span><br><span class="line">h_f1_drop = tf.nn.dropout(h_f1, keep_prob)</span><br><span class="line"></span><br><span class="line"><span class="comment"># func2 layer</span></span><br><span class="line">W_f2 = weight_variables([<span class="number">1024</span>, <span class="number">10</span>])</span><br><span class="line">b_f2 = bias_variables([<span class="number">10</span>])</span><br><span class="line">prediction = tf.nn.softmax(tf.matmul(h_f1_drop, W_f2)+b_f2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">prediction = add_layer(xs, <span class="number">784</span>, <span class="number">10</span>, activation_function=tf.nn.softmax)</span><br><span class="line"><span class="comment"># 交叉熵损失</span></span><br><span class="line">cross_entropy = tf.reduce_mean(-tf.reduce_sum(ys *</span><br><span class="line">                                              tf.log(prediction), reduction_indices=[<span class="number">1</span>]))</span><br><span class="line">train_step = tf.train.AdamOptimizer(<span class="number">1e-4</span>).minimize(cross_entropy)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 会话</span></span><br><span class="line">init = tf.compat.v1.global_variables_initializer()</span><br><span class="line">sess = tf.compat.v1.Session()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    <span class="comment"># 100个100个学习</span></span><br><span class="line">    batch_xs, batch_ys = mnist.train.next_batch(<span class="number">100</span>)</span><br><span class="line">    sess.run(train_step, feed_dict=&#123;</span><br><span class="line">        xs: batch_xs,</span><br><span class="line">        ys: batch_ys</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">50</span> == <span class="number">0</span>:</span><br><span class="line">        print(compute_accuracy(mnist.test.images, mnist.test.labels))</span><br></pre></td></tr></table></figure><p><strong>示例3： 完整的CNN示例，包括输出层、池化层、卷积层、dropout层、全连接层等</strong></p><img width="60%" src="https://i.loli.net/2020/04/03/SKXhFBveYbE24wx.jpg" alt="CNN示例3"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 载入手写数字库(55000*28*28)</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"></span><br><span class="line"><span class="comment"># one_hot 独热吗的编码形式</span></span><br><span class="line"><span class="comment"># 0：100000000</span></span><br><span class="line"><span class="comment"># 1：010000000</span></span><br><span class="line"><span class="comment"># 2：001000000</span></span><br><span class="line"><span class="comment"># ……</span></span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">'mnist_data'</span>, one_hot=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># None表示张量的第一个维度</span></span><br><span class="line">input_x = tf.placeholder(tf.float32, [<span class="literal">None</span>, <span class="number">28</span>*<span class="number">28</span>])/<span class="number">255</span></span><br><span class="line">output_y = tf.placeholder(tf.float32, [<span class="literal">None</span>, <span class="number">10</span>])</span><br><span class="line">input_x_images = tf.reshape(input_x, [<span class="number">-1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从测试数据集中选取3000个图片和标签</span></span><br><span class="line">test_x = mnist.test.images[:<span class="number">3000</span>]</span><br><span class="line">test_y = mnist.test.labels[:<span class="number">3000</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建卷积神经网络</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一层卷积，输入28*28*1，卷积5*5*32，输出28*28*32</span></span><br><span class="line">conv1 = tf.keras.layers.Conv2D(</span><br><span class="line">    inputs=input_x_images,  <span class="comment"># 输入</span></span><br><span class="line">    filters=<span class="number">32</span>,  <span class="comment"># 过滤器，输出深度</span></span><br><span class="line">    kernel_size=<span class="number">5</span>,  <span class="comment"># 卷积大小</span></span><br><span class="line">    strides=<span class="number">1</span>,  <span class="comment"># 步长</span></span><br><span class="line">    padding=<span class="string">'same'</span>,  <span class="comment"># padding,same表示输出大小不变，因此需要补两圈,</span></span><br><span class="line">    activation=tf.nn.relu</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一层池化（亚采样），输入28*28*32，输出14*14*32</span></span><br><span class="line">pool1 = tf.keras.layers.MaxPooling2D(</span><br><span class="line">    inputs=conv1,  <span class="comment"># 输入</span></span><br><span class="line">    pool_size=[<span class="number">2</span>, <span class="number">2</span>],  <span class="comment"># 过滤器大小</span></span><br><span class="line">    strides=<span class="number">2</span>,  <span class="comment"># 步长</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二层卷积，输入14*14*32，卷积5*5*64，输出14*14*64</span></span><br><span class="line">conv2 = tf.keras.layers.Conv2D(</span><br><span class="line">    inputs=pool1,  <span class="comment"># 输入</span></span><br><span class="line">    filters=<span class="number">64</span>,  <span class="comment"># 过滤器，输出深度</span></span><br><span class="line">    kernel_size=<span class="number">5</span>,  <span class="comment"># 卷积大小</span></span><br><span class="line">    strides=<span class="number">1</span>,  <span class="comment"># 步长</span></span><br><span class="line">    padding=<span class="string">'same'</span>,  <span class="comment"># padding,same表示输出大小不变，因此需要补两圈,</span></span><br><span class="line">    activation=tf.nn.relu</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二层池化，输入14*14*64，输出7*7*64</span></span><br><span class="line">pool2 = tf.keras.layers.MaxPooling2D(</span><br><span class="line">    inputs=conv2,  <span class="comment"># 输入</span></span><br><span class="line">    pool_size=[<span class="number">2</span>, <span class="number">2</span>],  <span class="comment"># 过滤器大小</span></span><br><span class="line">    strides=<span class="number">2</span>,  <span class="comment"># 步长</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 平坦化</span></span><br><span class="line">flat = tf.reshape(pool2, [<span class="number">-1</span>, <span class="number">7</span>*<span class="number">7</span>*<span class="number">64</span>])</span><br><span class="line"><span class="comment"># 全连接层</span></span><br><span class="line">dense = tf.keras.layers.Dense(</span><br><span class="line">    inputs=flat,</span><br><span class="line">    units=<span class="number">1024</span>,</span><br><span class="line">    activation=tf.nn.relu</span><br><span class="line">)</span><br><span class="line"><span class="comment"># dropouts</span></span><br><span class="line">dropout = tf.keras.layers.Dropout(inputs=dense, rate=<span class="number">0.5</span>, training=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 10个神经元全连接层，不用激活函数做非线性化，输出1*1*10</span></span><br><span class="line">logits = tf.keras.layers.Dense(inputs=dropout, units=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算误差(计算交叉熵，再用softmax计算概率)</span></span><br><span class="line">loss = tf.losses.softmax_cross_entropy(onehot_labels=output_y, logits=logits)</span><br><span class="line"><span class="comment"># 用Adam优化器最小化误差，学习率0.001</span></span><br><span class="line">train_op = tf.compat.v1.train.AdamOptimizer(learning_rate=<span class="number">0.001</span>).minimize(loss)</span><br><span class="line"><span class="comment"># 精度，计算预测值和实际标签的匹配程度</span></span><br><span class="line">accuracy = tf.compat.v1.metrics.accuracy(</span><br><span class="line">    labels=tf.argmax(output_y, axis=<span class="number">1</span>),</span><br><span class="line">    predictions=tf.argmax(logits, axis=<span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建会话</span></span><br><span class="line">sess = tf.compat.v1.Session()</span><br><span class="line"><span class="comment"># 初始化变量：全局和局部</span></span><br><span class="line">init = tf.group(tf.compat.v1.global_variables_initializer,</span><br><span class="line">                tf.compat.v1.local_variables_initializer)</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20000</span>):</span><br><span class="line">  <span class="comment"># 从train训练集中取下一50个样本</span></span><br><span class="line">    batch = mnist.train.next_batch(<span class="number">50</span>)</span><br><span class="line">    train_loss, train_op = sess.run([loss, train_op], &#123;</span><br><span class="line">        input_x: batch[<span class="number">0</span>],</span><br><span class="line">        output_y: batch[<span class="number">1</span>]&#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">        test_accuracy = sess.run(accuracy, &#123;</span><br><span class="line">            input_x: test_x,</span><br><span class="line">            output_y: test_y</span><br><span class="line">        &#125;)</span><br><span class="line">        print(<span class="string">'step:%d,loss=%.4f,test_accuracy:%.2f'</span> %</span><br><span class="line">              (i, train_loss, test_accuracy))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试：打印20个预测值和真实值比对</span></span><br><span class="line">test_output = sess.run(logits, &#123;input_x: test_x[:<span class="number">20</span>]&#125;)</span><br><span class="line">predict_y = np.argmax(test_output, <span class="number">1</span>)</span><br><span class="line">print(predict_y, <span class="string">'predict_y'</span>)</span><br><span class="line">print(np.argmax(test_y[:<span class="number">20</span>], <span class="number">1</span>), <span class="string">'real number'</span>)</span><br></pre></td></tr></table></figure><h4 id="保存与读取"><a href="#保存与读取" class="headerlink" title="保存与读取"></a>保存与读取</h4><p>tensorflow目前只能保存Variable，不能保存整个神经框架，需要重新定义一下框架，再把Variable放进来重新学习 </p><img width="60%" src="https://i.loli.net/2020/04/03/RJitKcPol4dhOnI.jpg" alt="CNN示例3"><p><strong>存入文件：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># save to file</span></span><br><span class="line"><span class="comment"># remember to define the same dtype and shape where restore</span></span><br><span class="line">W = tf.Variable([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]], dtype=tf.float32)</span><br><span class="line">b = tf.Variable([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]], dtype=tf.float32)</span><br><span class="line"></span><br><span class="line">init = tf.compat.v1.global_variables_initializer()</span><br><span class="line"></span><br><span class="line">saver = tf.compat.v1.train.Saver()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.compat.v1.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(init)</span><br><span class="line">    <span class="comment"># 这里tensorflow推荐使用ckpt后缀名</span></span><br><span class="line">    saver_path = saver.save(sess, <span class="string">'net/save_net.ckpt'</span>)</span><br></pre></td></tr></table></figure><p><strong>读取文件：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># restore variables</span></span><br><span class="line"><span class="comment"># redefine same dtype and shape for your variables</span></span><br><span class="line"><span class="comment"># define empty framework</span></span><br><span class="line"></span><br><span class="line">W = tf.Variable(np.arange(<span class="number">6</span>).reshape((<span class="number">2</span>, <span class="number">3</span>)), dtype=tf.float32)</span><br><span class="line">b = tf.Variable(np.arange(<span class="number">3</span>).reshape((<span class="number">1</span>, <span class="number">3</span>)), dtype=tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># not need init step</span></span><br><span class="line"></span><br><span class="line">saver = tf.compat.v1.train.Saver()</span><br><span class="line"><span class="keyword">with</span> tf.compat.v1.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    saver.restore(sess, <span class="string">'net/save_net.ckpt'</span>)</span><br><span class="line">    print(<span class="string">'weight:'</span>, sess.run(W))</span><br><span class="line">    print(<span class="string">'bias:'</span>, sess.run(b))</span><br></pre></td></tr></table></figure><h3 id="三、tensorflow实战"><a href="#三、tensorflow实战" class="headerlink" title="三、tensorflow实战"></a>三、tensorflow实战</h3><p>必须掌握的前置知识：</p><ul><li>线性回归</li><li>逻辑回归</li><li>决策树</li><li>随机森林</li><li>最近邻算法（KNN）</li><li>朴素贝叶斯</li><li>支持向量机（SVM）</li><li>感知机</li><li>深度神经网络<h4 id="房价预测模型（线性回归）"><a href="#房价预测模型（线性回归）" class="headerlink" title="房价预测模型（线性回归）"></a>房价预测模型（线性回归）</h4>掌握要点：</li><li>数据预处理（特征归一化）</li><li>tensorflow训练模型的工作流</li><li>数据可视化库matplotlib &amp; seaborn &amp; mplot3d<h4 id="手写数字识别"><a href="#手写数字识别" class="headerlink" title="手写数字识别"></a>手写数字识别</h4><h4 id="验证码识别"><a href="#验证码识别" class="headerlink" title="验证码识别"></a>验证码识别</h4><h4 id="人脸识别"><a href="#人脸识别" class="headerlink" title="人脸识别"></a>人脸识别</h4></li></ul>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ML系列3：深度学习中的问题解答</title>
      <link href="/2019/12/29/ML-03/"/>
      <url>/2019/12/29/ML-03/</url>
      
        <content type="html"><![CDATA[<p>以下是机器学习中涉及到的常见问题的解答：</p><a id="more"></a><p><a href="https://iloveyou11.github.io/2019/12/04/ML-01/" target="_blank" rel="noopener">ML系列1：AI学习资源与知识点</a><br><a href="https://iloveyou11.github.io/2019/12/10/ML-02/" target="_blank" rel="noopener">ML系列2：机器学习必会算法</a><br><a href="https://iloveyou11.github.io/2019/12/29/ML-04/" target="_blank" rel="noopener">ML系列3：深度学习中的问题解答</a><br><a href="https://iloveyou11.github.io/2020/01/02/ML-05/" target="_blank" rel="noopener">ML系列4：tensorflow入门-1</a><br><a href="https://iloveyou11.github.io/2020/01/10/ML-06/" target="_blank" rel="noopener">ML系列5：tensorflow入门-2</a><br><a href="https://iloveyou11.github.io/2020/01/30/ML-07/" target="_blank" rel="noopener">ML系列6：tensorflow项目实战</a></p><p><strong>为什么正则化项是阻止过拟合的好方法？</strong><br>regularizer提供了一个叫λ的旋钮，调大能让模型不要太随性（欠拟合），调小能让模型不要太呆板（过拟合）。一般来说，L1正则化项能够减少神经元的个数（不激活），L2正则项可以降低神经元的权重值w，从而降低过拟合的风险。</p><p><code>L1范数（L1 norm）</code>是指向量中各个元素绝对值之和，也有个美称叫“稀疏规则算子”（Lasso regularization）。<br>比如 向量A=[1，-1，3]， 那么A的L1范数为 |1|+|-1|+|3|.<br>简单总结一下就是：<br><code>L1范数:</code> 为x向量各个元素绝对值之和。<br><code>L2范数:</code>为x向量各个元素平方和的1/2次方，L2范数又称Euclidean范数或Frobenius范数<br><code>Lp范数:</code>为x向量各个元素绝对值p次方和的1/p次方.<br>在支持向量机学习过程中，L1范数实际是一种对于成本函数求解最优的过程，因此，L1范数正则化通过向成本函数中添加L1范数，使得学习得到的结果满足稀疏化，从而方便人类提取特征。<br>L1范数可以使权值稀疏，方便特征提取。<br>L2范数可以防止过拟合，提升模型的泛化能力。</p><p><strong>什么是PCA主成分分析？</strong><br>PCA是对高维数据进行降维，在模型训练中可以提升训练的速度。<br>通过投影将高维数据投影到1维、2维、3维或n维空间上，在设定保留数据结构信息（比如90%）的条件下，通过trial and error筛选出一个合适的K值，实现最大化降低维度和最大化保留数据信息的博弈。<br>通过比较不同线（平面、空间）之间的投影距离，选取投影距离之和最短的线作为K=1情况下的最优线。最后K歌eigenvectors组合成一个matrix，matrix的transpositon对原数据做变形，变形后的结果就是降维后的新数据。</p><p><strong>PCA的主成分维度如何选择？</strong><br>如何决定降维到哪个维度（1维、2维、3维或n维）K？<br>将K=1,2,3…分别带入到一个不等式中，选择哪个最能满足不等式成立的K值即可。<br>不等式：设定好我们希望PCA保留原有数据variance信息的百分比（如90%），不等式核心内容是做最大限度降维与最大化保留数据结构信息的博弈。</p><p><strong>为什么PCA不适合避免过拟合？</strong><br>过拟合是因为训练的模型过度地拟合了原有数据的分布，造成了测试集上的巨大误差。所以没有Y值，就谈不上overfitting。但是PCA只关注特征X，不关注Y，降维后仍保持X极高比例的variance信息，但没有任何依据说新生成的低维数据能提炼任何与Y值相关的信息。</p><p><strong>反欺诈中所用到的机器学习模型有哪些？</strong><br>反欺诈最简单的模型的<code>anomaly detection</code>。<br>本质：属于非监督学习，通过计算每个X对应的概率值，低于某阈值就归异常，高于某阈值就为正常。<br>算法：用训练数据X，获取X与正常状态的概率函数图，面对每个新X，计算每个维度上的概率，最终结果取决于所有维度概率之积。</p><p><strong>机器视觉的主要任务和难点挑战是什么？</strong><br>主要任务：</p><ul><li>图像分类，即对图像做单一物体识别</li><li>目标检测，即对图像做多物体识别，同时用方框框住物体</li><li>风格转移，内容不变，风格被另一张图像的风格代替</li><li>图像检索，类似以图搜图任务</li><li>语义分割</li><li>无人驾驶</li><li>人脸识别</li><li>姿势识别</li><li>……</li></ul><p>面临的挑战：</p><ul><li>图片像素多，数据特征多，导致模型的参数多</li><li>如果数据量不能大幅超过参数数量，容易过拟合</li><li>占用大量内存，计算效率低下</li><li>计算量惊人，训练效率低下</li></ul><p>特点：</p><ul><li>每个隐藏神经元都在提炼学习特征，越深层filter提炼越抽象复杂的特征</li><li>CNN重视空间信息的保留，眼里只有局部小特征</li></ul><p><strong>DFF和CNN的区别：</strong><br>input：</p><ul><li>DFF input打破了空间信息，压缩成一个vector，作为整体被学习背后的特征</li><li>CNN input保留了空间信息，截取成多个局部小图片，分别被学习背后数据特征</li></ul><p>output：</p><ul><li>DFF的weights完成工作后，生成单一scalar，是对全局图片信息做全局特征提炼和学习</li><li>CNN的filter完成工作后，生成一个matrix，是将所有局部小图片信息，分别做特征提炼和学习<br>，再做空间结构信息的还原整合的结果</li></ul><p><strong>CNN中的padding算不算噪声？</strong><br>padding是增加各个边的pixels数量，目的是为了不丢弃原图信息，保持feature map的大小与原图一致，让更深层的layer的input依然保持有足够大的信息量。为了实现上述目的，却不做多余的事情，padding出来的pixel值都是0，不存在噪声问题。</p><p><strong>如何理解feature map在逐步缩小，feature map的channel在逐步增多？</strong><br>channels增多，是希望复杂特征的数量越多越好，越多我们对图片了解越多；<br>feature的尺寸越来越小，因为我们希望每个特征都是精炼简洁的，取出不必要的噪音；<br>每个特征，都是前一层feature map上的多个特征融合而成，本身的信息量充足，无需在长宽上增加信息量。</p><p><strong>如何理解GoogleNet inception结构设计的由来？</strong><br>用1x1,3x3,5x5 卷积并列组合设计，模拟sparse structure的效果。前面再加上1x1卷积层来实现dimension reduction+sparse的效果。</p><ul><li>模型变深变宽，计算成本不显著增加</li><li>模型提炼的特征，具备scale invariance的能力</li></ul><p><strong>深度神经网络设计中有哪些可以参考的点？</strong><br>设计参考：</p><ol><li>将5x5、7x7卷积核替换为更小的3x3卷积核</li><li>1x1的卷积核是非常高效的</li></ol><ul><li>降维（ dimension reductionality ）。比如，一张500 * 500且厚度depth为100 的图片在20个filter上做1<em>1的卷积，那么结果的大小为500</em>500*20。再升维回到原始维度，可以大大减少参数量。</li><li>加入非线性。卷积层之后经过激励层，1*1的卷积在前一层的学习表示上添加了非线性激励（ non-linear activation ），提升网络的表达能力；</li></ul><ol start="3"><li>将NxN卷积核拆分为1xN和Nx1</li></ol><p><strong>1*1的卷积核的作用：</strong></p><ol><li>实现跨通道的交互和信息整合</li><li>进行卷积核通道数的降维和升维</li><li>对于单通道feature map 用单核卷积即为乘以一个参数，而一般情况都是多核卷积多通道，实现多个feature map的线性组合</li></ol><p><strong>数据增强的手段有哪些？</strong></p><ol><li>水平翻转</li><li>随机裁剪、随机缩放</li><li>变换（平移、旋转、stretching拉伸、shearing修剪……）</li></ol><p><strong>梯度消失、爆炸的解决方案？</strong><br>神经网络的反向传播是逐层对函数偏导相乘，因此当神经网络层数非常深的时候，最后一层产生的偏差就因为乘了很多的小于1的数而越来越小，最终就会变为0，从而导致层数比较浅的权重没有更新，这就是<code>梯度消失</code>。<br>产生的原因：</p><ul><li>网络层数较深</li><li>采用不合适的损失函数，比如sigmoid</li></ul><p>梯度爆炸与梯度消失类似，当每层的偏导数值都大于1时，经过多层的权重更新之后，梯度就会以指数形式增加，即为梯度爆炸。<br>产生原因：</p><ul><li>网络层数较深</li><li>权重初始值太大</li><li>训练样本有误</li></ul><p>【解决方法】</p><ul><li>逐层训练加微调<br>该方法由 Geoffrey Hinton 于2006年提出，具体流程为每次只训练一层神经网络，待权重稳定之后，再使用该层网络的输出进行后一层网络的输入，重复该步骤至训练所有网络层。最后再对整个模型进行finetune，得到最优的模型。</li><li>梯度剪切<br>梯度剪切这个方案主要是针对梯度爆炸提出的，其思想是设置一个梯度剪切阈值，然后更新梯度的时候，如果梯度超过这个阈值，那么就将其强制限制在这个范围之内。这可以防止梯度爆炸。</li><li>权重正则化<br>比较常见的是L1正则，和L2正则，在各个深度框架中都有相应的API可以使用正则化。</li><li>relu、leakrelu、elu等激活函数<br>Relu: 如果激活函数的导数为1，那么就不存在梯度消失爆炸的问题了，每层的网络都可以得到相同的更新速度，relu就这样应运而生。</li><li>batchnorm<br>batchnorm全名是batch normalization，简称BN，即批规范化，通过规范化操作将输出信号x规范化到均值为0，方差为1，保证网络的稳定性。</li><li>残差结构<br>残差结构中的 shortcut 有效地避免了梯度消失与爆炸问题。</li><li>LSTM<br>LSTM全称是长短期记忆网络（long-short term memory networks），是不那么容易发生梯度消失的，主要原因在于LSTM内部复杂的“门”(gates)。</li></ul><p><strong>为什么要用激活函数？</strong><br>激活函数是用来加入非线性因素的，因为非线性模型的表达能力不够，有些数据可以线性可分，而有些数据是线性不可分的，对于线性可分的数据就需要做线性变换，比如把x, y 轴变成x^2 * y^2等之类的变换；或者引入非线性函数。<br><code>激活函数就是使神经网络具有拟合非线性函数的能力， 使神经网络具有强大的表达能力。</code></p><p><strong>在合理的范围，增大batch_size有何好处？</strong><br>batch在神经网络本来是作为计算加速的，通过把数据进行统一大小，然后批量进入神经网络模型，以此到达加速的效果。但是batch_size是不能无限增大的。</p><ol><li>合适的batch大小可以内存的利用率，这个是必然的，大矩阵乘法的并行化效率提高。</li><li>跑一次全数据集所需要的迭代次数减少了，时间成本可以节省了。</li><li>在一定范围内，一般来说 Batch_Size 越大，其确定的下降方向越准，引起训练震荡越小。</li></ol><p>但是，盲目增大batch_size也会带来以下后果：</p><ol><li>内存利用率提高了，但是内存容量可能撑不住</li><li>跑一遍全数据集的迭代次数减少，要想达到同样的精度，所需要花费的时间大大增加了，从而对参数的修正就显得更加缓慢了。</li><li>batch_size 增加到一定的程度，其确定的下降方向已经基本不再变化。</li></ol><p><strong>深度学习有哪些真实的应用程序？</strong><br>（1）Google一次性将文本翻译成数百种语言，通过一些应用于自然语言处理任务的深度学习模型实现。<br>（2）Siri、Alexa、Cortana等智能会话代理通过LSTM和RNN来简化语音识别技术，语音命令打开了一个全新的领域。<br>（3）计算机视觉领域的应用，例如OCR（光学字符识别）和实时语言翻译。<br>（4）Snapchat和Instagram等多媒体共享应用程序进行面部特征检测。<br>（5）医疗领域的应用，用来定位恶性细胞和其他异物，检测疾病。<br>……</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端分享</title>
      <link href="/2019/12/26/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB/"/>
      <url>/2019/12/26/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<p>以下内容来自于BAT大佬的分享，为大家指引方向，答疑解惑：</p><a id="more"></a><hr><p>首先，自我介绍一下，我有多年的分享经验，同时在慕课已经有2年的讲授经验。我是Vue2.x核心技术免费课的讲师，也是实战课大前端课程的讲师。乐于分享知识的我，非常享受这个过程。</p><p>我虽然毕业于985，但是我不是科班的程序员出生；我虽然教的是前端，但是我也熟悉Java和Python；我虽然已经离开了大厂，但是我自己组建了团队，健康的活了下来，这是第三次创业。</p><p>在大厂的磨砺让我知道了健壮的生产模式，在政府里面的项目让我认识了社会的冷暖提升了情商，在自己的一次次失败中我抓住了生活的命脉，我是一个有经历的人，跟着我，带你感受我的大前端之路吧~~</p><p><strong>大纲：</strong></p><ol><li>路在何方：前端千变万化，如何不变应万变</li><li>对症下药：前端开发过程中的痛点，少走弯路，才能事半功倍</li><li>技术蜕变：从前端小白到高阶前端的成长路径</li><li>前端大局观：从前到端，高薪工作=高价值输出=多端开发</li><li>挑战即是机遇：诱惑很多，挑战很大，拒绝说“不”</li></ol><p>在今天开始分享之前，我来说一下这一次分享的准备，我开始问了我的很多学生，比如：讲什么选题、大家想听什么、大家觉得学习了前端这么久想听听什么….很多的问题，都集中在一个问题上，这么多的未知，这么多的技术，我该怎么办？这就像是一个哲学问题，问“我从哪里来，我要到哪里去”一样——人生这一躺旅程，如果想不清楚前路，那最最关键的是抓住现在。老师，最多只是引路人是灯塔，自己的路要靠自己的脚走出来。</p><h4 id="1-路在何方：如何不变应万变"><a href="#1-路在何方：如何不变应万变" class="headerlink" title="1. 路在何方：如何不变应万变"></a>1. 路在何方：如何不变应万变</h4><p>相信大家都有选择技术的一个理由，但是更多是迷茫。对知识的渴望，加上工作的压力，让这种求学的心情变得迫切。每当有同学问我，老师，我该不该学前端、前端难不难、前端怎么学的时候，我都会问他（她）这样一个问题：你喜欢不喜欢技术？</p><p>对于那些模棱两可的人，我会给他们泼冷水，告诉他们：“前端天天都在变化，你会每天坚持学习吗？”“前端不是人人都能高薪，你能接受生活给你的磨砺，忍辱负重的成长吗？”“前端说简单也简单，说难也难，你的目标在哪里，你的高度才会有多高”….</p><p>前端真的是千变万化，前两年还在JQuery，到今年的时候，我问同事，他说现有的项目（React）已经不用了，很少需要用JQ来操作DOM；再前些年，还在用DW、PS切页面，现在还流行吗？不流行了，因为效率不高…一方面技术过时的快，另一方面新技术的出现快，Flutter、WebAssembly、Serverless火爆发展，对前端人的要求在变高，需要学习各种技术，对接不同的角色的人，甚至去充当不同角的人…那么，就要有全面的知识储备与技能。大前端，需要的是宽阔的视野、扩展的能力、基础的技能，同学们不缺的是第三块，而扩展和视野是同学们缺的，也很少去思考的。</p><p>那怎么办？我说过一个观念：不推荐大家学习红宝书，不是一定在大厂才有优秀的人。这两点如果没有深刻体会的人，我来举两个例子：你看看你的周围有没有进步非快的人，再看看你下载的那些资料、买过的那些书&amp;视频的进度，你就初步体会这两点的涵义了。学习，是一个延迟满足非常长的事情，需要有一颗平常心来对待每天的学习&amp;工作。记住，平常心，三个字。</p><p>有句话大家都听过，“机会是给有准备的人”。这句话，要辩证的来看，这个准备是指心态上的准备，很多技术是可以现学现卖的，这才是核心。举个例子，我给大家来讲课，学习了FCP（FCP Final Cut Pro——苹果上专业的视频剪辑软件）只用了一周，就上手开始剪了，实践让我获得了大量的“真知”..……这种事情在我身上发生了很多次。那些追求极致完美的“处女座”同学们，很多东西在一开始，不用学习的那种的精巧，设计的那么的完美。这其实是人的本性啊，人不是圣人，肯定会犯错。但是，辩证的看，同样的不能一开始全部都马马虎虎，这两个极端都不可取。记住，辩证，这两个字。</p><p>我现在即不能说，未来5年，大家来学什么什么就能发大财行大运、XXX技术就能火、XXX能学XXX不能学，适合自己的才是最好的不是吗？我也是一路寻找，走了2年的弯路，才找自己自己的兴趣。生命中，总有那么多的奇迹让我们感动，就像小时候不明白父母的苦，只有自己成为父母，才能感受到。这不就是生命的美妙吗？所以，不要慌，你会明白的，你也会找到自己的方向。单身的人，就像那个属于你的人，也会在不远的地方等待着你一样。记住，兴趣，这两个字。</p><p><strong>总结一下：</strong><br>有了平常心，大家就不会去追逐新的技术，人云亦云了；有了平常心，大家就不会迷茫，知道当下才是最重要的了；有了平常心，大家就不会去攀比，而会扎实的自己每天进步一点点，与自己为“敌”，其乐无比。<br>有了辩证的思考，就会看清很多问题的本质，找到属于自己的解决方案。<br>有了兴趣，做的自己喜欢事，才是适合自己的。</p><p>前端千变万化的是技术，不变是我们，不变是我们的初心。不要因为眼前的困难，就选择放弃了前端！</p><h4 id="2-对症下药：开发过程痛点"><a href="#2-对症下药：开发过程痛点" class="headerlink" title="2.对症下药：开发过程痛点"></a>2.对症下药：开发过程痛点</h4><p>前面我们提了很多心态上的问题，这里就不再赘述。下面，我们除去心态上的问题，我们来谈谈技术。</p><p>大家或多或少的了解一个项目开发的过程，但是，有多少人去思考过，为什么需求分析，讨论来讨论去好长时间；为什么组长在这么安排开发，感觉效率不高啊；为什么大家都在推责任，感觉没有团队的氛围啊….</p><p>一个完整的项目，从项目初期立项到项目交付，会经历：需求分析、详细需求分析、项目开发前准备、项目开发&amp;测试、初验（迭代）终验，这么几个基本的过程。不论内外部项目，都有一个共同点，就是有一个既定的目标。大家的KPI与目标的结果挂钩，那么问题来了，倘若这个目标没有实现，KPI会不会考虑说前端没有问题，就还是给你打个高KPI？倘若这个目标实现的一般般，客户让你们改来改去，KPI考核打了个基本分，客户会不会买单？倘若这个目标实现了，前端贡献一般般，KPI考核也会考虑一点点，但是这个份额会大吗？</p><p>总结一下，有需求分析的问题，有沟通的问题，也有效率问题……这些是技术开发过程中的问题，再来谈一谈新人&amp;老人都会面对的问题——面试与择业。</p><p>都说“男怕入错行，女怕嫁错郎”，这句话就是生活的写照啊。在中国，这么物质的社会，还有多少纯洁的感情。在激烈竞争的互联网行业，还有多少蓝海？没有了，红利也还有，但是没有以前那么多了，因为门槛在变低，人工成本一直是企业前进的绊脚石。</p><p>所以，先要养活自己，再去思考更长远的事情。这一点，一定要清楚。</p><p>在企业中，大家要有“主人翁”的心态，现在很多企业都是“摸着石头过河”，也有一些“不要脸的”（会Copy的），那么其实大家学习这种方法又何尝不可呢？再一点，我们很多时候，会少问那一句“为什么”？心中充满着疑问又不想着解决的办法，那就错过了很多学习的机会。比如：项目目标没有完成，可以找找问题的原因，看看下次有没有什么办法规避；客户改来改去需求，可不可以通过一些手法明确下来；团队中，被弱化的前端团队，怎么才能体现自己的价值，是缺少宣传，还是实力不允许？如果是后者，那么，就思考一下是不是效率上有问题，是不是沟通上有问题…这样顺藤摸瓜，就能找到好多答案。</p><p>在找寻“真理”的过程中，肯定不是一蹴而就的，那么就要有“水滴石穿”的精神，不断的摸索着前进。</p><p>每个人的问题可能都不一样，再技艺精湛的厨师，也不能保证，每一道菜都合大家的味口。就像我们小时候会打预防针一样，我们会尽量多的去接触各式各样的“疫苗”（其实就是身体在试错），这样才能“抵御”外界的“侵扰”，对吧？</p><h4 id="3-技术蜕变：高阶成长路径"><a href="#3-技术蜕变：高阶成长路径" class="headerlink" title="3.技术蜕变：高阶成长路径"></a>3.技术蜕变：高阶成长路径</h4><p>对于新人来说，我之前问过我的一个同事，我深感认同，大家平时工作中，碰到问题了，最想做的事情，就是找个人一问，或者一搜索，就有现成的代码可以Copy，美滋滋~是吧？</p><p>题外话一下，大家知道中年危机是怎么来的吗？谁都知道有中年危机，什么35岁程序员的一到坎之类的….说着说着就心态爆炸了，什么年龄大了，干不了了啊；什么精力跟不上，不能熬夜了啊；什么家里事多，身体抗不住了啊… </p><p>但是，我身边那些35岁以上的程序员活的挺好啊，他们身上有一个共同的特点：就是有危机意识。</p><p>再回到上面的情况，如果一直都是Copy别人的“答案”，5年后，加入公司的小白看到了你的解决方案之后，1个月就能上手你写的代码了，然后，老板一看，那个小伙子一个月2K，你一个月10K，是人家的5倍，老板怎么想？</p><p>好，这个时候，我们不要倘若，就来说说我身边的&gt;35岁的程序员。他们一进公司1-2年熟悉公司的业务，快速成长了起来，随着团队人员的增加，他们承担了一部分公司的扩展业务（比如：移动端、测试、后台等）；到了3-5年的时候，他们又开始做效率、制度、标准化的事情；到了6-8年的时候，基本上人人都成为了主管，有自己的小团队，在外面接着大小的活，利用公司的资源，一方面扩展了公司的业务（所以老板睁一支眼，闭一支眼），另一方面，提升了自己的地位（那是根深蒂固的），团队少不了这样的核心人物。再退一步说，即使失业了，他们马上还能找到更好的工作。</p><p>都知道跳槽能加薪，那怎么跳，凭什么跳？写了两年的代码，就可以跳到更高的位置？不是的，而且时间久了，马脚也会露出来，不是吗？</p><p>这里有给不同的人，接地气的解决方案：<br><strong>【1】</strong>对于入门前端的同学来说，首先，是摆正自己的心态。从基础的环境、基本的技能、基本的业务入手。<br>基础的环境是什么？好多同学，在学习前端的过程中，在环境上吃了大亏，花了很多的时间。</p><p>有的同学就会问，老师不就是浏览器+Nodejs吗？错，现在的前端的要求，已经从静态页面的开发变化了，需要对服务器环境、数据库环境、自动化环境，要会使用。比如：老板说，你把你的代码部署一下吧，你就build了一下，发给了后台，结果，后台那边说，我们的项目运行了xxx目录下，你这里资源加载有问题…</p><p>基本的技能是什么？除了基本的3“剑客”，还需要有IDE使用、NPM加速(除了CNPM，还有Yarn）、真机调试等方面的知识。</p><p>基本的业务是什么？比如登录鉴权、长列表、动态列表、多功能表单…等。这些，我相信，已经有不少的同学买过相应的课程，也能对标自己的工作的实际业务，但是，我想说明一点的，前端与JAVA这类的后端不一样，前端的业务其实很单纯，技术也很单一，不像后台JAVA学一套业务设计适合于一套业务，但是其他的业务需要重新考量与设计。而在前端中，比如Vue框架就可以通吃，各类前台、后台项目。这是前端与后端学习之中，大家需要非常明白的一点——前端不是学的业务场景越多越好，关键是要熟练&amp;了解技术的应用场景。</p><p>这个阶段，需要有一个好的引路人，才能走的事半功倍。</p><p><strong>【2】</strong>过了这个阶段（大概会花1-3年），进入到中期之后。不仅大家熟悉了公司、团队的业务，而且有一定的框架使用经验，可以解决实际问题了。那么，就要从效率出发。学习工程化、组件化、接口&amp;后台的知识，为自己的前端之路作后续的铺垫。</p><p>这个阶段是很多同学不喜欢的一个阶段，很痛苦，为什么？因为，首先在思想上就是一道坎。很多前端的同学，觉得前端就是做做页面就好了，很多事情可以交给后台，比如：数据结构不好整理交给后台，下载功能不好做交给后台，接口太难设计交给后台…结果就是后台的兄弟技术突飞猛进，自己一事无成，还在写页面。</p><p>这个阶段，要学习Linux知识，学习框架的原理，去啃平时那些所谓“难啃的骨头”，甚至要去涉及一部分后台的知识，才能打开视野，突破瓶颈。</p><p>人生有很多次选择，但是一次正确的选择，可以决定整个人生的走向。所以，在一开始的时候，就要多去尝试，多去感受这前端的那么多方向，才会找到属于自己的方向。</p><p>任何的质变都是量变的结果，进入到高阶之后。从技术上，应该要达到可以应对不同的业务场景的开发，那么就回到了初始的问题，自己的初心是什么？喜欢技术的，往技术更深的地方走，架构、数据库、自动化&amp;运维；喜欢管理的，往产品经理、项目经理方向走，学习产品规划、需求分析、文档管理，以达到效率的团队推动；喜欢测试的…喜欢UI的…</p><p><strong>【3】</strong>跨过了第三阶段的同学，已经不需要我们的帮助了，我也收到了很多同学的回复，找到了自己心仪的工作，少走了多少弯路；也有我的学生，成为了我的助手，加入了我的团队，一起筑梦。</p><h4 id="4-前端大局观：高价值输出"><a href="#4-前端大局观：高价值输出" class="headerlink" title="4.前端大局观：高价值输出"></a>4.前端大局观：高价值输出</h4><p>心灵鸡汤预警….</p><p>我们都想要更好的生活，羡慕别人的同时，又很少看到别人的付出。薪酬是与能力&amp;责任成正比的。</p><p>责任这一点很好理解，即份内的事情要做好做漂亮。做好是基本的，做漂亮是很难的。我们都知道那个“梗”，两个人被安排去买土豆，A说土豆买不到了，B说土豆买不到了，但是其他的菜是xxx价，从我们日常的分析上来看….多从领导者的角度出发去看问题，就会发现好多不一样的处事结果。</p><p>再回到前端，做技术的能力是指什么？学习能力？沟通能力？理解能力？…都对，我觉得最重要的是解决问题的能力，包括了上面的其他的能力。这一点，又感觉很空，但是实则是“没有人，天生就会解决问题，都是后天培养出来的”。主动的担责，才会有更多机会培养自己的能力。</p><p>随着技术的演进，前端的边界已经变得非常的模糊了。那么，自己的“一亩三分地”，可能在不久的将来就被瓜分走了，企业会去留住那些成倍价值的人才，那如何去增加自己的价值？</p><p>前端，“前”代表着设计、需求、交互、产品…这些用户侧的能看得见摸得着的，“端”代表着接口、测试、自动化、运维、后台….大家很多时候忽略的部分。我们的价值，就要像一把尖刀一样，深深地插入这些痛点的地方、这些被忽略的地方…</p><p>有了一个对“端的”的认识之后，可以去设置自己近期与远期的目标，然后动手做起来。有了知识了填补，那个“短板”补齐后的水桶，才能接满水。具体的做法：</p><ol><li>可以思考团队效率开发，做一些技术导入；</li><li>可以主动去承担需求分析的工作，熟悉业务、接触客户，锻炼文字和文档能力；</li><li>可以参与一些“端”的开发，无论是后台还是跨端应用，把自己的定位设置的更高一点。…</li></ol><p>最后，提一点。我们的价值，不要从牺牲自己的时间上（加班中）体现出来，要把自己的思考与行动结合起来，变成有价值的工作。告别平凡（重复和单调），其实真的很简单，从一件件小事做起，改变自己的状态，才能堆砌出“万丈高楼”。</p><p>当你不再需要站在“巨人”肩膀上的时候，当你成为了“巨人”，你的薪水还会低吗？</p><h4 id="5-挑战即是机遇：发展挑战"><a href="#5-挑战即是机遇：发展挑战" class="headerlink" title="5.挑战即是机遇：发展挑战"></a>5.挑战即是机遇：发展挑战</h4><p>为什么说2019年是互联网最差的一年？因为，真的有很多人失业。为什么说未来的10年是互联网的寒冬？因为，技术的门槛越来越低了，人工的成本在下降。</p><p>前端在未来的几年的发展，有几点是确定了的。第一，TypeScript 的大规模普及和流行，TypeScript 的普及会反向推动 ES6（ECMAScript 6.0）的进步和发展；第二，跨端能力进一步增强；比如小程序，不断涌现出各种转译实现，例如小程序、移动端的Flutter、桌面端的Electron（已经7.x版本了，短短2年时间）等；第三，微服务、组件化、人工智能，其实都是在解决效率问题，大小团队的短板都需要提效，就是单人创造的价值要更多，那么反过来就对性能、高可用有了更高的要求。…</p><p>这些都是未来的必定的挑战，站在了风口浪尖，只有很出手的人，才能把握先机。</p><p>企业越来越喜欢那些复合型的人才了，为什么？因为经济下行的大趋势下，必须要降成本，以前2个人干1个人的活，现在1个人干3个人的活，那么必然会有惨烈的竞争，这个社会就是这么弱肉强食，企业的根本要是生存，不是做公益。</p><p>前端这个行业又就是一个非常特殊的行业，前端工程师可以成为产品经理、可以成为UI设计（别小瞧设计，我一个UI设计朋友玩玩做做，通过做兼职，在外玩了1年）、可以成为项目经理…还可以自己出来做产品。因为前端可以接触到各式各样的角色，不要当这些是无用功，要把自己面对的每一次挑战，都当成是一次机会，一次去感受不一样的技术面的机会，一次去感觉不一样的业务的机会，一次去感觉不一样开发的机会…</p><p>所以，下次有机会的时候，请不要再说“我不懂运维”，“我不会测试”，“我写不好文档”，“我不会总结”…也不要说“我年龄大了”，要说“我可以学”，“我来试试”，“我尽量来做”…</p><p>时间是我们最宝贵的财富，但是心境是比时间更难能可贵的。有的人才20出头就已经看淡了生活，有的人30岁了还没有人生的方向，也有的人40岁了还在转行在学习，有的人50岁了还在写着代码….生活，是由一些平凡的事情所组成的，我们就要做这些平凡的事情的“编织者”，你的人生由你来书写。</p><p>最后，记住两句话，同学们。</p><p><strong>活在当下，珍惜时间。</strong></p><p><strong>不忘初心，方得始终。</strong></p><p>所以，急功近利的学习心态是不可取的，一定要平常心，要坚持多总结多分享多实践多交流。</p><p><strong>最后总结：</strong><br>首先，意识上要转变。我们今天其实谈了很多心态的东西，这一些是在前端进阶路上的绊脚石；其次，就是有章法的学习。规划自己的前端技术进阶的路线，从兴趣出发，然后去学习主流的前端相关的技术，啃难啃的工作中、业务中的问题；最后，就是找机会实践。可以通过去认识更多的志同道合的人，可以通过一些开源的项目，也可以通过专业的老师+同学来省去自己规划的过程。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>阿里前端发展趋势</title>
      <link href="/2019/12/25/%E9%98%BF%E9%87%8C%E5%89%8D%E7%AB%AF%E5%8F%91%E5%B1%95%E8%B6%8B%E5%8A%BF/"/>
      <url>/2019/12/25/%E9%98%BF%E9%87%8C%E5%89%8D%E7%AB%AF%E5%8F%91%E5%B1%95%E8%B6%8B%E5%8A%BF/</url>
      
        <content type="html"><![CDATA[<p>在GMTC前端大会上，阿里前端技术委员会主席，淘系技术部资深总监圆心分享了《前端路上的思考》，介绍了前端的发展趋势、技术方向和新技术、前端价值等，收获颇多。</p><a id="more"></a><p>此文全部出自<a href="https://yq.aliyun.com/articles/707414?utm_content=g_1000065243" target="_blank" rel="noopener">《阿里前端委员会主席圆心：未来前端的机会在哪里？》</a>，阅读原文请移步这里。</p><p><strong>2019 阿里经济体前端委员会四大技术方向：</strong></p><ol><li>搭建服务<br>在消费端体系里面，我们也在做很多尝试，比如说原来的频道活动，在活动的体系里面也是高度抽象化的，所以在这个体系里面，我们可以看到整个搭建服务无论是在中后台还是整个无线端，以及 PC 端都有大量场景，这样大量场景需要把整个框架标准化，希望把里面的元件、组件以及模块标准化，还希望把这样的服务能够服务于今天所有无论是中后台也好，C 端页面也好，希望有这样的体系——服务化标准化的方式服务，打通整个体系，这就是为什么把搭建服务认为是面向未来最重要的方向。</li><li>serverless<br>回到公司内，Serverless 带来什么样的影响呢？我觉得可以让前端更加贴近业务，可以让更多能力下沉。前端转到 Node 体系有一个很大的挑战，很多人说不是你会写 Node.js 你就是前端工程师，我非常同意这样说法。但是到了 Serverless 我们可以不用关注部署，不用关注运维，不需要关注所有的 DevOps，也不需要关注底层数据库的状态，他会让我们前后端整个的体系像前后端分层一样又往前迈一步。</li><li>前端智能化<br>去年在 D2 讲过智能化，智能化一定是未来，为什么这样讲？因为在 AI 来临的时候，我们能否从一个 Design 变成一个 Code？今天每个公司的前端都有大量的设计、大量原代码，我们通过大量设计稿和原代码进行机器学习，让中间的布局可学习，让中间的元件可学习，我相信未来 D2C 一定能够解决前端生产力瓶颈，让前端从今天大量低端开发、手工工作中解放出来，将精力转移到很多领域深度的参与、深度的突破。<br>所以我觉得，智能化一定会带来前端未来格局的变化，因为 AI 让很多低效的工作通过这样的方式完成。回到另外一个问题，无论是在无线化的时代，还是中后台的时代，整个抽象程度是高度收敛的，不像原来做 C 端的 PC 是发散的。在收敛的情况下，一定是可以基于收敛的体系进行规模化，而这个规模化是我们希望通过 AI 的方式完成整体的改造。我相信一定会带来前端另外一个变化。</li><li>IDE<br>大家会问，为什么 IDE 会变成你们的核心方向？我讲一下思考。今天阿里的前端我们做了叫工程中台，工程中台做到了前端代码从提交到发布的管控，当然包括中间提交之后整个代码的编译、构建、检测以及发布。但是在前台的部分，每个团队都有一个工具，而这个工具在各团队之间割裂的，无法复用。因为工程不仅仅是提交到发布，前端工程化应该从编码开始到发布，应该是一个完整的链路、完整的格局。<br>回到这个体系里面，如何能够收敛前面整个的开发状态，我觉得是可以通过 IDE 内核构建整个基础。能够把整个体系打通，同时所有团队、所有能力，作为组件的形式存在，组件可以让更多人基于同样一个架构进行高质量的交付，这样才能形成一个完整的生态。</li></ol><p><strong>前端新型领域：</strong></p><ol><li>新交互<br>来看新交互，前端的强项是通过交互完成所有的工作，当所有新的技术来临的时候，怎么样在新环境下完成所有工作？比如说今天 VR 时代来临的时候，怎么完成 VR 交互？整个领域跟现在的开发领域有什么差异？是到它的体系重构前端引擎吗？还是有很多东西是值得我们想象和思考的。</li><li>IoT（物联网）<br>物联网时代来临，我们团队有专门做 IoT，他们是做很多新零售。我们要做什么改变，也是前端要看待的事情。在那个体系里面，可以用 JS 写什么样的驱动？可以推动这个行业做什么样的发展？其实都给前端打开了一道门。</li><li>5G<br>最后 5G，中美搞得很紧张，都是因为跟 5G 相关。但是，5G 来临带来了什么？思考这个问题。我们今天大量的在观测性能的消耗、兼容性的问题，未来随着整个网速的提升一定会移向云端。如果今天在手机上做非常复杂的 3D 渲染，你会发现非常的卡顿。如果今天在手机上做非常复杂的游戏、动画也是很挑战的。今天吃鸡都是在 PC 端玩而不是手机上玩，因为对于整个性能消耗、渲染整个体系有很强的要求。<br>5G 来临会变成什么？所有渲染在云端完成，通过流媒体交互的方式完成所有的体系，第一个解决了所有在观测渲染性能问题。第二解决了大量兼容性问题。会变得更加简单。<br>我们要正确看待一个技术变革的时候，会带来什么？什么样的变化？这是我们需要深入思考的部分，因为这个一定会对未来形成一些变化，而我们的预判决定了我们今天如何看待未来，如何统治未来，我们应该做什么。我相信新交互、IoT 还有 5G 一定会对前端未来的发展形成另外的影响。</li></ol><p><strong>前端价值</strong></p><p>前端对于公司的价值是什么？前端对于公司价值一定不是专业的建设，但是专业建设是必不可少的，但同时作为组织里面的岗位要回答，我这个岗位对于公司的价值是什么？所以我说，前面都做到了不等于价值。技术能力也不等于整个企业价值。这里面应该做什么样的思考？</p><p>传统三件套也是今天很多团队在做的：如何提升前端效率，让资源变得更加的高效？如何做性能优化、体验优化？很多团队都在做性能优化。另外如何保障产品的质量等等。这是作为一个开发岗位最基本应该做到的。</p><p>Gap 在哪里？</p><p>比如说今天运营策略是什么？引领模式是什么？产品逻辑是什么？业务闭环是什么？转化漏洞是什么？市场占比是什么？它要求的一定不是一个前端的能力，它要求的是另外三个能力：商业化的思考能力、数据化的能力，以及产品化的能力。</p><p>如何思考商业的闭环？站在产品角度产品逻辑应该是什么？产品应该怎么做？怎么样通过了解今天的数据看待很多问题，推动体系的变化？这是我们前端都需要增强的。当你具备了这三个能力的时候，我相信你在公司的价值一定会得到体现。</p><p>今天的我们还只是在启程的路上，未来的世界还在变化，比如说 Serverless 都在变化，未来的路怎样还未可知。最后把一句话送给所有人：路漫漫其修远兮，吾将上下而求索。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ML系列2：机器学习必会算法</title>
      <link href="/2019/12/10/ML-02/"/>
      <url>/2019/12/10/ML-02/</url>
      
        <content type="html"><![CDATA[<p>介绍机器学习必会算法</p><a id="more"></a><p><a href="https://iloveyou11.github.io/2019/12/04/ML-01/" target="_blank" rel="noopener">ML系列1：AI学习资源与知识点</a><br><a href="https://iloveyou11.github.io/2019/12/10/ML-02/" target="_blank" rel="noopener">ML系列2：机器学习必会算法</a><br><a href="https://iloveyou11.github.io/2019/12/29/ML-04/" target="_blank" rel="noopener">ML系列3：深度学习中的问题解答</a><br><a href="https://iloveyou11.github.io/2020/01/02/ML-05/" target="_blank" rel="noopener">ML系列4：tensorflow入门-1</a><br><a href="https://iloveyou11.github.io/2020/01/10/ML-06/" target="_blank" rel="noopener">ML系列5：tensorflow入门-2</a><br><a href="https://iloveyou11.github.io/2020/01/30/ML-07/" target="_blank" rel="noopener">ML系列6：tensorflow项目实战</a></p><p><strong>机器学习常见算法：</strong></p><img width="60%" src="https://i.loli.net/2020/04/01/1clayIFbqKJ268S.jpg" alt="机器学习算法"><p><strong>分类算法：</strong></p><img width="60%" src="https://i.loli.net/2020/04/01/hWfOp5rl8RHeMcm.jpg" alt="数据分类"><p><strong>机器学习必掌握算法:</strong></p><ul><li>感知机</li><li>线性回归（Linear Regression）</li><li>逻辑回归（Logistic Regression）</li><li>决策树（包括 ID3，C4.5 决策树生成算法）</li><li>随机森林</li><li>Boosting（Adaboost、GBDT、XGBoost）</li><li>bagging</li><li>GBDT（基于迭代累加的决策树算法）</li><li>支持向量机（SVM）</li><li>朴素贝叶斯法</li><li>KNN 算法</li><li>K-means算法</li><li>模型学习的最优化算法（梯度下降法、牛顿法和拟牛顿法、共轭梯度法等等）</li><li>HMM和CRF</li><li>凸优化</li><li>主题模型LDA</li><li>EM算法与高斯混合模型（GMM）</li><li>隐马尔可夫模型（HMM）</li><li>条件随机场（CRF）</li><li>卷积神经网络（CNN）</li><li>循环神经网络（RNN）和LSTM</li><li>……</li></ul><h4 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h4><p><strong>损失函数和风险函数：</strong></p><ul><li>0-1损失函数</li><li>平方损失函数</li><li>绝对损失函数</li><li>对数损失函数</li></ul><p><strong>经验风险最小化、结构风险最小化：</strong><br>监督学习的两个基本策略：经验风险最小化、结构风险最小化</p><p>当样本容量足够大时，经验风险最小化能保证有很好的学习效果，在现实中被广泛采用。比如极大似然估计（MLE）就说一个例子。当模型是条件概率分布，损失函数是对数损失函数时，经验风险最小化就等价于极大似然估计。</p><p>但是当样本容量很小时，经验风险最小化学习效果未必很好，会产生过拟合。结构风险最小化就说为了防止过拟合而提出来的。<strong>结构风险最小化等价于正则化</strong>，给模型加上正则化项降低复杂程度。比如最大后验估计（MAP）就是结构风险最小化的一个例子。</p><p><strong>生成模型、判别模型：</strong></p><ol><li>生成方法由数据学习联合概率分布P(X,Y)，然后求出条件概率分布P(Y|X)作为预测的模型，P(Y|X)=P(X,Y)/P(X)，典型的生成模型有：朴素贝叶斯法、隐马尔科夫模型。</li><li>判别方法由数据直接学习决策函数f(X)或者条件概率分布P(Y|X)作为预测的模型，典型的判别模型包括：KNN、感知机、决策树、逻辑回归、最大熵模型、SVM、boosting、CRF等。</li></ol><h4 id="感知机"><a href="#感知机" class="headerlink" title="感知机"></a>感知机</h4><p><strong>什么是感知机：</strong><br>感知机是二分类的线性分类模型，其输入为实例的特征向量，输出为实例的类别+1/-1，感知机对应于输入空间（特征空间）中将实例分为正负两类的分离超平面。</p><p>定义出感知机的算法模型如下：<code>f(x)=sign(w*x+b)</code></p><p><strong>与SVM的区别：</strong><br>支持向量机也是在特征空间中寻找一个划分样本实例类别的超平面，这点和感知机相似，但是不同的是，支持向量机支持在特征空间中寻找出非线性的平面(非线性支持向量机)。支持向量机寻找出的超平面唯一且最优，而感知机是根据误分类点定义出的代价函数求得的超平面不唯一，包含多个。</p><h4 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h4><p>掌握的重点：</p><ul><li>掌握线性回归的实现过程</li><li>应用LinearRegression或SGDRegressor实现回归预测</li><li>知道回归算法的评估标准及其公式</li><li>知道过拟合与欠拟合的- 原因以及解决方法</li><li>知道岭回归的原理及与线性回归的不同之处</li><li>应用Ridge实现回归预测</li><li>应用joblib实现模型的保存与加载</li></ul><p>线性回归(Linear regression)是利用回归方程(函数)对一个或多个自变量(特征值)和因变量(目标值)之间关系进行建模的一种分析方式。sklearn中对应的api是<code>sklearn.linear_model.LinearRegression()</code>。</p><p><strong>梯度下降算法</strong></p><ul><li>梯度下降算法(Full gradient descent）,</li><li>随机梯度下降算法（Stochastic gradient descent）,</li><li>小批量梯度下降算法（Mini-batch gradient descent）,</li><li>随机平均梯度下降算法（Stochastic average gradient descent）</li></ul><p>全梯度下降算法（FG）：计算训练集所有样本误差，对其求和再取平均值作为目标函数。因为在执行每次更新时，我们需要在整个数据集上计算所有的梯度，所以批梯度下降法的速度会很慢，同时，批梯度下降法无法处理超出内存容量限制的数据集。批梯度下降法同样也不能在线更新模型，即在运行的过程中，不能增加新的样本。</p><p>随机梯度下降算法（SG）：其每轮计算的目标函数不再是全体样本误差，而仅是单个样本误差，即每次只代入计算一个样本目标函数的梯度来更新权重，再取下一个样本重复此过程，直到损失函数值停止下降或损失函数值小于某个可以容忍的阈值。</p><p>小批量梯度下降算法（mini-batch）：每次从训练样本集上随机抽取一个小样本集，在抽出来的小样本集上采用FG迭代更新权重。</p><p>随机平均梯度下降算法（SAG）：随机平均梯度算法克服了这个问题，在内存中为每一个样本都维护一个旧的梯度，随机选择第i个样本来更新此样本的梯度，其他样本的梯度保持不变，然后求得所有梯度的平均值，进而更新了参数。</p><p><strong>常见的梯度下降算法：</strong></p><img width="70%" src="https://i.loli.net/2020/04/01/YZf3M1iAqFUxVag.jpg" alt="梯度下降算法"><p><strong>欠拟合与过拟合</strong></p><ol><li>欠拟合原因以及解决办法</li></ol><ul><li>原因：学习到数据的特征过少</li><li>解决办法：<br>1）添加其他特征项，有时候我们模型出现欠拟合的时候是因为特征项不够导致的，可以添加其他特征项来很好地解决。例如，“组合”、“泛化”、“相关性”三类特征是特征添加的重要手段，无论在什么场景，都可以照葫芦画瓢，总会得到意想不到的效果。除上面的特征之外，“上下文特征”、“平台特征”等等，都可以作为特征添加的首选项。<br>2）添加多项式特征，这个在机器学习算法里面用的很普遍，例如将线性模型通过添加二次项或者三次项使模型泛化能力更强。</li></ul><ol start="2"><li>过拟合原因以及解决办法</li></ol><ul><li>原因：原始特征过多，存在一些嘈杂特征， 模型过于复杂是因为模型尝试去兼顾各个测试数据点</li><li>解决办法：<br>1）重新清洗数据，导致过拟合的一个原因也有可能是数据不纯导致的，如果出现了过拟合就需要我们重新清洗数据。<br>2）增大数据的训练量，还有一个原因就是我们用于训练的数据量太小导致的，训练数据占总数据的比例过小。<br>3）正则化<br>4）减少特征维度，防止维灾难</li></ul><p><strong>什么是正则化？</strong><br>在学习的时候，数据提供的特征有些影响模型复杂度或者这个特征的数据点异常较多，所以算法在学习的时候尽量减少这个特征的影响（甚至删除某个特征的影响），这就是正则化</p><ol><li>L2正则化</li></ol><ul><li>作用：可以使得其中一些W的都很小，都接近于0，削弱某个特征的影响</li><li>优点：越小的参数说明模型越简单，越简单的模型则越不容易产生过拟合现象</li><li>Ridge回归</li></ul><ol start="2"><li>L1正则化</li></ol><ul><li>作用：可以使得其中一些W的值直接为0，删除这个特征的影响</li><li>LASSO回归</li></ul><p><strong>正则化线性模型</strong></p><ol><li>Ridge Regression（岭回归）：岭回归是线性回归的L2正则化版本，即在原来的线性回归的 cost function 中添加正则项</li><li>Lasso Regression(Lasso 回归)：Lasso 回归是线性回归的L1正则化版本，正则项为权值向量的ℓ1范数。Lasso Regression 有一个HMM</li><li>很重要的性质是：倾向于完全消除不重要的权重。</li><li>Elastic Net (弹性网络)：弹性网络在岭回归和Lasso回归中进行了折中，通过 混合比(mix ratio) r 进行控制，r=0时弹性网络变为岭回归，r=1时弹性网络便为Lasso回归。</li></ol><p><code>一般来说，弹性网络的使用更为广泛</code>。因为在特征维度高于训练样本数，或者特征是强相关的情况下，Lasso回归的表现不太稳定。</p><h4 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h4><p>掌握的重点：</p><ul><li>知道逻辑回归的损失函数、优化方法</li><li>知道逻辑回归的应用场景</li><li>应用LogisticRegression实现逻辑回归预测</li><li>知道精确率、召回率等指标的区别</li><li>知道如何解决样本不均衡情况下的评估</li><li>会绘制ROC曲线图形</li><li>模型最优化算法（改进的迭代尺度法、拟牛顿法）</li></ul><p>逻辑回归的损失函数不能采用线性回归的损失函数（如MSE），而应该采用交叉熵损失函数。</p><p><strong>精确率与召回率</strong></p><ul><li>精确率：预测结果为正例样本中真实为正例的比例（了解）</li><li>召回率：真实为正例的样本中预测结果为正例的比例（查得全，对正样本的区分能力）</li><li>F1-score：反映了模型的稳健型，<code>F1-score=（2*precision*recall）/（precision+recall）</code></li></ul><p><strong>ROC曲线与AUC指标</strong></p><ul><li><strong>ROC曲线</strong>：ROC曲线的横轴就是FPRate，纵轴就是TPRate，当二者相等时，表示的意义则是：对于不论真实类别是1还是0的样本，分类器预测为1的概率是相等的，此时AUC为0.5。其中TPRate是所有真实类别为1的样本中预测类别为1的比例，FPRate是所有真实类别为0的样本中预测类别为1的比例。</li></ul><img width="50%" src="https://i.loli.net/2020/04/01/o1WPAu9RFObC5Yl.jpg" alt="ROC"><ul><li><strong>AUC指标</strong>：AUC的概率意义是随机取一对正负样本，正样本得分大于负样本得分的概率。AUC的范围在[0, 1]之间，并且越接近1效果越好，越接近0.5效果就是胡说，越接近0效果越差。</li></ul><h4 id="决策树（包括-ID3，C4-5-决策树生成算法）"><a href="#决策树（包括-ID3，C4-5-决策树生成算法）" class="headerlink" title="决策树（包括 ID3，C4.5 决策树生成算法）"></a>决策树（包括 ID3，C4.5 决策树生成算法）</h4><p>掌握的重点：</p><ul><li>掌握决策树实现过程</li><li>知道信息熵的公式以及作用</li><li>知道信息增益、信息增益率和基尼指数的作用</li><li>知道ID3，C4.5，CART算法的区别</li><li>了解CART剪枝的作用</li><li>知道特征提取的作用</li><li>应用DecisionTreeClassifier实现决策树分类</li></ul><p><code>决策树</code>：是一种树形结构，其中每个内部节点表示一个属性上的判断，每个分支代表一个判断结果的输出，最后每个叶节点代表一种分类结果，本质是一颗由多个判断节点组成的树。</p><p><strong>什么是熵？</strong><br>物理学上，熵 Entropy 是“混乱”程度的量度。系统越有序，熵值越低；系统越混乱或者分散，熵值越高。”信息熵” (information entropy)是度量样本集合纯度最常用的一种指标。</p><p><strong>决策树的划分依据1——信息增益</strong><br>信息增益：以某特征划分数据集前后的熵的差值。熵可以表示样本集合的不确定性，熵越大，样本的不确定性就越大。因此可以使用划分前后集合熵的差值来衡量使用当前特征对于样本集合D划分效果的好坏。<code>信息增益 = entroy(前) - entroy(后)</code>。</p><p>一般而言，信息增益越大，则意味着使用属性 a 来进行划分所获得的”纯度提升”越大。因此，我们可用信息增益来进行决策树的划分属性选择，著名的 ID3 决策树学习算法 [Quinlan， 1986] 就是以信息增益为准则来选择划分属性。</p><p><strong>决策树的划分依据2——信息增益率</strong><br>实际上，信息增益准则对可取值数目较多的属性有所偏好，为减少这种偏好可能带来的不利影响，著名的 C4.5 决策树算法 [Quinlan， 1993J 不直接使用信息增益，而是使用”增益率” (gain ratio) 来选择最优划分属性.</p><p><code>增益率</code>：增益率是用前面的信息增益Gain(D, a)和属性a对应的”固有值”(intrinsic value) [Quinlan , 1993J的比值来共同定义的。</p><p><strong>为什么使用C4.5要好？</strong></p><ol><li>用信息增益率来选择属性<br>克服了用信息增益来选择属性时偏向选择值多的属性的不足。</li><li>采用了一种后剪枝方法<br>避免树的高度无节制的增长，避免过度拟合数据</li><li>对于缺失值的处理<br>在某些情况下，可供使用的数据可能缺少某些属性的值。假如〈x，c(x)〉是样本集S中的一个训练实例，但是其属性A的值A(x)未知。</li></ol><p><strong>决策树的划分依据3——基尼值和基尼指数</strong><br>CART 决策树（Classification and Regression Tree的简称，这是一种著名的决策树学习算法,分类和回归任务都可用）使用”基尼指数” (Gini index)来选择划分属性。</p><p><code>基尼值Gini（D）</code>：从数据集D中随机抽取两个样本，其类别标记不一致的概率。故，Gini（D）值越小，数据集D的纯度越高。<br><code>基尼指数Gini_index（D）</code>：一般，选择使划分后基尼系数最小的属性作为最优化分属性。</p><p>以下是信息熵相关概念：</p><img width="60%" src="https://i.loli.net/2020/04/01/opLbGu834yAFNM2.jpg" alt="信息熵相关概念"><p><strong>决策树算法：ID3、C4.5、CART</strong></p><p><code>ID3算法</code>：<br>ID3算法的核心是在决策树各个结点上应用信息增益准则选择特征，递归地构建决策树，具体方法：</p><ul><li>从根节点开始，对节点计算所有可能特征的<code>信息增益</code>，选择<code>信息增益</code>最大的特征作为节点的特征，由该特征的不同取值建立子节点</li><li>再对子节点递归地调用以上方法，构建决策树，知道所有特征的信息增益均很小或没有特征可以选择为止</li></ul><p><code>C4.5算法</code>：<br>和ID3类似，只是把信息增益更换为了信息增益比。<br>具体方法：</p><ul><li>从根节点开始，对节点计算所有可能特征的<code>信息增益比</code>，选择<code>信息增益比</code>最大的特征作为节点的特征，由该特征的不同取值建立子节点</li><li>再对子节点递归地调用以上方法，构建决策树，知道所有特征的信息增益均很小或没有特征可以选择为止</li></ul><p><code>CART算法</code>（分类与回归树模型）：<br>CART是在给定输入随机变量X条件下输出随机变量Y的条件概率分布的学习方法。算法如下：</p><ul><li>决策树生成：基于训练数据集生成决策树，生成的决策树要尽量大</li><li>决策树剪枝：用验证数据集对已生成的树进行剪枝并选择最优子树，这时用损失函数最小作为剪枝的标准</li></ul><p>其中，决策树的生成就说递归地构建二叉决策树的过程，对回归树用平方误差最小化准则，对分类树用<code>基尼系数</code>最小化准则，进行特征选择，生成二叉树。</p><img width="70%" src="https://i.loli.net/2020/04/01/aWBqPEGclwmQoDs.jpg" alt="决策树算法"><ol><li>ID3 算法的缺点</li></ol><ul><li>ID3算法在选择根节点和各内部节点中的分支属性时，采用信息增益作为评价标准。信息增益的缺点是倾向于选择取值较多的属性，在有些情况下这类属性可能不会提供太多有价值的信息.</li><li>ID3算法只能对描述属性为离散型属性的数据集构造决策树。</li></ul><ol start="2"><li>C4.5算法的优缺点</li></ol><ul><li>优点：产生的分类规则易于理解，准确率较高。</li><li>缺点：在构造树的过程中，需要对数据集进行多次的顺序扫描和排序，因而导致算法的低效。此外，C4.5只适合于能够驻留于内存的数据集，当训练集大得无法在内存容纳时程序无法运行。</li></ul><ol start="3"><li>CART算法</li></ol><ul><li>CART算法相比C4.5算法的分类方法，采用了简化的二叉树模型，同时特征选择采用了近似的基尼系数来简化计算。</li><li>C4.5不一定是二叉树，但CART一定是二叉树。</li></ul><h4 id="集成学习（Boosting、bagging、随机森林）"><a href="#集成学习（Boosting、bagging、随机森林）" class="headerlink" title="集成学习（Boosting、bagging、随机森林）"></a>集成学习（Boosting、bagging、随机森林）</h4><p>掌握的重点：</p><ul><li>了解集成学习中主要解决的两个核心任务</li><li>知道bagging集成原理</li><li>知道随机森林决策树的建立过程</li><li>知道为什么需要随机有放回(Bootstrap)的抽样</li><li>应用RandomForestClassifie实现随机森林算法</li><li>知道boosting集成原理</li><li>知道bagging和boosting的区别</li><li>了解GBDT实现过程</li></ul><p><strong>机器学习两个核心任务</strong></p><ol><li>欠拟合问题：弱弱组合变强，如boosting</li><li>过拟合问题：互相遏制变壮，如Bagging</li></ol><img width="60%" src="https://i.loli.net/2020/04/01/XM3Bo6Zt72rRQV5.jpg" alt="集成学习"><p><strong>bagging</strong></p><img width="60%" src="https://i.loli.net/2020/04/01/y9BnEGcA5mws2j7.jpg" alt="bagging"><p>​ <code>Bagging + 决策树/线性回归/逻辑回归/深度学习… = bagging集成学习方法</code></p><p>经过上面方式组成的集成学习方法:</p><ul><li>均可在原有算法上提高约2%左右的泛化正确率</li><li>简单, 方便, 通用</li></ul><p><strong>随机森林</strong><br>随机森林够造过程中的关键步骤（M表示特征数目）：<br>​ 1）一次随机选出一个样本，有放回的抽样，重复N次（有可能出现重复的样本）<br>​ 2） 随机去选出m个特征, m &lt;&lt;M，建立决策树</p><img width="70%" src="https://i.loli.net/2020/04/01/K58A6cxgeGbB9Qi.jpg" alt="随机森林"><p><code>1. 为什么要随机抽样训练集？</code>　　<br>如果不进行随机抽样，每棵树的训练集都一样，那么最终训练出的树分类结果也是完全一样的<br><code>2. 为什么要有放回地抽样？</code><br>如果不是有放回的抽样，那么每棵树的训练样本都是不同的，都是没有交集的，这样每棵树都是“有偏的”，都是绝对“片面的”（当然这样说可能不对），也就是说每棵树训练出来都是有很大的差异的；而随机森林最后分类取决于多棵树（弱分类器）的投票表决。</p><p><strong>Boosting（包括Adaboost、GBDT、XGBoost）</strong><br>随着学习的积累从弱到强，简而言之：每新加入一个弱学习器，整体能力就会得到提升，代表算法有Adaboost，GBDT，XGBoost。</p><p>以下是Adaboost的学习过程：</p><img width="50%" src="https://i.loli.net/2020/04/01/37wezQXtn9ELdbs.jpg" alt="adaboost"><img width="50%" src="https://i.loli.net/2020/04/01/GPLyIWV5ncwrAFD.jpg" alt="adaboost2"><p>如何确认投票权重？如何调整数据分布？</p><img width="50%" src="https://i.loli.net/2020/04/01/WiyQROcvkF9Potx.jpg" alt="adaboost权重调整"><p><strong>bagging和boosting对比</strong></p><ol><li><code>区别一:数据方面</code><br>Bagging：对数据进行采样训练；<br>Boosting：根据前一轮学习结果调整数据的重要性。</li><li><code>区别二:投票方面</code><br>Bagging：所有学习器平权投票；<br>Boosting：对学习器进行加权投票。</li><li><code>区别三:学习顺序</code><br>Bagging的学习是并行的，每个学习器没有依赖关系；<br>Boosting学习是串行，学习有先后顺序。</li><li><code>区别四:主要作用</code><br>Bagging主要用于提高泛化性能（解决过拟合，也可以说降低方差）<br>Boosting主要用于提高训练精度 （解决欠拟合，也可以说降低偏差）</li></ol><p><strong>GBDT（基于迭代累加的决策树算法）</strong><br>梯度提升决策树(GBDT Gradient Boosting Decision Tree) 是一种迭代的决策树算法，该算法由多棵决策树组成，所有树的结论累加起来做最终答案。它在被提出之初就被认为是泛化能力（generalization)较强的算法。近些年更因为被用于搜索排序的机器学习模型而引起大家关注。<br><code>GBDT = 梯度下降 + Boosting + 决策树</code></p><p>GBDT主要执行思想</p><ol><li>使用梯度下降法优化代价函数；</li><li>使用一层决策树作为弱学习器，负梯度作为目标值；</li><li>利用boosting思想进行集成。</li></ol><p><strong>XGBoost</strong><br><code>XGBoost= 二阶泰勒展开+boosting+决策树+正则化</code></p><ul><li>Boosting：XGBoost使用Boosting提升思想对多个弱学习器进行迭代式学习</li><li>二阶泰勒展开：每一轮学习中，XGBoost对损失函数进行二阶泰勒展开，使用一阶和二阶梯度进行优化。</li><li>决策树：在每一轮学习中，XGBoost使用决策树算法作为弱学习进行优化。</li><li>正则化：在优化过程中XGBoost为防止过拟合，在损失函数中加入惩罚项，限制决策树的叶子节点个数以及决策树叶子节点的值。</li></ul><h4 id="支持向量机（SVM）"><a href="#支持向量机（SVM）" class="headerlink" title="支持向量机（SVM）"></a>支持向量机（SVM）</h4><p>掌握的重点：</p><ul><li>什么是 SVM 算法？</li><li>如何调整 SVM 的参数？</li><li>什么是间隔最大化？</li><li>硬间隔最大化、软间隔最大化</li><li>什么是学习的对偶算法？</li><li>什么是核函数？</li><li>什么是KKT条件？</li><li>什么是kernel trick？</li><li>序列最小最优化算法</li></ul><p><strong>什么是 SVM 算法？</strong><br>支持向量机(SVM) 是一个监督学习算法，既可以用于分类问题也可以用于回归问题。但是，SVM算法还是主要用在分类问题中。在 SVM 算法中，我们将数据绘制在 n 维空间中（n 代表数据的特征数），每个特征数的值是特定坐标的值。然后我们通过查找可以将数据分成两类的超平面。</p><p><strong>SVM 的优点和缺点</strong></p><ol><li>优点：</li></ol><ul><li>对于边界清晰的分类问题效果好；</li><li>对高维分类问题效果好；</li><li>当维度高于样本数的时候，SVM 较为有效；</li><li>因为最终只使用训练集中的支持向量，所以节约内存</li></ul><ol start="2"><li>缺点：</li></ol><ul><li>当数据量较大时，训练时间会较长；</li><li>当数据集的噪音过多时，表现不好；</li><li>SVM 不直接提供结果的概率估计，它在计算时直接使用 5 倍交叉验证。</li></ul><h4 id="朴素贝叶斯"><a href="#朴素贝叶斯" class="headerlink" title="朴素贝叶斯"></a>朴素贝叶斯</h4><p>掌握的重点：</p><ul><li>贝叶斯定理</li><li>后验概率最大化</li><li>朴素贝叶斯法 Naive Bayes</li><li>极大似然估计 MLE</li><li>最大后验估计 MAP</li><li>朴素贝叶斯分类器的应用</li></ul><p><strong>贝叶斯定理</strong><br><code>P(B|A) = P(B)P(A|B)/P(A)</code><br>其中，<br>P（B） 为先验概率，即在得到新数据前某一假设的概率；<br>P（B|A）为后验概率，即在观察到新数据后计算该假设的概率；<br>P（A|B）为似然度，即在该假设下得到这一数据的概率；<br>P（A）为标准化常量，即在任何假设下得到这一数据的概率。</p><p><strong>朴素贝叶斯法</strong><br>朴素贝叶斯法是典型的生成学习方法，生成方法由训练数据学习联合概率分布P(X,Y)，然后求得后验概率分布P(Y|X)，具体来说，利用训练数据学习P(X|Y)和P(Y)的估计，得到联合概率分布：P(X,Y)=P(Y)P(X|Y)。概率估计方法可以是极大似然估计或贝叶斯估计。</p><p>朴素贝叶斯法的基本假设条件独立性，模型包含的条件概率的数量大为减少，朴素贝叶斯法的学习与预测大为简化，因而朴素贝叶斯法高效且易于实现，其缺点是分类的性能不一定很高。</p><p><strong>朴素贝叶斯分类器</strong><br>朴素贝叶斯分类是一种十分简单的分类算法，叫它朴素贝叶斯分类是因为这种方法的思想真的很朴素，朴素贝叶斯的思想基础是这样的：对于给出的待分类项，求解在此项出现的条件下各个类别出现的概率，哪个最大，就认为此待分类项属于哪个类别。通俗来说，就好比这么个道理，你在街上看到一个黑人，我问你你猜这哥们哪里来的，你十有八九猜非洲。为什么呢？因为黑人中非洲人的比率最高，当然人家也可能是美洲人或亚洲人，但在没有其它可用信息下，我们会选择条件概率最大的类别，这就是朴素贝叶斯的思想基础。</p><h4 id="KNN-算法"><a href="#KNN-算法" class="headerlink" title="KNN 算法"></a>KNN 算法</h4><p>掌握的重点：</p><ul><li>掌握K-近邻算法实现过程</li><li>知道K-近邻算法的距离公式</li><li>知道K-近邻算法的超参数K值以及取值问题</li><li>知道kd树实现搜索的过程</li><li>应用KNeighborsClassifier实现分类</li><li>知道K-近邻算法的优缺点</li><li>知道交叉验证实现过程</li><li>知道超参数搜索过程</li><li>应用GridSearchCV实现算法参数的调优</li></ul><p><strong>什么是KNN算法（k近邻算法）？</strong><br>如果一个样本在特征空间中的k个最相似(即特征空间中最邻近)的样本中的大多数属于某一个类别，则该样本也属于这个类别。</p><p><strong>距离度量有哪些？</strong></p><ol><li>欧式距离(Euclidean Distance)</li><li>曼哈顿距离(Manhattan Distance)——只考虑横竖两种情况</li><li>切比雪夫距离 (Chebyshev Distance)——考虑直行、横行、斜行三种情况</li><li>闵可夫斯基距离(Minkowski Distance)——闵氏距离不是一种距离，而是一组距离的定义，是对多个距离度量公式的概括性的表述，根据参数的不同，可以表示欧氏距离、曼哈顿距离、切比雪夫距离<br>当p=1时，就是曼哈顿距离；<br>当p=2时，就是欧氏距离；<br>当p→∞时，就是切比雪夫距离。</li><li>标准化欧氏距离 (Standardized EuclideanDistance)——在计算过程中添加了标准差,对量刚数据进行处理</li></ol><img width="30%" src="https://i.loli.net/2020/04/01/oyFRXUKs7eNCdwf.jpg" alt="标准化欧氏距离"><ol start="6"><li>余弦距离(Cosine Distance)</li><li>汉明距离(Hamming Distance)【了解】——两个等长字符串s1与s2的汉明距离为：将其中一个变为另外一个所需要作的最小字符替换次数。</li><li>杰卡德距离(Jaccard Distance)【了解】——用两个集合中不同元素占所有元素的比例来衡量两个集合的区分度</li><li>马氏距离(Mahalanobis Distance)【了解】——通过样本分布进行计算</li></ol><p><strong>K值如何选择？</strong></p><ul><li>K值过小：容易受到异常点的影响、容易过拟合</li><li>k值过大：受到样本均衡的问题、容易欠拟合</li></ul><p>K值的减小就意味着整体模型变得复杂，容易发生过拟合，K值的增大就意味着整体的模型变得简单。在实际应用中，K值一般取一个比较小的数值，例如采用交叉验证法（简单来说，就是把训练数据在分成两组:训练集和验证集）来选择最优的K值。</p><p><strong>为什么要引入kd树？</strong><br>k近邻法最简单的实现是线性扫描（穷举搜索），即要计算输入实例与每一个训练实例的距离。计算并存储好以后，再查找K近邻。当训练集很大时，计算非常耗时。为了提高kNN搜索的效率，可以考虑使用特殊的结构存储训练数据，以减小计算距离的次数。</p><p><code>kd树：</code>为了避免每次都重新计算一遍距离，算法会把距离信息保存在一棵树里，这样在计算之前从树里查询距离信息，尽量避免重新计算。其基本原理是，如果A和B距离很远，B和C距离很近，那么A和C的距离也很远。有了这个信息，就可以在合适的时候跳过距离远的点。这样优化后的算法复杂度可降低到O（DNlog（N））。</p><p>kd树(K-dimension tree)是<code>一种对k维空间中的实例点进行存储以便对其进行快速检索的树形数据结构</code>。kd树是一种二叉树，表示对k维空间的一个划分，<code>构造kd树相当于不断地用垂直于坐标轴的超平面将K维空间切分</code>，构成一系列的K维超矩形区域。kd树的每个结点对应于一个k维超矩形区域。<code>利用kd树可以省去对大部分数据点的搜索，从而减少搜索的计算量。</code></p><img width="50%" src="https://i.loli.net/2020/04/01/aeFc9VLoOZuPhDJ.jpg" alt="kd树"><p><code>kd树的构建过程</code></p><ol><li>构造根节点</li><li>通过递归的方法，不断地对k维空间进行切分，生成子节点</li><li>重复第二步骤，直到子区域中没有示例时终止</li></ol><p>需要关注细节：a.选择向量的哪一维进行划分；b.如何划分数据</p><p><code>kd树的搜索过程</code></p><ol><li>二叉树搜索比较待查询节点和分裂节点的分裂维的值，（小于等于就进入左子树分支，大于就进入右子树分支直到叶子结点）</li><li>顺着“搜索路径”找到最近邻的近似点</li><li>回溯搜索路径，并判断搜索路径上的结点的其他子结点空间中是否可能有距离查询点更近的数据点，如果有可能，则需要跳到其他子结点空间中去搜索</li><li>重复这个过程直到搜索路径为空</li></ol><p><strong>什么是特征工程？</strong><br>通过一些转换函数将特征数据转换成更加适合算法模型的特征数据过程，包含归一化、标准化。</p><ul><li><code>归一化</code>：是对原始数据进行变换把数据映射到(默认为[0,1])之间<br>鲁棒性比较差(容易受到异常点的影响)<br>只适合传统精确小数据场景(以后不会用你了)</li><li><code>标准化</code>：是对原始数据进行变换把数据变换到均值为0,标准差为1范围内<br>异常值对我影响小<br>适合现代嘈杂大数据场景(以后就是用你了)</li></ul><p><strong>什么是交叉验证？</strong><br>交叉验证目的：为了让被评估的模型更加准确可信<br><code>交叉验证</code>：将拿到的训练数据，分为训练和验证集。以下图为例：将数据分成4份，其中一份作为验证集。然后经过4次(组)的测试，每次都更换不同的验证集。即得到4组模型的结果，取平均值作为最终结果。又称4折交叉验证。</p><img width="40%" src="https://i.loli.net/2020/04/01/H9Kprhc67NXloR1.jpg" alt="交叉验证"><h4 id="聚类算法（k-means）"><a href="#聚类算法（k-means）" class="headerlink" title="聚类算法（k-means）"></a>聚类算法（k-means）</h4><p>掌握的重点：</p><ul><li>掌握聚类算法实现过程</li><li>知道K-means算法原理</li><li>知道聚类算法中的评估模型</li><li>说明K-means的优缺点</li><li>了解聚类中的算法优化方式</li><li>知道特征降维的实现过程</li><li>应用Kmeans实现聚类任务</li></ul><p>聚类算法：一种典型的无监督学习算法，主要用于将相似的样本自动归到一个类别中。在聚类算法中根据样本之间的相似性，将样本划分到不同的类别中，对于不同的相似度计算方法，会得到不同的聚类结果，常用的相似度计算方法有欧式距离法。</p><p><strong>聚类算法是无监督的学习算法，而分类算法属于监督的学习算法。</strong></p><p><strong>k-means</strong><br>1、随机设置K个特征空间内的点作为初始的聚类中心<br>2、对于其他每个点计算到K个中心的距离，未知的点选择最近的一个聚类中心点作为标记类别<br>3、接着对着标记的聚类中心之后，重新计算出每个聚类的新中心点（平均值）<br>4、如果计算得出的新中心点与原中心点一样（质心不再移动），那么结束，否则重新进行第二步过程</p><p>由于每次都要计算所有的样本与每一个质心之间的相似度，故在大规模的数据集上，K-Means算法的收敛速度比较慢。</p><p><strong>模型评估</strong></p><ol><li>误差平方和(SSE \The sum of squares due to error)</li><li>肘”方法 (Elbow method) — K值确定</li></ol><img width="60%" src="https://i.loli.net/2020/04/01/pi32aIeYqstVylb.jpg" alt="“肘”方法"><p>（1）对于n个点的数据集，迭代计算k from 1 to n，每次聚类完成后计算每个点到其所属的簇中心的距离的平方和；<br>（2）平方和是会逐渐变小的，直到k==n时平方和为0，因为每个点都是它所在的簇中心本身。<br>（3）在这个平方和变化过程中，会出现一个拐点也即“肘”点，下降率突然变缓时即认为是最佳的k值。<br>在决定什么时候停止训练时，肘形判据同样有效，数据通常有更多的噪音，在增加分类无法带来更多回报时，我们停止增加类别。</p><ol start="3"><li>轮廓系数法（Silhouette Coefficient）</li><li>CH系数（Calinski-Harabasz Index）<br>CH需要达到的目的：用尽量少的类别聚类尽量多的样本，同时获得较好的聚类效果。</li></ol><p><strong>K-means算法优化</strong></p><p>K-means的优点：<br>​ 1. 原理简单（靠近中心点），实现容易<br>​ 2. 聚类效果中上（依赖K的选择）<br>​ 3. 空间复杂度o(N)，时间复杂度o(IKN)<br>K-means的缺点：<br>​ 1. 对离群点，噪声敏感 （中心点易偏移）<br>​ 2. 很难发现大小差别很大的簇及进行增量计算<br>​ 3. 结果不一定是全局最优，只能保证局部最优（与K的个数及初值选取有关）</p><p><code>1. Canopy算法</code></p><img width="50%" src="https://i.loli.net/2020/04/01/yQ1VH3PYL4cinwr.jpg" alt="Canopy算法"><p><code>2. K-means++</code><br>kmeans++目的，让选择的质心尽可能的分散，如下图中，如果第一个质心选择在圆心，那么最优可能选择到的下一个点在P(A)这个区域（根据颜色进行划分）</p><img width="40%" src="https://i.loli.net/2020/04/01/HvxOPFslWKbhn28.jpg" alt="K-means++"><p><code>3. 二分k-means</code><br>实现流程:</p><ul><li>所有点作为一个簇</li><li>将该簇一分为二</li><li>选择能最大限度降低聚类代价函数（也就是误差平方和）的簇划分为两个簇。</li><li>以此进行下去，直到簇的数目等于用户给定的数目k为止。</li></ul><img width="50%" src="https://i.loli.net/2020/04/01/J8DCv2dPO7KLTGN.jpg" alt="二分k-means"><p>二分K均值算法可以加速K-means算法的执行速度，因为它的相似度计算少了并且不受初始化问题的影响，因为这里不存在随机点的选取，且每一步都保证了误差最小。</p><p><code>4.k-medoids（k-中心聚类算法）</code><br>K-medoids和K-means是有区别的，不一样的地方在于中心点的选取<br>K-means中，将中心点取为当前cluster中所有数据点的平均值，对异常点很敏感!<br>K-medoids中，<strong>将从当前cluster 中选取到其他所有（当前cluster中的）点的距离之和最小的点作为中心点。</strong></p><img width="60%" src="https://i.loli.net/2020/04/01/tgBmxNDbcJahwIT.jpg" alt="k-medoids"><p>算法流程：<br>　　 ( 1 )总体n个样本点中任意选取k个点作为medoids<br>　　 ( 2 )按照与medoids最近的原则，将剩余的n-k个点分配到当前最佳的medoids代表的类中<br>　　 ( 3 )对于第i个类中除对应medoids点外的所有其他点，按顺序计算当其为新的medoids时，代价函数的值，遍历所有可能，选取代价函数最小时对应的点作为新的medoids<br>　　 ( 4 )重复2-3的过程，直到所有的medoids点不再发生变化或已达到设定的最大迭代次数<br>　　 ( 5 )产出最终确定的k个类</p><p>k-medoids只能对小样本起作用，样本大，速度就太慢了，当样本多的时候，少数几个噪音对k-means的质心影响也没有想象中的那么重，所以k-means的应用明显比k-medoids多。</p><p><code>5. Kernel k-means（了解）</code><br>kernel k-means实际上，就是将每个样本进行一个投射到高维空间的处理，然后再将处理后的数据使用普通的k-means算法思想进行聚类。<br><code>6 ISODATA（了解）</code><br><code>7 Mini Batch K-Means（了解）</code></p><img width="80%" src="https://i.loli.net/2020/04/01/bgTrXv5mezul2pQ.jpg" alt="k-means优化算法对比"><h4 id="特征降维"><a href="#特征降维" class="headerlink" title="特征降维"></a>特征降维</h4><p>掌握的重点：<br>降维是指在某些限定条件下，降低随机变量(特征)个数，得到一组“不相关”主变量的过程，降维的两种方式：</p><ol><li>特征选择</li><li>主成分分析</li></ol><p><strong>方法</strong></p><ol><li>Filter(过滤式)：主要探究特征本身特点、特征与特征和目标值之间关联</li></ol><ul><li>方差选择法：低方差特征过滤</li><li>相关系数（Pearson相关系数、Spearman相关系数）</li></ul><ol start="2"><li>Embedded (嵌入式)：算法自动选择特征（特征与目标值之间的关联）</li></ol><ul><li>决策树:信息熵、信息增益</li><li>正则化：L1、L2</li><li>深度学习：卷积等</li></ul><p><strong>PCA</strong><br>定义：高维数据转化为低维数据的过程，在此过程中可能会舍弃原有数据、创造新的变量<br>作用：是数据维数压缩，尽可能降低原数据的维数（复杂度），损失少量信息。<br>应用：回归分析或者聚类分析当中</p><h4 id="模型学习的最优化算法"><a href="#模型学习的最优化算法" class="headerlink" title="模型学习的最优化算法"></a>模型学习的最优化算法</h4><p>掌握的重点：</p><ul><li>梯度下降法</li><li>改进的迭代尺度法</li><li>牛顿法和拟牛顿法</li><li>共轭梯度法</li></ul><h4 id="EM算法与高斯混合模型（GMM）"><a href="#EM算法与高斯混合模型（GMM）" class="headerlink" title="EM算法与高斯混合模型（GMM）"></a>EM算法与高斯混合模型（GMM）</h4><p>掌握的重点：</p><ul><li>什么是EM算法</li><li>EM算法的收敛性</li><li>EM算法在GMM中的应用</li><li>EM算法的推广</li></ul><h4 id="隐马尔可夫模型（HMM）"><a href="#隐马尔可夫模型（HMM）" class="headerlink" title="隐马尔可夫模型（HMM）"></a>隐马尔可夫模型（HMM）</h4><p>掌握的重点：</p><ul><li>HMM基本概念</li><li>HMM的3个基本问题</li><li>直接计算法、前向算法、后向算法</li><li>学习算法（监督学习算法、Baum-Welch算法）</li><li>预测算法（近似算法、维特比算法）</li></ul><h4 id="条件随机场（CRF）"><a href="#条件随机场（CRF）" class="headerlink" title="条件随机场（CRF）"></a>条件随机场（CRF）</h4><p>掌握的重点：</p><ul><li>什么是概率无向图模型</li><li>什么是条件随机场</li><li>概率计算（前向-后向算法）</li><li>学习算法（改进的迭代尺度法、拟牛顿法）</li><li>预测算法</li></ul><p><strong>sklearn官网给出的机器学习算法选择路径图如下：</strong><br><img width="70%" src="https://i.loli.net/2020/04/01/nS6XHKIQvyTmjBM.jpg" alt="算法选择路径图"></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机课程笔记</title>
      <link href="/2019/12/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/12/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>基础对于每个人都是很重要的一步。无论你做的是什么领域的东西，计算机科学中的必修课必须是要学好的。就前端而言，OS、数据结构与算法、网络这几块内容是必须要掌握的基础的，这些基础不扎实，你的天花板势必不高。所以任何一个想要在技术这条路上走的更远的人，都应该好好学习计算机科学。——<a href="https://juejin.im/post/5bd2d92c6fb9a05d0f17218c" target="_blank" rel="noopener">掘金《面试数十人有感》</a></p></blockquote><a id="more"></a><ul><li><a href="http://note.youdao.com/noteshare?id=79130226fc402291357ba9ad1082b9d7&sub=08F3755EAFCA4DA58FAE1075B8282B49" target="_blank" rel="noopener">计算机网络</a></li><li><a href="http://note.youdao.com/noteshare?id=3e2bf088723e7e131ffa291accca78db&sub=41D7709ACA3A4549BD38B065B62FD0BA" target="_blank" rel="noopener">操作系统OS</a></li><li><a href="http://note.youdao.com/noteshare?id=7801f065690a5f7f310b4832f1e703c7&sub=506FFE086CAC476FAA3A707C23B67F8E" target="_blank" rel="noopener">计算机组成原理</a></li><li><a href="http://note.youdao.com/noteshare?id=b889d1bd389ab7e2213531d957d8cf91&sub=3C7600988A3C4C90BBBA58BB3B3F2D8A" target="_blank" rel="noopener">编译原理</a></li><li><a href="http://note.youdao.com/noteshare?id=3bcf4041b791e007eb74da24ac69e799&sub=D4551B9F06954D0B8C0EBD924A0E44CF" target="_blank" rel="noopener">算法与数据结构</a></li><li><a href="http://note.youdao.com/noteshare?id=de3cbe35c20a99474ec54dcdb0ab7fd2&sub=33F7F583B2A04BAE91B06C94429FCB72" target="_blank" rel="noopener">软件工程</a></li><li><a href="http://note.youdao.com/noteshare?id=0b51b790bd6b388d1edc09103097ce1f&sub=9043A297ACFF41918868E60E9765C979" target="_blank" rel="noopener">数学-高等数学、线性代数、概率论</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>高级前端知识体系</title>
      <link href="/2019/12/06/%E9%AB%98%E7%BA%A7%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
      <url>/2019/12/06/%E9%AB%98%E7%BA%A7%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<p>本篇梳理一下<strong>高级</strong>前端的知识体系图谱，可以参考学习：</p><a id="more"></a><p>（对应的<strong>初 / 中级</strong>前端知识体系图谱可以参考这篇：<a href="https://iloveyou11.github.io/2019/02/01/%E5%88%9D%E4%B8%AD%E7%BA%A7%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/" target="_blank" rel="noopener">初 / 中级前端知识体系</a>）</p><h3 id="知识体系图谱"><a href="#知识体系图谱" class="headerlink" title="知识体系图谱"></a>知识体系图谱</h3><p><img src="https://i.loli.net/2019/12/07/ZYhEkbqpA1LvQyB.jpg" alt="高级前端知识体系.jpg"></p><h5 id="一、前端自动化工作流"><a href="#一、前端自动化工作流" class="headerlink" title="一、前端自动化工作流"></a>一、前端自动化工作流</h5><ul><li>模块化打包工具详解：Webpack4、Rollup、Parcel </li><li>前端工作流实战：基于GitHub、GitLab的开发工作流 </li><li>前端工程构建工具详解：npm scripts、Makefile、 Gulp、Grunt、Broccoli、FIS</li><li>优质代码规范化工具详解：Prettier代码格式化工具、ESLint代码检测工具、Stylelint样式代码规范工具、 Markdownlint格式检查扩展工具</li></ul><h5 id="二、JavaScript高阶深入"><a href="#二、JavaScript高阶深入" class="headerlink" title="二、JavaScript高阶深入"></a>二、JavaScript高阶深入</h5><ul><li>函数式编程思想</li><li>Flow静态类型工具、Typescript编译扩展工具 </li><li>原理掌握：call、apply、bind、new、防抖和节流、深拷贝和浅拷贝等手写实现，原型链和闭包深入，执行上下文和作用域链</li><li>ES6、ES7、ES8新特性、Babel编译器、CoreJS模块化、标准库</li><li>Symbol元编程、Set和Map应用以及WeakMap、Object.defineProperty以及下一代Proxy&amp;Reflect、ESModule实现、浏览器和Node.js中的EventLoop</li><li>高阶函数、发布订阅和观察者模式、Promise核心应用、generator和实现co库、async+await原理、实现完整的PromiseA+类库，包含reace、all、finally、try等方法</li><li>词法分析和语法分析AST</li><li>V8内存管理、垃圾收集、引用记数、标记清除、标记整理和增量标记</li></ul><h5 id="三、框架原理剖析及进阶"><a href="#三、框架原理剖析及进阶" class="headerlink" title="三、框架原理剖析及进阶"></a>三、框架原理剖析及进阶</h5><ul><li>Vue.js源码分析与进阶</li><li>Angular原理与进阶</li><li>React.js原理与进阶</li><li>MVVM模式思想及框架实现</li><li>CSS-in-JS、Redux、React Hooks</li><li>Gatsby 静态化 Web 开发（React、GraphQL)</li><li>数据流解决方案：Redux、Mobx、Vuex、RxJS </li><li>服务端這染 SSR 专题：Next.js、Nuxt.js、Universal</li><li>Vue.js 3.0 function API 使用、TypeScript 开发 Vue.js</li></ul><h5 id="四、移动与桌面应用开发"><a href="#四、移动与桌面应用开发" class="headerlink" title="四、移动与桌面应用开发"></a>四、移动与桌面应用开发</h5><ul><li>React Native移动应用开发</li><li>Flutter移动跨平台开发框架</li><li>Electron跨平台桌面应用程序开发</li><li>小程序开发实战：微信、支付宝、百度、头条 </li><li>混合式 App 开发框架：Cordova、Ionic、Phonegap </li><li>移动端多端统一开发解决方案：Taro、uni-app、 Chameleon</li><li>H5配合原生开发 App： Webview、Jsbridge、 NativeScript</li></ul><h5 id="五、node-js核心技术"><a href="#五、node-js核心技术" class="headerlink" title="五、node.js核心技术"></a>五、node.js核心技术</h5><ul><li>Node.js微服务开发</li><li>基于Node.js的前后端分离方案</li><li>GraphQL / RESTful 标准接口开发</li><li>网络爬虫幵发：Cheerio、Nightmare、Puppeteer</li><li>Node.js高级特性解读：单线程、EventLoop、Cluster</li><li>NoSQL数据库详解及应用：Redis、MongoDB、 Memcached</li><li>Web应用开发框架从入门到实战：Adonis.js、Egg.js、Koa</li></ul><h5 id="六、架构与运维"><a href="#六、架构与运维" class="headerlink" title="六、架构与运维"></a>六、架构与运维</h5><ul><li>现代化Web应用架构101</li><li>单元測试、集成测试、Mock</li><li>容器化运维操作： Docker Compose</li><li>项目质量监测：Lint、e2e test、 codecov</li><li>Serverless无服务器架构： ZEIT Now、 Netlify</li><li>持续集成与持续部署： Jenkins、 TravisCI、 CircleCI</li><li>前端应用性能测试及优化工具： Jsperf、 Yslow、Pagespeed</li><li>测试框架： Mocha、Ava、Jest、 Karma、 Protractor、Cypress</li></ul><h5 id="七、其他广度知识"><a href="#七、其他广度知识" class="headerlink" title="七、其他广度知识"></a>七、其他广度知识</h5><ul><li>设计模式(创建型设计模式、结构型设计模式、行为型设计模式)</li><li>计算机基础(网络/组成原理)</li><li>数据结构与算法</li><li>性能优化</li><li>网络安全</li></ul><hr><p><strong>珠峰提供的大前端知识体系参考：</strong><br><img src="https://i.loli.net/2019/12/14/WSxXpjw4nT7ilZk.png" alt="技术体系-1.png"><br><img src="https://i.loli.net/2019/12/14/q1r3PdtBy4LiXMx.png" alt="技术体系-2.png"><br><img src="https://i.loli.net/2019/12/14/N9s8BepDTSO4RkE.png" alt="技术体系-3.png"><br><img src="https://i.loli.net/2019/12/14/gmeTjX2AUpq4IZW.png" alt="技术体系-4.png"><br><img src="https://i.loli.net/2019/12/14/ter2y7GZHRBWxfI.png" alt="技术体系-5.png"></p><hr><p>深入研究一个前端框架vue、react的底层原理(前提是这两者的使用必须熟练掌握)，要熟悉核心原理的实现 底层机制，学会自己封装库和框架，接下来分开剖析每个知识面的详细内容：</p><h3 id="对vue的掌握"><a href="#对vue的掌握" class="headerlink" title="对vue的掌握"></a>对vue的掌握</h3><h5 id="基础-amp-原理"><a href="#基础-amp-原理" class="headerlink" title="基础&amp;原理"></a>基础&amp;原理</h5><ul><li>Vue基础 什么是Vue?、Vue的使用、Vue常见的指令、Vue的事件绑定和属性绑定、Vue中的计算属性、computed和watch的应用、表单中的数据绑定、手写Vue中的响应式原理、MVVM手写实现</li><li>Vue应用 Vue中的修饰符、自定义过滤器和指令、Vue实例上的方法、Vue中的生命周期、Axios应用async和await、vue-cli3.0实战、render方法详解和使用jsx语法</li><li>封装自己的ElementUI组件 什么是组件和组件的应用、组件的属性和校验、组件之间的通信、EventBus应用、组件slot用法、封闭自己的树型组件、日历组件、异步加载的省市级联组件、基于element-ui/iview二次封装表格组件和树型组件、组件的单元测试和集成测试</li><li>路由篇 VueRouter的基础应用、编程式导航、路由嵌套、路由守卫、路由元信息、实现动态权限菜单、按钮及权限认证、登录权限、手写实现VueRouter源码</li><li>vuex vuex应用(state、getter、mutation、action)、手写实现中的state、getter、commit、dispatch、actions/mutations、模块化</li><li>PWA manifest.json配置、service worker生命周期、fetch请求拦截、cache api以及缓存策略、Notification API、cache api以及缓存策略、Notification API、workbox应用、 Vue实战PWA</li><li>Vue SSR服务器端渲染 SSR原理和设计理念、集成koa实现服务器端渲染、webpack构建Vue SSR项目、集成路由及代码分割、集成VueSSR和Vuex实现数据同步</li><li>项目优化 路由懒加载、页面预渲染、SSR原理和Nuxt实战、Vue骨架屏、Vue-devtools开发插件、Vue动画原理</li><li>Vue全家桶项目 Vue-cli3.0项目搭建、服务器构建(koa2+mongodb)、cube-ui组件化实战、路由配置和动画、如何Mock后台数据、数据获取和axios应用拦截器、基于JWT的注册登录权限管理、公共组件封装、上拉刷新、下拉加载、图片懒加载、课程购买、微信和支付宝支付、使用vuex实现购物车、项目布署和上线</li></ul><h3 id="对react的掌握"><a href="#对react的掌握" class="headerlink" title="对react的掌握"></a>对react的掌握</h3><h5 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h5><ul><li>React核心</li><li>模块化和组件化</li><li>React的属性、校验和参数传递</li><li>React的状态和双向数据绑定</li><li>React中的单向数据流</li><li>受控组件和非受控组件</li><li>React表单双向数据绑定</li><li>新旧Context上下文环境</li><li>DOM获取之Ref</li><li>新旧生命周期函数</li><li>children属性的使用</li></ul><h5 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h5><ul><li>create-react-app原理分析</li><li>JSX原理和虚拟DOM原理</li><li>setState异步原理实现和事务实现</li><li>使用Immutablejs和PureComponent优化性能</li><li>React动画</li><li>ErrorBoundary、Suspense和Fragment</li><li>React Hooks+Redux实战</li><li>React性能分析</li><li>React中的高阶组件和render props</li><li>React新一代的Fiber架构</li><li>从零实现一款包含完整dom-diff算法的React</li></ul><h5 id="路由篇"><a href="#路由篇" class="headerlink" title="路由篇"></a>路由篇</h5><ul><li>路由配置</li><li>路由懒加载</li><li>路由重定向</li><li>路由之权限管理</li><li>受保护的路由</li><li>手写一个完整的React-router4路由库</li></ul><h5 id="redux篇"><a href="#redux篇" class="headerlink" title="redux篇"></a>redux篇</h5><ul><li>redux核心概念 action、reducer、store</li><li>手写实现redux、react-redux、connected-react-router完整功能库</li><li>手写redux-logger、redux-promise、redux-thunk、redux-saga、redux-actions、reselect、redux-persist完整类库</li></ul><h5 id="React服务器端渲染SSR"><a href="#React服务器端渲染SSR" class="headerlink" title="React服务器端渲染SSR"></a>React服务器端渲染SSR</h5><ul><li>客户端渲染VS服务器端渲染</li><li>React中的服务器端原理</li><li>同构的原理和意义</li><li>SSR中使用路由跳转和redux</li><li>SEO优化和预渲染</li><li>Koa2+next.js服务器端渲染实战</li></ul><h5 id="mobx篇"><a href="#mobx篇" class="headerlink" title="mobx篇"></a>mobx篇</h5><ul><li>observable、computed、autorun、when、reaction实战</li><li>手写一个mobx类库</li></ul><h5 id="Ant-Design篇"><a href="#Ant-Design篇" class="headerlink" title="Ant-Design篇"></a>Ant-Design篇</h5><ul><li>Button、Modal、Loading、Notification、Message、List、Carousel等UI组件</li><li>布局、表单和复杂表格组件</li><li>手写Antdesign表单组件</li></ul><h5 id="Ant-DesignPro篇"><a href="#Ant-DesignPro篇" class="headerlink" title="Ant-DesignPro篇"></a>Ant-DesignPro篇</h5><ul><li>nunjucks、yaml、mockjs、roadhog</li><li>umi配置静态和动态路由、权限和动画、UMI实现原理</li><li>dva创建应用、集成AntDesign、定义路由和UI组件、链接仓库、使用effects和reducers、手写实现dva</li><li>使用AntDesignPro开发企业级后台系统</li></ul><h5 id="typescript"><a href="#typescript" class="headerlink" title="typescript"></a>typescript</h5><ul><li>开发环境、基本语法、面向对象编程、泛型、类型系统</li><li>前端工程化TS应用、声明文件、TypeScript+React集成开发</li></ul><h3 id="对node的掌握"><a href="#对node的掌握" class="headerlink" title="对node的掌握"></a>对node的掌握</h3><h5 id="node核心模块"><a href="#node核心模块" class="headerlink" title="node核心模块"></a>node核心模块</h5><ul><li>EventLoop和事件队列</li><li>process全局对象</li><li>commonjs原理解析</li><li>深入字符编码</li><li>Buffer对象</li><li>fs文件模块</li><li>压缩与解压缩</li><li>加密与签名算法</li><li>Stream流的原理和应用</li><li>多线程与集群</li><li>tcp和http服务器</li><li>多语言、防盗链、正向和反向代码服务器<h5 id="Express-amp-Koa"><a href="#Express-amp-Koa" class="headerlink" title="Express&amp;Koa"></a>Express&amp;Koa</h5></li><li>路由配置、参数处理、使用中间件、模板、静态文件中间件、重定向、cookie和session</li><li>手写原版express框架、手写原版koa2框架、JWT权限认证<h5 id="企业级开发框架Egg-js"><a href="#企业级开发框架Egg-js" class="headerlink" title="企业级开发框架Egg.js"></a>企业级开发框架Egg.js</h5></li><li>项目架构、配置路由、静态文件服务、模板引擎、远程接口服务、计划任务</li><li>集成MYSQL、restful接口、sequelize持久化工具、国际化、扩展工具方法、中间件、运行环境、单元测试、服务器部署和运维</li><li>自定义插件和框架<h5 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h5></li><li>测试用例和需求分析</li><li>单元测试框架mocha</li><li>爬虫利器Puppeteer实战</li><li>Jest+Enzyme实现React单元测试<h5 id="服务器布署"><a href="#服务器布署" class="headerlink" title="服务器布署"></a>服务器布署</h5></li><li>TCP/IP协议族网络模型、IP协议以及简单路由、TCP连接的本质、TCP三次握手和加次挥手、路由和网关、滑动容器和Nagle算法、HTTPS、网络命令、网络调优、wireshark抓包实战</li><li>域名、备案、服务器、环境配置、安全设置、远程部署、发布与更新</li><li>集群的负载均衡、PM2实战<h5 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h5></li><li>nginx的安装和使用</li><li>模块和基本配置</li><li>正向反向代理等应用场景</li><li>CDN</li><li>浏览器缓存</li><li>跨域</li><li>防盗链<h5 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h5></li><li>Docker介绍和安装</li><li>Dockerfile</li><li>存储和镜像仓库</li><li>Dock实战<h5 id="jenkins"><a href="#jenkins" class="headerlink" title="jenkins"></a>jenkins</h5></li><li>jenkins job</li><li>shell集成</li><li>集成nginx和git</li><li>持续集成和布署</li><li>travis gitlab ci<h5 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h5></li><li>MYSQL安装与使用</li><li>MYSQL系统架构</li><li>数据处理之增删改查</li><li>数据类型和约束分页</li><li>索引和慢查询性能分析</li><li>数据库安全之防止SQL注入</li><li>数据库设计ER图设计</li><li>数据库事务、锁和日志隔离级别</li><li>数据库设计之三大范式</li><li>基于角色的权限访问控制（Role-Based Access Control）<h5 id="Mongodb"><a href="#Mongodb" class="headerlink" title="Mongodb"></a>Mongodb</h5></li><li>Mongodb安装和使用</li><li>Mongodb的系统架构</li><li>Mongodb高级查询</li><li>Mongodb索引</li><li>Mongodb安全与权限</li><li>mongoose模块之Schema</li><li>mongoose模块之Model</li><li>mongoose实战<h5 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h5></li><li>Redis安装和使用</li><li>5种数据结构及使用场景</li><li>API的理解和使用</li><li>Redis客户端</li><li>发布订阅</li><li>事务</li><li>备份和恢复</li></ul><h3 id="对算法的掌握"><a href="#对算法的掌握" class="headerlink" title="对算法的掌握"></a>对算法的掌握</h3><h5 id="算法的基础知识"><a href="#算法的基础知识" class="headerlink" title="算法的基础知识"></a>算法的基础知识</h5><ul><li>输入、输出和数据级</li><li>计算能力的变革</li><li>CPU、寄存器和内存</li><li>二分查找</li><li>插入排序</li><li>冒泡排序</li></ul><h5 id="算法的衡量和优化"><a href="#算法的衡量和优化" class="headerlink" title="算法的衡量和优化"></a>算法的衡量和优化</h5><ul><li>时间复杂度和空间复杂度</li><li>复杂度的本质</li><li>合并排序</li><li>递归函数复杂度分析</li><li>递归表达式分析法</li><li>递归数学归纳法分析</li><li>主定理</li></ul><h5 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h5><ul><li>排序算法介绍</li><li>基于比较的排序算法</li><li>合并排序优化</li><li>快速排序</li><li>快速排序复杂度和优化</li><li>计数排序</li><li>基数排序</li><li>桶排序</li><li>外部排序</li></ul><h5 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h5><ul><li>递归的基本概念</li><li>递归图形的绘制</li><li>递归和穷举问题</li><li>组合问题</li><li>递归空间优化</li><li>回溯算法</li><li>重复子问题优化</li><li>尾递归</li><li>搜索问题(8皇后)</li><li>深度优先搜索和广度优先搜索</li></ul><h5 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h5><ul><li>数组</li><li>双向链表</li><li>反转单向链表</li><li>堆</li><li>栈</li><li>队列</li></ul><h5 id="进阶算法"><a href="#进阶算法" class="headerlink" title="进阶算法"></a>进阶算法</h5><ul><li>动态规划的概念</li><li>LCS问题的子结构</li><li>填表法</li><li>构造结果</li></ul><hr><p>话说前端知识很杂很多，看着你怕了吗？哈哈，从现在起构建好自己的知识体系，一个个攻破它就够啦！</p><img src="https://i.loli.net/2019/12/07/vAPlruMUBqGxReF.jpg" width="40%">]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ML系列1：AI学习资源与知识点</title>
      <link href="/2019/12/04/ML-01/"/>
      <url>/2019/12/04/ML-01/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><a href="https://iloveyou11.github.io/2019/12/04/ML-01/" target="_blank" rel="noopener">ML系列1：AI学习资源与知识点</a><br><a href="https://iloveyou11.github.io/2019/12/10/ML-02/" target="_blank" rel="noopener">ML系列2：机器学习必会算法</a><br><a href="https://iloveyou11.github.io/2019/12/29/ML-04/" target="_blank" rel="noopener">ML系列3：深度学习中的问题解答</a><br><a href="https://iloveyou11.github.io/2020/01/02/ML-05/" target="_blank" rel="noopener">ML系列4：tensorflow入门-1</a><br><a href="https://iloveyou11.github.io/2020/01/10/ML-06/" target="_blank" rel="noopener">ML系列5：tensorflow入门-2</a><br><a href="https://iloveyou11.github.io/2020/01/30/ML-07/" target="_blank" rel="noopener">ML系列6：tensorflow项目实战</a></p><h3 id="必备数学知识"><a href="#必备数学知识" class="headerlink" title="必备数学知识"></a>必备数学知识</h3><p>建议观看网易云提供的 <a href="https://study.163.com/course/introduction.htm?courseId=1005695008&share=1&shareId=1023934022#/courseDetail?tab=1" target="_blank" rel="noopener">数据科学人工智能-必备数学基础</a> 教程，包括了高等数学、线性代数、概率论与数理统计的知识点，每个从事机器学习方向的工程师最好掌握</p><p>这里是我整理的<a href="http://note.youdao.com/noteshare?id=0b51b790bd6b388d1edc09103097ce1f&sub=9043A297ACFF41918868E60E9765C979" target="_blank" rel="noopener">课程笔记</a></p><h3 id="吴恩达系列教程"><a href="#吴恩达系列教程" class="headerlink" title="吴恩达系列教程"></a>吴恩达系列教程</h3><p><a href="http://note.youdao.com/noteshare?id=198673b64b07cdb6245938647776c2f6&sub=7EE74EF88257425CAE1080C606F2ABEA" target="_blank" rel="noopener">tensorflow知识点</a></p><p><a href="http://note.youdao.com/noteshare?id=91fa2382d5cb0cbbac025d71f85c8cd2&sub=7628282EE734495C86840415C572DFA5" target="_blank" rel="noopener">吴恩达机器学习知识点</a></p><p><a href="https://www.bilibili.com/video/av9912938?from=search&seid=8731100606997428715" target="_blank" rel="noopener">机器学习（Machine Learning）- 吴恩达（Andrew Ng）</a>  —必看！！！</p><p><a href="https://mooc.study.163.com/smartSpec/detail/1001319001.htm" target="_blank" rel="noopener">深度学习工程师微专业-吴恩达</a>  —必看！！！</p><p>包括以下几个阶段:</p><ol><li><a href="https://mooc.study.163.com/course/2001281002#/info" target="_blank" rel="noopener">神经网络和深度学习</a></li><li><a href="https://mooc.study.163.com/course/2001281003#/info" target="_blank" rel="noopener">改善深层神经网络：超参数调试、正则化以及优化</a></li><li><a href="https://mooc.study.163.com/course/2001280004#/info" target="_blank" rel="noopener">结构化机器学习项目</a></li><li><a href="https://mooc.study.163.com/course/2001281004#/info" target="_blank" rel="noopener">卷积神经网络</a></li><li><a href="https://mooc.study.163.com/course/2001280005#/info" target="_blank" rel="noopener">序列模型</a></li></ol><p><a href="http://www.ai-start.com/ml2014/" target="_blank" rel="noopener">吴恩达视频教程文字笔记</a>  —复习参考</p><h3 id="其他知名up主"><a href="#其他知名up主" class="headerlink" title="其他知名up主"></a>其他知名up主</h3><ol><li><strong>“深度碎片”</strong>  —机器学习方面知名up主，视频含金量很高</li></ol><p><a href="https://space.bilibili.com/198464479" target="_blank" rel="noopener">个人主页</a>  </p><p><a href="https://www.bilibili.com/video/av20994456" target="_blank" rel="noopener">吴恩达机器学习图解笔记</a></p><p><a href="https://www.bilibili.com/video/av20381986" target="_blank" rel="noopener">李宏毅深度学习图解笔记</a></p><p><a href="https://www.bilibili.com/video/av22581633" target="_blank" rel="noopener">探索一句话版的机器学习与深度学习</a></p><p>还有其他视频干货建议在主页查看，总之，他的风格是以图解笔记的形式讲解，诙谐易懂~</p><ol start="2"><li><strong>“莫烦python”</strong>  —这位up主授课的风格非常棒，简单易懂，适合初学者入门</li></ol><p><a href="https://space.bilibili.com/243821484/channel/detail?cid=28254" target="_blank" rel="noopener">个人主页</a></p><p><a href="https://www.bilibili.com/video/av16001891" target="_blank" rel="noopener">Tensorflow 搭建自己的神经网络</a></p><p><a href="https://www.bilibili.com/video/av16910214" target="_blank" rel="noopener">Keras 快速搭建神经网络</a></p><ol start="3"><li><strong>“啥都会一点的研究生”</strong></li></ol><p><a href="https://space.bilibili.com/46880349" target="_blank" rel="noopener">个人主页</a></p><h3 id="计算机视觉"><a href="#计算机视觉" class="headerlink" title="计算机视觉"></a>计算机视觉</h3><p><a href="https://coding.imooc.com/class/chapter/327.html#Anchor" target="_blank" rel="noopener">Python3+TensorFlow 打造人脸识别智能小程序</a>—慕课网良心视频，主要通过这个视频熟悉CNN的具体细节<br><a href="https://www.bilibili.com/video/av54557524/?p=48" target="_blank" rel="noopener">TensorFlow极客时间</a>—注重理论与实战的结合，非常棒的教程<br><a href="https://coding.imooc.com/class/344.html#Anchor" target="_blank" rel="noopener">深度学习之tensorflow2.0入门到实战</a>—很详细清楚，基本知识点和网络搭建方法，特别是一些细节都覆盖了，推荐。  <a href="https://www.bilibili.com/video/av76951063?from=search&seid=6126019341165060789" target="_blank" rel="noopener">点我可看</a><br><a href="https://www.bilibili.com/video/av76145282" target="_blank" rel="noopener">人工智能实战项目合集</a>—如果想多练习一些深度学习的项目，看这个没错<br><a href="https://www.bilibili.com/video/av50327129" target="_blank" rel="noopener">机器学习与深度学习集训营-邹博</a>—涵盖基础数学知识、机器学习算法、CNN/RNN、强化学习<br><a href="https://www.bilibili.com/video/av68991919" target="_blank" rel="noopener">深度学习之目标检测常用算法原理+实践精讲</a></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>小程序云开发笔记</title>
      <link href="/2019/11/27/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/11/27/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>整理一下小程序云开发项目中的基本思路和遇到的问题。</p><a id="more"></a><p><a href="https://developers.weixin.qq.com/doc/" target="_blank" rel="noopener">微信官方文档</a></p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/" target="_blank" rel="noopener">微信小程序开发文档</a></p><p>代码GitHub：</p><p><a href="https://github.com/iloveyou11/face-music" target="_blank" rel="noopener">小程序代码地址</a></p><p><a href="https://github.com/iloveyou11/face-music-admin" target="_blank" rel="noopener">后台管理系统代码地址</a></p><p><strong>云开发基础能力：</strong></p><ul><li>云函数：在云端运行的代码，微信私有协议天然鉴权</li><li>云数据库：一个既可以在小程序端操作又可以在云函数种操作的json数据库</li><li>云存储：在云端存储文件，可以在云端控制台可视化管理</li><li>云调用：基于云函数免鉴权使用小程序开放接口的能力</li><li>HTTP API：使用HTTP API开发者可以在已有服务器上访问云资源，实现与云开发的互通</li></ul><h3 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h3><p>使用微信开发者工具，新建云开发小程序。生成的项目中会存在cloudfunctions、miniprogram两个文件夹，分别存放的云函数代码、项目前端代码。这时运行项目是会报错的，这时我们应该点开“云开发”，初始化我们的云开发环境，并记录环境唯一id（在项目中会用到）。</p><p>在app.js中接入云开发环境：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">App(&#123;</span><br><span class="line">  onLaunch: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!wx.cloud) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">'请使用 2.2.3 或以上的基础库以使用云能力'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      wx.cloud.init(&#123;</span><br><span class="line">        <span class="comment">//   env 参数说明：</span></span><br><span class="line">        <span class="comment">//   env 参数决定接下来小程序发起的云开发调用（wx.cloud.xxx）会默认请求到哪个云环境的资源</span></span><br><span class="line">        <span class="comment">//   此处请填入环境 ID, 环境 ID 可打开云控制台查看</span></span><br><span class="line">        <span class="comment">//   如不填则使用默认环境（第一个创建的环境）</span></span><br><span class="line">        env: <span class="string">'face-music-test-cor7k'</span>,</span><br><span class="line">        <span class="comment">// 可以记录访问过小程序的用户</span></span><br><span class="line">        traceUser: <span class="literal">true</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">// 小程序全局属性和方法</span></span><br><span class="line">    <span class="keyword">this</span>.globalData = &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>env参数说明：</strong> env参数决定接下来小程序发起的云开发调用，此处请填入环境 ID，环境 ID 可打开云控制台查看。traceUser可以记录访问过小程序的用户。</p><p>在app.json中配置导航栏：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"pages"</span>: [</span><br><span class="line">    <span class="string">"pages/list/list"</span>,</span><br><span class="line">    <span class="string">"pages/profile/profile"</span>,</span><br><span class="line">    <span class="string">"pages/review/review"</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"tabBar"</span>: &#123;</span><br><span class="line">    <span class="attr">"color"</span>: <span class="string">"#aaa"</span>,</span><br><span class="line">    <span class="attr">"selectedColor"</span>: <span class="string">"#333"</span>,</span><br><span class="line">    <span class="attr">"list"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"pagePath"</span>: <span class="string">"pages/list/list"</span>,</span><br><span class="line">        <span class="attr">"text"</span>: <span class="string">"音乐"</span>,</span><br><span class="line">        <span class="attr">"iconPath"</span>: <span class="string">"images/music-init.png"</span>,</span><br><span class="line">        <span class="attr">"selectedIconPath"</span>: <span class="string">"images/music-select.png"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"pagePath"</span>: <span class="string">"pages/review/review"</span>,</span><br><span class="line">        <span class="attr">"text"</span>: <span class="string">"发现"</span>,</span><br><span class="line">        <span class="attr">"iconPath"</span>: <span class="string">"images/review-init.png"</span>,</span><br><span class="line">        <span class="attr">"selectedIconPath"</span>: <span class="string">"images/review-select.png"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"pagePath"</span>: <span class="string">"pages/profile/profile"</span>,</span><br><span class="line">        <span class="attr">"text"</span>: <span class="string">"我的"</span>,</span><br><span class="line">        <span class="attr">"iconPath"</span>: <span class="string">"images/profile-init.png"</span>,</span><br><span class="line">        <span class="attr">"selectedIconPath"</span>: <span class="string">"images/profile-select.png"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记得在pages目录下创建对应的页面。其中所用到的字体图标可以在<a href="https://www.iconfont.cn/" target="_blank" rel="noopener">iconfont</a>网站下载。</p><p>这是可以在微信开发者工具中查看页面效果。</p><h3 id="part1-音乐播放功能"><a href="#part1-音乐播放功能" class="headerlink" title="part1 音乐播放功能"></a>part1 音乐播放功能</h3><h5 id="歌单页面开发"><a href="#歌单页面开发" class="headerlink" title="歌单页面开发"></a>歌单页面开发</h5><p>轮播图：使用小程序自带的swiper组件，官方建议将wx:key绑定到block标签上，block并不会真实渲染到页面中。</p><p>对于image组件，mode属性是其具体显示的模式，具体值可以参考<a href="https://developers.weixin.qq.com/miniprogram/dev/component/image.html" target="_blank" rel="noopener">mode的合法值</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">swiper</span> <span class="attr">indicator-dots</span>=<span class="string">"true"</span> <span class="attr">autoplay</span>=<span class="string">"true"</span> <span class="attr">interval</span>=<span class="string">"2000"</span> <span class="attr">duration</span>=<span class="string">"1000"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;swipers&#125;&#125;"</span> <span class="attr">wx:key</span>=<span class="string">"url"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;item.fileID&#125;&#125;"</span> <span class="attr">mode</span>=<span class="string">"widthFix"</span> <span class="attr">class</span>=<span class="string">"swiper"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>组件化开发：</strong> 在用户界面开发领域，组件是一种面向用户的、独立的、可复用的交互元素的封装</p><p><strong>自定义歌单组件</strong><code>components/disc</code></p><p><strong>难点</strong></p><ol><li>数据监听器<br>错误示范——这样会形成死循环，不停赋值，不停监听触发函数……<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">  observers:&#123;</span><br><span class="line">    <span class="comment">//只监听对象下面的某一个属性</span></span><br><span class="line">    [<span class="string">'playlist.playCount'</span>](count)&#123;</span><br><span class="line">      <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        [<span class="string">'playlist.playCount'</span>]:<span class="keyword">this</span>._transNumber(count,<span class="number">2</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">//播放数量数据格式处理</span></span><br><span class="line">    _transNumber(count,point)&#123;</span><br><span class="line">      <span class="keyword">const</span> number=count.toString().split(<span class="string">'.'</span>)[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">const</span> len=number.length</span><br><span class="line">      <span class="keyword">if</span>(len&lt;<span class="number">6</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> number</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(len&gt;=<span class="number">6</span>&amp;&amp;len&lt;=<span class="number">8</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> decimal=number.substring(len<span class="number">-4</span>,len<span class="number">-4</span>+point)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">parseFloat</span>(<span class="built_in">parseInt</span>(number / <span class="number">10000</span>) + <span class="string">'.'</span> + decimal)+<span class="string">'万'</span></span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> decimal = number.substring(len - <span class="number">8</span>, len - <span class="number">8</span> + point)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">parseFloat</span>(<span class="built_in">parseInt</span>(number / <span class="number">100000000</span>) + <span class="string">'.'</span> + decimal) + <span class="string">'亿'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><p>正确示范——新定义一个data中的属性，并对其赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">  observers:&#123;</span><br><span class="line">    <span class="comment">//只监听对象下面的某一个属性</span></span><br><span class="line">    [<span class="string">'playlist.playCount'</span>](count)&#123;</span><br><span class="line">      <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        _count:<span class="keyword">this</span>._transNumber(count,<span class="number">2</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//页面中采用这个_count属性</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    _count:<span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">//播放数量数据格式处理</span></span><br><span class="line">    _transNumber(count,point)&#123;</span><br><span class="line">    <span class="comment">//  ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>异步处理<br>在云函数中默认支持async、await语法的，但是在小程序端就不行。我们此时需要引入额外的文件才能让小程序端支持。</li></ol><p>需要使用<a href="https://github.com/iloveyou11/face-music/blob/master/miniprogram/utils/runtime.js" target="_blank" rel="noopener">runtime.js</a>文件，在js文件中通过<code>import regeneratorRuntime from ...</code>引入即可，此时小程序端即可支持async、await语法。</p><ol start="3"><li>实现歌单数据通过云函数获取（掌握云函以及如何往云数据库中插入数据）<br>在<code>cloudfunctions</code>文件夹下新建Nodejs云函数。项目中可以使用<code>request</code>和<code>request-promise</code>发送请求。右键文件夹打开终端，下载npm包即可。</li></ol><p>先在云数据库中新建数据表<code>playlist</code>，将数据一条条插入到数据库中。</p><p>有几点注意：</p><ul><li>通过url请求歌单数据（每次获取都是最新的歌单数据），并将数据插入到数据库中</li><li>每次插入数据时，应该进行去重处理，如果数据库已经有了则不用继续插入此数据</li><li>突破小程序获取数据条目的限制（云函数只能获取100条），应该分批次去获取，最后拼接在一起</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 云函数入口文件</span></span><br><span class="line"><span class="keyword">const</span> cloud = <span class="built_in">require</span>(<span class="string">'wx-server-sdk'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rp=<span class="built_in">require</span>(<span class="string">'request-promise'</span>)</span><br><span class="line"><span class="keyword">const</span> URL = <span class="string">'http://musicapi.xiecheng.live/personalized'</span></span><br><span class="line"></span><br><span class="line">cloud.init()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db=cloud.database() <span class="comment">//初始化云数据库</span></span><br><span class="line"><span class="keyword">const</span> playlistCollection = db.collection(<span class="string">'playlist'</span>)</span><br><span class="line"><span class="keyword">const</span> MAX_LENGTH = <span class="number">100</span> <span class="comment">//小程序能从云数据库获取的最多记录</span></span><br><span class="line"><span class="comment">// 云函数入口函数</span></span><br><span class="line">exports.main = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> wxContext = cloud.getWXContext()</span><br><span class="line">  <span class="comment">// 云数据库中存储的数据</span></span><br><span class="line">  <span class="comment">// const list = await playlistCollection.get()</span></span><br><span class="line">  <span class="comment">// 如何突破小程序只能获取云数据库100条记录的限制？</span></span><br><span class="line">  <span class="comment">// 可以分批次去获取，最后拼接在一起</span></span><br><span class="line">  <span class="keyword">const</span> countResult=<span class="keyword">await</span> playlistCollection.count()</span><br><span class="line">  <span class="keyword">const</span> total=countResult.total</span><br><span class="line">  <span class="keyword">const</span> batchTimes=<span class="built_in">Math</span>.ceil(total/MAX_LENGTH)</span><br><span class="line">  <span class="keyword">const</span> tasks=[]</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;batchTimes;i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> promise=playlistCollection.skip(i*MAX_LENGTH).limit(MAX_LENGTH).get()</span><br><span class="line">    tasks.push(promise)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> list=&#123;</span><br><span class="line">    data:[]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(tasks.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="comment">//注意这里的语法（简洁）</span></span><br><span class="line">    list=<span class="function">(<span class="params"><span class="keyword">await</span> <span class="built_in">Promise</span>.all(tasks</span>)).<span class="params">reduce</span>(<span class="params">(pre,cur</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        data:pre.data.concat(cur.data)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 从服务器端获取的数据</span></span><br><span class="line">  <span class="keyword">const</span> playlist=<span class="keyword">await</span> rp(URL).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(res).result</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 针对list和playlist做去重处理，在playlist中找出所有不在list中的数据</span></span><br><span class="line">  <span class="keyword">const</span> newData=[]</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len1 = playlist.length;i&lt;len1;i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> isSame = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>,len2=list.data.length;j&lt;len2;j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(playlist[i].id===list[j].id)&#123;</span><br><span class="line">        isSame=<span class="literal">true</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!isSame)&#123;</span><br><span class="line">      newData.push(playlist[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将数据存储至云数据库当中</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = newData.length;i&lt;len;i++)&#123;</span><br><span class="line">    <span class="keyword">await</span> playlistCollection.add(&#123;</span><br><span class="line">      data:&#123;</span><br><span class="line">        ...newData[i],</span><br><span class="line">        createTime:db.serverDate()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'插入成功'</span>)</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">'插入失败'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newData.length</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成后，点击<code>上传并部署</code>，等云函数上传成功后，在云开发中可以看到刚刚上传的云函数，也可以直接调试这个函数是否正确，接下来在小程序端可以调用。</p><ol start="4"><li>定义原函数定时触发器<br>这里可参考<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/functions/triggers.html" target="_blank" rel="noopener">云函数定时触发器</a><br>config.json：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"triggers"</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"name"</span>:<span class="string">"updatePlaylist"</span>,</span><br><span class="line">      <span class="string">"type"</span>:<span class="string">"timer"</span>,</span><br><span class="line">      <span class="string">"config"</span>:<span class="string">"0 0 10,15,20 * * * *"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>注意在json文件中不要写注释。目前type只支持timer类型，config配置定时时间，使用Corn表达式，例如这里的”0 0 10,15,20 * * * *”表示每天的10点、15点、20点都会自动触发这个云函数。</p><p><strong>利用歌单组件渲染歌单页面</strong><br>定义music云函数，并上传云函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 云函数入口文件</span></span><br><span class="line"><span class="keyword">const</span> cloud = <span class="built_in">require</span>(<span class="string">'wx-server-sdk'</span>)</span><br><span class="line"><span class="keyword">const</span> TcbRouter = <span class="built_in">require</span>(<span class="string">'tcb-router'</span>)</span><br><span class="line"><span class="keyword">const</span> rp=<span class="built_in">require</span>(<span class="string">'request-promise'</span>)</span><br><span class="line"><span class="keyword">const</span> URL = <span class="string">'http://musicapi.xiecheng.live'</span></span><br><span class="line">cloud.init()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 云函数入口函数</span></span><br><span class="line">exports.main = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">new</span> TcbRouter(&#123;event&#125;)</span><br><span class="line">  <span class="comment">// 获取歌单数据</span></span><br><span class="line">  app.router(<span class="string">'playlist'</span>,<span class="keyword">async</span>(ctx,next)=&gt;&#123;</span><br><span class="line">    ctx.body= <span class="keyword">await</span> cloud.database().collection(<span class="string">'playlist'</span>)</span><br><span class="line">      .skip(event.start)</span><br><span class="line">      .limit(event.count)</span><br><span class="line">      .orderBy(<span class="string">'createTime'</span>, <span class="string">'desc'</span>)</span><br><span class="line">      .get()</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> app.serve()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，在歌单页面中通过<code>wx.cloud.callFunction</code>请求云函数，获取歌单数据，其中传入的$url是云函数中某个router的名称。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">_getPlaylist()&#123;</span><br><span class="line">    wx.showLoading(&#123;</span><br><span class="line">      title: <span class="string">'正在加载……'</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    wx.cloud.callFunction(&#123;</span><br><span class="line">      name: <span class="string">'music'</span>,<span class="comment">//云函数名称</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        start: <span class="keyword">this</span>.data.playlist.length,</span><br><span class="line">        count: MAX_LENGTH,</span><br><span class="line">        $url:<span class="string">'playlist'</span> <span class="comment">//云函数中某个router的名称</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.result.data.length===<span class="number">0</span>)&#123;</span><br><span class="line">        wx.hideLoading()</span><br><span class="line">        wx.showToast(&#123;</span><br><span class="line">          title: <span class="string">'已经到底啦'</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        playlist: <span class="keyword">this</span>.data.playlist.concat(res.result.data)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// 当数据请求回来时，停止下拉刷新的操作</span></span><br><span class="line">      wx.stopPullDownRefresh()</span><br><span class="line">      wx.hideLoading()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>实现下拉刷新与上拉加载的功能。注意要支持下拉动作时，需要在json中配置<code>&quot;enablePullDownRefresh&quot;:true</code>，允许用户下拉刷新。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页面相关事件处理函数--监听用户下拉动作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">onPullDownRefresh: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">    playlist:[]</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">this</span>._getPlaylist()</span><br><span class="line">  <span class="keyword">this</span>._getSwiper()</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页面上拉触底事件的处理函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">onReachBottom: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>._getPlaylist()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><strong>云函数路由优化</strong><br>为什么使用<code>tcb-router</code>？</p><ul><li>一个用户在一个云环境中只能创建50个云函数</li><li>相似的请求归类到同一个云函数中处理</li><li>koa风格的云函数路由库</li></ul><p>打开终端，安装<code>tcb-router</code>。</p><p><code>tcb-router</code>使用示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 云函数入口文件</span></span><br><span class="line"><span class="keyword">const</span> cloud = <span class="built_in">require</span>(<span class="string">'wx-server-sdk'</span>)</span><br><span class="line"><span class="keyword">const</span> TcbRouter = <span class="built_in">require</span>(<span class="string">'tcb-router'</span>)</span><br><span class="line">cloud.init()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 云函数入口函数</span></span><br><span class="line">exports.main = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">new</span> TcbRouter(&#123;event&#125;)</span><br><span class="line"></span><br><span class="line">  app.use(<span class="keyword">async</span>(ctx,next)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br><span class="line">    <span class="keyword">await</span> next()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  app.router(<span class="string">'demo1'</span>,<span class="keyword">async</span>(ctx,next)=&gt;&#123;</span><br><span class="line">    ctx.body= <span class="string">'demo1'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  app.router(<span class="string">'demo2'</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.body= <span class="string">'demo2'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  app.router(<span class="string">'demo3'</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.body= <span class="string">'demo3'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  app.router(<span class="string">'demo4'</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.body= <span class="string">'demo4'</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app.serve()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和koa框架极为相似，都是洋葱模型。</p><h5 id="歌曲列表页面开发"><a href="#歌曲列表页面开发" class="headerlink" title="歌曲列表页面开发"></a>歌曲列表页面开发</h5><p><strong>绑定点击事件，跳转到歌曲列表</strong></p><p>注意要传入歌单的唯一id——<code>playlistId</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"disc-container"</span> <span class="attr">bindtap</span>=<span class="string">"goToMusicList"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">goToMusicList()&#123;</span><br><span class="line">  wx.navigateTo(&#123;</span><br><span class="line">    url: <span class="string">`../../pages/music-list/music-list?playlistId=<span class="subst">$&#123;<span class="keyword">this</span>.properties.playlist.id&#125;</span>`</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完善云函数music.js，获取指定歌单下的所有歌曲信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.router(<span class="string">'musiclist'</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  ctx.body=<span class="keyword">await</span> rp(<span class="string">`<span class="subst">$&#123;URL&#125;</span>/playlist/detail?id=<span class="subst">$&#123;<span class="built_in">parseInt</span>(event.playlistId)&#125;</span>`</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(res)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>接下来在歌曲列表页面中，调用云函数，获取此歌单下的所有歌曲信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    musiclist: [],</span><br><span class="line">    listInfo: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    wx.showLoading(&#123;</span><br><span class="line">      title: <span class="string">'加载中'</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    wx.cloud.callFunction(&#123;</span><br><span class="line">      name: <span class="string">'music'</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        playlistId: options.playlistId,</span><br><span class="line">        $url: <span class="string">'musiclist'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> pl = res.result.playlist</span><br><span class="line">      <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        musiclist: pl.tracks,</span><br><span class="line">        listInfo: &#123;</span><br><span class="line">          coverImgUrl: pl.coverImgUrl,<span class="comment">// coverImgUrl 歌单封面</span></span><br><span class="line">          name: pl.name,<span class="comment">// name 歌单名称</span></span><br><span class="line">          description: pl.description,<span class="comment">// description 歌单描述</span></span><br><span class="line">          commentCount: pl.commentCount, <span class="comment">// commentCount 评论总数</span></span><br><span class="line">          playCount: pl.playCount,<span class="comment">// playCount 播放数量</span></span><br><span class="line">          shareCount: pl.shareCount,<span class="comment">// shareCount 分享数量</span></span><br><span class="line">          subscribedCount: pl.subscribedCount,<span class="comment">// subscribedCount 订阅数</span></span><br><span class="line">          tags: pl.tags.join(<span class="string">' / '</span>),<span class="comment">// tags：Araay 标签</span></span><br><span class="line">          subscribed: pl.subscribed<span class="comment">// subscribed 是否订阅</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      wx.hideLoading()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>选择歌曲后带者参数musicid跳转到播放器页面，其中要注意一点，data-musicid是定义在父级元素上的，<code>target</code>是触发事件的原组件，<code>currentTarget</code>是事件绑定的当前组件。因此这里要通过<code>e.currentTarget.dataset.musicid</code>拿到dataset中的数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  select(e)&#123;</span><br><span class="line">    <span class="keyword">const</span> musicid = e.currentTarget.dataset.musicid</span><br><span class="line">    <span class="keyword">const</span> index = e.currentTarget.dataset.index</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      playingId: musicid</span><br><span class="line">    &#125;)</span><br><span class="line">    wx.navigateTo(&#123;</span><br><span class="line">      url: <span class="string">`../../pages/player/player?musicId=<span class="subst">$&#123;musicid&#125;</span>&amp;index=<span class="subst">$&#123;index&#125;</span>`</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>url中传递的值在options中可以拿到。如下面所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  nowPlayingIndex = options.index</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="音乐播放器开发"><a href="#音乐播放器开发" class="headerlink" title="音乐播放器开发"></a>音乐播放器开发</h5><p><strong>歌曲数据管理</strong></p><p>两种方式：</p><ol><li>直接从云端获取</li><li>直接从现有数据中取（存储至storage中）——推荐，减少请求时间</li></ol><p>在获取到此歌单的详细信息后，将数据存储到Storage中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    wx.cloud.callFunction(&#123;</span><br><span class="line">      name: <span class="string">'music'</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        playlistId: options.playlistId,</span><br><span class="line">        $url: <span class="string">'musiclist'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="keyword">this</span>._setMusicToStorage()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 将歌单列表存储至storage中</span></span><br><span class="line">  _setMusicToStorage()&#123;</span><br><span class="line">    wx.setStorageSync(<span class="string">'musiclist'</span>, <span class="keyword">this</span>.data.musiclist)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在播放器页面中，可以直接获取storage中存储的musiclist数据，注意这里musiclist并不渲染到页面中，故不需要定义在data中，只需定义在外面变量即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> musiclist=[]</span><br><span class="line"><span class="keyword">let</span> nowPlayingIndex=<span class="number">0</span> <span class="comment">//正在播放歌曲的index</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    nowPlayingIndex = options.index</span><br><span class="line">    musiclist=wx.getStorageSync(<span class="string">'musiclist'</span>)</span><br><span class="line">    <span class="keyword">this</span>._loadMusicDetail(options.musicId)</span><br><span class="line">  &#125;,</span><br><span class="line">  _loadMusicDetail(musicId)&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>背景高斯模糊、唱片、旋杆设计</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"player-container"</span> <span class="attr">style</span>=<span class="string">"background:url(&#123;&#123;picUrl&#125;&#125;) center/cover no-repeat"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"player-mask"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"play-info"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 唱片页面 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"player-disc"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">"play-img"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;picUrl&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 歌词页面 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">lyrics</span> <span class="attr">class</span>=<span class="string">"lyrics"</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 进度条 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"progress-bar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">progress-bar</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 操作按钮 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"control"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入iconfont图标：加入购物车，下载css文件。在app.wxss中引入<code>@import &#39;./iconfont.wxss&#39;;</code>。引入字体图标：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"control"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"iconfont icon-xunhuanbofang"</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"iconfont icon-shangyiqu101"</span> <span class="attr">bindtap</span>=<span class="string">"onPrev"</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"iconfont &#123;&#123;isPlaying?'icon-zanting':'icon-play_icon'&#125;&#125;"</span> <span class="attr">bindtap</span>=<span class="string">"toggleMusic"</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"iconfont icon-xiayiqu101"</span> <span class="attr">bindtap</span>=<span class="string">"onNext"</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"iconfont icon-liebiaosousuozhuangtai"</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以分别制造成各种按钮——播放/暂停、上一曲、下一曲。</p><p><strong>播放歌曲</strong></p><p>完善云函数：（可采用云函数增量上传，速度更快）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.router(<span class="string">'musicUrl'</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="keyword">await</span> rp(<span class="string">`<span class="subst">$&#123;URL&#125;</span>/song/url?id=<span class="subst">$&#123;event.musicId&#125;</span>`</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果要在小程序每个页面背景中都可以听到音频，需要在app.json中配置<code>&quot;requiredBackgroundModes&quot;: [&quot;audio&quot;]</code>。</p><p>在player播放器页面中请求云函数，播放歌曲需要使用<code>wx.getBackgroundAudioManager()</code>定义全局唯一的背景音频管理器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> musiclist=[]</span><br><span class="line"><span class="keyword">let</span> nowPlayingIndex=<span class="number">0</span> <span class="comment">//正在播放歌曲的index</span></span><br><span class="line"><span class="keyword">const</span> musicManager=wx.getBackgroundAudioManager()</span><br><span class="line"><span class="keyword">const</span> app=getApp()</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    picUrl:<span class="string">''</span>,</span><br><span class="line">    isPlaying: <span class="literal">false</span>, <span class="comment">//false不播放。true播放</span></span><br><span class="line">    isLyricsShow:<span class="literal">false</span>,</span><br><span class="line">    lyric:<span class="string">''</span>,</span><br><span class="line">    isSameMusic:<span class="literal">false</span> <span class="comment">//是否为同一首歌</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    nowPlayingIndex = options.index</span><br><span class="line">    musiclist=wx.getStorageSync(<span class="string">'musiclist'</span>)</span><br><span class="line">    <span class="keyword">this</span>._loadMusicDetail(options.musicId)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  _loadMusicDetail(musicId)&#123;</span><br><span class="line">    wx.showLoading(&#123;</span><br><span class="line">      title: <span class="string">'歌曲正在加载……'</span>,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    wx.cloud.callFunction(&#123;</span><br><span class="line">      name:<span class="string">'music'</span>,</span><br><span class="line">      data:&#123;</span><br><span class="line">        $url:<span class="string">'musicUrl'</span>,</span><br><span class="line">        musicId: musicId</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> result=<span class="built_in">JSON</span>.parse(res.result)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 判断是否能获取歌曲的url值，因为有些歌单是VIP歌单，用户未登录，无权限</span></span><br><span class="line">      <span class="keyword">if</span>(result.data[<span class="number">0</span>].url==<span class="literal">null</span>)&#123;</span><br><span class="line">        wx.showToast(&#123;</span><br><span class="line">          title: <span class="string">'无权限播放'</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      musicManager.src = result.data[<span class="number">0</span>].url</span><br><span class="line">      musicManager.title = music.name</span><br><span class="line">      musicManager.coverImgUrl = music.al.picUrl</span><br><span class="line">      musicManager.singer = music.ar[<span class="number">0</span>].name</span><br><span class="line">      musicManager.epname = music.al.name <span class="comment">//专辑名称</span></span><br><span class="line">    </span><br><span class="line">      wx.hideLoading()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如何支持旋杆的状态呢？如果音乐播放，则旋杆上抬，若音乐暂停，则旋杆下坠，如何实现？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"player-disc &#123;&#123;isPlaying?'play':''&#125;&#125;"</span> <span class="attr">bindtap</span>=<span class="string">"changeView"</span> <span class="attr">hidden</span>=<span class="string">"&#123;&#123;isLyricsShow&#125;&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">"play-img rotation &#123;&#123;isPlaying?'':'rotation-pause'&#125;&#125;"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;picUrl&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 指针可以直接通过伪元素插入到唱片元素的后面 */</span></span><br><span class="line"><span class="selector-class">.player-disc</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">192</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">274</span>rpx;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">150</span>rpx;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">266</span>rpx;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'https://s3.music.126.net/m/s/img/needle.png?702cf6d95f29e2e594f53a3caab50e12'</span>) no-repeat center/contain;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">15deg</span>);</span><br><span class="line">  <span class="attribute">transform-origin</span>: <span class="number">24</span>rpx <span class="number">10</span>rpx;</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">0.5s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 这里表示如果同时具有play样式，即音乐在播放，则transform生效 */</span></span><br><span class="line"><span class="selector-class">.play</span><span class="selector-class">.player-disc</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>唱片如何实现旋转呢？音乐停止时，唱片停止旋转，音乐再次播放时，唱片从上次停止的地方开始旋转——使用<code>animation-play-state</code>属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.rotation</span>&#123;</span><br><span class="line">  <span class="attribute">animation</span>: rotation <span class="number">12s</span> linear infinite;</span><br><span class="line">  <span class="attribute">-moz-animation</span>: rotation <span class="number">12s</span> linear infinite;</span><br><span class="line">  <span class="attribute">-webkit-animation</span>: rotation <span class="number">12s</span> linear infinite;</span><br><span class="line">  <span class="attribute">-o-animation</span>: rotation <span class="number">12s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.rotation-pause</span>&#123;</span><br><span class="line">  <span class="attribute">animation-play-state</span>: paused; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> rotation&#123;</span><br><span class="line">  <span class="selector-tag">from</span>&#123;<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>)&#125;</span><br><span class="line">  <span class="selector-tag">to</span>&#123;<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>)&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>工具条：播放/暂停、上一曲、下一曲</strong><br>如何实现点击播放/暂停按钮功能？——上一首/下一首要进行边界判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 播放/暂停</span></span><br><span class="line">toggleMusic()&#123;</span><br><span class="line">  <span class="keyword">this</span>.data.isPlaying ? musicManager.pause() : musicManager.play()</span><br><span class="line">  <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">    isPlaying: !<span class="keyword">this</span>.data.isPlaying</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 下一首</span></span><br><span class="line">onPrev()&#123;</span><br><span class="line">  <span class="keyword">if</span>(nowPlayingIndex===<span class="number">0</span>)&#123;</span><br><span class="line">    nowPlayingIndex=musiclist.length</span><br><span class="line">  &#125;</span><br><span class="line">  nowPlayingIndex--</span><br><span class="line">  <span class="keyword">this</span>._loadMusicDetail(musiclist[nowPlayingIndex].id)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 上一首</span></span><br><span class="line">onNext()&#123;</span><br><span class="line">  <span class="keyword">if</span> (nowPlayingIndex === musiclist.length<span class="number">-1</span>) &#123;</span><br><span class="line">    nowPlayingIndex = <span class="number">-1</span></span><br><span class="line">  &#125;</span><br><span class="line">  nowPlayingIndex++</span><br><span class="line">  <span class="keyword">this</span>._loadMusicDetail(musiclist[nowPlayingIndex].id)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><strong>进度条组件（可拖动）</strong></p><p>进度条组件<code>progress-bar</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"time"</span>&gt;</span>&#123;&#123;musicTime.curTime&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"control"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">movable-area</span> <span class="attr">class</span>=<span class="string">"movable-area"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- damp为滑动的阻尼系数 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">movable-view</span> <span class="attr">direction</span>=<span class="string">"horizontal"</span> <span class="attr">class</span>=<span class="string">"movable-view"</span> <span class="attr">damp</span>=<span class="string">"1000"</span> <span class="attr">x</span>=<span class="string">"&#123;&#123;distance&#125;&#125;"</span> <span class="attr">bindchange</span>=<span class="string">"onChange"</span> <span class="attr">bindtouchend</span>=<span class="string">"onTouchEnd"</span>&gt;</span><span class="tag">&lt;/<span class="name">movable-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">movable-area</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">progress</span> <span class="attr">stroke-width</span>=<span class="string">"4"</span> <span class="attr">backgroundColor</span>=<span class="string">"#969696"</span> <span class="attr">activeColor</span>=<span class="string">"#fff"</span> <span class="attr">percent</span>=<span class="string">"percent"</span>&gt;</span><span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"time"</span>&gt;</span>&#123;&#123;musicTime.totalTime&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>具体js逻辑可以参考源代码</p><p><strong>唱片于歌词相互切换</strong></p><p><strong>歌词页面</strong></p><h3 id="part2-博客功能"><a href="#part2-博客功能" class="headerlink" title="part2 博客功能"></a>part2 博客功能</h3><p>未完待续……</p><h3 id="part3-我的功能"><a href="#part3-我的功能" class="headerlink" title="part3 我的功能"></a>part3 我的功能</h3><p>未完待续……</p><h3 id="小程序高级进阶"><a href="#小程序高级进阶" class="headerlink" title="小程序高级进阶"></a>小程序高级进阶</h3><p><strong>小程序渲染层与逻辑层交互原理</strong></p><p>在网页开发中渲染层和逻辑层是互斥的（长时间运行js脚本会导致页面失去反应），在小程序中渲染层和逻辑层是分开的。</p><p>开发小程序时推荐使用真机进行调试。</p><img src="https://i.loli.net/2019/11/27/useASEmdrQCpXIf.jpg" width="50%"><img src="https://i.loli.net/2019/11/27/XnfYNL6d19EUrKk.jpg" width="50%"><p>小程序中最忌讳的是频繁地进行setData操作，这样容易导致页面卡死。而且如果某数据不需要在页面中显示的话，就不需要定义在data中。</p><p><strong>小程序的运行机制和更新机制</strong></p><p>小程序运行机制：冷启动与热启动、前台与后台、小程序销毁<br>小程序更新机制<br><img src="https://i.loli.net/2019/11/27/ljTd7sx5qkYNi2G.jpg" width="50%"></p><p><strong>小程序性能与体验优化</strong></p><ul><li>合理设置可点击元素的相应区域大小</li><li>避免渲染页面耗时过长</li><li>避免执行脚本时间过长</li><li>对网络请求作必要的缓存</li><li>不要引入未被使用的wxss样式</li><li>所有资源请求建议使用https</li><li>不要使用小程序废弃接口</li><li>避免过大的wxml节点数目</li><li>及时回收定时器</li><li>避免使用:active伪类来实现点击态（建议使用hover，小程序内置hover-class属性）</li><li>在滚动区域开启惯性滚动增强体验</li><li>避免出现任何js异常</li><li>所有请求耗时不应太久</li><li>避免短时间内发起太多的图片请求</li><li>避免短时间内发起太多请求</li><li>避免setData数据过大（每次setData的时候，数据相当于从逻辑层到系统层，再从系统层发送给渲染层进行相应的展示，因此每次setData的时候数据量尽量不要超过1M）</li><li>避免setData过于频繁</li><li>避免将未绑定在wxml中的变量传入setData（造成不必要的性能消耗）</li></ul><p>微信开发者工具控制台中有<code>Audits</code>面板，可以对小程序提出性能改善的建议。</p><h3 id="后台管理系统开发"><a href="#后台管理系统开发" class="headerlink" title="后台管理系统开发"></a>后台管理系统开发</h3><p>未完待续……</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>react源码分析笔记</title>
      <link href="/2019/11/26/react%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/11/26/react%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>react作为一个优秀的前端前端框架，必定有着它的过人之处。Facebook团队花费三年多打造的这个框架，如今已经成为了企业追捧的框架选择，让我们来学习react优秀的设计思想吧！</p><a id="more"></a><h5 id="jsx到js代码的转换"><a href="#jsx到js代码的转换" class="headerlink" title="jsx到js代码的转换"></a>jsx到js代码的转换</h5><p>建议使用<code>babel-playground</code>查看转换过程</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>lala<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">React.createElement(</span><br><span class="line">  <span class="string">"div"</span>,</span><br><span class="line">  <span class="literal">null</span>, </span><br><span class="line">  React.createElement(<span class="string">"div"</span>, <span class="literal">null</span>, <span class="string">"lala"</span>), </span><br><span class="line">  React.createElement(<span class="string">"span"</span>, <span class="literal">null</span>, <span class="string">"hello"</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="ReactElement"><a href="#ReactElement" class="headerlink" title="ReactElement"></a>ReactElement</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简化的代码……</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">type, config, children</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> propName;</span><br><span class="line">    <span class="keyword">const</span> props = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> key = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> ref = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> source = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (config != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hasValidRef(config)) &#123;</span><br><span class="line">            ref = config.ref;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (hasValidKey(config)) &#123;</span><br><span class="line">            key = <span class="string">''</span> + config.key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将config上的属性存到特定对象中</span></span><br><span class="line">        <span class="keyword">for</span> (propName <span class="keyword">in</span> config) &#123;</span><br><span class="line">            <span class="keyword">if</span> (</span><br><span class="line">                hasOwnProperty.call(config, propName) &amp;&amp;</span><br><span class="line">                !RESERVED_PROPS.hasOwnProperty(propName)</span><br><span class="line">            ) &#123;</span><br><span class="line">                props[propName] = config[propName];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 剩下的参数均是children</span></span><br><span class="line">    <span class="keyword">const</span> childrenLength = <span class="built_in">arguments</span>.length - <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (childrenLength === <span class="number">1</span>) &#123;</span><br><span class="line">        props.children = children;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childrenLength &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> childArray = <span class="built_in">Array</span>(childrenLength);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; childrenLength; i++) &#123;</span><br><span class="line">            childArray[i] = <span class="built_in">arguments</span>[i + <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        props.children = childArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理传入默认的props</span></span><br><span class="line">    <span class="keyword">if</span> (type &amp;&amp; type.defaultProps) &#123;</span><br><span class="line">        <span class="keyword">const</span> defaultProps = type.defaultProps;</span><br><span class="line">        <span class="keyword">for</span> (propName <span class="keyword">in</span> defaultProps) &#123;</span><br><span class="line">            <span class="keyword">if</span> (props[propName] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">                props[propName] = defaultProps[propName];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> ReactElement(</span><br><span class="line">        type,</span><br><span class="line">        key,</span><br><span class="line">        ref,</span><br><span class="line">        self,</span><br><span class="line">        source,</span><br><span class="line">        ReactCurrentOwner.current,</span><br><span class="line">        props,</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再看一下ReactElement函数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简化的代码……</span></span><br><span class="line"><span class="keyword">const</span> ReactElement = <span class="function"><span class="keyword">function</span>(<span class="params">type, key, ref, self, source, owner, props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> element = &#123;</span><br><span class="line">        <span class="comment">//用来标识element的类型,如果是通过React.createElement创建的,那它的$$typeof永远都是REACT_ELEMENT_TYPE,这个属性在后续组件的渲染中是经常被用来判断的</span></span><br><span class="line">        $$<span class="keyword">typeof</span>: REACT_ELEMENT_TYPE,</span><br><span class="line"></span><br><span class="line">        type: type,<span class="comment">//节点类型</span></span><br><span class="line">        key: key,</span><br><span class="line">        ref: ref,</span><br><span class="line">        props: props,</span><br><span class="line"></span><br><span class="line">        _owner: owner,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h5><p>我们以为React.Component会是非常复杂的,会帮我们实现各种各样的逻辑,如接受render如何将组件渲染到页面呀,but!为什么只有以下几行代码?在这里,Component竟然只保留了部分信息.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Component</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Component</span>(<span class="params">props, context, updater</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.props = props;</span><br><span class="line">    <span class="keyword">this</span>.context = context;</span><br><span class="line">    <span class="keyword">this</span>.refs = emptyObject;</span><br><span class="line">    <span class="keyword">this</span>.updater = updater || ReactNoopUpdateQueue;</span><br><span class="line">&#125;</span><br><span class="line">Component.prototype.isReactComponent = &#123;&#125;;</span><br><span class="line">Component.prototype.setState = <span class="function"><span class="keyword">function</span>(<span class="params">partialState, callback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 错误检测与提醒</span></span><br><span class="line">    <span class="comment">// 2. 调用enqueueSetState方法,在react-dom中实现的</span></span><br><span class="line">    <span class="keyword">this</span>.updater.enqueueSetState(<span class="keyword">this</span>, partialState, callback, <span class="string">'setState'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Component.prototype.forceUpdate = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.updater.enqueueForceUpdate(<span class="keyword">this</span>, callback, <span class="string">'forceUpdate'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//PureComponent</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PureComponent</span>(<span class="params">props, context, updater</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.props = props;</span><br><span class="line">    <span class="keyword">this</span>.context = context;</span><br><span class="line">    <span class="keyword">this</span>.refs = emptyObject;</span><br><span class="line">    <span class="keyword">this</span>.updater = updater || ReactNoopUpdateQueue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 简单的继承</span></span><br><span class="line"><span class="keyword">const</span> pureComponentPrototype = (PureComponent.prototype = <span class="keyword">new</span> ComponentDummy());</span><br><span class="line">pureComponentPrototype.constructor = PureComponent;</span><br><span class="line"><span class="built_in">Object</span>.assign(pureComponentPrototype, Component.prototype);</span><br><span class="line"><span class="comment">//唯一的区别,来标记这个组件是PureComponent,以便在后续更新时会主动判断是否更新</span></span><br><span class="line">pureComponentPrototype.isPureReactComponent = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h5 id="createRef和ref"><a href="#createRef和ref" class="headerlink" title="createRef和ref"></a>createRef和ref</h5><p>react中的3种使用ref的方式:</p><ol><li>定义<code>ref=&quot;stringRef&quot;</code>,获取<code>this.refs.stringRef.textContent = &#39;string ref got&#39;</code>(最不被推荐,即将废弃)</li><li>定义<code>ref={ele =&gt; (this.methodRef = ele)}</code>,获取<code>this.methodRef.textContent = &#39;method ref got&#39;</code></li><li>使用createRef API,<code>this.objRef = React.createRef()</code>,定义<code>ref={this.objRef}</code>,获取<code>this.objRef.current.textContent = &#39;obj ref got&#39;</code></li></ol><p>demo示例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">RefDemo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="keyword">this</span>.objRef = React.createRef()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.refs.stringRef.textContent = <span class="string">'string ref got'</span></span><br><span class="line">            <span class="keyword">this</span>.methodRef.textContent = <span class="string">'method ref got'</span></span><br><span class="line">            <span class="keyword">this</span>.objRef.current.textContent = <span class="string">'obj ref got'</span></span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;&gt;</span><br><span class="line">                &lt;p ref=<span class="string">"stringRef"</span>&gt;span1&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                &lt;p ref=&#123;ele =&gt; (this.methodRef = ele)&#125;&gt;span3&lt;/</span>p&gt;</span><br><span class="line">                &lt;p ref=&#123;<span class="keyword">this</span>.objRef&#125;&gt;span3&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>createRef源码如下,只是简单地返回一个RefObject对象,但是之后如何使用的呢?先保留这个问题.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createRef</span>(<span class="params"></span>): <span class="title">RefObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> refObject = &#123;</span><br><span class="line">        current: <span class="literal">null</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> refObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="forwardRef"><a href="#forwardRef" class="headerlink" title="forwardRef"></a>forwardRef</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果TargetComponent返回的是一个function component,不是class component,那render函数中的ref是拿不到任何东西的,就会报错,因为function component是没有实例的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// React.forwardRef相当于是HOC,帮我们实现了ref的传递</span></span><br><span class="line"><span class="keyword">const</span> TargetComponent = React.forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> (</span><br><span class="line">  &lt;input type=<span class="string">"text"</span> ref=&#123;ref&#125; /&gt;</span><br><span class="line">))</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Comp</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">    <span class="keyword">this</span>.ref = React.createRef()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.ref.current.value = <span class="string">'ref get input'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">TargetComponent</span> <span class="attr">ref</span>=<span class="string">&#123;this.ref&#125;</span> /&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>forwardRef的源码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">forwardRef</span> &lt; <span class="title">Props</span>, <span class="title">ElementType</span>: <span class="title">React$ElementType</span> &gt; (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    render: (props: Props, ref: React$Ref &lt; ElementType &gt; </span>) =&gt; <span class="title">React$Node</span>,</span></span><br><span class="line"><span class="function">) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// 注意,这里的$$typeof是REACT_FORWARD_REF_TYPE,并不代表render渲染出来的组件是REACT_FORWARD_REF_TYPE.</span></span><br><span class="line">      <span class="comment">// 逻辑关系是: react渲染出来的组件仍然是REACT_ELEMENT_TYPE,只是它的type是这个forward-ref组件,它其中有个属性$$typeof是REACT_FORWARD_REF_TYPE,这里不要搞混淆了</span></span><br><span class="line">        $$<span class="keyword">typeof</span>: REACT_FORWARD_REF_TYPE,</span><br><span class="line">        render,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h5><p>嵌套多层的父子组件之间传值通过props的方式是不够现实的,因为中间这些组件传递props是完全没有意义的事情,这时可以采用Context的方式.</p><p>上级组件中提供了Context之后,它下面渲染的组件都可以拿到Context传递的值,以此达到跨越多层组件传递信息的功能.</p><p>demo示例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"><span class="keyword">const</span> &#123; Provider, Consumer &#125; = React.createContext(<span class="string">'default'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    childContext: <span class="string">'123'</span>,</span><br><span class="line">    newContext: <span class="string">'456'</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getChildContext() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">value</span>: <span class="keyword">this</span>.state.childContext, <span class="attr">a</span>: <span class="string">'aaaaa'</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;label&gt;childContext:&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">          &lt;input</span></span><br><span class="line"><span class="regexp">            type="text"</span></span><br><span class="line"><span class="regexp">            value=&#123;this.state.childContext&#125;</span></span><br><span class="line"><span class="regexp">            onChange=&#123;e =&gt; this.setState(&#123; childContext: e.target.value &#125;)&#125;</span></span><br><span class="line"><span class="regexp">          /</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">          &lt;label&gt;newContext:&lt;/</span>label&gt;</span><br><span class="line">          &lt;input</span><br><span class="line">            type=<span class="string">"text"</span></span><br><span class="line">            value=&#123;<span class="keyword">this</span>.state.newContext&#125;</span><br><span class="line">            onChange=&#123;e =&gt; <span class="keyword">this</span>.setState(&#123; <span class="attr">newContext</span>: e.target.value &#125;)&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Provider value=&#123;this.state.newContext&#125;&gt;&#123;this.props.children&#125;&lt;/</span>Provider&gt;</span><br><span class="line">      &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function Child(props, context) &#123;</span></span><br><span class="line"><span class="regexp">  return &lt;Consumer&gt;&#123;value =&gt; &lt;p&gt;newContext: &#123;value&#125;&lt;/</span>p&gt;&#125;&lt;<span class="regexp">/Consumer&gt;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default () =&gt; (</span></span><br><span class="line"><span class="regexp">  &lt;Parent&gt;</span></span><br><span class="line"><span class="regexp">    &lt;Child/</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/Parent&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><p>createContext源码示例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createContext</span>&lt;<span class="title">T</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  defaultValue: T,</span></span></span><br><span class="line"><span class="function"><span class="params">  calculateChangedBits: ?(a: T, b: T</span>) =&gt; <span class="title">number</span>,</span></span><br><span class="line"><span class="function">): <span class="title">ReactContext</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (calculateChangedBits === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    calculateChangedBits = <span class="literal">null</span>;</span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> context: ReactContext&lt;T&gt; = &#123;</span><br><span class="line">    $$<span class="keyword">typeof</span>: REACT_CONTEXT_TYPE,</span><br><span class="line">    _calculateChangedBits: calculateChangedBits,</span><br><span class="line">    _currentValue: defaultValue,</span><br><span class="line">    _currentValue2: defaultValue,</span><br><span class="line">    Provider: (<span class="literal">null</span>: any),</span><br><span class="line">    Consumer: (<span class="literal">null</span>: any),</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  context.Provider = &#123;</span><br><span class="line">    $$<span class="keyword">typeof</span>: REACT_PROVIDER_TYPE,</span><br><span class="line">    _context: context,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  context.Consumer = context;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由以上代码可以看出.context.Consumer = context,在Consumer进行渲染的时候,它要去获取value的话,就直接在_currentValue拿到最新的context的值.</p><h5 id="ConcurrentMode"><a href="#ConcurrentMode" class="headerlink" title="ConcurrentMode"></a>ConcurrentMode</h5><p>react16之后提出的令人振奋的功能ConcurrentMode.</p><p><strong>目标:</strong> 让react整体的渲染过程能够进行一个优先级的排比,并且让整体渲染过程是可以中断的,就可以进行任务的调度.从而先执行优先级高的任务,等浏览器空闲时再执行优先级低的任务.</p><p>ConcurrentMode的demo示例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; ConcurrentMode &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; flushSync &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span> <span class="comment">//强制在更新时使用优先级最高的方式进行更新</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="keyword">async</span>: <span class="literal">true</span>,</span><br><span class="line">    num: <span class="number">1</span>,</span><br><span class="line">    length: <span class="number">2000</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.interval = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.updateNum()</span><br><span class="line">    &#125;, <span class="number">200</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    <span class="comment">// 别忘了清除interval</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.interval) &#123;</span><br><span class="line">      clearInterval(<span class="keyword">this</span>.interval)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  updateNum() &#123;</span><br><span class="line">    <span class="keyword">const</span> newNum = <span class="keyword">this</span>.state.num === <span class="number">3</span> ? <span class="number">0</span> : <span class="keyword">this</span>.state.num + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.async) &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        num: newNum,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      flushSync(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">          num: newNum,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> children = []</span><br><span class="line">    <span class="keyword">const</span> &#123; length, num, <span class="keyword">async</span> &#125; = <span class="keyword">this</span>.state</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">      children.push(</span><br><span class="line">        &lt;div className=<span class="string">"item"</span> key=&#123;i&#125;&gt;</span><br><span class="line">          &#123;num&#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;,</span></span><br><span class="line"><span class="regexp">      )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;div className="main"&gt;</span></span><br><span class="line"><span class="regexp">        async:&#123;' '&#125;</span></span><br><span class="line"><span class="regexp">        &lt;input</span></span><br><span class="line"><span class="regexp">          type="checkbox"</span></span><br><span class="line"><span class="regexp">          checked=&#123;async&#125;</span></span><br><span class="line"><span class="regexp">          onChange=&#123;() =&gt; flushSync(() =&gt; this.setState(&#123; async: !async &#125;))&#125;</span></span><br><span class="line"><span class="regexp">        /</span>&gt;</span><br><span class="line">        &lt;div className=<span class="string">"wrapper"</span>&gt;&#123;children&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;ConcurrentMode&gt;</span><br><span class="line">    &lt;Parent /&gt;</span><br><span class="line">  &lt;<span class="regexp">/ConcurrentMode&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><p>ConcurrentMode源码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> REACT_CONCURRENT_MODE_TYPE = hasSymbol</span><br><span class="line">  ? <span class="built_in">Symbol</span>.for(<span class="string">'react.concurrent_mode'</span>)</span><br><span class="line">  : <span class="number">0xeacf</span>;</span><br></pre></td></tr></table></figure><p>what?!  只是一个简单的Symbol?没有复杂的逻辑?</p><h5 id="Suspense"><a href="#Suspense" class="headerlink" title="Suspense"></a>Suspense</h5><p>原理: 在Suspense组件下面渲染了一个或多个异步的组件,有任何一个抛出了promise,在这个promise resolve之前,都会显示fallback.只有等到所有组件promise resolve之后,才会去除fallback,然后显示其中的内容.</p><p>Suspense的demo示例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Suspense, lazy &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">const</span> LazyComp = lazy(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./lazy.js'</span>))</span><br><span class="line"><span class="keyword">let</span> data = <span class="string">''</span></span><br><span class="line"><span class="keyword">let</span> promise = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (data) <span class="keyword">return</span> data</span><br><span class="line">  <span class="keyword">if</span> (promise) <span class="keyword">throw</span> promise</span><br><span class="line">  promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      data = <span class="string">'Data resolved'</span></span><br><span class="line">      resolve()</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">throw</span> promise</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuspenseComp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> data = requestData()</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;data&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;Suspense fallback=<span class="string">"loading data"</span>&gt;</span><br><span class="line">    &lt;SuspenseComp /&gt;</span><br><span class="line">    &lt;LazyComp /&gt;</span><br><span class="line">  &lt;<span class="regexp">/Suspense&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><p>Suspense和lazy源码解析:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Suspense又是一个Symbol标识</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> REACT_SUSPENSE_TYPE = hasSymbol</span><br><span class="line">  ? <span class="built_in">Symbol</span>.for(<span class="string">'react.suspense'</span>)</span><br><span class="line">  : <span class="number">0xead1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//lazy函数返回一个对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">lazy</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt;(<span class="params">ctor: (</span>) =&gt; <span class="title">Thenable</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt;): <span class="title">LazyComponent</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    $$<span class="keyword">typeof</span>: REACT_LAZY_TYPE,</span><br><span class="line">    _ctor: ctor,<span class="comment">//传入的方法</span></span><br><span class="line">    _status: <span class="number">-1</span>,<span class="comment">//promise的状态,pending为-1</span></span><br><span class="line">    _result: <span class="literal">null</span>,<span class="comment">//记录resolve之后返回的结果</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h5><p>可以使用hooks给函数式组件存储state状态,给function component提供了class component所具有的能力.</p><p>简单demo示例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">//useState返回变量 和 改变变量的方法</span></span><br><span class="line">  <span class="keyword">const</span> [name, setName] = useState(<span class="string">'haha'</span>) </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 生命周期方法</span></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'unbind'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;p&gt;My Name is: &#123;name&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;input type="text" value=&#123;name&#125; onChange=&#123;e =&gt; setName(e.target.value)&#125; /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>原理剖析系列-手写实现（二）</title>
      <link href="/2019/11/22/%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90%E7%B3%BB%E5%88%97-%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B02/"/>
      <url>/2019/11/22/%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90%E7%B3%BB%E5%88%97-%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B02/</url>
      
        <content type="html"><![CDATA[<p>在前端的世界里，不仅要会使用，更要懂原理。第二弹。</p><a id="more"></a><h3 id="手写express"><a href="#手写express" class="headerlink" title="手写express"></a>手写express</h3><p>采用express第三方包实现的话，app.js如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们在这里模拟一些get、post方法</span></span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    res.end(<span class="string">'welcome'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.get(<span class="string">'/name'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    res.end(<span class="string">'yyyyy'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.get(<span class="string">'/age'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    res.end(<span class="string">'12'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.post(<span class="string">'/name'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    res.end(<span class="string">'yes!'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'3000'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>接下来创建express.js，实现自己的express，明确文件要导出一个方法，这个方法需要产生app对象（因为上述代码是采用<code>express()</code>实现的），开始搭建基本骨架：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createApplication</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> app = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    app.listen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> server = http.createServer(app)</span><br><span class="line">        server.listen(...arguments)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = createApplication</span><br></pre></td></tr></table></figure><p>接下来，我们实现get请求，思路如下：</p><ol><li>创建app.routes数组，里面存放每一个路由信息（包括method、path、回调函数handler）</li><li>通过app.get方法，向app.routes放入每个路由信息</li><li>拿到传入的mthod和path，遍历app.routes，找到对应的handler并执行</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createApplication</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> app = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 获取请求的方法</span></span><br><span class="line">        <span class="keyword">let</span> m = req.method.toLowerCase()</span><br><span class="line">        <span class="keyword">let</span> &#123;</span><br><span class="line">            pathname</span><br><span class="line">        &#125; = url.parse(req.url, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取出每一个layer</span></span><br><span class="line">        <span class="comment">// 根据方法和路径匹配成功后执行对应的回调函数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; app.routes.length; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> &#123;</span><br><span class="line">                method,</span><br><span class="line">                path,</span><br><span class="line">                handler</span><br><span class="line">            &#125; = app.routes[i]</span><br><span class="line">            <span class="keyword">if</span> (m === method &amp;&amp; pathname === path) &#123;</span><br><span class="line">                handler(req, res)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.end(<span class="string">'cannot find'</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    app.routes = []</span><br><span class="line"></span><br><span class="line">    app.get = <span class="function"><span class="keyword">function</span>(<span class="params">path, handler</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> layer = &#123;</span><br><span class="line">            method: <span class="string">'get'</span>,</span><br><span class="line">            path,</span><br><span class="line">            handler</span><br><span class="line">        &#125;</span><br><span class="line">        app.routes.push(layer)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    app.listen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> server = http.createServer(app)</span><br><span class="line">        server.listen(...arguments)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = createApplication</span><br></pre></td></tr></table></figure><p>我们实现了get请求了，接下来要实现其他的请求方法，如<code>post、put、delete</code>等等，但是method如此之多，一个个写肯定不是最明智的选择，因此我们选择批量生产方法的形式，通过<code>http.METHODS</code>拿到所有的method，实现批量挂载：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createApplication</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> app = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 获取请求的方法</span></span><br><span class="line">        <span class="keyword">let</span> m = req.method.toLowerCase()</span><br><span class="line">        <span class="keyword">let</span> &#123;</span><br><span class="line">            pathname</span><br><span class="line">        &#125; = url.parse(req.url, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取出每一个layer</span></span><br><span class="line">        <span class="comment">// 根据方法和路径匹配成功后执行对应的回调函数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; app.routes.length; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> &#123;</span><br><span class="line">                method,</span><br><span class="line">                path,</span><br><span class="line">                handler</span><br><span class="line">            &#125; = app.routes[i]</span><br><span class="line">            <span class="keyword">if</span> (m === method &amp;&amp; pathname === path) &#123;</span><br><span class="line">                handler(req, res)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.end(<span class="string">'cannot find'</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    app.routes = []</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 批量生产方法</span></span><br><span class="line">    http.METHODS.forEach(<span class="function"><span class="params">method</span> =&gt;</span> &#123;</span><br><span class="line">        method = method.toLowerCase()</span><br><span class="line">        app[method] = <span class="function"><span class="keyword">function</span>(<span class="params">path, handler</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> layer = &#123;</span><br><span class="line">                method,</span><br><span class="line">                path,</span><br><span class="line">                handler</span><br><span class="line">            &#125;</span><br><span class="line">            app.routes.push(layer)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// console.log(http.METHODS);</span></span><br><span class="line">    <span class="comment">// [ 'ACL',     </span></span><br><span class="line">    <span class="comment">// 'BIND',    </span></span><br><span class="line">    <span class="comment">// 'CHECKOUT',</span></span><br><span class="line">    <span class="comment">// 'CONNECT', </span></span><br><span class="line">    <span class="comment">// 'COPY',</span></span><br><span class="line">    <span class="comment">// 'DELETE',</span></span><br><span class="line">    <span class="comment">// 'GET',</span></span><br><span class="line">    <span class="comment">// 'HEAD',</span></span><br><span class="line">    <span class="comment">// 'LINK',</span></span><br><span class="line">    <span class="comment">// 'LOCK',</span></span><br><span class="line">    <span class="comment">// 'M-SEARCH',</span></span><br><span class="line">    <span class="comment">// 'MERGE',</span></span><br><span class="line">    <span class="comment">// 'MKACTIVITY',</span></span><br><span class="line">    <span class="comment">// 'MKCALENDAR',</span></span><br><span class="line">    <span class="comment">// 'MKCOL',</span></span><br><span class="line">    <span class="comment">// 'MOVE',</span></span><br><span class="line">    <span class="comment">// 'NOTIFY',</span></span><br><span class="line">    <span class="comment">// 'OPTIONS',</span></span><br><span class="line">    <span class="comment">// 'PATCH',</span></span><br><span class="line">    <span class="comment">// 'POST',</span></span><br><span class="line">    <span class="comment">// 'PROPFIND',</span></span><br><span class="line">    <span class="comment">// 'PROPPATCH',</span></span><br><span class="line">    <span class="comment">// 'PURGE',</span></span><br><span class="line">    <span class="comment">// 'PUT',</span></span><br><span class="line">    <span class="comment">// 'REBIND',</span></span><br><span class="line">    <span class="comment">// 'REPORT',</span></span><br><span class="line">    <span class="comment">// 'SEARCH',</span></span><br><span class="line">    <span class="comment">// 'SOURCE',</span></span><br><span class="line">    <span class="comment">// 'SUBSCRIBE',</span></span><br><span class="line">    <span class="comment">// 'TRACE',</span></span><br><span class="line">    <span class="comment">// 'UNBIND',</span></span><br><span class="line">    <span class="comment">// 'UNLINK',</span></span><br><span class="line">    <span class="comment">// 'UNLOCK',</span></span><br><span class="line">    <span class="comment">// 'UNSUBSCRIBE' ]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// restful api</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// app.get = function(path, handler) &#123;</span></span><br><span class="line">    <span class="comment">//     let layer = &#123;</span></span><br><span class="line">    <span class="comment">//         method: 'get',</span></span><br><span class="line">    <span class="comment">//         path,</span></span><br><span class="line">    <span class="comment">//         handler</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//     app.routes.push(layer)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    app.listen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> server = http.createServer(app)</span><br><span class="line">        server.listen(...arguments)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = createApplication</span><br></pre></td></tr></table></figure><p>到此，已实现全部请求方法的挂载。但还存在很多的问题，比如：</p><ol><li>尚不支持params、query、request body等传参</li><li>未添加安全机制</li><li>其他express api均未实现</li><li>……</li></ol><h3 id="手写koa"><a href="#手写koa" class="headerlink" title="手写koa"></a>手写koa</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'./my-koa/application'</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ctx.req.url);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原生</span></span><br><span class="line">    <span class="built_in">console</span>.log(ctx.req.url); <span class="comment">//ctx.req = req</span></span><br><span class="line">    <span class="built_in">console</span>.log(ctx.request.req.url); <span class="comment">// ctx.request.req = req</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(ctx.request.url); <span class="comment">//ctx.request是koa自己封装的属性</span></span><br><span class="line">    <span class="built_in">console</span>.log(ctx.url); <span class="comment">//用ctx.url来代替ctx.request.url属性,简化写法</span></span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'3000'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意，我们需要先理清ctx.req | ctx.request.req | ctx.request | ctx 的关系。打印结果如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这两组总是一样</span></span><br><span class="line"><span class="built_in">console</span>.log(ctx.req.url); <span class="comment">//ctx.req = req</span></span><br><span class="line"><span class="built_in">console</span>.log(ctx.request.req.url); <span class="comment">// ctx.request.req = req</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这两组总是一样</span></span><br><span class="line"><span class="built_in">console</span>.log(ctx.request.url); <span class="comment">//ctx.request是koa自己封装的属性</span></span><br><span class="line"><span class="built_in">console</span>.log(ctx.url); <span class="comment">//用ctx.url来代替ctx.request.url属性,简化写法</span></span><br></pre></td></tr></table></figure><p>由此可以判断，我们实现时应该写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.req = ctx.request.req = req</span><br><span class="line">ctx.res = ctx.response.res = res</span><br></pre></td></tr></table></figure><p>加下来，我们实现自己的koa框架：</p><p>首先创建一个文件夹，新建<code>application.js</code>文件作为入口文件，再分别创建<code>context.js</code>、<code>request.js</code>、<code>response.js</code>文件。</p><p>==context.js==</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> context = &#123;&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = context</span><br></pre></td></tr></table></figure><p>==request.js==</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> request = &#123;&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = request</span><br></pre></td></tr></table></figure><p>==response.js==</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> response = &#123;&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = response</span><br></pre></td></tr></table></figure><p>==application.js==</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> context = <span class="built_in">require</span>(<span class="string">'./context'</span>)</span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'./request'</span>)</span><br><span class="line"><span class="keyword">const</span> response = <span class="built_in">require</span>(<span class="string">'./response'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Koa</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.callbacksFn</span><br><span class="line">        <span class="keyword">this</span>.context = context</span><br><span class="line">        <span class="keyword">this</span>.request = request</span><br><span class="line">        <span class="keyword">this</span>.response = response</span><br><span class="line">    &#125;</span><br><span class="line">    use(cb) &#123;</span><br><span class="line">        <span class="keyword">this</span>.callbacksFn = cb</span><br><span class="line">    &#125;</span><br><span class="line">    createContext(req, res) &#123;</span><br><span class="line">        <span class="comment">// 希望ctx可以拿到context的属性,但是不修改context</span></span><br><span class="line">        <span class="keyword">let</span> ctx = <span class="built_in">Object</span>.create(<span class="keyword">this</span>.context)</span><br><span class="line">        ctx.request = <span class="built_in">Object</span>.create(<span class="keyword">this</span>.request)</span><br><span class="line">        ctx.response = <span class="built_in">Object</span>.create(<span class="keyword">this</span>.response)</span><br><span class="line">        ctx.req = ctx.request.req = req</span><br><span class="line">        ctx.res = ctx.response.res = res</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ctx</span><br><span class="line">    &#125;</span><br><span class="line">    handlerRequest(req, res) &#123;</span><br><span class="line">        <span class="keyword">let</span> ctx = <span class="keyword">this</span>.createContext(req, res)</span><br><span class="line">        <span class="keyword">this</span>.callbacksFn(ctx) <span class="comment">//这里传入的是ctx</span></span><br><span class="line">    &#125;</span><br><span class="line">    listen() &#123;</span><br><span class="line">        <span class="keyword">let</span> server = http.createServer(<span class="keyword">this</span>.handlerRequest.bind(<span class="keyword">this</span>))</span><br><span class="line">        server.listen(...arguments)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Koa</span><br></pre></td></tr></table></figure><p>我们通过app.js检验一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(ctx.req.url); <span class="comment">//ctx.req = req</span></span><br><span class="line"><span class="built_in">console</span>.log(ctx.request.req.url); <span class="comment">// ctx.request.req = req</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里仍然还是undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(ctx.request.url); <span class="comment">//ctx.request是koa自己封装的属性</span></span><br><span class="line"><span class="built_in">console</span>.log(ctx.url); <span class="comment">//用ctx.url来代替ctx.request.url属性,简化写法</span></span><br></pre></td></tr></table></figure><p>因为<code>ctx.request.url</code>、<code>ctx.url</code>输出的还是undefined，因为没有实现，下面开始实现这一部分，核心源码是使用代理来实现：</p><p>==request.js==</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> request = &#123;</span><br><span class="line">    <span class="keyword">get</span> url() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.req.url</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">get</span> path() &#123;</span><br><span class="line">        <span class="keyword">return</span> url.parse(<span class="keyword">this</span>.req.url).pathname</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = request</span><br></pre></td></tr></table></figure><p>==response.js==</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> response = &#123;</span><br><span class="line">    <span class="keyword">set</span> body(value) &#123;</span><br><span class="line">        <span class="keyword">this</span>.res.statusCode = <span class="number">200</span> <span class="comment">//只要调了ctx.body='xxx',就设置状态码为200</span></span><br><span class="line">        <span class="keyword">this</span>._body = value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">get</span> body() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._body</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = response</span><br></pre></td></tr></table></figure><p>==context.js==（实现代理功能）</p><p><strong>实现:</strong></p><ul><li><code>ctx.url=ctx.request.url</code>——取ctx.url是取的ctx.request.url</li><li><code>ctx.path=ctx.request.path</code>——取ctx.path是取的ctx.request.path</li><li><code>ctx.body=ctx.request.body</code>——取ctx.body是取的ctx.response.body，设置ctx.body是设置的ctx.response.body</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ctx = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义获取器,代理属性</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineGetter</span>(<span class="params">property, name</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 取 ctx.url 取的是 ctx.request.url</span></span><br><span class="line">    <span class="comment">// __defineGetter__是原生方法,也可以使用Object.defineProperty实现</span></span><br><span class="line">    ctx.__defineGetter__(name, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>[property][name]</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineSetter</span>(<span class="params">property, name, value</span>) </span>&#123;</span><br><span class="line">    ctx.__defineSetter__(name, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>[property][name] = value</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">defineGetter(<span class="string">'request'</span>, <span class="string">'url'</span>)</span><br><span class="line">defineGetter(<span class="string">'request'</span>, <span class="string">'path'</span>)</span><br><span class="line">defineGetter(<span class="string">'response'</span>, <span class="string">'body'</span>)</span><br><span class="line">defineSetter(<span class="string">'response'</span>, <span class="string">'body'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = ctx</span><br></pre></td></tr></table></figure><p>修改==application.js==</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">handlerRequest(req, res) &#123;</span><br><span class="line">       res.statusCode = <span class="number">404</span> <span class="comment">//默认页面找不到</span></span><br><span class="line">       <span class="keyword">let</span> ctx = <span class="keyword">this</span>.createContext(req, res)</span><br><span class="line">       <span class="keyword">this</span>.callbacksFn(ctx) <span class="comment">//这里传入的是ctx,当回调函数执行后,ctx.body值就会发生变化</span></span><br><span class="line">       <span class="keyword">let</span> body = ctx.body</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">typeof</span> body === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">           res.end(<span class="string">'Not Found!'</span>)</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> body === <span class="string">'string'</span>) &#123;</span><br><span class="line">           res.end(body)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>完成后，通过app.js进行测试：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'./my-koa/application'</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'group 1 ============================'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(ctx.req.url);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'===================================='</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'group 2 ============================'</span>);</span><br><span class="line">    <span class="comment">// 原生</span></span><br><span class="line">    <span class="built_in">console</span>.log(ctx.req.url); <span class="comment">//ctx.req = req</span></span><br><span class="line">    <span class="built_in">console</span>.log(ctx.request.req.url); <span class="comment">// ctx.request.req = req</span></span><br><span class="line">    <span class="comment">// koa封装的</span></span><br><span class="line">    <span class="built_in">console</span>.log(ctx.request.url); <span class="comment">//ctx.request是koa自己封装的属性</span></span><br><span class="line">    <span class="built_in">console</span>.log(ctx.url); <span class="comment">//用ctx.url来代替ctx.request.url属性,简化写法</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'===================================='</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'group 3 ============================'</span>);</span><br><span class="line">    <span class="comment">// koa封装的</span></span><br><span class="line">    <span class="built_in">console</span>.log(ctx.request.path);</span><br><span class="line">    <span class="built_in">console</span>.log(ctx.path);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'===================================='</span>);</span><br><span class="line"></span><br><span class="line">    ctx.body = <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'3000'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output：</span><br><span class="line">group <span class="number">1</span> ============================</span><br><span class="line">/name</span><br><span class="line">====================================</span><br><span class="line">group <span class="number">2</span> ============================</span><br><span class="line">/name</span><br><span class="line">/name</span><br><span class="line">/name</span><br><span class="line">/name</span><br><span class="line">====================================</span><br><span class="line">group <span class="number">3</span> ============================</span><br><span class="line">/name</span><br><span class="line">/name</span><br><span class="line">====================================</span><br></pre></td></tr></table></figure><p>打开<a href="http://localhost:3000，显示&#39;hello&#39;，上述代码没问题了。接下来我们实现多个中间件的功能，核心原理（洋葱模型）：">http://localhost:3000，显示&#39;hello&#39;，上述代码没问题了。接下来我们实现多个中间件的功能，核心原理（洋葱模型）：</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">app</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">app.middlewares = []</span><br><span class="line">app.use = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    app.middlewares.push(cb)</span><br><span class="line">&#125;</span><br><span class="line">app.use(<span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'mid 1-1'</span>);</span><br><span class="line">    next()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'mid 1-2'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">app.use(<span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'mid 2-1'</span>);</span><br><span class="line">    next()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'mid 2-2'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">app.use(<span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'mid 3-1'</span>);</span><br><span class="line">    next()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'mid 3-2'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index === app.middlewares.length) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">let</span> mid = app.middlewares[index]</span><br><span class="line">    mid(&#123;&#125;, () =&gt; dispatch(index + <span class="number">1</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dispatch(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">----------------------------</span><br><span class="line"></span><br><span class="line">output：</span><br><span class="line">mid <span class="number">1</span><span class="number">-1</span></span><br><span class="line">mid <span class="number">2</span><span class="number">-1</span></span><br><span class="line">mid <span class="number">3</span><span class="number">-1</span></span><br><span class="line">mid <span class="number">3</span><span class="number">-2</span></span><br><span class="line">mid <span class="number">2</span><span class="number">-2</span></span><br><span class="line">mid <span class="number">1</span><span class="number">-2</span></span><br></pre></td></tr></table></figure><p>接下来，实现异步，采用async、await</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">app</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">app.middlewares = []</span><br><span class="line">app.use = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    app.middlewares.push(cb)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// koa可以使用async await</span></span><br><span class="line"><span class="keyword">let</span> log = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'ok'</span>);</span><br><span class="line">            resolve()</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'mid 1-1'</span>);</span><br><span class="line">    next()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'mid 1-2'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">app.use(<span class="keyword">async</span>(ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'mid 2-1'</span>);</span><br><span class="line">    <span class="keyword">await</span> log()</span><br><span class="line">    next()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'mid 2-2'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">app.use(<span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'mid 3-1'</span>);</span><br><span class="line">    next()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'mid 3-2'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index === app.middlewares.length) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">let</span> mid = app.middlewares[index]</span><br><span class="line">    mid(&#123;&#125;, () =&gt; dispatch(index + <span class="number">1</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dispatch(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------------------------------</span><br><span class="line">output：</span><br><span class="line">mid <span class="number">1</span><span class="number">-1</span></span><br><span class="line">mid <span class="number">2</span><span class="number">-1</span></span><br><span class="line">mid <span class="number">1</span><span class="number">-2</span></span><br><span class="line">ok</span><br><span class="line">mid <span class="number">3</span><span class="number">-1</span></span><br><span class="line">mid <span class="number">3</span><span class="number">-2</span></span><br><span class="line">mid <span class="number">2</span><span class="number">-2</span></span><br></pre></td></tr></table></figure><p>想想为什么会出现这个结果？</p><p><strong>最后通过这个原理，修改原代码：</strong></p><p>==application.js==（在以上实现的代码基础上修改，只展示新增部分）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Koa</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="comment">//新增</span></span><br><span class="line">        <span class="keyword">this</span>.middlewares = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    use(cb) &#123;</span><br><span class="line">        <span class="keyword">this</span>.middlewares.push(cb)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//新增</span></span><br><span class="line">    compose(ctx, middlewares) &#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 处理越界</span></span><br><span class="line">            <span class="keyword">if</span> (index === middlewares.length) <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">let</span> mid = middlewares[index]</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(mid(&#123;&#125;, () =&gt; dispatch(index + <span class="number">1</span>))) <span class="comment">// 转化为promise</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dispatch(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    handlerRequest(req, res) &#123;</span><br><span class="line">        res.statusCode = <span class="number">404</span> <span class="comment">//默认页面找不到</span></span><br><span class="line">        <span class="keyword">let</span> ctx = <span class="keyword">this</span>.createContext(req, res)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// this.callbacksFn(ctx) //这里传入的是ctx,当回调函数执行后,ctx.body值就会发生变化</span></span><br><span class="line">        <span class="keyword">let</span> composedMiddlewares = <span class="keyword">this</span>.compose(ctx,<span class="keyword">this</span>.middlewares)</span><br><span class="line">        composedMiddlewares.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> body = ctx.body</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> body === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">                res.end(<span class="string">'Not Found!'</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> body === <span class="string">'string'</span>) &#123;</span><br><span class="line">                res.end(body)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前已经完成了一个简易版koa，通过app.js即可进行测试！</p><h3 id="手写Promise"><a href="#手写Promise" class="headerlink" title="手写Promise"></a>手写Promise</h3><p>参考<a href="https://www.jianshu.com/p/c633a22f9e8c" target="_blank" rel="noopener">只会用？一起来手写一个合乎规范的Promise</a><br>先看看promise的一个基本用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">task1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"task1"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">task2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"task2"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">task3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"task3"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">task1()</span><br><span class="line">    .then(task2())</span><br><span class="line">    .then(task3())</span><br></pre></td></tr></table></figure><p>创建Promise实例时，我们传入了一个函数，函数的两个参数（resolve/reject）分别将Promise的状态变为成功态和失败态。首先搭建出基本骨架：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PENDING = <span class="string">'pending'</span></span><br><span class="line"><span class="keyword">const</span> RESOLVED = <span class="string">'resolved'</span></span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">'rejected'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(executor) &#123;</span><br><span class="line">        <span class="keyword">this</span>.state = PENDING</span><br><span class="line">        <span class="keyword">this</span>.value = <span class="literal">undefined</span></span><br><span class="line">        <span class="keyword">this</span>.reason = <span class="literal">undefined</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    resolve(value) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    reject(reason) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function">(<span class="params">onFullFilled, onRejected</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="built_in">Promise</span></span><br></pre></td></tr></table></figure><p>Promise实例中state保存它的状态，分为3种：等待态（pending）成功态（resolved）和失败态（rejected）。因为Promise也可以通过.then进行调用，因此在Promise的原型上绑定了then方法。</p><p>接下来分别实现：</p><ol><li>当实例化Promise时，构造函数中就要马上调用传入的executor函数执行</li><li>完成resolve和reject方法，已经是成功态或是失败态不可再更新状态</li><li>实现原型上的then方法，完成Promise.prototype.then函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PENDING = <span class="string">'pending'</span></span><br><span class="line"><span class="keyword">const</span> RESOLVED = <span class="string">'resolved'</span></span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">'rejected'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(executor) &#123;</span><br><span class="line">        <span class="keyword">this</span>.state = PENDING</span><br><span class="line">        <span class="keyword">this</span>.value = <span class="literal">undefined</span></span><br><span class="line">        <span class="keyword">this</span>.reason = <span class="literal">undefined</span></span><br><span class="line">        executor(<span class="keyword">this</span>.resolve, <span class="keyword">this</span>.reject)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    resolve(value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.state === PENDING) &#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value</span><br><span class="line">            <span class="keyword">this</span>.state = RESOLVED</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    reject(reason) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.state === PENDING) &#123;</span><br><span class="line">            <span class="keyword">this</span>.reason = reason</span><br><span class="line">            <span class="keyword">this</span>.state = REJECTED</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function">(<span class="params">onFullFilled, onRejected</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === RESOLVED) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> onFullFilled === <span class="string">'function'</span>) &#123;</span><br><span class="line">            onFullFilled(<span class="keyword">this</span>.value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === REJECTED) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> onRejected === <span class="string">'function'</span>) &#123;</span><br><span class="line">            onRejected(<span class="keyword">this</span>.reason)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="built_in">Promise</span></span><br></pre></td></tr></table></figure><p>目前已经完成了Promise的基本功能，接下来解决异步问题。因为此时的代码还不支持Promise种传入异步函数。<br>我们可以创建两个数组onFulfilledFunc、onRejectedFunc 分别存放成功的回调和失败的回调，当then方法执行时，若状态还在等待态（pending），将回调函数依次放入数组中，这样在resolve和reject方法中可以分别将数组中的回调函数依次执行（resolve中执行onFulfilledFunc的所有方法，reject中执行onRejectedFunc的所有方法），具体实现如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PENDING = <span class="string">'pending'</span></span><br><span class="line"><span class="keyword">const</span> RESOLVED = <span class="string">'resolved'</span></span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">'rejected'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(executor) &#123;</span><br><span class="line">        <span class="keyword">this</span>.state = PENDING</span><br><span class="line">        <span class="keyword">this</span>.value = <span class="literal">undefined</span></span><br><span class="line">        <span class="keyword">this</span>.reason = <span class="literal">undefined</span></span><br><span class="line">        <span class="keyword">this</span>.onFulfilledFunc = []; <span class="comment">//保存成功回调</span></span><br><span class="line">        <span class="keyword">this</span>.onRejectedFunc = []; <span class="comment">//保存失败回调</span></span><br><span class="line">        executor(<span class="keyword">this</span>.resolve, <span class="keyword">this</span>.reject)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    resolve(value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.state === PENDING) &#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value</span><br><span class="line">            <span class="keyword">this</span>.onFulfilledFunc.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn(value))</span><br><span class="line">            <span class="keyword">this</span>.state = RESOLVED</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    reject(reason) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.state === PENDING) &#123;</span><br><span class="line">            <span class="keyword">this</span>.reason = reason</span><br><span class="line">            <span class="keyword">this</span>.onRejectedFunc.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn(reason))</span><br><span class="line">            <span class="keyword">this</span>.state = REJECTED</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function">(<span class="params">onFullFilled, onRejected</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === PENDING) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> onFulfilled === <span class="string">'function'</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.onFulfilledFunc.push(onFulfilled); <span class="comment">//保存回调</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> onRejected === <span class="string">'function'</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.onRejectedFunc.push(onRejected); <span class="comment">//保存回调</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === RESOLVED) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> onFullFilled === <span class="string">'function'</span>) &#123;</span><br><span class="line">            onFullFilled(<span class="keyword">this</span>.value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === REJECTED) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> onRejected === <span class="string">'function'</span>) &#123;</span><br><span class="line">            onRejected(<span class="keyword">this</span>.reason)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="built_in">Promise</span></span><br></pre></td></tr></table></figure><p>现在我们测试实现的Promise类：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">task1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"task1"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">task2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"task2"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">task3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"task3"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">task1()</span><br><span class="line">    .then(task2())</span><br><span class="line">    .then(task3())</span><br><span class="line"></span><br><span class="line">-----------------------</span><br><span class="line">output：</span><br><span class="line">task1</span><br><span class="line">task2</span><br><span class="line">task3</span><br></pre></td></tr></table></figure><p>不过目前的Promise还存在一些问题：</p><ol><li>尚不支持then链式调用</li><li>异常捕获</li><li>all、race等方法实现</li></ol><p><strong>接下来实现链式调用和异常捕获</strong>:</p><ul><li>每个then方法都返回一个新的Promise对象（原理的核心）</li><li>如果then方法中显示地返回了一个Promise对象就以此对象为准，返回它的结果</li><li>如果then方法中返回的是一个普通值（如Number、String等）就使用此值包装成一个新的Promise对象返回。</li><li>如果then方法中没有return语句，就视为返回一个用Undefined包装的Promise对象</li><li>若then方法中出现异常，则调用失败态方法（reject）跳转到下一个then的onRejected</li><li>如果then方法没有传入任何回调，则继续向下传递（值的传递特性）。</li></ul><p>修改如下:</p><ol><li>使MyPromise.prototype.then方法返回一个Promise</li><li>实现resolvePromise方法(核心)</li><li>重写MyPromise.prototype.then逻辑<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PENDING = <span class="string">'pending'</span></span><br><span class="line"><span class="keyword">const</span> RESOLVED = <span class="string">'resolved'</span></span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">'rejected'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(executor) &#123;</span><br><span class="line">        <span class="keyword">this</span>.state = PENDING</span><br><span class="line">        <span class="keyword">this</span>.value = <span class="literal">undefined</span></span><br><span class="line">        <span class="keyword">this</span>.reason = <span class="literal">undefined</span></span><br><span class="line">        <span class="keyword">this</span>.onFulfilledFunc = []; <span class="comment">//保存成功回调</span></span><br><span class="line">        <span class="keyword">this</span>.onRejectedFunc = []; <span class="comment">//保存失败回调</span></span><br><span class="line">        executor(<span class="keyword">this</span>.resolve, <span class="keyword">this</span>.reject)</span><br><span class="line">    &#125;</span><br><span class="line">    resolve(value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.state === PENDING) &#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value</span><br><span class="line">            <span class="keyword">this</span>.onFulfilledFunc.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn(value))</span><br><span class="line">            <span class="keyword">this</span>.state = RESOLVED</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    reject(reason) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.state === PENDING) &#123;</span><br><span class="line">            <span class="keyword">this</span>.reason = reason</span><br><span class="line">            <span class="keyword">this</span>.onRejectedFunc.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn(reason))</span><br><span class="line">            <span class="keyword">this</span>.state = REJECTED</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解析then返回值与新Promise对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>promise2 新的Promise对象 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>x 上一个then的返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Function&#125;</span> </span>resolve promise2的resolve</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Function&#125;</span> </span>reject promise2的reject</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">promise2, x, resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (promise2 === x) &#123;</span><br><span class="line">        reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Promise发生了循环引用'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x !== <span class="literal">null</span> &amp;&amp; (<span class="keyword">typeof</span> x === <span class="string">'object'</span> || <span class="keyword">typeof</span> x === <span class="string">'function'</span>)) &#123;</span><br><span class="line">        <span class="comment">//可能是个对象或是函数</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> then = x.then;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">'function'</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> y = then.call(x, (y) =&gt; &#123;</span><br><span class="line">                    <span class="comment">//递归调用，传入y若是Promise对象，继续循环</span></span><br><span class="line">                    resolvePromise(promise2, y, resolve, reject);</span><br><span class="line">                &#125;, (r) =&gt; &#123;</span><br><span class="line">                    reject(r);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                resolve(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//是个普通值，最终结束递归</span></span><br><span class="line">        resolve(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyPromise.prototype.then = <span class="function">(<span class="params">onFullfilled, onRejected</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;&#125;)</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === PENDING) &#123;</span><br><span class="line">        promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> onFullFilled === <span class="string">'function'</span>) &#123;</span><br><span class="line">                self.onRejectedFunc.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="comment">//x可能是一个promise，也可能是个普通值</span></span><br><span class="line">                    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">let</span> x = onFullfilled(self.value)</span><br><span class="line">                            resolvePromise(promise2, x, resolve, reject)</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                            reject(err)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> onRejected === <span class="string">'function'</span>) &#123;</span><br><span class="line">                self.onRejectedFunc.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="comment">//x可能是一个promise，也可能是个普通值</span></span><br><span class="line">                    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">let</span> x = onRejected(self.reason)</span><br><span class="line">                            resolvePromise(promise2, x, resolve, reject)</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                            reject(err)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === RESOLVED) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> onFullFilled === <span class="string">'function'</span>) &#123;</span><br><span class="line">            promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">                <span class="comment">//x可能是一个promise，也可能是个普通值</span></span><br><span class="line">                setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">let</span> x = infulfilled(self.value)</span><br><span class="line">                        onFullFilled(promise2, x, resolve, reject)</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                        reject(err)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === REJECTED) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> onRejected === <span class="string">'function'</span>) &#123;</span><br><span class="line">            promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">                <span class="comment">//x可能是一个promise，也可能是个普通值</span></span><br><span class="line">                setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">let</span> x = onRejected(self.reason)</span><br><span class="line">                        resolvePromise(promise2, x, resolve, reject)</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                        reject(err)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> promise2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = MyPromise</span><br></pre></td></tr></table></figure></li></ol><p><strong>思考</strong> ：如何实现Promise.all() Promise.race()方法？</p><h3 id="封装ajax"><a href="#封装ajax" class="headerlink" title="封装ajax"></a>封装ajax</h3><p>搭建基本骨架：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $ = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        ajax: <span class="function"><span class="keyword">function</span>(<span class="params">opt</span>) </span>&#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">get</span>: function(url, success) &#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        post: <span class="function"><span class="keyword">function</span>(<span class="params">url, data, success</span>) </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>这样的话，可以直接通过$.ajax()、$.get()、$.post()调用。接下来完善其中的功能：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $ = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="built_in">window</span>.XMLHttpRequest ? <span class="keyword">new</span> XMLHttpRequest() : <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>)</span><br><span class="line">    <span class="keyword">if</span> (!o) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Your browser cannot support http'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doAjax</span>(<span class="params">opt</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> opt = opt || &#123;&#125;,</span><br><span class="line">            type = (opt.type || <span class="string">'GET'</span>).toUpperCase(),</span><br><span class="line">            <span class="keyword">async</span> = opt.async || <span class="literal">true</span>,</span><br><span class="line">            url = opt.url,</span><br><span class="line">            data = opt.data || <span class="literal">null</span>,</span><br><span class="line">            error = opt.error || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">            success = opt.success || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">            complete = opt.complete || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!url) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'no url'</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        o.open(type, url, <span class="keyword">async</span>)</span><br><span class="line">        type === <span class="string">'POST'</span> &amp;&amp; o.setRequestHeader(<span class="string">'Content-type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>)</span><br><span class="line">        o.send(type === <span class="string">'GET'</span> ? <span class="literal">null</span> : formatDatas(data))</span><br><span class="line">        o.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (o.readyState === <span class="number">4</span> &amp;&amp; (o.status === <span class="number">200</span> || status === <span class="number">304</span>)) &#123;</span><br><span class="line">                success(<span class="built_in">JSON</span>.parse(o.responseText))</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                error()</span><br><span class="line">            &#125;</span><br><span class="line">            complete()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">formatDatas</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">            str += key + <span class="string">'='</span> + obj[key] + <span class="string">'&amp;'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str.replace(<span class="regexp">/&amp;$/</span>, <span class="string">''</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        ajax: <span class="function"><span class="keyword">function</span>(<span class="params">opt</span>) </span>&#123;</span><br><span class="line">            doAjax(opt)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">get</span>: function(url, success) &#123;</span><br><span class="line">            doAjax(&#123;</span><br><span class="line">                type: <span class="string">'GET'</span>,</span><br><span class="line">                url,</span><br><span class="line">                success</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        post: <span class="function"><span class="keyword">function</span>(<span class="params">url, data, success</span>) </span>&#123;</span><br><span class="line">            doAjax(&#123;</span><br><span class="line">                type: <span class="string">'POST'</span>,</span><br><span class="line">                url,</span><br><span class="line">                data,</span><br><span class="line">                success</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url:<span class="string">'xxx'</span>,</span><br><span class="line">    type:<span class="string">'GET'</span>,</span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line">$.<span class="keyword">get</span>('xxx',fucntion()&#123;&#125;)</span><br><span class="line">$.post(<span class="string">'xxx'</span>,&#123;a=<span class="number">1</span>,b=<span class="number">2</span>&#125;,fucntion()&#123;&#125;)</span><br></pre></td></tr></table></figure><h3 id="手写深拷贝"><a href="#手写深拷贝" class="headerlink" title="手写深拷贝"></a>手写深拷贝</h3><p>出自<a href="https://juejin.im/post/5d6aa4f96fb9a06b112ad5b1" target="_blank" rel="noopener">如何写出一个惊艳面试官的深拷贝?</a></p><p><strong>浅拷贝</strong>：如果属性是值类型，拷贝的是值类型的值；如果属性是引用类型，拷贝的是引用类型的内存地址。其中一个对象改变了，另一个对象也会随之改变。</p><p><strong>深拷贝</strong>：开辟一个新的区域存放新对象，且修改新对象不会影响原对象</p><p>对于深拷贝，我们可以简单地通过<code>JSON.parse(JSON.stringify());</code>这么一段简单地写法实现。但是它还存在着很大的缺陷，例如无法拷贝其他引用类型、拷贝函数、解决循环引用等情况。</p><p><strong>1. 基础版本</strong></p><ul><li>如果是值类型，无需继续拷贝，直接返回</li><li>如果是引用类型，创建一个新对象，依次遍历将原对象上的属性拷贝到新对象上（采用递归实现）<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> cloneTarget = &#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            cloneTarget[key] = clone(target[key]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cloneTarget;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><strong>2. 考虑数组</strong></p><ul><li>如果拷贝的数组，则不应该创建对象{}，则是创建数组[]，在前面加上判断即可。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> cloneTarget = <span class="built_in">Array</span>.isArray(target) ? [] : &#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            cloneTarget[key] = clone(target[key]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cloneTarget;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><strong>3. 解决循环引用</strong></p><ul><li>以上的版本如果发生循环引用的话会发生栈内存溢出的情况</li><li>这时，我们应该额外开辟一个存储空间，用来存放当前对象与拷贝对象的对应关系，当需要拷贝当前对象时，先去存储空间中查找，如果有的话就直接返回，如果没有的话就继续拷贝<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">target, map = new Map(</span>)) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> cloneTarget = <span class="built_in">Array</span>.isArray(target) ? [] : &#123;&#125;;</span><br><span class="line">        <span class="keyword">if</span> (map.get(target)) &#123;</span><br><span class="line">            <span class="keyword">return</span> map.get(target);</span><br><span class="line">        &#125;</span><br><span class="line">        map.set(target, cloneTarget);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            cloneTarget[key] = clone(target[key], map);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cloneTarget;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p>在这里，我们也可以通过WeakMap来实现。如果我们创建了强引用的对象，我们只有手动设置为null才能被GC回收，如果是弱引用类型的话，GC会自动帮我们回收。</p><p>如果我们要拷贝的对象非常非常大时，使用Map会对内存造成很大的消耗，这时使用WeakMap可以解决这个问题。</p><p><strong>4. 性能优化</strong><br>当遍历数组时，直接使用forEach进行遍历，当遍历对象时，使用Object.keys取出所有的key进行遍历，然后在遍历时把forEach会调函数的value当作key使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">target, map = new WeakMap(</span>)) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> isArray = <span class="built_in">Array</span>.isArray(target);</span><br><span class="line">        <span class="keyword">let</span> cloneTarget = isArray ? [] : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (map.get(target)) &#123;</span><br><span class="line">            <span class="keyword">return</span> map.get(target);</span><br><span class="line">        &#125;</span><br><span class="line">        map.set(target, cloneTarget);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> keys = isArray ? <span class="literal">undefined</span> : <span class="built_in">Object</span>.keys(target);</span><br><span class="line">        forEach(keys || target, (value, key) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (keys) &#123;</span><br><span class="line">                key = value;</span><br><span class="line">            &#125;</span><br><span class="line">            cloneTarget[key] = clone2(target[key], map);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cloneTarget;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5. 考虑其他数据类型</strong><br>首先，判断是否为引用类型，我们还需要考虑function和null两种特殊的数据类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断是否为对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> type = <span class="keyword">typeof</span> target;</span><br><span class="line">    <span class="keyword">return</span> target !== <span class="literal">null</span> &amp;&amp; (type === <span class="string">'object'</span> || type === <span class="string">'function'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!isObject(target)) &#123;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取数据类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面我们抽离出一些常用的数据类型以便后面使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以继续遍历的类型</span></span><br><span class="line"><span class="keyword">const</span> mapTag = <span class="string">'[object Map]'</span>;</span><br><span class="line"><span class="keyword">const</span> setTag = <span class="string">'[object Set]'</span>;</span><br><span class="line"><span class="keyword">const</span> arrayTag = <span class="string">'[object Array]'</span>;</span><br><span class="line"><span class="keyword">const</span> objectTag = <span class="string">'[object Object]'</span>;</span><br><span class="line"><span class="comment">//不可以继续遍历的类型</span></span><br><span class="line"><span class="keyword">const</span> boolTag = <span class="string">'[object Boolean]'</span>;</span><br><span class="line"><span class="keyword">const</span> dateTag = <span class="string">'[object Date]'</span>;</span><br><span class="line"><span class="keyword">const</span> errorTag = <span class="string">'[object Error]'</span>;</span><br><span class="line"><span class="keyword">const</span> numberTag = <span class="string">'[object Number]'</span>;</span><br><span class="line"><span class="keyword">const</span> regexpTag = <span class="string">'[object RegExp]'</span>;</span><br><span class="line"><span class="keyword">const</span> stringTag = <span class="string">'[object String]'</span>;</span><br><span class="line"><span class="keyword">const</span> symbolTag = <span class="string">'[object Symbol]'</span>;</span><br></pre></td></tr></table></figure><p>可继续遍历的类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">target, map = new WeakMap(</span>)) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 克隆原始类型</span></span><br><span class="line">    <span class="keyword">if</span> (!isObject(target)) &#123;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">const</span> type = getType(target);</span><br><span class="line">    <span class="keyword">let</span> cloneTarget;</span><br><span class="line">    <span class="keyword">if</span> (deepTag.includes(type)) &#123;</span><br><span class="line">        cloneTarget = getInit(target, type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 防止循环引用</span></span><br><span class="line">    <span class="keyword">if</span> (map.get(target)) &#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(target);</span><br><span class="line">    &#125;</span><br><span class="line">    map.set(target, cloneTarget);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 克隆set</span></span><br><span class="line">    <span class="keyword">if</span> (type === setTag) &#123;</span><br><span class="line">        target.forEach(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">            cloneTarget.add(clone(value,map));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> cloneTarget;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 克隆map</span></span><br><span class="line">    <span class="keyword">if</span> (type === mapTag) &#123;</span><br><span class="line">        target.forEach(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">            cloneTarget.set(key, clone(value,map));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> cloneTarget;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 克隆对象和数组</span></span><br><span class="line">    <span class="keyword">const</span> keys = type === arrayTag ? <span class="literal">undefined</span> : <span class="built_in">Object</span>.keys(target);</span><br><span class="line">    forEach(keys || target, (value, key) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (keys) &#123;</span><br><span class="line">            key = value;</span><br><span class="line">        &#125;</span><br><span class="line">        cloneTarget[key] = clone(target[key], map);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cloneTarget;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不可继续遍历的类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cloneOtherType</span>(<span class="params">targe, type</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> Ctor = targe.constructor;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> boolTag:</span><br><span class="line">        <span class="keyword">case</span> numberTag:</span><br><span class="line">        <span class="keyword">case</span> stringTag:</span><br><span class="line">        <span class="keyword">case</span> errorTag:</span><br><span class="line">        <span class="keyword">case</span> dateTag:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Ctor(targe);</span><br><span class="line">        <span class="keyword">case</span> regexpTag:</span><br><span class="line">            <span class="keyword">return</span> cloneReg(targe);</span><br><span class="line">        <span class="keyword">case</span> symbolTag:</span><br><span class="line">            <span class="keyword">return</span> cloneSymbol(targe);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// clone Symbol</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cloneSymbol</span>(<span class="params">targe</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>(<span class="built_in">Symbol</span>.prototype.valueOf.call(targe));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Clone Regexp</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cloneReg</span>(<span class="params">targe</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> reFlags = <span class="regexp">/\w*$/</span>;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">new</span> targe.constructor(targe.source, reFlags.exec(targe));</span><br><span class="line">    result.lastIndex = targe.lastIndex;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Clone Function</span></span><br><span class="line"><span class="keyword">const</span> isFunc = <span class="keyword">typeof</span> value == <span class="string">'function'</span></span><br><span class="line"> <span class="keyword">if</span> (isFunc || !cloneableTags[tag]) &#123;</span><br><span class="line">        <span class="keyword">return</span> object ? value : &#123;&#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cloneFunction</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> bodyReg = <span class="regexp">/(?&lt;=&#123;)(.|\n)+(?=&#125;)/m</span>;</span><br><span class="line">    <span class="keyword">const</span> paramReg = <span class="regexp">/(?&lt;=\().+(?=\)\s+&#123;)/</span>;</span><br><span class="line">    <span class="keyword">const</span> funcString = func.toString();</span><br><span class="line">    <span class="keyword">if</span> (func.prototype) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'普通函数'</span>);</span><br><span class="line">        <span class="keyword">const</span> param = paramReg.exec(funcString);</span><br><span class="line">        <span class="keyword">const</span> body = bodyReg.exec(funcString);</span><br><span class="line">        <span class="keyword">if</span> (body) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'匹配到函数体：'</span>, body[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">if</span> (param) &#123;</span><br><span class="line">                <span class="keyword">const</span> paramArr = param[<span class="number">0</span>].split(<span class="string">','</span>);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'匹配到参数：'</span>, paramArr);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(...paramArr, body[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(body[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">eval</span>(funcString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="跨域实现原理"><a href="#跨域实现原理" class="headerlink" title="跨域实现原理"></a>跨域实现原理</h3><p><a href="https://segmentfault.com/a/1190000020686142?utm_source=tag-newest#articleHeader9" target="_blank" rel="noopener">《非常全的跨域实现方案》</a></p><p><strong>跨域方案</strong></p><ol><li>jsonp</li><li>cors</li><li>postMessage</li><li>document.domain</li><li>window.name</li><li>location.hash</li><li>http-proxy</li><li>nginx</li><li>websocket</li></ol><p><strong>jsonp实现</strong></p><ol><li>只能发送get请求,不支持post/put/delete等</li><li>也不安全,存在xss攻击<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用方法:</span></span><br><span class="line">  jsonp(&#123;</span><br><span class="line">      url: <span class="string">'xxx'</span>,</span><br><span class="line">      params: &#123;</span><br><span class="line">          wd: <span class="string">'aa'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      cb: <span class="string">'show'</span></span><br><span class="line">  &#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      url,</span></span></span><br><span class="line"><span class="function"><span class="params">      params,</span></span></span><br><span class="line"><span class="function"><span class="params">      cb</span></span></span><br><span class="line"><span class="function"><span class="params">  &#125;</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">window</span>[cb] = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">              resolve(data)</span><br><span class="line">              <span class="built_in">document</span>.body.removeChild(script)</span><br><span class="line">          &#125;</span><br><span class="line">          params = &#123;</span><br><span class="line">              ...params,</span><br><span class="line">              cb</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">let</span> arrs = []</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> params) &#123;</span><br><span class="line">              arrs.push(<span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;params[key]&#125;</span>`</span>)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">          script.src = <span class="string">`<span class="subst">$&#123;url&#125;</span>?<span class="subst">$&#123;arrs.join(<span class="string">'&amp;'</span>)&#125;</span>`</span></span><br><span class="line">          <span class="built_in">document</span>.body.appendChild(script)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>cors实现（最常用）</strong>——服务端设置</p><p>express示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> whiteList = [<span class="string">'http://localhost:3000'</span>]</span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> origin = req.headers.origin</span><br><span class="line">    <span class="keyword">if</span> (whiteList.includes(origin)) &#123;</span><br><span class="line">        res.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>, origin) <span class="comment">//允许哪个源可以访问我</span></span><br><span class="line">        res.setHeader(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'name'</span>) <span class="comment">//允许携带哪个头访问我</span></span><br><span class="line">        res.setHeader(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'POST'</span>) <span class="comment">//允许哪个方法访问我</span></span><br><span class="line">        res.setHeader(<span class="string">'Access-Control-Max-Age'</span>, <span class="number">6</span>) <span class="comment">//预检的存活时间</span></span><br><span class="line">        res.setHeader(<span class="string">'Access-Control-Allow-Credentials'</span>, <span class="literal">true</span>) <span class="comment">//允许携带cookie</span></span><br><span class="line">        res.setHeader(<span class="string">'Access-Control-Expose-Headers'</span>, <span class="string">'name'</span>) <span class="comment">//允许返回的头</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// post/put请求前会发送options请求,试探作用,看服务器是否支持</span></span><br><span class="line">        <span class="keyword">if</span> (req.method === <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">            next()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="oauth原理"><a href="#oauth原理" class="headerlink" title="oauth原理"></a>oauth原理</h3><p><a href="http://wiki.connect.qq.com/" target="_blank" rel="noopener">QQ互联</a></p><p><a href="https://www.cnblogs.com/free-wings/p/9609218.html" target="_blank" rel="noopener">OAuth2.0原理与实现</a></p><p><strong>具体流程</strong></p><ol><li>用户访问浏览器</li><li>授权页面，用户确认授权（生成一个code授权码）</li><li>回调url（授权码拼接到url请求得到token）</li><li>用户使用token访问</li><li>返回头像、昵称</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>原理剖析系列-手写实现（一）</title>
      <link href="/2019/11/20/%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90%E7%B3%BB%E5%88%97-%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B01/"/>
      <url>/2019/11/20/%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90%E7%B3%BB%E5%88%97-%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B01/</url>
      
        <content type="html"><![CDATA[<p>在前端的世界里，不仅要会使用，更要懂原理。第一弹。</p><a id="more"></a><h3 id="webpack简易版实现"><a href="#webpack简易版实现" class="headerlink" title="webpack简易版实现"></a>webpack简易版实现</h3><p><strong>简单实现commonjs规范</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现commonjs</span></span><br><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="comment">// module.exports = 'hello'</span></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="comment">// let str=require('./a.js')</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">req</span>(<span class="params">moduleName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> content = fs.readFileSync(moduleName, <span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建函数</span></span><br><span class="line">    <span class="comment">// function(exports, module, require, __dirname, __filename) &#123;</span></span><br><span class="line">    <span class="comment">//     module.exports = 'hello'</span></span><br><span class="line">    <span class="comment">//     return module.exports</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">let</span> fn = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'exports'</span>, <span class="string">'module'</span>, <span class="string">'require'</span>, <span class="string">'__dirname'</span>, <span class="string">'__filename'</span>, content + <span class="string">'\n return module.exports'</span>)</span><br><span class="line">    <span class="keyword">let</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">        exports: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, req, __dirname, __filename)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = req(<span class="string">'./a.js'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><p><strong>简单实现AMD规范</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// define声明模块,通过require使用模块</span></span><br><span class="line"><span class="keyword">let</span> fns = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">define</span>(<span class="params">moduleName, dependencies, fn</span>) </span>&#123;</span><br><span class="line">    fn.dependencies = dependencies <span class="comment">//将依赖记到fn上</span></span><br><span class="line">    fns[moduleName] = fn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">require</span>(<span class="params">modules, cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> results = modules.map(<span class="function"><span class="keyword">function</span>(<span class="params">mod</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> fn = fns[mod]</span><br><span class="line">        <span class="keyword">let</span> exports</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对依赖模块进行递归</span></span><br><span class="line">        <span class="keyword">let</span> dependencies = fn.dependencies</span><br><span class="line">        <span class="built_in">require</span>(dependencies, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            exports = fn.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> exports</span><br><span class="line">    &#125;)</span><br><span class="line">    cb.apply(<span class="literal">null</span>, results)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">define(<span class="string">'a'</span>, [], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'a'</span></span><br><span class="line">&#125;)</span><br><span class="line">define(<span class="string">'b'</span>, [], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'b'</span></span><br><span class="line">&#125;)</span><br><span class="line">define(<span class="string">'c'</span>, [<span class="string">'a'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.concat(<span class="string">'c'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a, b, c);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>webpack打包后的核心代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// moduleId就是文件名</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">require</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">            exports: &#123;&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, <span class="built_in">require</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'./src/index.js'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">(&#123;</span><br><span class="line">    <span class="string">"./src/index.js"</span>: (<span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">eval</span>(<span class="string">"console.log('hello');\n\n//# sourceURL=webpack:///./src/index.js?"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>实现我们自己的wepack打包工具</strong></p><ol><li>新建文件夹<code>mypack</code>，新建<code>bin</code>文件夹，在<code>bin</code>下创建<code>mypack.js</code>，在这个文件实现打包操作</li><li><code>npm init</code>初始化项目，修改<code>package.json</code>中的<code>bin</code>为<code>&quot;mypack&quot;: &quot;bin/mypack.js&quot;</code>，运行<code>npm link</code>将此命令关联到全局环境下</li><li>在<code>mypack.js</code>中需要加入<code>#! /usr/bin/env node</code>，告诉当前文件在node环境下运行</li><li>编写<code>mypack.js</code>打包核心代码</li><li>在原有项目文件夹，运行<code>mypack</code>命令即可实现最终的打包</li></ol><p>接下来在<code>mypack.js</code>中实现我们自己的webpack。</p><p><strong>核心思想：</strong><br>模板如上，采用模板替换的方式，将代码中的<code>entry、output</code>替换为我们自己的，再将<code>eval</code>的内容换为读取的<code>entry</code>文件内容（模板替换可采用<code>ejs</code>模块实现），最后将替换后的内容写入output文件中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">'ejs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> entry = <span class="string">'./src/index.js'</span></span><br><span class="line"><span class="keyword">const</span> output = <span class="string">'./dist/main.js'</span></span><br><span class="line"><span class="keyword">const</span> script = fs.readFileSync(entry, <span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> template = <span class="string">`</span></span><br><span class="line"><span class="string">(function(modules) &#123;</span></span><br><span class="line"><span class="string">    // moduleId就是文件名</span></span><br><span class="line"><span class="string">    function require(moduleId) &#123;</span></span><br><span class="line"><span class="string">        var module = &#123;</span></span><br><span class="line"><span class="string">            exports: &#123;&#125;</span></span><br><span class="line"><span class="string">        &#125;;</span></span><br><span class="line"><span class="string">        modules[moduleId].call(module.exports, module, module.exports, require);</span></span><br><span class="line"><span class="string">        return module.exports;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    return require("&lt;%-entry%&gt;")</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">(&#123;</span></span><br><span class="line"><span class="string">    "&lt;%-entry%&gt;": (function(module, exports) &#123;</span></span><br><span class="line"><span class="string">        eval(\`&lt;%-script%&gt;\`);</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = ejs.render(template, &#123;</span><br><span class="line">    entry,</span><br><span class="line">    script</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// result为替换后的结果,最终要写到output中</span></span><br><span class="line">fs.writeFileSync(output, result)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'打包成功!'</span>);</span><br></pre></td></tr></table></figure><p>继续完善：如果打包文件中存在require()引入其他模块的情况，需要进行相关处理，首先我们采用webpack打包看一下原始打包结果，以下是基本骨架：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">require</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">            exports: &#123;&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, <span class="built_in">require</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">require</span>(<span class="built_in">require</span>.s = <span class="string">"./src/index.js"</span>);</span><br><span class="line">&#125;)</span><br><span class="line">(&#123;</span><br><span class="line">    <span class="string">"./src/index.js"</span>: (<span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">eval</span>(<span class="string">"const result = __webpack_require__(/*! ./a.js */ \"./src/a.js\")\r\nconsole.log(result);\n\n//# sourceURL=webpack:///./src/index.js?"</span>);</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="string">"./src/a.js"</span>: (<span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">eval</span>(<span class="string">"module.exports = 'hello'\n\n//# sourceURL=webpack:///./src/a.js?"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可见，在传入的参数中，不仅传入了入口文件<code>entry</code>，还传入了引入的其他模块。因此我们继续修改<code>mypack.js</code>，让其支持模块引入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">'ejs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> entry = <span class="string">'./src/index.js'</span></span><br><span class="line"><span class="keyword">const</span> output = <span class="string">'./dist/main.js'</span></span><br><span class="line"><span class="keyword">let</span> script = fs.readFileSync(entry, <span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增部分</span></span><br><span class="line"><span class="keyword">let</span> modules = []</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理依赖关系</span></span><br><span class="line"><span class="comment">// ?代表非贪婪捕获</span></span><br><span class="line"><span class="comment">// require('./a.js')</span></span><br><span class="line">script = script.replace(<span class="regexp">/require\(['"](.+?)['"]\)/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name = path.join(<span class="string">'./src/'</span>, <span class="built_in">arguments</span>[<span class="number">1</span>]) <span class="comment">// ./src/a.js</span></span><br><span class="line">    <span class="keyword">let</span> content = fs.readFileSync(name, <span class="string">'utf8'</span>)</span><br><span class="line">    modules.push(&#123;</span><br><span class="line">        name,</span><br><span class="line">        content</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`require('<span class="subst">$&#123;name&#125;</span>')`</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改template模板，采用ejs的循环模式</span></span><br><span class="line"><span class="keyword">let</span> template = <span class="string">`</span></span><br><span class="line"><span class="string">(function(modules) &#123;</span></span><br><span class="line"><span class="string">    function require(moduleId) &#123;</span></span><br><span class="line"><span class="string">        var module = &#123;</span></span><br><span class="line"><span class="string">            exports: &#123;&#125;</span></span><br><span class="line"><span class="string">        &#125;;</span></span><br><span class="line"><span class="string">        modules[moduleId].call(module.exports, module, module.exports, require);</span></span><br><span class="line"><span class="string">        return module.exports;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    return require(require.s = "&lt;%-entry%&gt;");</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">(&#123;</span></span><br><span class="line"><span class="string">    "&lt;%-entry%&gt;": (function(module, exports,require) &#123;</span></span><br><span class="line"><span class="string">        eval(\`&lt;%-script%&gt;\`);</span></span><br><span class="line"><span class="string">    &#125;),</span></span><br><span class="line"><span class="string">    &lt;%for(let i=0;i&lt;modules.length;i++)&#123;</span></span><br><span class="line"><span class="string">        let module=modules[i]%&gt;</span></span><br><span class="line"><span class="string">        "&lt;%-module.name%&gt;": (function(module, exports) &#123;</span></span><br><span class="line"><span class="string">            eval(\`&lt;%-module.content%&gt;\`);</span></span><br><span class="line"><span class="string">        &#125;),</span></span><br><span class="line"><span class="string">    &lt;%&#125;%&gt;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="keyword">let</span> result = ejs.render(template, &#123;</span><br><span class="line">    entry,</span><br><span class="line">    script,</span><br><span class="line">    modules <span class="comment">// 注意这里需要传入modules</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// result为替换后的结果,最终要写到output中</span></span><br><span class="line">fs.writeFileSync(output, result)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'打包成功!'</span>);</span><br></pre></td></tr></table></figure><p>再次打包，发现文件通过require引入其他模块成功！</p><p>接下来，再来支持<code>require(&#39;./index.css&#39;)</code>引入css样式文件，我们继续修改<code>mypack.js</code>，如果require文件是css文件，则对其内容进行处理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新增css-loader</span></span><br><span class="line"><span class="comment">// source是文件中的内容</span></span><br><span class="line"><span class="comment">// 新建style标签，放入css文件的内容，将style标签插入到head中</span></span><br><span class="line"><span class="keyword">let</span> styleLoader = <span class="function"><span class="keyword">function</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">        let style=document.createElement('style')</span></span><br><span class="line"><span class="string">        style.innerText=<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(source).replace(<span class="regexp">/\\r\\n/g</span>,<span class="string">''</span>)&#125;</span></span></span><br><span class="line"><span class="string">        document.head.appendChild(style)</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">script = script.replace(<span class="regexp">/require\(['"](.+?)['"]\)/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name = path.join(<span class="string">'./src/'</span>, <span class="built_in">arguments</span>[<span class="number">1</span>]) <span class="comment">// ./src/a.js</span></span><br><span class="line">    <span class="keyword">let</span> content = fs.readFileSync(name, <span class="string">'utf8'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这里我们做一下拦截</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/\.css$/</span>.test(name)) &#123;</span><br><span class="line">        content = styleLoader(content)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    modules.push(&#123;</span><br><span class="line">        name,</span><br><span class="line">        content</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`require('<span class="subst">$&#123;name&#125;</span>')`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>再次打包，发现可以成功引入css文件了！</p><h3 id="react-router实现"><a href="#react-router实现" class="headerlink" title="react-router实现"></a>react-router实现</h3><p><strong>hash路由原理</strong></p><p><code>window</code>绑定<code>hashchange</code>事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/a"</span>&gt;</span>a<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/b"</span>&gt;</span>b<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">window</span>.location.hash);</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>history路由原理</strong></p><p><code>window</code>绑定<code>popstate</code>事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">onclick</span>=<span class="string">"push('/a')"</span>&gt;</span>a<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">onclick</span>=<span class="string">"push('/b')"</span>&gt;</span>b<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">path</span>) </span>&#123;</span></span><br><span class="line">        history.pushState(&#123;</span><br><span class="line">            p: path</span><br><span class="line"><span class="javascript">        &#125;, <span class="literal">null</span>, path)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 浏览器前进和后退</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">'popstate'</span>, (e) =&gt; &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(e);</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>react中react-router的使用示例</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"><span class="keyword">import</span> &#123; HashRouter <span class="keyword">as</span> Router, Route &#125; <span class="keyword">from</span> <span class="string">'./react-router-dom'</span></span><br><span class="line"><span class="keyword">import</span> AAA <span class="keyword">from</span> <span class="string">'./AAA'</span></span><br><span class="line"><span class="keyword">import</span> BBB <span class="keyword">from</span> <span class="string">'./BBB'</span></span><br><span class="line"><span class="keyword">import</span> CCC <span class="keyword">from</span> <span class="string">'./CCC'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Router&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;Route path=<span class="string">'/aaa'</span> component=&#123;AAA&#125; exact=<span class="string">'true'</span>&gt;&lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Route path='/</span>bbb<span class="string">' component=&#123;BBB&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">          &lt;Route path='</span>/ccc<span class="string">' component=&#123;CCC&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/Router &gt;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">render(&lt;App /&gt;, window.root)</span></span><br></pre></td></tr></table></figure><p><strong>实现react-router</strong></p><p>下面我们开始实现react-router，开始吧！</p><p>新建<code>react-router-dom</code>文件夹，新建index.js，用来导出所有的class。</p><p>index.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> HashRouter <span class="keyword">from</span> <span class="string">'./HashRouter'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'./Router'</span></span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'./Link'</span></span><br><span class="line"><span class="keyword">import</span> Redirect <span class="keyword">from</span> <span class="string">'./Redirect'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; HashRouter, Router, Link, Redirect &#125;</span><br></pre></td></tr></table></figure><p>context.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">let</span> &#123; Provider, Consumer &#125; = React.createContext()</span><br><span class="line"><span class="keyword">export</span> &#123; Provider, Consumer &#125;</span><br></pre></td></tr></table></figure><p>HashRouter.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'./context'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">HashRouter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            location: &#123;</span><br><span class="line">                pathname: <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>) || <span class="string">'/'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        <span class="built_in">window</span>.location.hash = <span class="built_in">window</span>.location.hash || <span class="string">'/'</span></span><br><span class="line">        <span class="comment">// 监听hash变化重新设置状态</span></span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, () =&gt; &#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                location: &#123;</span><br><span class="line">                    ...this.state.location,</span><br><span class="line">                    pathname: <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>) || <span class="string">'/'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">let</span> value = &#123;</span><br><span class="line">            location: <span class="keyword">this</span>.state.location,</span><br><span class="line">            history: &#123;</span><br><span class="line">                push(to) &#123;</span><br><span class="line">                    <span class="built_in">window</span>.location.hash = to</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;Provider value=&#123;value&#125;&gt;</span><br><span class="line">                &#123;<span class="keyword">this</span>.props.children&#125;</span><br><span class="line">            &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>Router.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Consumer &#125; <span class="keyword">from</span> <span class="string">'./context'</span></span><br><span class="line"><span class="keyword">import</span> pathToReg <span class="keyword">from</span> <span class="string">'path-to-regexp'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Router</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Consumer&gt;</span><br><span class="line">        &#123;state =&gt; &#123;</span><br><span class="line">          <span class="comment">// path component是Route中传递的</span></span><br><span class="line">          <span class="keyword">let</span> &#123; path, <span class="attr">component</span>: Component, exact = <span class="literal">false</span> &#125; = <span class="keyword">this</span>.props</span><br><span class="line">          <span class="comment">// pathname是location中的</span></span><br><span class="line">          <span class="keyword">let</span> pathname = state.location.pathname</span><br><span class="line">          <span class="comment">// 根据path实现正则,通过正则匹配,这里可以使用path-to-regexp第三方包</span></span><br><span class="line">          <span class="keyword">let</span> reg = pathToReg(path, [], &#123; <span class="attr">end</span>: exact &#125;) <span class="comment">//end为true是路由精确匹配</span></span><br><span class="line">          <span class="keyword">let</span> result = pathname.match(reg)</span><br><span class="line">          <span class="keyword">if</span> (result) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Component</span>&gt;</span><span class="tag">&lt;/<span class="name">Component</span>&gt;</span></span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &lt;<span class="regexp">/Consumer&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>Link.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Consumer &#125; <span class="keyword">from</span> <span class="string">'./context'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Link</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    s</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Consumer&gt;</span><br><span class="line">        &#123;state =&gt; &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="xml">            const &#123; to &#125; = this.props //<span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"home"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">            state.location.history.push(to)</span></span><br><span class="line"><span class="xml">          &#125;&#125;&gt;&#123;this.props.children&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &lt;<span class="regexp">/Consumer&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>Redirect.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Consumer &#125; <span class="keyword">from</span> <span class="string">'./context'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Redirect</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Consumer&gt;</span><br><span class="line">        &#123;state =&gt; &#123;</span><br><span class="line">          state.history.push(<span class="keyword">this</span>.props.to)<span class="comment">//重定向</span></span><br><span class="line">          <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &lt;<span class="regexp">/Consumer&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>Switch.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Consumer &#125; <span class="keyword">from</span> <span class="string">'./context'</span></span><br><span class="line"><span class="keyword">import</span> pathToReg <span class="keyword">from</span> <span class="string">'path-to-regexp'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Router</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Consumer&gt;</span><br><span class="line">        &#123;state =&gt; &#123;</span><br><span class="line">          <span class="keyword">let</span> pathname = state.location.pathname</span><br><span class="line">          <span class="keyword">let</span> children = <span class="keyword">this</span>.props.children</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> child = children[i];</span><br><span class="line">            <span class="keyword">const</span> path = child.props.path || <span class="string">''</span></span><br><span class="line">            <span class="keyword">let</span> reg = pathToReg(path, [], &#123; <span class="attr">end</span>: <span class="string">'false'</span> &#125;)</span><br><span class="line">            <span class="keyword">if</span> (reg.test(pathname)) &#123;</span><br><span class="line">              <span class="keyword">return</span> child</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &lt;<span class="regexp">/Consumer&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>下面可以使用我们自己编写的react-router进行测试了~</p><h3 id="DOM-diff算法"><a href="#DOM-diff算法" class="headerlink" title="DOM diff算法"></a>DOM diff算法</h3><p><strong>dom diff</strong></p><p>根据两个虚拟dom创建出补丁, 描述改变的内容, 将这个补丁用来更新dom</p><p><strong>dom diff几种优化策略</strong></p><ol><li>更新时只比较同级,并不会跨层比较</li><li>同层变化能复用,使用key</li></ol><p>==index.js==</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    createElement,</span><br><span class="line">    render,</span><br><span class="line">    renderDOM</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'./element'</span></span><br><span class="line"><span class="keyword">import</span> diff <span class="keyword">from</span> <span class="string">'./diff'</span></span><br><span class="line"><span class="keyword">import</span> patch <span class="keyword">from</span> <span class="string">'./patch'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> virtualDOM1 = createElement(<span class="string">'ul'</span>, &#123;</span><br><span class="line">    class: 'list'</span><br><span class="line">&#125;, [</span><br><span class="line">    createElement(<span class="string">'li'</span>, &#123;<span class="attr">class</span>: <span class="string">'item'</span>&#125;, [<span class="string">'a'</span>]),</span><br><span class="line">    createElement(<span class="string">'li'</span>, &#123;<span class="attr">class</span>: <span class="string">'item'</span>&#125;, [<span class="string">'b'</span>]),</span><br><span class="line">    createElement(<span class="string">'li'</span>, &#123;<span class="attr">class</span>: <span class="string">'item'</span>&#125;, [<span class="string">'c'</span>])</span><br><span class="line">])</span><br><span class="line"><span class="keyword">let</span> virtualDOM2 = createElement(<span class="string">'ul'</span>, &#123;</span><br><span class="line">    class: 'list-group'</span><br><span class="line">&#125;, [</span><br><span class="line">    createElement(<span class="string">'li'</span>, &#123;<span class="attr">class</span>: <span class="string">'item'</span>&#125;, [<span class="string">'1'</span>]),</span><br><span class="line">    createElement(<span class="string">'li'</span>, &#123;<span class="attr">class</span>: <span class="string">'item'</span>&#125;, [<span class="string">'2'</span>]),</span><br><span class="line">    createElement(<span class="string">'div'</span>, &#123;<span class="attr">class</span>: <span class="string">'item'</span>&#125;, [<span class="string">'c'</span>])</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> el = render(virtualDOM)</span><br><span class="line">renderDOM(el, <span class="built_in">window</span>.root)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给元素打补丁，重新更新视图</span></span><br><span class="line"><span class="keyword">let</span> patches = diff(virtualDOM1, virtualDOM2)</span><br><span class="line">patch(el, patches)</span><br><span class="line"></span><br><span class="line">此时的dom diff策略还存在很多问题：</span><br><span class="line"><span class="number">1.</span> 如果同级只是交换节点位置，会导致重新渲染（应该只是交换位置）</span><br><span class="line"><span class="number">2.</span> 新增节点也不会被更新</span><br></pre></td></tr></table></figure><p>在index.js中，我们创建了两个虚拟dom，故意修改了一些属性值、标签名、文本，以测试后面要实现的diff、patch方法。</p><p>首先我们实现createElement（创建虚拟dom）、render（将虚拟dom转化为真实dom）、renderDOM（将元素节点插入到页面上）这几个方法。</p><p>==element.js==</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 虚拟dom元素</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(type, props, children) &#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type</span><br><span class="line">        <span class="keyword">this</span>.props = props</span><br><span class="line">        <span class="keyword">this</span>.children = children</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建虚拟dom</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">type, props, children</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Element(type, props, children)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置属性</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setAttr</span>(<span class="params">node, key, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'value'</span>:</span><br><span class="line">            <span class="keyword">if</span> (node.tagName.toLowerCase === <span class="string">'input'</span> || node.tagName.toLowerCase === <span class="string">'textarea'</span>) &#123;</span><br><span class="line">                node.value = value</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node.setAttribute(key, value)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'style'</span>:</span><br><span class="line">            node.style.cssText = value</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            node.setAttribute(key, value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将vnode转化为真实dom</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">eleObj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> el = <span class="built_in">document</span>.createElement(eleObj.type)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> eleObj.props) &#123;</span><br><span class="line">        <span class="comment">// 设置属性的方法</span></span><br><span class="line">        setAttr(el, key, eleObj.props[key])</span><br><span class="line">    &#125;</span><br><span class="line">    eleObj.children.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">        child = (child <span class="keyword">instanceof</span> Element) ? render(child) : <span class="built_in">document</span>.createTextNode(child)</span><br><span class="line">        el.appendChild(child)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> el</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将元素插入到页面内</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderDOM</span>(<span class="params">el, target</span>) </span>&#123;</span><br><span class="line">    target.appendChild(el)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    createElement,</span><br><span class="line">    render,</span><br><span class="line">    Element,</span><br><span class="line">    renderDOM,</span><br><span class="line">    setAttr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：在设置元素属性时，因为不同类型的元素设置属性方法不同，因此采用setAttr函数统一设置。</p><p>目前为止，我们已经实现了创建虚拟dom，并将虚拟dom转化为真实dom渲染到页面中，接下来我们实现核心的diff算法：</p><p>首先我们需要制定规则：</p><ol><li>当节点类型相同时,看属性是否相同,产生属性补丁包,{type;’ATTES’,attrs:{class:’list’}}</li><li>新的dom不存在,{type;’REMOVE’,index:xx}</li><li>节点类型不相同,直接替换,{type;’REPLACE’,newNode:newNode}</li><li>文本内容变化,{type;’TEXT’,text:’xxx’}</li><li>……</li></ol><p>==diff.js==</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ATTRS = <span class="string">'ATTRS'</span></span><br><span class="line"><span class="keyword">const</span> REMOVE = <span class="string">'REMOVE'</span></span><br><span class="line"><span class="keyword">const</span> REPLACE = <span class="string">'REPLACE'</span></span><br><span class="line"><span class="keyword">const</span> TEXT = <span class="string">'TEXT'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 深度遍历</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">diff</span>(<span class="params">oldTree, newTree</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> patches = &#123;&#125;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    walk(oldTree, newTree, index, patches)</span><br><span class="line">    <span class="keyword">return</span> patches</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">walk</span>(<span class="params">oldNode, newNode, index, patches</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> currentPatch = [] <span class="comment">//每个元素都有一个补丁对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!newNode) &#123; <span class="comment">// 2. 新节点被删除</span></span><br><span class="line">        currentPatch.push(&#123;</span><br><span class="line">            type: REMOVE,</span><br><span class="line">            index</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_isString(oldNode) &amp;&amp; _isString(newNode)) &#123; <span class="comment">// 4. 判断文本是否变化</span></span><br><span class="line">        <span class="keyword">if</span> (oldNode !== newNode) &#123;</span><br><span class="line">            currentPatch.push(&#123;</span><br><span class="line">                type: TEXT,</span><br><span class="line">                text: newNode</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldNode.nodeType === newNode.nodeType) &#123; <span class="comment">// 1. 比较属性是否有更改</span></span><br><span class="line">        <span class="keyword">let</span> attrs = _diffAttr(oldNode.props, newNode.props)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Object</span>.keys(attrs).length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            currentPatch.pusH(&#123;</span><br><span class="line">                TYPE: ATTRS,</span><br><span class="line">                attrs</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果有子节点,遍历子节点</span></span><br><span class="line">        _diffChildren(oldNode.children, newNode.children, index, patches)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">//3.节点被替换</span></span><br><span class="line">        currentPatch.push(&#123;</span><br><span class="line">            type: REPLACE,</span><br><span class="line">            newNode</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (currentPatch.length &gt; <span class="number">0</span>) &#123; <span class="comment">//当前元素确实有补丁</span></span><br><span class="line">        <span class="comment">// 将元素和补丁对应起来,放到大补丁包中</span></span><br><span class="line">        patches[index] = currentPatch</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_diffAttr</span>(<span class="params">oldAttrs, newAttrs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> patch = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 直接判断老属性和新属性关系</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> oldAttrs) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oldAttrs[key] !== newAttrs[key]) &#123;</span><br><span class="line">            patch[key] = newAttrs[key] <span class="comment">//有可能是undefined</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 老节点没有新节点的属性</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> newAttrs) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!oldAttrs.hasOwnProperty(key)) &#123;</span><br><span class="line">            patch[key] = newAttrs[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> patch</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_isString</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.props.toString.call(node) === <span class="string">'[object String]'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_diffChildren</span>(<span class="params">oldChildren, newChildren, index, patches</span>) </span>&#123;</span><br><span class="line">    oldChildren.forEach(<span class="function">(<span class="params">child, idx</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// index每次传给walk时,index是递增的,定义全局变量Index，所有的基于同一序号实现</span></span><br><span class="line">        walk(child, newChildren[idx], ++Index, patches)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> diff</span><br></pre></td></tr></table></figure><p>通过diff方法，我们能对两个虚拟dom产生完整的patches对象（详细记录了更改信息），以便后续的更新操作。</p><p>接下来，我们实现patch方法，根据patches对象，完成真实dom的更新工作：</p><p>==patch.js==</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    Element,</span><br><span class="line">    render,</span><br><span class="line">    setAttr</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'./element'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> allPatches</span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ATTRS = <span class="string">'ATTRS'</span></span><br><span class="line"><span class="keyword">const</span> REMOVE = <span class="string">'REMOVE'</span></span><br><span class="line"><span class="keyword">const</span> REPLACE = <span class="string">'REPLACE'</span></span><br><span class="line"><span class="keyword">const</span> TEXT = <span class="string">'TEXT'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">patch</span>(<span class="params">node, patches</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 给元素打补丁</span></span><br><span class="line">    allPatches = patches</span><br><span class="line">    walk(node)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">walk</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> currentPatch = allPatches[index++]</span><br><span class="line">    <span class="keyword">let</span> childNodes = node.childNodes</span><br><span class="line">    childNodes.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">        walk(child)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (currentPatch) &#123;</span><br><span class="line">        doPatch(node, currentPatch)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doPatch</span>(<span class="params">node, patches</span>) </span>&#123;</span><br><span class="line">    patches.forEach(<span class="function"><span class="params">patch</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (patch.type) &#123;</span><br><span class="line">            <span class="keyword">case</span> ATTRS:</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> patch.attrs) &#123;</span><br><span class="line">                    <span class="keyword">let</span> value = patch.attrs[key]</span><br><span class="line">                    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">                        setAttr(node, key, value)</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;<span class="comment">//  如果属性值为undefined则直接删除属性</span></span><br><span class="line">                        node.removeAttribute(key)</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> REMOVE:</span><br><span class="line">                node.parentNode.removeChild(node)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> REPLACE:</span><br><span class="line">                <span class="keyword">let</span> newNode = patch.newNode <span class="keyword">instanceof</span> Element ? render(patch.newNode) : <span class="built_in">document</span>.createTextNode(patch.newNode)</span><br><span class="line">                node.parentNode.replaceChild(newNode, node)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> TEXT:</span><br><span class="line">                node.textContent = patch.text</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> patch</span><br></pre></td></tr></table></figure><p>终于完成啦！可以愉快地使用index.js进行测试了~</p><p>但是此时的dom diff策略还存在很多问题：</p><ol><li>如果同级只是交换节点位置，会导致重新渲染（应该只是交换位置）</li><li>新增节点也不会被更新</li><li>……</li></ol><p><strong>思考：</strong> 如何解决？</p><h3 id="vue中mvvm深度解读"><a href="#vue中mvvm深度解读" class="headerlink" title="vue中mvvm深度解读"></a>vue中mvvm深度解读</h3><p><strong>我们先实现一个小巧简单的mvvm框架吧~ Let’s do it！</strong></p><p>==index.html==（script引入我们自己的mvvm框架）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 双向数据绑定 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">'msg'</span>&gt;</span> &#123;&#123;msg&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;script src="node_modules/vue/dist/vue.min.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./watcher.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./observer.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./compile.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./mvvm.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// mvvm如何实现？</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// vue中实现双向绑定 1.模板编译 2.数据劫持 3.Watcher</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> MVVM(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>, <span class="comment">//el:document.getElementById('app')</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            msg: <span class="string">'hello'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>==mvvm.js==</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MVVM</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">        <span class="comment">// 先把可用的东西挂载到实例上</span></span><br><span class="line">        <span class="keyword">this</span>.$el = options.el</span><br><span class="line">        <span class="keyword">this</span>.$data = options.data</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果有要编译的模板就开始编译</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.$el) &#123;</span><br><span class="line">            <span class="comment">// 数据劫持，把对象的所有属性改为get、set</span></span><br><span class="line">            <span class="keyword">new</span> Observer(<span class="keyword">this</span>.$data)</span><br><span class="line">            <span class="keyword">this</span>.proxyData(<span class="keyword">this</span>.$data)</span><br><span class="line">                <span class="comment">// 用数据和元素进行编译</span></span><br><span class="line">            <span class="keyword">new</span> Compile(<span class="keyword">this</span>.$el, <span class="keyword">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 代理数据，因为用户可能要通过this.msg取值，而不是this.$data.msg取值</span></span><br><span class="line">    proxyData(data) &#123;</span><br><span class="line">        <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, key, &#123;</span><br><span class="line">                <span class="keyword">get</span>() &#123;</span><br><span class="line">                    <span class="keyword">return</span> data[key]</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="keyword">set</span>(newVal) &#123;</span><br><span class="line">                    data[key] = newVal</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==compile.js==</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Compile</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(el, vm) &#123;</span><br><span class="line">        <span class="keyword">this</span>.el = <span class="keyword">this</span>.isElementNode(el) ? el : <span class="built_in">document</span>.querySelector(el)</span><br><span class="line">        <span class="keyword">this</span>.vm = vm</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.el) &#123;</span><br><span class="line">            <span class="comment">// 1. 先把真实的dom移入到内存，放到fragment</span></span><br><span class="line">            <span class="keyword">let</span> fragment = <span class="keyword">this</span>.node2Fragment(<span class="keyword">this</span>.el)</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 编译——提取想要的元素节点和文本节点 v-model &#123;&#123;&#125;&#125;</span></span><br><span class="line">            <span class="keyword">this</span>.compile(fragment)</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 把编译好的element放回页面</span></span><br><span class="line">            <span class="keyword">this</span>.el.appendChild(fragment)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 辅助方法</span></span><br><span class="line"></span><br><span class="line">    isElementNode(node) &#123;</span><br><span class="line">        <span class="keyword">return</span> node.nodeType === <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    isDirective(name) &#123;</span><br><span class="line">        <span class="keyword">return</span> name.includes(<span class="string">'v-'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 核心方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将el元素内容全部放入内存</span></span><br><span class="line">    node2Fragment(el) &#123;</span><br><span class="line">        <span class="keyword">let</span> fragment = <span class="built_in">document</span>.createDocumentFragment() <span class="comment">//文档碎片</span></span><br><span class="line">        <span class="keyword">let</span> firstChild</span><br><span class="line">        <span class="keyword">while</span> (firstChild = el.firstChild) &#123;</span><br><span class="line">            fragment.appendChild(firstChild)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fragment</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 编译</span></span><br><span class="line">    compile(fragment) &#123;</span><br><span class="line">        <span class="comment">// childNodes拿不到嵌套子节点，需要使用递归</span></span><br><span class="line">        <span class="keyword">let</span> childNodes = fragment.childNodes</span><br><span class="line">        <span class="built_in">Array</span>.from(childNodes).forEach(<span class="function"><span class="params">node</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 元素节点</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.isElementNode(node)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.compileElement(node)</span><br><span class="line">                <span class="keyword">this</span>.compile(node) <span class="comment">// 需要深入检查， 使用递归</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 文本节点</span></span><br><span class="line">                <span class="keyword">this</span>.compileText(node)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 编译元素 v-model、v-text等</span></span><br><span class="line">    compileElement(node) &#123;</span><br><span class="line">        <span class="keyword">let</span> attrs = node.attributes</span><br><span class="line">        <span class="built_in">Array</span>.from(attrs).forEach(<span class="function"><span class="params">attr</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 判断属性名字是否包含v-</span></span><br><span class="line">            <span class="keyword">let</span> attrName = attr.name</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.isDirective(attrName)) &#123;</span><br><span class="line">                <span class="keyword">let</span> expr = attr.value <span class="comment">//expr是指令的值</span></span><br><span class="line">                    <span class="comment">// node this.vm.$data expr</span></span><br><span class="line">                    <span class="comment">//取到v-后面的名称，如v-model的model，v-text的text等等</span></span><br><span class="line">                    <span class="comment">// let type = attrName.slice(2)</span></span><br><span class="line">                <span class="keyword">let</span> [, type] = attrName.split(<span class="string">'-'</span>)</span><br><span class="line">                Compileutil[type](node, <span class="keyword">this</span>.vm, expr)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 编译文本，&#123;&#123;&#125;&#125;</span></span><br><span class="line">    compileText(node) &#123;</span><br><span class="line">        <span class="keyword">let</span> expr = node.textContent</span><br><span class="line">        <span class="keyword">let</span> reg = <span class="regexp">/\&#123;\&#123;([^&#125;]+)\&#125;\&#125;/g</span> <span class="comment">//匹配&#123;&#123;&#125;&#125;</span></span><br><span class="line">        <span class="keyword">if</span> (reg.test(expr)) &#123;</span><br><span class="line">            <span class="comment">// node this.vm.$data expr</span></span><br><span class="line">            <span class="keyword">const</span> type = <span class="string">'text'</span></span><br><span class="line">            Compileutil[type](node, <span class="keyword">this</span>.vm, expr)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Compileutil = &#123;</span><br><span class="line">    <span class="comment">// 获取实例上对应的数据，如msg.a.b=&gt;'hello'</span></span><br><span class="line">    <span class="comment">// msg.a.b=&gt;this.$data.msg=&gt;this.$data.msg.a=&gt;this.$data.msg.a.b</span></span><br><span class="line">    getVal(vm, expr) &#123;</span><br><span class="line">        expr = expr.split(<span class="string">'.'</span>)</span><br><span class="line">        <span class="keyword">return</span> expr.reduce(<span class="function">(<span class="params">prev, next</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> prev[next]</span><br><span class="line">        &#125;, vm.$data)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 获取编译文本后的结果，如&#123;&#123;msg&#125;&#125;=&gt;'hello'</span></span><br><span class="line">    getTextVal(vm, expr) &#123;</span><br><span class="line">        <span class="keyword">return</span> expr.replace(<span class="regexp">/\&#123;\&#123;([^&#125;]+)\&#125;\&#125;/g</span>, (...arguments) =&gt; &#123;</span><br><span class="line">            <span class="comment">// arguments[1]是正则匹配括号内容，如&#123;&#123;msg&#125;&#125;的msg</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.getVal(vm, <span class="built_in">arguments</span>[<span class="number">1</span>])</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 赋值</span></span><br><span class="line">    <span class="comment">// 例如给msg.a.b赋新值，则取到最后再赋value值</span></span><br><span class="line">    setVal(vm, expr, value) &#123;</span><br><span class="line">        expr = expr.split(<span class="string">'.'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> expr.reduce(<span class="function">(<span class="params">prev, next, curIndex</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (curIndex === expr.length - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> prev[next] = value</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, vm.$data)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 文本处理</span></span><br><span class="line">    text(node, vm, expr) &#123;</span><br><span class="line">        <span class="keyword">let</span> updateFn = <span class="keyword">this</span>.update[<span class="string">'textUpdater'</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拿到&#123;&#123;a&#125;&#125;&#123;&#123;b&#125;&#125;的a、b</span></span><br><span class="line">        expr.replace(<span class="regexp">/\&#123;\&#123;([^&#125;]+)\&#125;\&#125;/g</span>, (...arguments) =&gt; &#123;</span><br><span class="line">            <span class="keyword">new</span> Watcher(vm, <span class="built_in">arguments</span>[<span class="number">1</span>], newVal =&gt; &#123;</span><br><span class="line">                <span class="comment">// 如果数据变化了， 文本节点需要重新获取依赖的数据来更新文本节点</span></span><br><span class="line">                updateFn &amp;&amp; updateFn(node, <span class="keyword">this</span>.getTextVal(vm, expr))</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> value = <span class="keyword">this</span>.getTextVal(vm, expr)</span><br><span class="line">        updateFn &amp;&amp; updateFn(node, value)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 输入框处理 </span></span><br><span class="line">    model(node, vm, expr) &#123;</span><br><span class="line">        <span class="keyword">let</span> updateFn = <span class="keyword">this</span>.update[<span class="string">'modelUpdater'</span>]</span><br><span class="line">            <span class="comment">// 这里应该加一个监控，数据变化时，应该调用watcher的callback，将新值传递过来</span></span><br><span class="line">        <span class="keyword">new</span> Watcher(vm, expr, newVal =&gt; &#123;</span><br><span class="line">            updateFn &amp;&amp; updateFn(node, <span class="keyword">this</span>.getVal(vm, expr))</span><br><span class="line">        &#125;)</span><br><span class="line">        updateFn &amp;&amp; updateFn(node, <span class="keyword">this</span>.getVal(vm, expr))</span><br><span class="line">        node.addEventListener(<span class="string">'input'</span>, e =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> newVal = e.target.value</span><br><span class="line">            <span class="keyword">this</span>.setVal(vm, expr, newVal)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    update: &#123;</span><br><span class="line">        <span class="comment">// 文本更新</span></span><br><span class="line">        textUpdater(node, value) &#123;</span><br><span class="line">            node.textContent = value</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 输入框更新</span></span><br><span class="line">        modelUpdater(node, value) &#123;</span><br><span class="line">            node.value = value</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==observer.js==</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(data) &#123;</span><br><span class="line">        <span class="keyword">this</span>.observe(data)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将data数据原有的属性改为get和set的形式</span></span><br><span class="line">    observe(data) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!data || <span class="keyword">typeof</span> data !== <span class="string">'object'</span>) <span class="keyword">return</span></span><br><span class="line">        <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 开始劫持</span></span><br><span class="line">            <span class="keyword">this</span>.defineReactive(data, key, data[key])</span><br><span class="line">                <span class="comment">// 如果劫持的是对象，还要对对象内的属性继续劫持</span></span><br><span class="line">            <span class="keyword">this</span>.observe(data[key])</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义响应式</span></span><br><span class="line">    defineReactive(data, key, value) &#123;</span><br><span class="line">        <span class="keyword">let</span> _this = <span class="keyword">this</span></span><br><span class="line">        <span class="keyword">let</span> dep = <span class="keyword">new</span> Dep() <span class="comment">//每个变化的数据都会对应一个数组，这个数组是存放所有更新的操作</span></span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">            enumerable: <span class="literal">true</span>,</span><br><span class="line">            configurable: <span class="literal">true</span>,</span><br><span class="line">            <span class="keyword">get</span>() &#123;</span><br><span class="line">                Dep.target &amp;&amp; dep.addSub(Dep.target)</span><br><span class="line">                <span class="keyword">return</span> value</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="keyword">set</span>(newValue) &#123;</span><br><span class="line">                <span class="keyword">if</span> (newValue !== value) &#123;</span><br><span class="line">                    <span class="comment">// 设置新值时，如果是对象仍然需要劫持</span></span><br><span class="line">                    _this.observe(newValue)</span><br><span class="line">                    value = newValue</span><br><span class="line">                    dep.notify() <span class="comment">//通知所有订阅者数据变化了</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==watcher.js==</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 观察者，给需要变化的dom元素增加观察者</span></span><br><span class="line"><span class="comment">// 用新值和旧值进行比对，如果发生变化，执行对应的方法</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(vm, expr, cb) &#123;</span><br><span class="line">        <span class="keyword">this</span>.vm = vm</span><br><span class="line">        <span class="keyword">this</span>.expr = expr</span><br><span class="line">        <span class="keyword">this</span>.cb = cb</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.value = <span class="keyword">this</span>.get()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取实例上对应的数据，如msg.a.b=&gt;'hello'</span></span><br><span class="line">    getVal(vm, expr) &#123;</span><br><span class="line">        expr = expr.split(<span class="string">'.'</span>)</span><br><span class="line">        <span class="keyword">return</span> expr.reduce(<span class="function">(<span class="params">prev, next</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> prev[next]</span><br><span class="line">        &#125;, vm.$data)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span>() &#123;</span><br><span class="line">        Dep.target = <span class="keyword">this</span></span><br><span class="line">        <span class="keyword">let</span> value = <span class="keyword">this</span>.getVal(<span class="keyword">this</span>.vm, <span class="keyword">this</span>.expr)</span><br><span class="line">        Dep.target = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对外暴露的方法</span></span><br><span class="line">    update() &#123;</span><br><span class="line">        <span class="keyword">let</span> newVal = <span class="keyword">this</span>.getVal(<span class="keyword">this</span>.vm, <span class="keyword">this</span>.expr)</span><br><span class="line">        <span class="keyword">let</span> oldVal = <span class="keyword">this</span>.value</span><br><span class="line">        <span class="keyword">if</span> (newVal !== oldVal) &#123;</span><br><span class="line">            <span class="keyword">this</span>.cb(newVal)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布订阅</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="comment">// 订阅数组</span></span><br><span class="line">        <span class="keyword">this</span>.subs = []</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加订阅</span></span><br><span class="line">    addSub(watcher) &#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.push(watcher)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    notify() &#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="params">watcher</span> =&gt;</span> &#123;</span><br><span class="line">            watcher.update()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试html页面，可以成功实现mvvm，view和model已经完成了双向绑定。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端进阶必知必会</title>
      <link href="/2019/11/14/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"/>
      <url>/2019/11/14/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/</url>
      
        <content type="html"><![CDATA[<h4 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h4><p><a href="http://note.youdao.com/noteshare?id=24e9d3cdd8febbf4104baf0601aaf444&sub=CE7C12D4C8E24370B7DAB28DE7A1C7F7" target="_blank" rel="noopener">源码研读系列</a></p><ul><li>jquery源码分析（面向对象式编程）</li><li>express源码分析</li><li>underscore源码分析（函数式编程）</li><li>vue源码分析（双向数据绑定、响应式原理、编译原理）</li></ul><p><a href="http://note.youdao.com/noteshare?id=fa23dd3d2ff21b4bd25221c9b7796101&sub=10C0B3F7EC354C8190A92A3EDC03640F" target="_blank" rel="noopener">js高级系列</a></p><ul><li>深究剖析闭包原理及应用场景</li><li>解密V8引擎运行机制原理（掌握GO/AO）</li><li>前端模板引擎 - 微引擎开发</li><li>v8引擎内存优化（了解v8引擎内存回收机制，掌握内存优化技巧）</li><li>前端i18n国际化开发技术（多语言支持如何实现）</li><li>剖析new运算符</li><li>实现一个驱动模块框架（第三方库开发思维）</li><li>性能优化Cache架构（第三方库开发思维）</li><li>深究剖析闭包原理及应用场景</li></ul><p><a href="http://note.youdao.com/noteshare?id=dad701e838d283ff01fccf556df25c5a&sub=CFF8F1337D1F441EA7342A3D1DEAFBE3" target="_blank" rel="noopener">js进阶</a></p><p><a href="http://note.youdao.com/noteshare?id=16623d3c11c9d0baa6954629b75addc6&sub=527D7282BBD84839B26336BED13508E9" target="_blank" rel="noopener">webpack系列（手写loader、plugin）</a></p><ul><li>手写webpack（简易版，并不涉及内部原理，这里只实现了单纯的替换）</li><li>手写loader（对单类型文件作统一解析处理）</li><li>手写plugin（需要针对整个构建流程作处理，并非对单类型文件作处理）</li></ul><p><a href="http://note.youdao.com/noteshare?id=ff4ffa452ed4e9833b02ac597b27267c&sub=9731D2296E7845BABB108B066D0F9587" target="_blank" rel="noopener">vue高级应用和vue3.0的到来</a></p><ul><li>vue高级应用场景（包括render函数运用、批量注册全局组件、自动化注册路由、路由懒加载）</li><li>大型vue项目的api层如何封装（api层设计、axios二次封装）</li><li>vue3.0的变化</li><li>vue3更快的 Virtual DOM 新策略优化</li><li>Vue的优化技巧（打包速度优化、路由优化）</li></ul><p><a href="http://note.youdao.com/noteshare?id=7846e739acece4f1ecce5f0d7c9b3bf3&sub=8709B9F4D1AC4CE2B5674DBB1A1913D1" target="_blank" rel="noopener">vue插件和UI库编写</a></p><ul><li>编写vuex（简易版）</li><li>编写vuex异步插件（掌握vue插件编写的整个流程）</li><li>实现vue-cli3的UI库</li><li>搭建自己的vue-cli（实现自己的代码下载工具）</li><li>手写vue-router</li></ul><p><a href="http://note.youdao.com/noteshare?id=7d76b4426aa29dc6d897e0a347662c15&sub=034228F616F3421A8D38FA5C73316F7E" target="_blank" rel="noopener">前端优化策略</a></p><ul><li>懒加载与预加载的原理和实现-. webpack做模块懒加载（模块异步加载）</li><li>前端还有哪些优化策略？</li></ul><p><a href="http://note.youdao.com/noteshare?id=326804064be687c5a23315deb70506c3&sub=5F290EA00FB145AB95744356F9BD6ED2" target="_blank" rel="noopener">前端开发模式变化</a></p><ul><li>未来的开发模式（mvc时代-&gt;mvvm时代-&gt;中间层时代）</li><li>基于NodeJS打造Web中间层</li></ul><p><a href="http://note.youdao.com/noteshare?id=03464998d761636d7c6a42c2f52e9025&sub=AB15F259C57C4C4FA9C89F03859CC687" target="_blank" rel="noopener">高并发系统架构解决方案</a></p><ul><li>高并发系统架构技术（了解高并发情况下的处理方案）</li></ul><p>react分享系列</p><ul><li><a href="https://github.com/brickspert/blog/issues/1" target="_blank" rel="noopener">从零搭建React全家桶框架教程</a>——<a href="https://iloveyou11.github.io/2019/10/30/%E4%BB%8E0%E6%90%AD%E5%BB%BAreact%E7%8E%AF%E5%A2%83/" target="_blank" rel="noopener">PS.我的笔记</a></li><li><a href="https://www.bilibili.com/video/av74527572" target="_blank" rel="noopener">手写react</a>——<a href="https://github.com/iloveyou11/my-react" target="_blank" rel="noopener">PS.github地址</a></li></ul><h4 id="成长建议"><a href="#成长建议" class="headerlink" title="成长建议"></a>成长建议</h4><p><strong>【成长焦虑问题】</strong><br><strong>1. 业务思考</strong></p><p>明白业务和公司目标，做这个需求可以参与到需求的早期阶段，深入思考为什么我们提出这个需求，这个需求解决了什么业务问题，有没有更好的方案，而不是拿到一个方案我只是个代码的实现者。如果针对需求有一些不知道的地方，可以向产品经理、运营请教，并且技术是一定要服务于业务的，有时候我们可以通过技术手段来提升业务价值</p><p><strong>2. 技术思考</strong></p><p>我们在开发的过程中肯定会有各种各样的痛点，学会用技术的手段去优化业务开发的流程，来提升开发效率。有时候业务项目很多都是大同小异的，我们可以针对项目量身定做一套脚手架工具</p><p><strong>3. 优化工作流程</strong></p><p>不仅要熟悉从需求到开发、联调、测试、上线每个功能环节，还是思考每个环节有没有提升点，特别是上线过程，能不能做到自动化，能不能做到小流量发布，能不能即使回滚代码，能不能做增量发布，这些都值得我们去思考去优化。看看大公司的经验分享，看能不能移植到自己的业务中。</p><p><strong>4. 技术分享</strong></p><p>主动进行技术分享，把工作中遇到的问题、解决方案、学习到的新技术、产生总结下来，作为组内的技术分享输出，好一点的话可以对外输出。一是可以沉淀自己的技术，二是大家可以知道你做的东西，并且可以活跃组内的技术氛围。另外还可以锻炼自己的语言表述能力，这一点对于未来的职业发展是非常重要的</p><p><strong>【技术追求】</strong><br><strong>1. 主动承担有挑战的事情</strong></p><p>不满足于我们完成的日常需求，如果这些重复劳动对自己的成长空间已经很小了，我们可以和leader主动申请去做一些具有个人挑战的事情，可以学到更多的东西，跳出自己的舒适圈</p><p><strong>2. 积极优化重构自己的代码</strong></p><p>可以学习优秀的源码作为参考，追求高质量代码，不断去优化去重构自己的代码，而且注意重构要趁早，否则后面再去优化就会很困难</p><p><strong>3. 对技术背后实现的原理有探究的兴趣</strong></p><p>要研究自己工作中相关技术背后的原理，深入到源码，这样之后再遇到一些坑可以很轻松地解决，节约了工作中调bug的实践，同时也能让自己的技能得到提升</p><p><strong>4. 写高质量的技术博文</strong></p><p>这也是一个不断锻炼的过程，写文章的过程中，我们对一些原理一些细节是很较真的，这有助于自己更加深入地掌握相关的知识，好的文章对外输出也可以帮助自己提高一定的技术影响力</p><p>为什么会有35岁中年危机？如果一个人到了35岁，还和工作两三年的人差不太多，你的精力是敌不过那些年轻人的，这时就让自己沦为下风，公司就不会选择留你。如果要摆脱这个危机，就需要自己不断学习，如果35岁能成为非常厉害的大牛，是会非常吃香的。终其原因是自己的能力达不到，使自己陷入了35岁中年危机。如何持续学习？</p><p><strong>【持续学习】</strong><br><strong>1. 应该学习的内容</strong></p><p>学习内容一定要和工作相关，不要脱离工作实践。如游戏、webgl，如果工作中用不到这些点，没必要我花费太大的精力去学习这些方向。这一点大家要注意。而且学习内容一定要拿到工作中去反复验证的。</p><p><strong>2. 掌握好的学习方法</strong></p><p>梳理知识点，不要毫无目的地去学习</p><p><strong>3. 思考和反馈</strong></p><p>始终保持好奇心，在工作中善于发现问题</p><p><strong>4. 知识付费</strong></p><p>需要有经验的人为你作指导</p><p><strong>【成长路线】</strong></p><p>市场对于高级人才是非常稀缺的。我们可以花几年时间去彻底研究透某个领域，对于刚工作的人来说这是非常重要的，因为只有在一个领域打通了才谈得上跨领域迁移去扩展自己的知识面。以下是技术路线和管理路线：</p><ol><li>工程师</li><li>高级工程师</li><li>资深工程师</li><li>技术专家、前端架构师</li><li>前端团队技术负责人</li><li>部门负责人</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式进阶训练</title>
      <link href="/2019/11/13/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83/"/>
      <url>/2019/11/13/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83/</url>
      
        <content type="html"><![CDATA[<p>正则在前端的世界里是多么重要，业务离不开它，二次封装离不开它，工具库也离不开它。想要提高自己的开发效率，那就马上拿下它！</p><a id="more"></a><p><strong>正则元字符</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">\ 转义字符</span><br><span class="line">^ 以……开头</span><br><span class="line">$ 以……结尾</span><br><span class="line">\n 换行符</span><br><span class="line">. 任意字符</span><br><span class="line">() 分组</span><br><span class="line">x|y x或y</span><br><span class="line">[xyz] x或y 或z</span><br><span class="line">[^xyz] 除了xyz三个中的任意字符</span><br><span class="line">[a-z] a-z之间的任意字符</span><br><span class="line">[^a-z] 除了a-z之间的任意字符</span><br><span class="line"></span><br><span class="line">\d 0-9之间的数字  \D 除了0-9之间以外的数字</span><br><span class="line">\b 一个边界符</span><br><span class="line">\w 数字、字母、下划线任意字符,等价于[0-9a-zA-Z_]</span><br><span class="line">\s 一个空白字符（空格、制表符、换页符……</span><br><span class="line"></span><br><span class="line">* 出现零到多次</span><br><span class="line">+ 出现一到多次</span><br><span class="line">? 出现零或一次</span><br><span class="line">&#123;n&#125; 出现n次</span><br><span class="line">&#123;n,&#125; 出现n到多次</span><br><span class="line">&#123;n,m&#125; 出现n到m次</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong><br>中括号[]</p><ol><li>在中括号[]中，出现的所有字符都是代表字符本身，不需要转义</li><li>中括号[]中不识别两位数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 验证有效数字</span></span><br><span class="line"><span class="comment">// 1、开头+、-可有可无</span></span><br><span class="line"><span class="comment">// 2、一位数0-9均可，多位数不能以0开头</span></span><br><span class="line"><span class="comment">// 3、小数点要么出现，后面必须带数字，要么不出现</span></span><br><span class="line"><span class="keyword">const</span> validNumberReg = <span class="regexp">/^[+-]?(\d|([1-9]\d))(\.\d+)?$/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证年龄18-65之间</span></span><br><span class="line"><span class="keyword">const</span> validAgeReg = <span class="regexp">/^(1[8-9]|[2-5]\d|6[0-5])$/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证邮箱</span></span><br><span class="line"><span class="comment">// 1、@左边：数字、字母、下划线、点.、中杠-</span></span><br><span class="line"><span class="comment">// 2、@右侧 带点.+字母（可出现一次或多次），如.com .cn .com.cn</span></span><br><span class="line"><span class="keyword">const</span> emailReg = <span class="regexp">/^[\w.-]+@[0-9a-zA-Z]+(\.[a-zA-Z]&#123;2,4&#125;)&#123;1,2&#125;$/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证身份证号</span></span><br><span class="line"><span class="keyword">const</span> idReg = <span class="regexp">/^\d&#123;17&#125;(\d|X)$/</span></span><br><span class="line">    <span class="comment">// 得到详细信息，使用正则捕获即可</span></span><br><span class="line"><span class="keyword">const</span> detailIdReg = <span class="regexp">/^(\d&#123;2&#125;)(\d&#123;4&#125;)(\d&#123;4&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)(\d)(\d|X)$/</span></span><br></pre></td></tr></table></figure><p><strong>正则懒惰性</strong>：每次lastIndex都为0，永远只捕获第一个数字，而不是全部匹配结果。</p><p><strong>解决懒惰性</strong>：加g，循环捕获即可，lastIndex会一直改变。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/\d+/</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">'sddefer333dvdfv12de45'</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str)); <span class="comment">//[ '333', index: 7, input: 'sddefer333dvdfv12', groups: undefined ]</span></span><br><span class="line"><span class="comment">// 解决懒惰性，加g，循环捕获即可，lastIndex会一直改变</span></span><br><span class="line"><span class="keyword">const</span> reg0 = <span class="regexp">/\d+/g</span></span><br><span class="line"><span class="keyword">let</span> arr = []</span><br><span class="line"><span class="keyword">let</span> res = reg0.exec(str)</span><br><span class="line"><span class="keyword">while</span> (res) &#123;</span><br><span class="line">    arr.push(res[<span class="number">0</span>])</span><br><span class="line">    res = reg0.exec(str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[ '333', '12', '45' ]</span></span><br></pre></td></tr></table></figure><p><strong>正则贪婪性</strong>：每次捕获都是按照匹配最长的结果捕获的。</p><p><strong>解决贪婪性</strong>：只需加？即可，取消正则捕获贪婪性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正则贪婪性，每次捕获都是按照匹配最长的结果捕获的</span></span><br><span class="line"><span class="keyword">const</span> reg1 = <span class="regexp">/\d+/g</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.exec(str)); <span class="comment">//不想得到333，只想得到3如何解决？</span></span><br><span class="line"><span class="comment">// 解决贪婪性，只需加？即可，取消正则捕获贪婪性</span></span><br><span class="line"><span class="keyword">const</span> reg2 = <span class="regexp">/\d+?/g</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.exec(str));</span><br><span class="line"><span class="comment">// 得到全部单个数字</span></span><br><span class="line"><span class="keyword">let</span> arr1 = []</span><br><span class="line"><span class="keyword">let</span> res1 = reg2.exec(str)</span><br><span class="line"><span class="keyword">while</span> (res1) &#123;</span><br><span class="line">    arr1.push(res1[<span class="number">0</span>])</span><br><span class="line">    res1 = reg2.exec(str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">//[ '3', '3', '3', '1', '2', '4', '5' ]</span></span><br></pre></td></tr></table></figure><p><strong>match方法</strong>：</p><p>虽然在当前情况下match比exec更加简洁好用，但是match也存在一些局限性<br>在分组捕获的情况下， match只能捕获到大正则匹配的内容，而无法捕获小正则捕获的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> r1 = <span class="regexp">/\d+?/g</span></span><br><span class="line"><span class="keyword">const</span> r2 = <span class="regexp">/\d+/g</span></span><br><span class="line"><span class="keyword">const</span> r3 = <span class="regexp">/\d+/</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(r1)); <span class="comment">//[ '3', '3', '3', '1', '2', '4', '5' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(r2)); <span class="comment">//[ '333', '12', '45' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(r3));</span><br><span class="line"><span class="comment">//[   '333',</span></span><br><span class="line"><span class="comment">//    index: 7,</span></span><br><span class="line"><span class="comment">//    input: 'sddefer333dvdfv12de45',</span></span><br><span class="line"><span class="comment">//    groups: undefined ]</span></span><br></pre></td></tr></table></figure><p><strong>分组捕获</strong></p><ol><li>改变默认的优先级</li><li>分组引用：\1代表和第一个分组出现一模一样的内容，\2代表和第二个分组出现一模一样的内容<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gReg0 = <span class="regexp">/^(\w)\1(\w)\2$/</span></span><br><span class="line"><span class="built_in">console</span>.log(gReg0.test(<span class="string">'yypp'</span>));</span><br><span class="line"><span class="comment">// 3、分组捕获，正则捕获的时候，不仅仅把大正则匹配的内容捕获到，也能把小正则匹配的内容捕获到</span></span><br><span class="line"><span class="keyword">const</span> gReg1 = <span class="regexp">/^(\d&#123;2&#125;)(\d&#123;4&#125;)(\d&#123;4&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)(\d)(\d|X)$/</span></span><br><span class="line"><span class="keyword">const</span> id = <span class="string">'422201199612120401'</span></span><br><span class="line"><span class="built_in">console</span>.log(gReg1.exec(id));</span><br><span class="line"><span class="comment">// ["422201199612120401", "42", "2201", "1996", "12", "12", "04", "0", "1", index: 0, input: "422201199612120401", groups: undefined]</span></span><br><span class="line"><span class="comment">// arr[0] 大正则匹配</span></span><br><span class="line"><span class="comment">// arr[1] 第一个分组匹配</span></span><br><span class="line"><span class="comment">// arr[2] 第二个分组匹配</span></span><br><span class="line"><span class="comment">// ……</span></span><br><span class="line"><span class="comment">// 如果需要不捕获其中某个分组匹配的内容，添加?:即可</span></span><br><span class="line"><span class="keyword">const</span> gReg2 = <span class="regexp">/^(\d&#123;2&#125;)(\d&#123;4&#125;)(\d&#123;4&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)(?:\d&#123;2&#125;)(\d)(?:\d|X)$/</span></span><br><span class="line"><span class="built_in">console</span>.log(gReg2.exec(id));</span><br><span class="line"><span class="comment">// ["422201199612120401", "42", "2201", "1996", "12", "12", "0", index: 0, input: "422201199612120401", groups: undefined]</span></span><br><span class="line"><span class="built_in">console</span>.log(id.match(gReg2)); <span class="comment">// 和exec获取的结果是一样的</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>exec与match区别</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dReg = <span class="regexp">/yyyppp(\d+)/g</span></span><br><span class="line"><span class="keyword">const</span> yp = <span class="string">'yyyppp1234yyyppp5566yyyppp8899'</span></span><br><span class="line">    <span class="comment">// 我们用exec执行三次，每一次不仅仅把大正则匹配的内容获取到，而且还可以获取第一个正则获取的内容</span></span><br><span class="line"><span class="built_in">console</span>.log(dReg.exec(yp));</span><br><span class="line"><span class="comment">//  ["yyyppp1234", "1234", index: 0, input: "yyyppp1234yyyppp5566yyyppp8899", groups: undefined]</span></span><br><span class="line"><span class="built_in">console</span>.log(dReg.exec(yp));</span><br><span class="line"><span class="comment">// ["yyyppp5566", "5566", index: 10, input: "yyyppp1234yyyppp5566yyyppp8899", groups: undefined]</span></span><br><span class="line"><span class="built_in">console</span>.log(dReg.exec(yp));</span><br><span class="line"><span class="comment">// ["yyyppp8899", "8899", index: 20, input: "yyyppp1234yyyppp5566yyyppp8899", groups: undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 而match只能捕获大正则匹配的内容</span></span><br><span class="line"><span class="built_in">console</span>.log(yp.match(dReg));</span><br><span class="line"><span class="comment">// [ 'yyyppp1234', 'yyyppp5566', 'yyyppp8899' ]</span></span><br></pre></td></tr></table></figure><p><strong>正则的捕获：正则的exec方法、字符串的match方法、字符串的replace方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// replace方法</span></span><br><span class="line"><span class="keyword">const</span> ypRes = yp.replace(<span class="string">'yyyppp'</span>, <span class="string">'yp'</span>).replace(<span class="string">'yyyppp'</span>, <span class="string">'yp'</span>).replace(<span class="string">'yyyppp'</span>, <span class="string">'yp'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(ypRes); <span class="comment">//yp1234yp5566yp8899</span></span><br><span class="line"><span class="built_in">console</span>.log(yp.replace(<span class="regexp">/yyyppp/g</span>, <span class="string">'yp'</span>)); <span class="comment">//yp1234yp5566yp8899</span></span><br></pre></td></tr></table></figure><p>应用1：将数字替换为文字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> oldStr = <span class="string">'243545'</span></span><br><span class="line"><span class="keyword">let</span> numArr = [<span class="string">'一'</span>, <span class="string">'二'</span>, <span class="string">'三'</span>, <span class="string">'四'</span>, <span class="string">'五'</span>, <span class="string">'六'</span>, <span class="string">'七'</span>, <span class="string">'八'</span>, <span class="string">'九'</span>, <span class="string">'十'</span>]</span><br><span class="line">oldStr = oldStr.replace(<span class="regexp">/\d/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> numArr[<span class="built_in">arguments</span>[<span class="number">0</span>]]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(oldStr);</span><br></pre></td></tr></table></figure><p>应用2：获取字符串中出现次数最多的字符，并且获取出现的次数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> randomStr = <span class="string">'sfdcjdfvsjhvvbshbbbbljcsdkdsfchieorl'</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">randomStr.replace(<span class="regexp">/[a-z]/gi</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> val = <span class="built_in">arguments</span>[<span class="number">0</span>]</span><br><span class="line">        obj[val] &gt;= <span class="number">1</span> ? obj[val]++ : obj[val] = <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//获取最多出现的次数</span></span><br><span class="line"><span class="keyword">let</span> maxNum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    obj[key] &gt; maxNum ? maxNum = obj[key] : <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把所有复合出现maxNum的数字找出来</span></span><br><span class="line"><span class="keyword">let</span> maxArr = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    obj[key] === maxNum ? maxArr.push(key) : <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(maxArr);</span><br></pre></td></tr></table></figure><p>应用3：模板引擎实现原理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tplStr = <span class="string">'My name is &#123;0&#125;, my age is &#123;1&#125;, I love &#123;2&#125;.'</span></span><br><span class="line"><span class="keyword">const</span> data = [<span class="string">'yp'</span>, <span class="string">'23'</span>, <span class="string">'singing'</span>]</span><br><span class="line">tplStr = tplStr.replace(<span class="regexp">/&#123;(\d+)&#125;/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> data[<span class="built_in">arguments</span>[<span class="number">1</span>]] <span class="comment">//arguments[0]是匹配的内容，arguments[1]是匹配的索引</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(tplStr);</span><br></pre></td></tr></table></figure><p>应用4：获取url中的参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">'http://www.yp.com/movie?name=yp&amp;age=12&amp;hobby=singing'</span></span><br><span class="line"><span class="keyword">const</span> urlReg = <span class="regexp">/([^?&amp;=]+)=([^?&amp;=]+)/g</span></span><br><span class="line"><span class="keyword">const</span> params = &#123;&#125;</span><br><span class="line">    <span class="comment">// let ret = urlReg.exec(url)</span></span><br><span class="line">    <span class="comment">// while (ret) &#123;</span></span><br><span class="line">    <span class="comment">//     params[ret[1]] = ret[2]</span></span><br><span class="line">    <span class="comment">//     ret = urlReg.exec(url)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// console.log(params); //&#123; name: 'yp', age: '12', hobby: 'singing' &#125;</span></span><br><span class="line">url.replace(urlReg, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    params[<span class="built_in">arguments</span>[<span class="number">1</span>]] = <span class="built_in">arguments</span>[<span class="number">2</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(params); <span class="comment">//&#123; name: 'yp', age: '12', hobby: 'singing' &#125;</span></span><br></pre></td></tr></table></figure><p>应用5：时间格式化 —— 将”2015-6-10 9:12:00”变为”2015年6月10日 9时12分00秒”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> oldTime = <span class="string">'2015-6-10 9:12:00'</span></span><br><span class="line"><span class="keyword">const</span> timeReg = <span class="regexp">/&#123;(\d+)&#125;/g</span></span><br><span class="line">    <span class="comment">// 先获取timeArr</span></span><br><span class="line"><span class="keyword">const</span> preReg = <span class="regexp">/^(\d&#123;4&#125;)[-/](\d&#123;1,2&#125;)[-/](\d&#123;1,2&#125;) +(\d&#123;1,2&#125;):(\d&#123;1,2&#125;):(\d&#123;1,2&#125;)$/g</span></span><br><span class="line"><span class="keyword">let</span> timeArr = []</span><br><span class="line">oldTime.replace(preReg, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    timeArr = [].slice.call(<span class="built_in">arguments</span>)</span><br><span class="line">    timeArr = timeArr.slice(<span class="number">1</span>, <span class="number">7</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(timeArr) <span class="comment">//[ '2015', '6', '10', '9', '12', '00' ]</span></span><br><span class="line">    <span class="comment">// 设定好目标时间格式，直接进行正则替换</span></span><br><span class="line"><span class="keyword">let</span> formatTime = <span class="string">'&#123;0&#125;年&#123;1&#125;月&#123;2&#125;日 &#123;3&#125;时&#123;4&#125;分&#123;5&#125;秒'</span></span><br><span class="line">formatTime = formatTime.replace(timeReg, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> timeArr[<span class="built_in">arguments</span>[<span class="number">1</span>]]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(formatTime) <span class="comment">//2015年6月10日 9时12分00秒</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>从零搭建react环境</title>
      <link href="/2019/10/30/%E4%BB%8E0%E6%90%AD%E5%BB%BAreact%E7%8E%AF%E5%A2%83/"/>
      <url>/2019/10/30/%E4%BB%8E0%E6%90%AD%E5%BB%BAreact%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>目前react、vue项目都提供了对应的脚手架工具，让大家都能够轻易地创建项目，直接进行开发，省去了繁琐的打包配置问题。但是，这些脚手架生成的初始化项目中，到底做了哪些工作呢？这些webpack配置、性能优化等等知识都是前端工程师学习发展路上需要掌握的内容。因此我们是有必要学会不依靠脚手架工具亲自搭建vue、react项目环境的。</p><a id="more"></a><p>以下内容均来自：brickspert的<a href="https://github.com/brickspert/blog/issues/1" target="_blank" rel="noopener">《从零搭建React全家桶框架教程》</a>，详细内容点击原文链接进行阅读。</p><h4 id="1-webpack"><a href="#1-webpack" class="headerlink" title="1. webpack"></a>1. webpack</h4><p><code>npm init</code>初始化项目，安装webpack<code>npm install --save-dev webpack@3</code>，新建<code>webpack.dev.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: path.join(__dirname, <span class="string">'./src/index.js'</span>),</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.join(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">        filename: <span class="string">'bundle.js'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>src/index.js</code>随便写入一串js代码用来测试：<code>document.getElementById(&#39;app&#39;).innerHTML = &quot;Webpack works&quot;</code></p><p>在<code>package.json</code>中写入打包命令：<code>&quot;dev&quot;: &quot;webpack --config webpack.dev.config.js&quot;</code>，运行<code>npm run dev</code>观察是否打包成功。</p><p>在dist目录下新建<code>index.html</code>，引入<code>bundle.js</code>，打开<code>index.html</code>，观察js是否执行成功。</p><h4 id="2-babel"><a href="#2-babel" class="headerlink" title="2. babel"></a>2. babel</h4><p>配置babel，可以用ES6、 ES7等来编写代码，Babel会把他们统统转为ES5</p><p>几个常用babel库：</p><ul><li>babel-core 调用Babel的API进行转码</li><li>babel-loader</li><li>babel-preset-es2015 用于解析 ES6</li><li>babel-preset-react 用于解析 JSX</li><li>babel-preset-stage-0 用于解析 ES7 提案</li></ul><p><code>babel-preset-state-0,babel-preset-state-1,babel-preset-state-2,babel-preset-state-3</code>有什么区别？每一级包含上一级的功能，比如 state-0包含state-1的功能，以此类推。state-0功能最全。</p><p>依次安装这些库：<code>npm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react babel-preset-stage-0</code></p><p>新建<code>.babelrc</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;: [</span><br><span class="line">      &quot;es2015&quot;,</span><br><span class="line">      &quot;react&quot;,</span><br><span class="line">      &quot;stage-0&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;plugins&quot;: []</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>修改webpack.dev.config.js，增加babel-loader:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*src文件夹下面的以.js结尾的文件，要使用babel解析*/</span></span><br><span class="line"><span class="comment">/*cacheDirectory是用来缓存编译结果，下次编译加速*/</span></span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">            use: [<span class="string">'babel-loader?cacheDirectory=true'</span>],</span><br><span class="line">            include: path.join(__dirname, <span class="string">'src'</span>)</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在js中就可以放心地写es6、es7、jsx的代码了，可以测试一下~</p><h4 id="3-react"><a href="#3-react" class="headerlink" title="3. react"></a>3. react</h4><p>安装依赖包<code>npm install --save react react-dom</code></p><p>接下来编写测试文件：</p><p>src/Hello.jsx:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;hello&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>src/index.jsx:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDom <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">'./Hello.jsx'</span></span><br><span class="line"></span><br><span class="line">ReactDom.render(</span><br><span class="line">    &lt;Hello /&gt;,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>注意此时要检查webpack配置，其中entry是否为<code>index.jsx</code>,babel编译的文件应该支持js和jsx……否则会打包失败。</p><h4 id="4-react-router"><a href="#4-react-router" class="headerlink" title="4. react-router"></a>4. react-router</h4><p>安装依赖包<code>npm install --save react-router-dom</code>，在src下新建<code>router/router.js</code>:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Route, Switch, Link &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'../pages/Home'</span></span><br><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">'../pages/User'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getRouter = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;&lt;Link to="/u</span>ser<span class="string">"&gt;用户&lt;/Link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">      &lt;/ul&gt;</span></span><br><span class="line"><span class="string">      &lt;Switch&gt;</span></span><br><span class="line"><span class="string">        &lt;Route exact path="</span>/<span class="string">" component=&#123;Home&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Route path="</span>/user<span class="string">" component=&#123;User&#125; /&gt;</span></span><br><span class="line"><span class="string">      &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/Router&gt;</span></span><br><span class="line"><span class="string">);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default getRouter;</span></span><br></pre></td></tr></table></figure><p>对应的两个组件简单写一下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Home.jsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;Home&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ User.jsx</span></span><br><span class="line"><span class="regexp">import React, &#123; Component &#125; from 'react'</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default class User extends Component &#123;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;User&lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改index.jsx:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDom <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> getRouter <span class="keyword">from</span> <span class="string">'./router/router'</span>;</span><br><span class="line"></span><br><span class="line">ReactDom.render(</span><br><span class="line">  getRouter(),</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>注意：以上的代码import引入的时候都省略了后缀名.jsx，支持这种省略是需要在webpack中进行配置的，添加extensions即可，我们还可以配置alias别名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.jsx'</span>, <span class="string">'.json'</span>],</span><br><span class="line">    alias: &#123;</span><br><span class="line">        pages: path.join(__dirname, <span class="string">'src/pages'</span>),</span><br><span class="line">        component: path.join(__dirname, <span class="string">'src/component'</span>),</span><br><span class="line">        router: path.join(__dirname, <span class="string">'src/router'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来打包测试页面，点击没有反应，为什么呢？因为file这种路径，不是我们想象中的路由那样的路径<a href="http://localhost:3000~我们需要配置一个简单的WEB服务器，有下面两种方法来实现：">http://localhost:3000~我们需要配置一个简单的WEB服务器，有下面两种方法来实现：</a></p><ul><li>Nginx, Apache, IIS等配置启动一个简单的的WEB服务器</li><li>使用webpack-dev-server来配置启动WEB服务器</li></ul><h4 id="5-webpack-dev-server"><a href="#5-webpack-dev-server" class="headerlink" title="5. webpack-dev-server"></a>5. webpack-dev-server</h4><p>安装<code>npm install webpack-dev-server@2 --save-dev</code>，修改webpack配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    port: <span class="number">3000</span>,</span><br><span class="line">    contentBase: path.join(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    historyApiFallback: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改script命令：<code>&quot;dev&quot;: &quot;webpack-dev-server --config webpack.dev.config.js --color --progress&quot;</code>，运行<code>npm run dev</code>即可。</p><p><strong>devServer配置项</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">contentBase：URL的根目录。如果不设定的话，默认指向项目根目录</span><br><span class="line">color（CLI only） console中打印彩色日志</span><br><span class="line">historyApiFallback 任意的404响应都被替代为index.html。有什么用呢？你现在运行</span><br><span class="line">npm start，然后打开浏览器，访问http://localhost:8080,然后点击Page1到链接http://localhost:8080/page1，</span><br><span class="line">然后刷新页面试试。是不是发现刷新后404了。为什么？dist文件夹里面并没有page1.html,当然会404了，所以我们需要配置</span><br><span class="line">historyApiFallback，让所有的404定位到index.html。</span><br><span class="line">host 指定一个host,默认是localhost。如果你希望服务器外部可以访问，指定如下：host: &quot;0.0.0.0&quot;。比如你用手机通过IP访问。</span><br><span class="line">hot 启用Webpack的模块热替换特性。</span><br><span class="line">port 配置要监听的端口。默认就是我们现在使用的8080端口。</span><br><span class="line">proxy 代理</span><br><span class="line">progress（CLI only） 将编译进度输出到控制台</span><br></pre></td></tr></table></figure><h4 id="6-模块热更新（HMR）"><a href="#6-模块热更新（HMR）" class="headerlink" title="6. 模块热更新（HMR）"></a>6. 模块热更新（HMR）</h4><p>模块热更新：当我们修改代码的时候，浏览器会自动刷新</p><p>首先，修改命令行添加hot参数：<code>&quot;dev&quot;: &quot;webpack-dev-server --config webpack.dev.config.js --color --progress --hot&quot;</code></p><p>src/index.js 增加module.hot.accept()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDom <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> getRouter <span class="keyword">from</span> <span class="string">'./router/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">    <span class="built_in">module</span>.hot.accept();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDom.render(</span><br><span class="line">    getRouter(), </span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>接下来，我们打开对应地址，修改jsx文件，发现页面也自动刷新了，有点惊喜。目前还有一种热更新的方法，但是较为麻烦一些，了解一下也可以：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line">devServer: &#123;</span><br><span class="line">    hot: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">plugins:[</span><br><span class="line">     <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>如何保存react中state的状态？</strong></p><p>虽然目前实现了热更新功能，But！上面的配置对react模块的支持不是很好，当模块热替换的时候，state会重置，这不是我们想要的。为了在react模块更新的同时，能保留state等页面中其他状态，我们需要引入react-hot-loader~</p><p>安装依赖：<code>npm install react-hot-loader@next --save-dev</code></p><p>.babelrc 增加 react-hot-loader/babel</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [</span><br><span class="line">    <span class="string">"es2015"</span>,</span><br><span class="line">    <span class="string">"react"</span>,</span><br><span class="line">    <span class="string">"stage-0"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    <span class="string">"react-hot-loader/babel"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>webpack.dev.config.js入口增加react-hot-loader/patch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">entry: [</span><br><span class="line">    <span class="string">'react-hot-loader/patch'</span>,</span><br><span class="line">    path.join(__dirname, <span class="string">'src/index.jsx'</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>src/index.js修改如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDom <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;AppContainer&#125; <span class="keyword">from</span> <span class="string">'react-hot-loader'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> getRouter <span class="keyword">from</span> <span class="string">'./router/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*初始化*/</span></span><br><span class="line">renderWithHotReload(getRouter());</span><br><span class="line"></span><br><span class="line"><span class="comment">/*热更新*/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">    <span class="built_in">module</span>.hot.accept(<span class="string">'./router/router'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> getRouter = <span class="built_in">require</span>(<span class="string">'./router/router'</span>).default;</span><br><span class="line">        renderWithHotReload(getRouter());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderWithHotReload</span>(<span class="params">RootElement</span>) </span>&#123;</span><br><span class="line">    ReactDom.render(</span><br><span class="line">        &lt;AppContainer&gt;</span><br><span class="line">            &#123;RootElement&#125;</span><br><span class="line">        &lt;<span class="regexp">/AppContainer&gt;,</span></span><br><span class="line"><span class="regexp">        document.getElementById('app')</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>现在，执行<code>npm run dev</code>。修改页面的时候，state不更新了。</p><h4 id="7-redux"><a href="#7-redux" class="headerlink" title="7. redux"></a>7. redux</h4><p>接下来开始集成redux。<br>先安装redux：<code>npm install --save redux</code></p><p>初始化目录结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd src</span><br><span class="line">mkdir redux</span><br><span class="line">cd redux</span><br><span class="line">mkdir actions</span><br><span class="line">mkdir reducers</span><br><span class="line">touch reducers.js</span><br><span class="line">touch store.js</span><br><span class="line">touch actions/counter.js</span><br><span class="line">touch reducers/counter.js</span><br></pre></td></tr></table></figure><p>先来写action创建函数。通过action创建函数，可以创建action，<code>src/redux/actions/counter.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> INCREMENT = <span class="string">"counter/INCREMENT"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DECREMENT = <span class="string">"counter/DECREMENT"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> RESET = <span class="string">"counter/RESET"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">increment</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">type</span>: INCREMENT&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">decrement</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">type</span>: DECREMENT&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">reset</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">type</span>: RESET&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来写reducer,reducer是一个纯函数，接收action和旧的state,生成新的state.<code>src/redux/reducers/counter.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;INCREMENT, DECREMENT, RESET&#125; <span class="keyword">from</span> <span class="string">'../actions/counter'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initState = &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state = initState, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> INCREMENT:</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                count: state.count + <span class="number">1</span></span><br><span class="line">            &#125;;</span><br><span class="line">        <span class="keyword">case</span> DECREMENT:</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                count: state.count - <span class="number">1</span></span><br><span class="line">            &#125;;</span><br><span class="line">        <span class="keyword">case</span> RESET:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">count</span>: <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个项目有很多的reducers,我们要把他们整合到一起,<code>src/redux/reducers.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> counter <span class="keyword">from</span> <span class="string">'./reducers/counter'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">combineReducers</span>(<span class="params">state = &#123;&#125;, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        counter: counter(state.counter, action)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>核心思想</strong>：reducer就是纯函数，接收state 和 action，然后返回一个新的 state。</p><p><strong>store</strong> 就是把它们联系到一起的对象。store 有以下职责：</p><ul><li>维持应用的 state；</li><li>提供 getState() 方法获取 state；</li><li>提供 dispatch(action) 触发reducers方法更新 state；</li><li>通过 subscribe(listener) 注册监听器;</li><li>通过 subscribe(listener) 返回的函数注销监听器。<br><code>src/redux/store.js</code>：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> combineReducers <span class="keyword">from</span> <span class="string">'./reducers.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> store = createStore(combineReducers);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><p>集成好redux后，我们编写jsx文件，使用redux进行测试。</p><p>首先需要安装react-redux，<code>npm install --save react-redux</code>,新建一个页面测试一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;increment, decrement, reset&#125; <span class="keyword">from</span> <span class="string">'actions/counter'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;div&gt;当前计数为&#123;<span class="keyword">this</span>.props.counter.count&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                &lt;button onClick=&#123;() =&gt; this.props.increment()&#125;&gt;自增</span></span><br><span class="line"><span class="regexp">                &lt;/</span>button&gt;</span><br><span class="line">                &lt;button onClick=&#123;() =&gt; <span class="keyword">this</span>.props.decrement()&#125;&gt;自减</span><br><span class="line">                &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                &lt;button onClick=&#123;() =&gt; this.props.reset()&#125;&gt;重置</span></span><br><span class="line"><span class="regexp">                &lt;/</span>button&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const mapStateToProps = (state) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">        counter: state.counter</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const mapDispatchToProps = (dispatch) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">        increment: () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">            dispatch(increment())</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        decrement: () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">            dispatch(decrement())</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        reset: () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">            dispatch(reset())</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default connect(mapStateToProps, mapDispatchToProps)(Counter);</span></span><br></pre></td></tr></table></figure><p>在<code>src/index.js</code>中引入store，修改部分如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新增</span></span><br><span class="line"><span class="keyword">import</span> &#123;Provider&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./redux/store'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderWithHotReload</span>(<span class="params">RootElement</span>) </span>&#123;</span><br><span class="line">    ReactDom.render(</span><br><span class="line">        &lt;AppContainer&gt;</span><br><span class="line">        </span><br><span class="line">            <span class="comment">//新增Provider和store</span></span><br><span class="line">            &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">                &#123;RootElement&#125;</span><br><span class="line">            &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">            </span></span><br><span class="line"><span class="regexp">        &lt;/</span>AppContainer&gt;,</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-异步action"><a href="#8-异步action" class="headerlink" title="8. 异步action"></a>8. 异步action</h4><p>举个栗子：<br><code>src/redux/actions/userInfo.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> GET_USER_INFO_REQUEST = <span class="string">"userInfo/GET_USER_INFO_REQUEST"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> GET_USER_INFO_SUCCESS = <span class="string">"userInfo/GET_USER_INFO_SUCCESS"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> GET_USER_INFO_FAIL = <span class="string">"userInfo/GET_USER_INFO_FAIL"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserInfoRequest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        type: GET_USER_INFO_REQUEST</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserInfoSuccess</span>(<span class="params">userInfo</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        type: GET_USER_INFO_SUCCESS,</span><br><span class="line">        userInfo: userInfo</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserInfoFail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        type: GET_USER_INFO_FAIL</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getUserInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">dispatch</span>) </span>&#123;</span><br><span class="line">        dispatch(getUserInfoRequest());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> fetch(<span class="string">'http://localhost:8080/api/user.json'</span>)</span><br><span class="line">            .then((<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> response.json()</span><br><span class="line">            &#125;))</span><br><span class="line">            .then(<span class="function">(<span class="params">json</span>) =&gt;</span> &#123;</span><br><span class="line">                dispatch(getUserInfoSuccess(json))</span><br><span class="line">            &#125;).catch(</span><br><span class="line">                () =&gt; &#123;</span><br><span class="line">                    dispatch(getUserInfoFail());</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了让action创建函数除了返回action对象外，还可以返回函数，我们需要引用redux-thunk：<code>npm install --save redux-thunk</code>,简单的说，中间件就是action在到达reducer，先经过中间件处理。使用中间件来处理<br>函数形式的action，把他们转为标准的action给reducer。这是redux-thunk的作用。</p><p>我们来引入redux-thunk中间件:<code>src/redux/store.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore, applyMiddleware&#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> thunkMiddleware <span class="keyword">from</span> <span class="string">'redux-thunk'</span>;</span><br><span class="line"><span class="keyword">import</span> combineReducers <span class="keyword">from</span> <span class="string">'./reducers.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> store = createStore(combineReducers, applyMiddleware(thunkMiddleware));</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><p>可以编写一个组件验证一下，就不具体展开了。</p><p>值得注意的一点是，redux提供了一个combineReducers函数来合并reducer，上述的reducers.js可以通过combinReducers优化，不用我们自己合并，写法更加简单。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;combineReducers&#125; <span class="keyword">from</span> <span class="string">"redux"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> counter <span class="keyword">from</span> <span class="string">'reducers/counter'</span>;</span><br><span class="line"><span class="keyword">import</span> userInfo <span class="keyword">from</span> <span class="string">'reducers/userInfo'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> combineReducers(&#123;</span><br><span class="line">    counter,</span><br><span class="line">    userInfo</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="9-devtool优化"><a href="#9-devtool优化" class="headerlink" title="9. devtool优化"></a>9. devtool优化</h4><p>现在有一个问题，代码哪里写错了，浏览器报错只报在build.js第几行。<code>webpack.dev.config.js</code>增加<code>devtool:&#39;inline-source-map&#39;</code>即可。我们在srouce里面能看到我们写的代码，也能打断点调试。</p><h4 id="10-编译css"><a href="#10-编译css" class="headerlink" title="10. 编译css"></a>10. 编译css</h4><p>如果需要引入css文件，需要安装css-loader、style-loader，<code>npm install css-loader style-loader --save-dev</code>，并在webpack配置中添加：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">   use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>import &#39;xx.css&#39;</code>即可引入css代码了。如果像支持stylus、less、sass等css预处理语言，可以安装相关的依赖包，并在webpack中作相应的配置，这里不再赘述了。</p><h4 id="11-编译图片"><a href="#11-编译图片" class="headerlink" title="11. 编译图片"></a>11. 编译图片</h4><p><code>npm install --save-dev url-loader file-loader</code></p><p><code>webpack.dev.config.js</code> rules增加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">    use: [&#123;</span><br><span class="line">        loader: <span class="string">'url-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">            limit: <span class="number">8192</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>options limit 8192意思是，小于等于8K的图片会被转成base64编码，直接插入HTML中，减少HTTP请求。</p><p>举个栗子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./Page1.css'</span>;</span><br><span class="line"><span class="keyword">import</span> image <span class="keyword">from</span> <span class="string">'./images/brickpsert.jpg'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Page1</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">"page-box"</span>&gt;</span><br><span class="line">                <span class="keyword">this</span> is page1~</span><br><span class="line">                &lt;img src=&#123;image&#125;/&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>扩充</strong>：webpack引入图片的几种方式？</p><ul><li>在js 中创建图片来引入</li><li>在css中引入background(‘url’)</li><li><code>&lt;img src=&quot; &quot; alt=&quot; &quot;&gt;</code></li></ul><ol><li>在js创建图片引入</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./index.css'</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./22.jpg'</span>;   <span class="comment">//返回的结果 logo 是一个新的图片的地址</span></span><br><span class="line"><span class="keyword">let</span> image=<span class="keyword">new</span> Image();  <span class="comment">//创建新的图片对象</span></span><br><span class="line">image.src=logo;      <span class="comment">//就是一个普通的字符串</span></span><br><span class="line"><span class="comment">// 将new 的图片插入到body 的后面</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(image);</span><br></pre></td></tr></table></figure><ol start="2"><li><p>在css中引入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//index.css</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">900px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'../myImages/11.png'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用<code>&lt;img src=&quot; &quot; alt=&quot; &quot;&gt;</code></p></li></ol><ul><li>安装loader:yarn add html-withimg-loader -D</li><li>webpack.config.js添加配置</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>:&#123;    </span><br><span class="line">      rules:[ <span class="comment">//规则</span></span><br><span class="line">          &#123;</span><br><span class="line">              test: <span class="regexp">/.css$/</span>,</span><br><span class="line">              use: [<span class="string">"style-loader"</span>,<span class="string">"css-loader"</span>]</span><br><span class="line">          &#125;,</span><br><span class="line">         &#123;    <span class="comment">//使用file-loader 可以图片 嵌入 到css中</span></span><br><span class="line">          test: <span class="regexp">/\.(png|svg|jpg|gif)$/</span>,</span><br><span class="line">             use: [<span class="string">"file-loader"</span>]</span><br><span class="line">         &#125;,</span><br><span class="line">         &#123;</span><br><span class="line">          test: <span class="regexp">/.html$/</span>, <span class="comment">//所有html结尾的文件添加此 loader 处理</span></span><br><span class="line">          use: [<span class="string">"html-withimg-loader"</span>]</span><br><span class="line">         &#125;,</span><br><span class="line">      ]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>html中引入图片即可： <code>&lt;img src=&quot;../myImages/11.png&quot; alt=&quot;&quot;&gt;</code></p><h4 id="12-按需加载"><a href="#12-按需加载" class="headerlink" title="12. 按需加载"></a>12. 按需加载</h4><p>打包完后，所有页面只生成了一个build.js,当我们首屏加载的时候，就会很慢。如果每个页面都打包了自己单独的JS，在进入自己页面的时候才加载对应的js，那首屏加载就会快很多。</p><p>在 react-router 2.0时代， 按需加载需要用到的最关键的一个函数，就是require.ensure()，它是按需加载能够实现的核心。在4.0版本，官方放弃了这种处理按需加载的方式，选择了一个更加简洁的处理方式。</p><p>安装依赖：<code>npm install bundle-loader --save-dev</code>，在router文件夹下新建bundle.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bundle</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="comment">// short for "module" but that's a keyword in js, so "mod"</span></span><br><span class="line">        mod: <span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    componentWillMount() &#123;</span><br><span class="line">        <span class="keyword">this</span>.load(<span class="keyword">this</span>.props)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillReceiveProps(nextProps) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nextProps.load !== <span class="keyword">this</span>.props.load) &#123;</span><br><span class="line">            <span class="keyword">this</span>.load(nextProps)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    load(props) &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            mod: <span class="literal">null</span></span><br><span class="line">        &#125;);</span><br><span class="line">        props.load(<span class="function">(<span class="params">mod</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                <span class="comment">// handle both es imports and cjs</span></span><br><span class="line">                mod: mod.default ? mod.default : mod</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.props.children(<span class="keyword">this</span>.state.mod)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Bundle;</span><br></pre></td></tr></table></figure><p>改造路由<code>src/router/router.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;BrowserRouter <span class="keyword">as</span> Router, Route, Switch, Link&#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Bundle <span class="keyword">from</span> <span class="string">'./Bundle'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'bundle-loader?lazy&amp;name=home!pages/Home/Home'</span>;</span><br><span class="line"><span class="keyword">import</span> Page1 <span class="keyword">from</span> <span class="string">'bundle-loader?lazy&amp;name=page1!pages/Page1/Page1'</span>;</span><br><span class="line"><span class="keyword">import</span> Counter <span class="keyword">from</span> <span class="string">'bundle-loader?lazy&amp;name=counter!pages/Counter/Counter'</span>;</span><br><span class="line"><span class="keyword">import</span> UserInfo <span class="keyword">from</span> <span class="string">'bundle-loader?lazy&amp;name=userInfo!pages/UserInfo/UserInfo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Loading = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createComponent = <span class="function">(<span class="params">component</span>) =&gt;</span> <span class="function">(<span class="params">props</span>) =&gt;</span> (</span><br><span class="line">    &lt;Bundle load=&#123;component&#125;&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            (Component) =&gt; Component ? <span class="xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span> : <span class="xml"><span class="tag">&lt;<span class="name">Loading</span>/&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/Bundle&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const getRouter = () =&gt; (</span></span><br><span class="line"><span class="regexp">    &lt;Router&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">                &lt;li&gt;&lt;Link to="/</span><span class="string">"&gt;首页&lt;/Link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;&lt;Link to="</span>/page1<span class="string">"&gt;Page1&lt;/Link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;&lt;Link to="</span>/counter<span class="string">"&gt;Counter&lt;/Link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;&lt;Link to="</span>/userinfo<span class="string">"&gt;UserInfo&lt;/Link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;/ul&gt;</span></span><br><span class="line"><span class="string">            &lt;Switch&gt;</span></span><br><span class="line"><span class="string">                &lt;Route exact path="</span>/<span class="string">" component=&#123;createComponent(Home)&#125;/&gt;</span></span><br><span class="line"><span class="string">                &lt;Route path="</span>/page1<span class="string">" component=&#123;createComponent(Page1)&#125;/&gt;</span></span><br><span class="line"><span class="string">                &lt;Route path="</span>/counter<span class="string">" component=&#123;createComponent(Counter)&#125;/&gt;</span></span><br><span class="line"><span class="string">                &lt;Route path="</span>/userinfo<span class="string">" component=&#123;createComponent(UserInfo)&#125;/&gt;</span></span><br><span class="line"><span class="string">            &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/Router&gt;</span></span><br><span class="line"><span class="string">);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default getRouter;</span></span><br></pre></td></tr></table></figure><p>此时，进入新的页面，都会加载自己的JS。为了让输出的js名称更为清晰，可在<code>webpack.dev.config.js</code>加个<code>chunkFilename</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    path: path.join(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    chunkFilename: <span class="string">'[name].js'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13-缓存"><a href="#13-缓存" class="headerlink" title="13. 缓存"></a>13. 缓存</h4><p>每次代码更新后，都需要更新客户端缓存，需要将打包生成的名字设置得不一样，可以在每次打包都用增加hash：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    path: path.join(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    filename: <span class="string">'[name].[hash].js'</span>,</span><br><span class="line">    chunkFilename: <span class="string">'[name].[chunkhash].js'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But！dist/index.html里面引用js名字还是bundle.js老名字，需要引入新的js文件。但是手动修改真的好吗？</p><h4 id="14-HtmlWebpackPlugin"><a href="#14-HtmlWebpackPlugin" class="headerlink" title="14. HtmlWebpackPlugin"></a>14. HtmlWebpackPlugin</h4><p>这个插件，每次会自动把js插入到你的模板index.html里面去。安装依赖包<code>npm install html-webpack-plugin --save-dev</code>。新建模板src/index.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改<code>webpack.dev.config.js</code>，增加plugin：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line">    plugins: [<span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">        filename: <span class="string">'index.html'</span>,</span><br><span class="line">        template: path.join(__dirname, <span class="string">'src/index.html'</span>)</span><br><span class="line">    &#125;)],</span><br></pre></td></tr></table></figure><p>目前就可以自动将js插入html页面了。</p><h4 id="15-提取公共代码"><a href="#15-提取公共代码" class="headerlink" title="15. 提取公共代码"></a>15. 提取公共代码</h4><p>打包的代码中，有一些是公共库的代码不会改变的，但是，他们合并在bundle.js里面，每次项目发布，重新请求bundle.js的时候，相当于重新请求了，造成了资源浪费。</p><p>我们可以把react这些不会改变的公共库提取出来，用户缓存下来。从此以后，用户再也不用下载这些库了，无论是否发布项目。</p><p><code>webpack.dev.config.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line">entry: &#123;</span><br><span class="line">    app: [</span><br><span class="line">        <span class="string">'react-hot-loader/patch'</span>,</span><br><span class="line">        path.join(__dirname, <span class="string">'src/index.js'</span>)</span><br><span class="line">    ],</span><br><span class="line">    vendor: [<span class="string">'react'</span>, <span class="string">'react-router-dom'</span>, <span class="string">'redux'</span>, <span class="string">'react-dom'</span>, <span class="string">'react-redux'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*plugins*/</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">        name: <span class="string">'vendor'</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>把react等库生成打包到vendor.hash.js里面去。</p><p>但是你现在可能发现编译生成的文件app.[hash].js和vendor.[hash].js生成的hash一样的，这里是个问题，因为你每次修改代码,都会导致vendor.[hash].js名字改变，那我们提取出来的意义也就没了。其实文档上写的很清楚：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">     path: path.join(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">     filename: <span class="string">'[name].[hash].js'</span>, <span class="comment">//这里应该用chunkhash替换hash</span></span><br><span class="line">     chunkFilename: <span class="string">'[name].[chunkhash].js'</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>但是，如果用chunkhash，会报错。和webpack-dev-server –hot不兼容。等会我们配置正式版webpack.config.js的时候要解决这个问题。</p><h4 id="16-生产坏境构建"><a href="#16-生产坏境构建" class="headerlink" title="16. 生产坏境构建"></a>16. 生产坏境构建</h4><blockquote><p>开发环境(development)和生产环境(production)的构建目标差异很大。在开发环境中，我们需要具有强大的、具有实时重新加载(live reloading)或热模块替换(hot module replacement)能力的 source map 和 localhost server。而在生产环境中，我们的目标则转向于关注更小的 bundle，更轻量的 source map，以及更优化的资源，以改善加载时间。由于要遵循逻辑分离，我们通常建议为每个环境编写彼此独立的 webpack 配置。</p></blockquote><p>新建<code>webpack.config.js</code>:</p><p>在<code>webpack.dev.config.js</code>的基础上先做以下几个修改~</p><ul><li>先删除webpack-dev-server相关的东西~</li><li>devtool的值改成cheap-module-source-map</li><li>刚才说的hash改成chunkhash</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devtool: <span class="string">'cheap-module-source-map'</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: [</span><br><span class="line">            path.join(__dirname, <span class="string">'src/index.js'</span>)</span><br><span class="line">        ],</span><br><span class="line">        vendor: [<span class="string">'react'</span>, <span class="string">'react-router-dom'</span>, <span class="string">'redux'</span>, <span class="string">'react-dom'</span>, <span class="string">'react-redux'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.join(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">        filename: <span class="string">'[name].[chunkhash].js'</span>,</span><br><span class="line">        chunkFilename: <span class="string">'[name].[chunkhash].js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            use: [<span class="string">'babel-loader'</span>],</span><br><span class="line">            include: path.join(__dirname, <span class="string">'src'</span>)</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">            use: [&#123;</span><br><span class="line">                loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    limit: <span class="number">8192</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            filename: <span class="string">'index.html'</span>,</span><br><span class="line">            template: path.join(__dirname, <span class="string">'src/index.html'</span>)</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">            name: <span class="string">'vendor'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    resolve: &#123;</span><br><span class="line">        alias: &#123;</span><br><span class="line">            pages: path.join(__dirname, <span class="string">'src/pages'</span>),</span><br><span class="line">            component: path.join(__dirname, <span class="string">'src/component'</span>),</span><br><span class="line">            router: path.join(__dirname, <span class="string">'src/router'</span>),</span><br><span class="line">            actions: path.join(__dirname, <span class="string">'src/redux/actions'</span>),</span><br><span class="line">            reducers: path.join(__dirname, <span class="string">'src/redux/reducers'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>设置脚本：<code>&quot;build&quot;:&quot;webpack --config webpack.config.js&quot;</code>即可打包为生产环境。</p><h4 id="17-文件压缩"><a href="#17-文件压缩" class="headerlink" title="17. 文件压缩"></a>17. 文件压缩</h4><p>webpack使用UglifyJSPlugin来压缩生成的文件。<code>npm i --save-dev uglifyjs-webpack-plugin</code></p><p><code>webpack.config.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UglifyJSPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> UglifyJSPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>npm run build</code>发现打包文件大小减小了好多。</p><h4 id="18-指定环境"><a href="#18-指定环境" class="headerlink" title="18. 指定环境"></a>18. 指定环境</h4><blockquote><p>许多 library 将通过与 process.env.NODE_ENV 环境变量关联，以决定 library 中应该引用哪些内容。例如，当不处于生产环境中时，某些 library 为了使调试变得容易，可能会添加额外的日志记录(log)和测试(test)。其实，当使用 process.env.NODE_ENV === ‘production’ 时，一些 library 可能针对具体用户的环境进行代码优化，从而删除或添加一些重要代码。我们可以使用 webpack 内置的 DefinePlugin 为所有的依赖定义这个变量：</p></blockquote><p><code>webpack.config.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">       <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">          <span class="string">'process.env'</span>: &#123;</span><br><span class="line">              <span class="string">'NODE_ENV'</span>: <span class="built_in">JSON</span>.stringify(<span class="string">'production'</span>)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>npm run build</code>后发现vendor.[hash].js又变小了。</p><h4 id="19-优化缓存"><a href="#19-优化缓存" class="headerlink" title="19. 优化缓存"></a>19. 优化缓存</h4><p>但是现在有一个问题。你随便修改代码一处，例如Home.js，随便改变个字，你发现home.xxx.js名字变化的同时，<br>vendor.xxx.js名字也变了。这不行啊。这和没拆分不是一样一样了吗？我们本意是vendor.xxx.js<br>名字永久不变，一直缓存在用户本地的。官方文档推荐了一个插件HashedModuleIdsPlugin:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.HashedModuleIdsPlugin()</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>还要加一个runtime代码抽取:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">    name: <span class="string">'runtime'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>注意</strong>，引入顺序在这里很重要。CommonsChunkPlugin 的 ‘vendor’ 实例，必须在 ‘runtime’ 实例之前引入。</p><h4 id="20-public-path"><a href="#20-public-path" class="headerlink" title="20. public path"></a>20. public path</h4><p>想象一个场景，我们的静态文件放在了单独的静态服务器上去了，那我们打包的时候，如何让静态文件的链接定位到静态服务器呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    publicPath : <span class="string">'/'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="21-打包优化"><a href="#21-打包优化" class="headerlink" title="21. 打包优化"></a>21. 打包优化</h4><p>现在打开dist，是不是发现好多好多文件，每次打包后的文件在这里混合了？我们希望每次打包前自动清理下dist文件。<code>npm install clean-webpack-plugin --save-dev</code><br><code>webpack.config.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CleanWebpackPlugin =<span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist'</span>])</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="22-抽取css"><a href="#22-抽取css" class="headerlink" title="22. 抽取css"></a>22. 抽取css</h4><p>目前我们的css是直接打包进js里面的，我们希望能单独生成css文件。<code>npm install --save-dev extract-text-webpack-plugin</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">          fallback: <span class="string">"style-loader"</span>,</span><br><span class="line">          use: <span class="string">"css-loader"</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">     <span class="keyword">new</span> ExtractTextPlugin(&#123;</span><br><span class="line">         filename: <span class="string">'[name].[contenthash:5].css'</span>,</span><br><span class="line">         allChunks: <span class="literal">true</span></span><br><span class="line">     &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="23-axios和middleware"><a href="#23-axios和middleware" class="headerlink" title="23. axios和middleware"></a>23. axios和middleware</h4><p><code>npm install --save axios</code></p><h4 id="24-合并提取公共配置"><a href="#24-合并提取公共配置" class="headerlink" title="24. 合并提取公共配置"></a>24. 合并提取公共配置</h4><p>想象一个场景，现在我想给webpack增加一个css modules依赖，你会发现，既要修改webpack.dev.config.js，又要修改webpack.config.js。</p><p>所以我们要把公共的配置文件提取出来。提取到webpack.common.config.js里面。webpack.dev.config.js和webpack.config.js写自己的特殊的配置。</p><p>这里我们需要用到webpack-merge来合并公共配置和单独的配置。<code>npm install --save-dev webpack-merge</code></p><p>webpack.common.config.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line">commonConfig = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: [</span><br><span class="line">            path.join(__dirname, <span class="string">'src/index.js'</span>)</span><br><span class="line">        ],</span><br><span class="line">        vendor: [<span class="string">'react'</span>, <span class="string">'react-router-dom'</span>, <span class="string">'redux'</span>, <span class="string">'react-dom'</span>, <span class="string">'react-redux'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.join(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">        filename: <span class="string">'[name].[chunkhash].js'</span>,</span><br><span class="line">        chunkFilename: <span class="string">'[name].[chunkhash].js'</span>,</span><br><span class="line">        publicPath: <span class="string">"/"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            use: [<span class="string">'babel-loader?cacheDirectory=true'</span>],</span><br><span class="line">            include: path.join(__dirname, <span class="string">'src'</span>)</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">            use: [&#123;</span><br><span class="line">                loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    limit: <span class="number">8192</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            filename: <span class="string">'index.html'</span>,</span><br><span class="line">            template: path.join(__dirname, <span class="string">'src/index.html'</span>)</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> webpack.HashedModuleIdsPlugin(),</span><br><span class="line">        <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">            name: <span class="string">'vendor'</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">            name: <span class="string">'runtime'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    resolve: &#123;</span><br><span class="line">        alias: &#123;</span><br><span class="line">            pages: path.join(__dirname, <span class="string">'src/pages'</span>),</span><br><span class="line">            components: path.join(__dirname, <span class="string">'src/components'</span>),</span><br><span class="line">            router: path.join(__dirname, <span class="string">'src/router'</span>),</span><br><span class="line">            actions: path.join(__dirname, <span class="string">'src/redux/actions'</span>),</span><br><span class="line">            reducers: path.join(__dirname, <span class="string">'src/redux/reducers'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = commonConfig;</span><br></pre></td></tr></table></figure><p>webpack.dev.config.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> commonConfig = <span class="built_in">require</span>(<span class="string">'./webpack.common.config.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> devConfig = &#123;</span><br><span class="line">    devtool: <span class="string">'inline-source-map'</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: [</span><br><span class="line">            <span class="string">'react-hot-loader/patch'</span>,</span><br><span class="line">            path.join(__dirname, <span class="string">'src/index.js'</span>)</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        <span class="comment">/*这里本来应该是[chunkhash]的，但是由于[chunkhash]和react-hot-loader不兼容。只能妥协*/</span></span><br><span class="line">        filename: <span class="string">'[name].[hash].js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: path.join(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">        historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">        host: <span class="string">'0.0.0.0'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(&#123;</span><br><span class="line">    customizeArray(a, b, key) &#123;</span><br><span class="line">        <span class="comment">/*entry.app不合并，全替换*/</span></span><br><span class="line">        <span class="keyword">if</span> (key === <span class="string">'entry.app'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(commonConfig, devConfig);</span><br></pre></td></tr></table></figure><p>webpack.config.js（也就是webpack.config.prod.js）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> UglifyJSPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> commonConfig = <span class="built_in">require</span>(<span class="string">'./webpack.common.config.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> publicConfig = &#123;</span><br><span class="line">    devtool: <span class="string">'cheap-module-source-map'</span>,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">                fallback: <span class="string">"style-loader"</span>,</span><br><span class="line">                use: <span class="string">"css-loader"</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist/*.*'</span>]),</span><br><span class="line">        <span class="keyword">new</span> UglifyJSPlugin(),</span><br><span class="line">        <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">            <span class="string">'process.env'</span>: &#123;</span><br><span class="line">                <span class="string">'NODE_ENV'</span>: <span class="built_in">JSON</span>.stringify(<span class="string">'production'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> ExtractTextPlugin(&#123;</span><br><span class="line">            filename: <span class="string">'[name].[contenthash:5].css'</span>,</span><br><span class="line">            allChunks: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(commonConfig, publicConfig);</span><br></pre></td></tr></table></figure><h4 id="25-增加404页面"><a href="#25-增加404页面" class="headerlink" title="25. 增加404页面"></a>25. 增加404页面</h4><ul><li>新建pages/NotFound/NotFound组件。</li><li>修改router/router.js，增加404</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> NotFound <span class="keyword">from</span> <span class="string">'bundle-loader?lazy&amp;name=notFound!pages/NotFound/NotFound'</span>;</span><br><span class="line">&lt;Route component=&#123;createComponent(NotFound)&#125;/&gt;</span><br></pre></td></tr></table></figure><h4 id="26-polyfill"><a href="#26-polyfill" class="headerlink" title="26. polyfill"></a>26. polyfill</h4><p><strong>babel-plugin-transform-runtime</strong></p><blockquote><p>在转换 ES2015 语法为 ECMAScript 5 的语法时，babel 会需要一些辅助函数，例如 _extend。babel 默认会将这些辅助函数内联到每一个 js 文件里，这样文件多的时候，项目就会很大。<br>所以 babel 提供了 transform-runtime 来将这些辅助函数“搬”到一个单独的模块 babel-runtime 中，这样做能减小项目文件的大小。</p></blockquote><p><code>npm install --save-dev babel-plugin-transform-runtime</code></p><p>修改<code>.babelrc</code>配置文件,增加配置:</p><p>.babelrc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;plugins&quot;: [</span><br><span class="line">  &quot;transform-runtime&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>babel-polyfill</strong></p><blockquote><p>Babel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如Object.assign）都不会转码。<br>举例来说，ES6在Array对象上新增了Array.from方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。</p></blockquote><p><code>npm install --save-dev babel-polyfill</code></p><p>修改webpack两个配置文件:</p><p>webpack.common.config.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app: [</span><br><span class="line">    <span class="string">"babel-polyfill"</span>,</span><br><span class="line">    path.join(__dirname, <span class="string">'src/index.js'</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>webpack.dev.config.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app: [</span><br><span class="line">    <span class="string">'babel-polyfill'</span>,</span><br><span class="line">    <span class="string">'react-hot-loader/patch'</span>,</span><br><span class="line">    path.join(__dirname, <span class="string">'src/index.js'</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="27-集成PostCSS"><a href="#27-集成PostCSS" class="headerlink" title="27. 集成PostCSS"></a>27. 集成PostCSS</h4><p>Autoprefixer这个插件,可以自动给css属性加浏览器前缀。postcss-cssnext 允许你使用未来的 CSS 特性（包括 autoprefixer）</p><p>当然，它有很多很多的插件可以用，你可以去官网详细了解。我们今天只用postcss-cssnext。（它包含了autoprefixer）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -D  postcss-loader</span><br><span class="line">npm install -D  postcss-cssnext</span><br></pre></td></tr></table></figure><p>修改webpack配置文件,增加postcss-loader:<br>webpack.dev.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rules: [&#123;</span><br><span class="line">    test: <span class="regexp">/\.(css|scss)$/</span>,</span><br><span class="line">    use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>, <span class="string">"postcss-loader"</span>]</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rules: [&#123;</span><br><span class="line">    test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">    use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">        fallback: <span class="string">"style-loader"</span>,</span><br><span class="line">        use: [<span class="string">"css-loader"</span>, <span class="string">"postcss-loader"</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>新建postcss.config.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: &#123;</span><br><span class="line">        <span class="string">'postcss-cssnext'</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>目前已完成了css自动添加前缀。</p><h4 id="28-redux-模块热替换配置"><a href="#28-redux-模块热替换配置" class="headerlink" title="28. redux 模块热替换配置"></a>28. redux 模块热替换配置</h4><p>当修改reducer代码的时候，页面会整个刷新，而不是局部刷新。代码修改起来也简单,增加一段监听reducers变化，并替换的代码。<br>src/redux/store.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">    <span class="built_in">module</span>.hot.accept(<span class="string">"./reducers"</span>, () =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> nextCombineReducers = <span class="built_in">require</span>(<span class="string">"./reducers"</span>).default;</span><br><span class="line">        store.replaceReducer(nextCombineReducers);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="29-模拟AJAX数据Mock-js"><a href="#29-模拟AJAX数据Mock-js" class="headerlink" title="29. 模拟AJAX数据Mock.js"></a>29. 模拟AJAX数据Mock.js</h4><p>Mock.js：拦截AJAX请求，返回需要的数据！<code>npm install mockjs --save-dev</code></p><p>我们可以新建mock文件夹，在内部写模拟的接口数据user.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">'mockjs'</span>;</span><br><span class="line"><span class="keyword">let</span> Random = Mock.Random;</span><br><span class="line">Mock.mock(<span class="string">'/api/user'</span>, &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'@cname'</span>,</span><br><span class="line">    <span class="string">'intro'</span>: <span class="string">'@word(20)'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以在其他页面引入使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (MOCK) &#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'mock/mock'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>webpack.common.config.js配置mock目录别名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">        ...</span><br><span class="line">        mock: path.join(__dirname, <span class="string">'mock'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>webpack.dev.config.js增加：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line">plugins:[</span><br><span class="line">     <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">            MOCK: <span class="literal">true</span></span><br><span class="line">     &#125;)</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure><p>这样，就只会在npm start 开发模式下，才会应用mock，如果你不想用，就把MOCK改成false就好了。</p><h4 id="30-使用-CSS-Modules"><a href="#30-使用-CSS-Modules" class="headerlink" title="30. 使用 CSS Modules"></a>30. 使用 CSS Modules</h4><p>webpack.dev.config.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader?modules&amp;localIdentName=[local]-[hash:base64:5]"</span>, <span class="string">"postcss-loader"</span>]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>webpack.config.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">            fallback: <span class="string">"style-loader"</span>,</span><br><span class="line">            use: [<span class="string">"css-loader?modules&amp;localIdentName=[local]-[hash:base64:5]"</span>, <span class="string">"postcss-loader"</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>src/pages/Page1/Page1.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> image <span class="keyword">from</span> <span class="string">'./images/brickpsert.jpg'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//看这里</span></span><br><span class="line"><span class="keyword">import</span> style <span class="keyword">from</span> <span class="string">'./Page1.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Page1</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=&#123;style.box&#125;&gt;</span><br><span class="line">                <span class="keyword">this</span> is page1~</span><br><span class="line">                &lt;img src=&#123;image&#125;/&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="31-json-server"><a href="#31-json-server" class="headerlink" title="31. json-server"></a>31. json-server</h4><p>json-server和Mock.js一样，都是用来模拟接口数据的。<br>json-server功能更强大，支持分页，排序，筛选等等。</p><p>具体使用方法参考官方文档~</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>对于大前端的思考</title>
      <link href="/2019/10/10/%E5%AF%B9%E4%BA%8E%E5%A4%A7%E5%89%8D%E7%AB%AF%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2019/10/10/%E5%AF%B9%E4%BA%8E%E5%A4%A7%E5%89%8D%E7%AB%AF%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<p>首先，作为一名前端人，从最开始的”前端三剑客”html、css、js开始看起，一遍遍地啃红宝书，再到接触jq，开发一些原生js应用，后来逐渐接触Vue、React等新型前端框架，还要学习node、js，逐渐接触前端工程化（项目自动化构建，如webpack，nginx、持续集成、版本控制），再到学习小程序开发、云开发模式、多端开发框架，再到学习设计模式、前端安全、性能优化等等，真可谓”路漫漫其修远兮”。因为不是科班出身，还要不停巩固自己的计算机基础知识、数据结构与算法，反复去培养自己的编程思维。做过许多大大小小的项目，经历过各种各样的坑，也是一路不停地学习、不停地总结。目前对于前端框架的设计原理、源码剖析、代码设计思想等方面非常感兴趣，也研究过vue、react等部分源码，越来越觉得多读、多分析好的框架源码是对自己一个很好的提升。目前仍然认为自己在这个方向不够深入，也是在不断地探索“大前端”之路，如何在未来能够看得更深、走得更远。</p><p>“不忘初心，方得始终。”想想自己当初是如何踏上这条路的，那时候只是觉得前端有着无限的创造力，可以自己设计精美的拥有各种特效的网站，可以自己做一些简单方便的应用，而且入门简单，也好找工作……但是现在想想，入了这个行，就很难跳出去，在学习的过程中，会愈发地感觉到前端远比自己想象中的要复杂、要求更高，而且新知识、新技术会层出不穷地出现，不断地挑战着前端人的思考能力、学习能力和吸收能力。但是这个过程也勾起了我极大的兴趣，想探索得越来越深，关注各种前端技术，跟上快速变化的节奏，去创造去沉淀。</p><p>“纵使疾风起，人生不言弃。”现在可谓是互联网寒冬时代，正是入门门槛低，导致了加入互联网行业的人越来越多，给我们的压力会越来越大。也许哪天我们还在公司上班，第二天被突然宣布部门解散也不足为奇。因此我们必须要必备危机意识，如何在这场浪潮之中仍然保证自己的竞争力？保持学习、学会思考，学会对自己的人生作出清晰的规划，特别是软件行业，给人的成长也是飞速的。</p><p><strong>究竟什么是大前端？</strong></p><blockquote><p>简单来说，大前端就是所有前端的统称，比如Android、iOS、web、Watch等，最接近用户的那一层也就是UI层，然后将其统一起来，就是大前端。大前端最大的特点在于一次开发，同时适用于所有平台，开发者不用为一个APP需要做Android和iOS两种模式而担心。大前端是web统一的时代，利用web不仅能开发出网站，更可以开发手机端web应用和移动端应用程序。大前端不仅会成为移动开发与Web前端的发展趋势，也将会是未来的显示设备终端的开发技术趋势。大前端将做更多的终端开发、工程化等工作，而不仅仅只是开发Web页面。大前端工程师将能搞定所有端上的开发。与充满争议的全栈工程师相比，它更具可操作性。<br>大前端不仅会成为移动开发与Web前端的发展趋势，也将会是未来的显示设备终端的开发技术趋势。大前端将做更多的终端开发、工程化等工作，而不仅仅只是开发Web页面。大前端工程师将能搞定所有端上的开发。与充满争议的全栈工程师相比，它更具可操作性。但同时对开发者而言，要会更多的技术栈，比如原生开发者要学习html、css、js等前端知识，前端开发人员也要学习Android或iOS的原生开发技术，然后了解一下常见的跨平台技术，只有这样才能更好的融入到大前端的这个大家庭中。 ——出自<a href="http://www.imooc.com/article/283259?block_id=tuijian_wz" target="_blank" rel="noopener">《大前端是什么？》</a></p></blockquote><blockquote><p>“大前端”是最近起来的概念。和传统的前端相比，“大前端”有两个方面的扩展。一个是端的多样性，比如新增了iOS，Android，小程序，公众号等等。另外一个是往后端扩展，比如Node.js的兴起，或许写后端服务没有Java成熟，写BFF还是可以胜任的。“大前端”是相对于传统的前端，iOS，Android，H5等独立小团队而言的。从基础服务+业务支持两个方面，促进团队的融合。在架构，工具链，组件化等几个方面提高复用，提升效率。——出自<a href="https://www.jianshu.com/p/bb8ac7db7e2d" target="_blank" rel="noopener">《大前端架构思考与选择》</a></p></blockquote><img src="https://i.loli.net/2019/09/18/SENRlsLZzGp3i6v.jpg" width="80%"><p>由上图可见，前端需要和如此多的工种打交道，也不断要求着需要具备一些其他领域的基础，至少能让沟通更加高效一些。也许你会对UI设计、后台DB、产品设计、测试、全栈领域感兴趣，在未来走上其他的职业道路也是有可能的。也有越来越多的前端人开始往全栈的方向发展，希望自己能够独自开发整个项目，也开始往项目架构等方向深入。在未来，自己在前端这个领域走了很久之后，也许会迎来新的挑战，如何突破自己呢？我们可以选择自己感兴趣的方向进行深入学习，如：</p><ol><li>全栈: 前后端开发，Node / 数据库/ Nginx / 反向代理 / 负载均衡 / PM2 / Docker 等服务端或者运维知识</li><li>跨平台: Hybrid / Flutter / React Native / Swift 等</li><li>视觉游戏: WebGL / 动画 / Three.js / Canvas / 游戏引擎 / VR / AR 等</li><li>底层框架: 浏览器引擎 / 框架底层 / 算法 等</li><li>人工智能: 机器学习 / 计算机视觉 / 前端智能化 等</li></ol><p>最近面试了阿里、腾讯、滴滴等公司，也和技术大牛们交流了很多，吸收了很多的经验，故总结一下：</p><p>前端开发者必须对前端基础技能足够熟悉，了解原理和细节，基于js往上衍生，如浏览器端的js如何开发、node端的js如何来开发，并且关注研发效率、质量、性能、错误监控等等；</p><p>能够做浏览器端的开发，能够做服务器端的开发，前端要和很多的工种打交道，可以看看在其他领域我们哪些可以和它相关联的一些能力去了解和学习，可以让视野更加全面；</p><p>写代码三到五年，即将会遇到一个瓶颈：需求我都能做，我的成就感在哪里？这时应该转换一个思维：是否有更高程度的抽象，更自动化的构建，持续不断地迭代我们的生产工具和生产方式。</p><p>做一个自己的产品，做一个公众号或小程序，把所有的想法（包括技术的、或者关于产品)，在上面不断地迭代，把这个产品打磨得越来越好，让自己的技术能够在一个面或一个点上不断地提升。比如追求网站的速度（浏览器端做缓存、运行机制等等性能优化），每个人都需要打磨一个东西，到一个阶段让自己的技术不断地提升，你对技术上的思考也会随着这个产品的不断完善变得更深入。</p><p><strong>建议：</strong></p><ol><li>在技术上js这条路上做得足够的深，对原理掌握得足够清楚，多了解周边的技能</li><li>做一个自己的产品，长年累月地去专注去打磨它改进它，加入你技术的想法</li></ol><p>希望未来自己能够不断警醒自己，需要学习的还有太多太多。在如今的智能化趋势下，越来越多的人开始关注人工智能，而阿里淘系D2C部门也是在从事前端智能化的方向，基于计算机视觉、深度学习等，从设计稿（sketch、psd、静态图片）一键智能生成高可维护的代码。未来还有更多的智能化领域值得我们去探索。</p><blockquote><p>看一个技术领域如同看企业发展，马化腾回忆微信成长发展过程时说：被别人干掉不如被自己干掉，被别人革命不如革自己的命。任何技术都像企业一样有盛衰荣辱，Javascript作为一门编程语言，前端作为一个技术领域，之所以有生命力，是源自于这个领域的从业者不断突破，不断创新，不断革自己的命。<br>因为做浏览器，对行业发展变化属于鸭先知，移动端带来的寒意和前端技术全面退守中后台，共同释放着前端技术应用场景缩小的信号。前端技术却顽强的创新和反击，从RN和Weex带来的FE-Native混合应用开始，PWA和Hight Level Web API对Web容器性能体验优化，TypeScript带来的强类型和大型项目代码组织能力，小程序在私域流量中的发力，Node.js带来服务能力和工程能力的升级，移动端APP带来场景缩小的冲击，被前端技术自身变革发展所缓解。所谓天晴修屋顶，未来技术发展趋势和脉络如何？给前端技术带来的冲击和机遇是什么？ ——出自《掘金》</p></blockquote><p>分享一些学习思维和方法:</p><p><strong>【学习思维】</strong><br><strong>入门：</strong></p><ol><li>兴趣是最好的老师，自律才能给你自由</li><li>量变到质变：从基础开始，技术需要不断沉淀</li><li>经常总结和分享</li></ol><p><strong>进阶：</strong></p><ol><li>知识是无边界的，术业有专攻，往自己感兴趣的方向深挖</li><li>从简单地做事，到对业务对需求有深层次的思考</li><li>与同行业、同龄人对比，补足自己的不足</li></ol><p><strong>高阶：</strong></p><ol><li>深入一到两个领域，能够有独特的见解以及自己的成果</li><li>勇于承担与挑战，合理分配自己的时间</li><li>参加交流会/技术分享大会，了解最新的知识架构</li></ol><p><strong>【学习方法】</strong></p><p><strong>初级：</strong></p><ol><li>视频教程：慕课网（课程优质）、大B站（说实话，干货还不少）、网易云课堂，还有一些国外优质的网站，如coursera、udacity等</li><li>文档教程：W3CSchool、菜鸟教程、MDN（权威手册）、多看官方文档（学习每一个新的技术栈，入门最好的方式是通过它的文档学习，可以系统的过一遍文档，手敲它每一个示例）</li><li>书籍：经典书籍阅读，如js红宝书</li><li>编码：一定要多写代码！！！每个知识点都写代码验证，并且能够通过项目驱动进行学习，在开发和维护项目的过程中总结经验</li><li>个人博客：总结和沉淀，把学习的内容用文字的形式记录下来，整理成文，并按学习的技术方向做归类</li><li>多看优质博客：推荐掘金、segmentFault、慕课网手记、CSDN、InfoQ 等中文社区，利用碎片化时间看一些高质量文章学习</li></ol><p><strong>中高级：</strong></p><ol><li>书籍：找到经典书籍阅读，适当做一些学习笔记</li><li>视频: 这个阶段可以深入看一些进阶类的项目开发、前端原理剖析与实现、前端架构方面的视频课程</li><li>文档: 可以尝试去看一下英文文档，因为英文文档更新迭代快，有利于第一时间掌握更新动态，况且有些中文文档翻译得不够准确</li><li>社区: StackOverflow、HackerNews，慕课网手记、掘金等，除了利用碎片化时间看一些高质量文章学习，也可以往上面发布一些优质文章</li><li>github: 关注 trending，参与开源社区的共建，并尝试自己造一些轮子</li><li>个人博客深入: 坚持写博客的习惯，把工作中深入学习到的一些非敏感知识记录下来并发布，而不仅仅去发布一些基础知识的学习了</li><li>原理深入: 研究常用框架背后的原理实现，不仅仅是运行时的 MVVM 框架，还可以是编译时的 webpack，能自己开发和封装框架</li><li>技术视野: 除了自己工作中的使用的技术栈之外，也要了解同类其它优秀的开源技术栈，从多个维度（feature 完整性、文档、上手难度、维护力度、生态等）去做对比</li><li>深入发展: 从兴趣入手，定向深入发展（算法、全栈、底层原理、视觉、人工智能等）</li><li>技术交流: 着眼中国与世界，多参加技术交流会，了解国内外先进技术和前端发展趋势</li></ol><hr><p><strong>前端知识体系整理</strong></p><p><a href="https://iloveyou11.github.io/2019/12/06/%E9%AB%98%E7%BA%A7%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/" target="_blank" rel="noopener">高级前端知识体系</a></p><p><a href="https://iloveyou11.github.io/2019/02/01/%E5%88%9D%E4%B8%AD%E7%BA%A7%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/" target="_blank" rel="noopener">初/中级前端知识体系</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>浅析node</title>
      <link href="/2019/09/26/node%E6%A1%86%E6%9E%B6%E6%A6%82%E8%A7%88/"/>
      <url>/2019/09/26/node%E6%A1%86%E6%9E%B6%E6%A6%82%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h4 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h4><p>Koa2和Koa1的区别，和express的区别？</p><ol><li>异步流程控制<br>Express 采用 callback 来处理异步，Koa v1 采用 generator，Koa v2 采用 async/await。<br>generator 和 async/await 使用同步的写法来处理异步，明显好于 callback 和 promise，async/await 在语义化上又要比 generator 更强。</li><li>错误处理<br>Express 使用 callback 捕获异常，对于深层次的异常捕获不了，Koa 使用 try catch，能更好地解决异常捕获。</li></ol><h4 id="koa"><a href="#koa" class="headerlink" title="koa"></a>koa</h4><h5 id="快速搭建项目"><a href="#快速搭建项目" class="headerlink" title="快速搭建项目"></a>快速搭建项目</h5><p>首先需要安装koa，新建js文件即可运行web服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const Koa = require(&apos;koa&apos;);</span><br><span class="line">const app = new Koa();</span><br><span class="line"></span><br><span class="line">app.use(async ctx =&gt; &#123;</span><br><span class="line">  ctx.body = &apos;Hello World&apos;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><p>或者可以直接使用koa提供的脚手架创建项目。</p><h5 id="koa洋葱模型"><a href="#koa洋葱模型" class="headerlink" title="koa洋葱模型"></a>koa洋葱模型</h5><p>经典的洋葱模型图：<br><img src="https://i.loli.net/2019/09/26/ZH2TNdJCfyxn9LW.png" alt="洋葱模型.png"></p><ol><li>一个请求到一旦到后端，就开始接触洋葱的最外层。</li><li>遇到一个next()，就进入下一层。不过值得提醒的是，异步函数的next(),与同步函数的next(),不是在同一个空间的，我们可以假想一个“异步空间栈”，后入先出。</li><li>什么时候到洋葱中心？就是遇到的第一个没有next的中间件,或者遇到一个中间件报错，就会把这个中间件当成中心，因为遇到错误了，不会再继续往里面走。这个时候，就开始向洋葱的外层开始走了。如果第一个中间件就没有next，直接返回的。那么就不存在洋葱模型。</li><li>一层一层外面走的时候，就先走位所有的同步中间件，再依次走“异步空间栈”的中间件。<h5 id="koa常用中间件"><a href="#koa常用中间件" class="headerlink" title="koa常用中间件"></a>koa常用中间件</h5></li></ol><p>【koa-views】<br>koa-views对需要进行视图模板渲染的应用是个不可缺少的中间件，支持ejs, nunjucks等众多模板引擎。</p><p>【koa-json】<br>JSON pretty-printed response middleware</p><p>【koa-router】<br>koa-router提供了全面的路由功能，比如类似Express的app.get/post/put的写法，URL命名参数、路由命名、支持加载多个中间件、嵌套路由等</p><p>【koa-bodyparser】<br>POST数据处理,koa.js并没有内置Request Body的解析器，当我们需要解析请求体时需要加载额外的中间件，官方提供的koa-bodyparser是个很不错的选择<br>支持x-www-form-urlencoded, application/json等格式的请求体，但不支持form-data的请求体，需要借助 formidable 这个库<br>也可以直接使用 koa-body 或 koa-better-body,import koaBody from ‘koa-body’;</p><p>【koa-session】<br>HTTP是无状态协议，为了保持用户状态，我们一般使用Session会话，koa-session提供了这样的功能，既支持将会话信息存储在本地Cookie，也支持存储在如Redis, MongoDB这样的外部存储设备。</p><p>【koa-jwt】<br>随着网站前后端分离方案的流行，越来越多的网站从Session Base转为使用Token Base，JWT(Json Web Tokens)作为一个开放的标准被很多网站采用，koa-jwt这个中间件使用JWT认证HTTP请求。</p><p>【@koa/cors】<br>解决跨域问题</p><p>【koa-helmet】<br>网络安全得到越来越多的重视，helmet 通过增加如Strict-Transport-Security, X-Frame-Options, X-Frame-Options等HTTP头提高Express应用程序的安全性，koa-helmet为koa程序提供了类似的功能，参考Node.js安全清单。</p><p>【koa-static】<br>Node.js除了处理动态请求，也可以用作类似Nginx的静态文件服务，在本地开发时特别方便<br>可用于加载前端文件或后端Fake数据，可结合 koa-compress 和 koa-mount 使用。</p><p>【koa-compose】<br>合并中间件，简化app.use的写法</p><p>【koa-compress】<br>当响应体比较大时，我们一般会启用类似Gzip的压缩技术减少传输内容，koa-compress提供了这样的功能，可根据需要进行灵活的配置。</p><p>【koa-logger】<br>koa-logger提供了输出请求日志的功能，包括请求的url、状态码、响应时间、响应体大小等信息，对于调试和跟踪应用程序特别有帮助，koa-bunyan-logger 提供了更丰富的功能。</p><p>【koa-onerror】<br>捕获错误<br>const onerror=require(‘koa-onerror’)<br>onerror(app)</p><p>还有很多，可根据项目需求自行探索……</p><h5 id="request和req的区别"><a href="#request和req的区别" class="headerlink" title="request和req的区别"></a>request和req的区别</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.req——Node 的 request 对象.</span><br><span class="line">ctx.res——Node 的 response 对象.</span><br><span class="line">ctx.request——koa 的 Request 对象.</span><br><span class="line">ctx.response——koa 的 Response 对象.</span><br></pre></td></tr></table></figure><h4 id="koa项目的webpack配置"><a href="#koa项目的webpack配置" class="headerlink" title="koa项目的webpack配置"></a>koa项目的webpack配置</h4><p>配置webpack进行打包（支持es6语法、统一打包为1个文件）</p><p>首先需要安装的开发依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;@babel/core&quot;: &quot;^7.6.2&quot;,</span><br><span class="line">    &quot;@babel/node&quot;: &quot;^7.6.2&quot;,</span><br><span class="line">    &quot;@babel/preset-env&quot;: &quot;^7.6.2&quot;,</span><br><span class="line">    &quot;babel-loader&quot;: &quot;^8.0.6&quot;,</span><br><span class="line">    &quot;clean-webpack-plugin&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">    &quot;cross-env&quot;: &quot;^6.0.0&quot;,</span><br><span class="line">    &quot;nodemon&quot;: &quot;^1.19.2&quot;,</span><br><span class="line">    &quot;webpack&quot;: &quot;^4.41.0&quot;,</span><br><span class="line">    &quot;webpack-cli&quot;: &quot;^3.3.9&quot;,</span><br><span class="line">    &quot;webpack-node-externals&quot;: &quot;^1.7.2&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>webpack.config.js 配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">const nodeExternals = require(&apos;webpack-node-externals&apos;)</span><br><span class="line">const &#123;</span><br><span class="line">    CleanWebpackPlugin</span><br><span class="line">&#125; = require(&apos;clean-webpack-plugin&apos;)</span><br><span class="line"></span><br><span class="line">const config = &#123;</span><br><span class="line">    target: &apos;node&apos;,</span><br><span class="line">    mode: &apos;development&apos;,</span><br><span class="line">    entry: &#123;</span><br><span class="line">        server: path.join(__dirname, &apos;./app.js&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: &apos;[name].bundle.js&apos;,</span><br><span class="line">        path: path.join(__dirname, &apos;./dist&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: &apos;eval-source-map&apos;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: /\.(js|jsx)$/,</span><br><span class="line">            use: &#123;</span><br><span class="line">                loader: &apos;babel-loader&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            exclude: [path.join(__dirname, &apos;./node_modules&apos;)]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    externals: [nodeExternals()],</span><br><span class="line">    plugins: [</span><br><span class="line">        new CleanWebpackPlugin()</span><br><span class="line">    ],</span><br><span class="line">    node: &#123;</span><br><span class="line">        console: true,</span><br><span class="line">        global: true,</span><br><span class="line">        process: true,</span><br><span class="line">        Buffer: true,</span><br><span class="line">        __filename: true,</span><br><span class="line">        __dirname: true,</span><br><span class="line">        setImmediate: true,</span><br><span class="line">        path: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = config</span><br></pre></td></tr></table></figure><p>.babelrc 配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;@babel/preset-env&quot;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;targets&quot;: &#123;</span><br><span class="line">          &quot;node&quot;: &quot;current&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行<code>npx webpack</code>即可打包，也可配置<code>&quot;build&quot;: &quot;webpack&quot;</code>，运行<code>npm run build</code></p><p>运行<code>nodemon --exec babel-node app.js</code>即可实现开发热加载，也可配置<code>&quot;watch&quot;: &quot;nodemon --exec babel-node app.js&quot;</code>，运行<code>npm run watch</code></p><h5 id="调试webpack"><a href="#调试webpack" class="headerlink" title="调试webpack"></a>调试webpack</h5><p><code>npx node --inspect-brk .\node_modules\.bin\webpack --inline --progress</code>,<br>打开<code>chrome://inspect/#devices</code>，点击<code>inspect</code>，即可进行调试。</p><p>同样可配置<code>&quot;webpack:debug&quot;: &quot;npx node --inspect-brk .\\node_modules\\.bin\\webpack --inline --progress&quot;</code>，运行<code>npm run webpack:debug</code>即可。</p><h5 id="vscode调试"><a href="#vscode调试" class="headerlink" title="vscode调试"></a>vscode调试</h5><ol><li>添加配置</li><li>可选择“node”、“nodemon”……等调试脚本</li><li>修改配置内容（文件启动入口等）<br>举个栗子：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&quot;configurations&quot;: [&#123;</span><br><span class="line">  &quot;type&quot;: &quot;node&quot;,</span><br><span class="line">  &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;nodemon&quot;,</span><br><span class="line">  // 命令所在入口</span><br><span class="line">  &quot;runtimeExecutable&quot;:</span><br><span class="line">  &quot;$&#123;workspaceFolder&#125;/node_modules/.bin/nodemon&quot;,</span><br><span class="line">  // 调试文件</span><br><span class="line">  &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;/app.js&quot;,</span><br><span class="line">  &quot;restart&quot;: true,</span><br><span class="line">  &quot;console&quot;: &quot;integratedTerminal&quot;,</span><br><span class="line">  &quot;internalConsoleOptions&quot;: &quot;neverOpen&quot;,</span><br><span class="line">  // 使用babel-node支持ES6语法</span><br><span class="line">  &quot;runtimeArgs&quot;: [&quot;--exec&quot;, &quot;babel-node&quot;]</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><ol start="4"><li>在vscode中打断点，进行断点调试即可</li></ol><h5 id="如何更新npm包"><a href="#如何更新npm包" class="headerlink" title="如何更新npm包"></a>如何更新npm包</h5><p>使用<code>npm-check-updates</code>，<code>npm install -g npm-check-updates</code>全局安装后，使用<code>ncu</code>检查当前<code>package.json</code>中是否存在可更新的npm包，运行<code>ncu -u</code>即可更新包版本。</p><h5 id="整合中间件"><a href="#整合中间件" class="headerlink" title="整合中间件"></a>整合中间件</h5><p>使用<code>koa-compose</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import compose from &apos;koa-compose&apos;</span><br><span class="line"></span><br><span class="line">const middlewares = compose([</span><br><span class="line">    helmet(),</span><br><span class="line">    koaBody(),</span><br><span class="line">    cors(),</span><br><span class="line">    bodyparser(&#123;</span><br><span class="line">        enableTypes: [&apos;json&apos;, &apos;form&apos;, &apos;text&apos;]</span><br><span class="line">    &#125;),</span><br><span class="line">    json(),</span><br><span class="line">    mystatic(__dirname + &apos;/public&apos;),</span><br><span class="line">    views(__dirname + &apos;/views&apos;, &#123;</span><br><span class="line">        extension: &apos;ejs&apos;</span><br><span class="line">    &#125;),</span><br><span class="line">    router()</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">app.use(middlewares)</span><br></pre></td></tr></table></figure><p><strong>tips</strong>：以上为ES6语法，启动时应采用<code>babel-node</code>，如运行<code>nodemon --exec babel-node app.js</code>即可</p><h5 id="webpack-config分离与合并"><a href="#webpack-config分离与合并" class="headerlink" title="webpack config分离与合并"></a>webpack config分离与合并</h5><p>按照开发环境和生产环境可以配置出不同的 webpack config 文件，因此需要将其分离更加组织管理。</p><p>我们可以建立config文件，存放<code>webpack.config.base.js</code> <code>webpack.config.dev.js</code> <code>webpack.config.prod.js</code>三个文件，需要使用到<code>webpack-merge</code>插件，下面逐一介绍：</p><p>【webpack.config.base.js】</p><p>DefinePlugin中定义一些全局常量，以便代码中使用，如下，添加了process.env常量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">const nodeExternals = require(&apos;webpack-node-externals&apos;)</span><br><span class="line">const &#123;CleanWebpackPlugin&#125; = require(&apos;clean-webpack-plugin&apos;)</span><br><span class="line">const webpack = require(&apos;webpack&apos;)</span><br><span class="line"></span><br><span class="line">const config = &#123;</span><br><span class="line">    target: &apos;node&apos;,</span><br><span class="line">    entry: &#123;</span><br><span class="line">        server: path.join(__dirname, &apos;./app.js&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: &apos;[name].bundle.js&apos;,</span><br><span class="line">        path: path.join(__dirname, &apos;./dist&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: /\.(js|jsx)$/,</span><br><span class="line">            use: &#123;</span><br><span class="line">                loader: &apos;babel-loader&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            exclude: [path.join(__dirname, &apos;./node_modules&apos;)]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    externals: [nodeExternals()],</span><br><span class="line">    plugins: [</span><br><span class="line">        new CleanWebpackPlugin(),</span><br><span class="line">        // 新增</span><br><span class="line">        // 创建process.env常量</span><br><span class="line">        new webpack.DefinePlugin(&#123;</span><br><span class="line">            &apos;process.env&apos;: &#123;</span><br><span class="line">                NODE_ENV: (process.env.NODE_ENV === &apos;production&apos; || process.env.NODE_ENV === &apos;prod&apos;) ? &quot;&apos;production&apos;&quot; : &quot;&apos;development&apos;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    node: &#123;</span><br><span class="line">        console: true,</span><br><span class="line">        global: true,</span><br><span class="line">        process: true,</span><br><span class="line">        Buffer: true,</span><br><span class="line">        __filename: true,</span><br><span class="line">        __dirname: true,</span><br><span class="line">        setImmediate: true,</span><br><span class="line">        path: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = config</span><br></pre></td></tr></table></figure><p>【webpack.config.dev.js】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const webpackMerge = require(&apos;webpack-merge&apos;)</span><br><span class="line">const baseConfig = require(&apos;./webpack.config.base&apos;)</span><br><span class="line"></span><br><span class="line">const config = webpackMerge(baseConfig, &#123;</span><br><span class="line">    devtool: &apos;eval-source-map&apos;,</span><br><span class="line">    mode: &apos;development&apos;,</span><br><span class="line">    stats: &#123;</span><br><span class="line">        children: false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">module.exports = config</span><br></pre></td></tr></table></figure><p>【webpack.config.prod.js】</p><p>terser-webpack-plugin是进行js压缩的插件，详见<a href="https://webpack.js.org/plugins/terser-webpack-plugin/#root" target="_blank" rel="noopener">TerserWebpackPlugin</a>，其中有详细的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const webpackMerge = require(&apos;webpack-merge&apos;)</span><br><span class="line">const baseConfig = require(&apos;./webpack.config.base&apos;)</span><br><span class="line">const TerserPlugin = require(&apos;terser-webpack-plugin&apos;);</span><br><span class="line"></span><br><span class="line">const config = webpackMerge(baseConfig, &#123;</span><br><span class="line">    devtool: &apos;eval-source-map&apos;,</span><br><span class="line">    mode: &apos;production&apos;,</span><br><span class="line">    stats: &#123;</span><br><span class="line">        children: false,</span><br><span class="line">        warnings: false</span><br><span class="line">    &#125;,</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        minimize: true,</span><br><span class="line">        minimizer: [new TerserPlugin()],</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">module.exports = config</span><br></pre></td></tr></table></figure><h5 id="项目可优化部分"><a href="#项目可优化部分" class="headerlink" title="项目可优化部分"></a>项目可优化部分</h5><p>1、提取公共模块，使用 <a href="https://webpack.js.org/plugins/split-chunks-plugin/" target="_blank" rel="noopener">SplitChunksPlugin</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  //...</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        commons: &#123;</span><br><span class="line">          name: &apos;commons&apos;,</span><br><span class="line">          chunks: &apos;initial&apos;,</span><br><span class="line">          minChunks: 2</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用<code>cross-env NODE_ENV=production webpack --config config/webpack.config.prod.js</code>进行打包，或者在package.json中配置命令亦可。</p><p>2、另外在koa项目中，不建议在routes路由内部写大量的业务逻辑代码，而是将其提炼为单独controller，使用函数控制路由内部实现。</p><p>3、在app.js中，判断当前环境为生产环境时，进行中间件压缩，需要使用到<code>koa-compress</code>模块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import compress from &apos;koa-compress&apos;</span><br><span class="line">const isDev = process.env.NODE_ENV === &apos;production&apos; ? false : true</span><br><span class="line">// 生产环境下压缩中间件</span><br><span class="line">if (!isDev) &#123;</span><br><span class="line">    app.use(compress())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/iloveyou11/koa-webpack" target="_blank" rel="noopener">github demo地址（koa的webpack配置）</a></p><h4 id="NodeMailer邮件服务"><a href="#NodeMailer邮件服务" class="headerlink" title="NodeMailer邮件服务"></a>NodeMailer邮件服务</h4><p>我们可以使用nodemailer模块实现发送邮件的服务。<br><code>npm install nodemailer</code>进行安装即可。</p><p>基础示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line">const nodemailer = require(&apos;nodemailer&apos;);</span><br><span class="line">async function main() &#123;</span><br><span class="line">    let transporter = nodemailer.createTransport(&#123;</span><br><span class="line">        host: &apos;smtp.qq.com&apos;,</span><br><span class="line">        port: 587,</span><br><span class="line">        secure: false, //</span><br><span class="line">        auth: &#123;</span><br><span class="line">            user: &apos;xxx@qq.com&apos;, //发送人邮箱</span><br><span class="line">            pass: &apos;xxx&apos; //授权码</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    let info = await transporter.sendMail(&#123;</span><br><span class="line">        from: &apos;&quot;name&quot; &lt;xx@qq.com&gt;&apos;, // 发送人姓名和邮箱</span><br><span class="line">        to: &apos;xx@qq.com&apos;, //接收人邮箱</span><br><span class="line">        subject: &apos;Hello&apos;,</span><br><span class="line">        text: &apos;你爱我吗&apos;,</span><br><span class="line">        html: &apos;&lt;b&gt;你爱我吗？&lt;/b&gt;&apos;</span><br><span class="line">    &#125;);</span><br><span class="line">    console.log(&apos;Message sent: %s&apos;, info.messageId);</span><br><span class="line">&#125;</span><br><span class="line">main().catch(console.error);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>深入理解react</title>
      <link href="/2019/09/25/react%E6%A1%86%E6%9E%B6%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/09/25/react%E6%A1%86%E6%9E%B6%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h4 id="react基础"><a href="#react基础" class="headerlink" title="react基础"></a>react基础</h4><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p>安装官方脚手架项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g create-react-app</span><br><span class="line">create-react-app (name)</span><br></pre></td></tr></table></figure><p><strong>react组件核心概念</strong></p><ul><li>引入Component组件</li><li>JSX语法</li><li>渲染虚拟DOM</li><li>组件props</li><li>组件state</li><li>组件嵌套</li><li>组件生命周期</li></ul><p><strong>React特点</strong></p><ul><li>声明式设计 −React采用声明范式，可以轻松描述应用。</li><li>高效 −React通过对DOM的模拟，最大限度地减少与DOM的交互。</li><li>灵活 −React可以与已知的库或框架很好地配合。</li><li>JSX − JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。</li><li>组件 − 通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。</li><li>单向响应的数据流 − React 实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单</li></ul><p><strong>总结：</strong></p><ul><li>声明式开发：采用数据驱动的开发方式，只用关注数据，不用再关注复杂的DOM操作</li><li>框架并存：react可以只负责渲染指定id的dom，其他的dom渲染可以采用其他框架</li><li>组件化：采用组件化形式编写，父子组件通信，父组件可以向子组件传递属性、函数，子组件可以通过this.props接收</li><li>单向数据流：只允许子组件接收和使用父组件的属性，不允许修改父组件的属性，只能间接地调用父组件地函数。React地这种机制保证了错误的快速定位</li><li>视图层框架：react将自己定位为视图层框架，是因为它很好地解决了视图渲染与数据绑定的问题，但是没有解决复杂层级组件的通信问题，要借用flux、redux、mobx等解决</li><li>函数式编程：存在大量的函数，这样为自动化测试提供了很大的便利</li></ul><h5 id="jsx"><a href="#jsx" class="headerlink" title="jsx"></a>jsx</h5><p>JSX 是一种用于描述UI的JavaScript扩展语法，JSX可以使用JavaScript表达式， 因为JSX本质上仍然是JavaScript。JSX语法只是 React.createElement ( )的语法糖， 所有的JSX语法最终都会被转换成对这个方法的调用</p><h5 id="this指向问题"><a href="#this指向问题" class="headerlink" title="this指向问题"></a>this指向问题</h5><p><a href="https://segmentfault.com/a/1190000013609997" target="_blank" rel="noopener">React事件this指向问题</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、&lt;span onClick=&#123;<span class="keyword">this</span>.del.bind(<span class="keyword">this</span>)&#125;&gt;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">2、constructor(props) &#123;</span></span><br><span class="line"><span class="regexp">        super(props);</span></span><br><span class="line"><span class="regexp">        this.state = &#123;&#125;;</span></span><br><span class="line"><span class="regexp">        this.del=this.del.bind(this)</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">3、&lt;span onClick=&#123;::this.del&#125;&gt;&lt;/</span>span&gt;</span><br><span class="line"><span class="number">4</span>、del=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'del'</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h5><p>React 16之后有三个生命周期被废弃(但并未删除)</p><ul><li>componentWillMount</li><li>componentWillReceiveProps</li><li>componentWillUpdate</li></ul><p>官方计划在17版本完全删除这三个函数，只保留UNSAVE_前缀的三个函数，目的是为了向下兼容，但是对于开发者而言应该尽量避免使用他们，而是使用新增的生命周期函数替代它们<br>目前React 16.8 +的生命周期分为三个阶段,分别是挂载阶段、更新阶段、卸载阶段</p><p><strong>挂载阶段:</strong></p><ul><li><strong>constructor</strong>: 构造函数，最先被执行,我们通常在构造函数里初始化state对象或者给自定义方法绑定this</li><li><strong>getDerivedStateFromProps</strong>: static getDerivedStateFromProps(nextProps, prevState),这是个静态方法,当我们接收到新的属性想去修改我们state，可以使用getDerivedStateFromProps</li><li><strong>render</strong>: render函数是纯函数，只返回需要渲染的东西，不应该包含其它的业务逻辑,可以返回原生的DOM、React组件、Fragment、Portals、字符串和数字、Boolean和null等内容</li><li><strong>componentDidMount</strong>: 组件装载之后调用，此时我们可以获取到DOM节点并操作，比如对canvas，svg的操作，服务器请求，订阅都可以写在这个里面，但是记得在componentWillUnmount中取消订阅</li></ul><p><strong>更新阶段:</strong></p><ul><li><strong>getDerivedStateFromProps</strong>: 此方法在更新个挂载阶段都可能会调用</li><li><strong>shouldComponentUpdate</strong>: shouldComponentUpdate(nextProps, nextState),有两个参数nextProps和nextState，表示新的属性和变化之后的state，返回一个布尔值，true表示会触发重新渲染，false表示不会触发重新渲染，默认返回true,我们通常利用此生命周期来优化React程序性能</li><li><strong>render</strong>: 更新阶段也会触发此生命周期</li><li><strong>getSnapshotBeforeUpdate</strong>: getSnapshotBeforeUpdate(prevProps, prevState),这个方法在render之后，componentDidUpdate之前调用，有两个参数prevProps和prevState，表示之前的属性和之前的state，这个函数有一个返回值，会作为第三个参数传给componentDidUpdate，如果你不想要返回值，可以返回null，此生命周期必须与componentDidUpdate搭配使用</li><li><strong>componentDidUpdate</strong>: componentDidUpdate(prevProps, prevState, snapshot),该方法在getSnapshotBeforeUpdate方法之后被调用，有三个参数prevProps，prevState，snapshot，表示之前的props，之前的state，和snapshot。第三个参数是getSnapshotBeforeUpdate返回的,如果触发某些回调函数时需要用到 DOM 元素的状态，则将对比或计算的过程迁移至 getSnapshotBeforeUpdate，然后在 componentDidUpdate 中统一触发回调或更新状态。</li></ul><p><strong>卸载阶段:</strong></p><ul><li><strong>componentWillUnmount</strong>: 当我们的组件被卸载或者销毁了就会调用，我们可以在这个函数里去清除一些定时器，取消网络请求，清理无效的DOM元素等垃圾清理工作</li></ul><h5 id="组件类型"><a href="#组件类型" class="headerlink" title="组件类型"></a>组件类型</h5><p><strong>展示组件(Presentational component)和容器组件(Container component)</strong></p><ul><li>展示组件关心组件看起来是什么。展示专门通过 props 接受数据和回调，并且几乎不会有自身的状态，但当展示组件拥有自身的状态时，通常也只关心 UI 状态而不是数据的状态。</li><li>容器组件则更关心组件是如何运作的。容器组件会为展示组件或者其它容器组件提供数据和行为(behavior)，它们会调用 Flux actions，并将其作为回调提供给展示组件。容器组件经常是有状态的，因为它们是(其它组件的)数据源。</li></ul><p><strong>类组件(Class component)和函数式组件(Functional component)</strong></p><ul><li>类组件不仅允许你使用更多额外的功能，如组件自身的状态和生命周期钩子，也能使组件直接访问 store 并维持状态</li><li>当组件仅是接收 props，并将组件自身渲染到页面时，该组件就是一个 ‘无状态组件(stateless component)’，可以使用一个纯函数来创建这样的组件。这种组件也被称为哑组件(dumb components)或展示组件</li></ul><p><strong>(组件的)状态(state)和属性(props)</strong></p><ul><li>State 是一种数据结构，用于组件挂载时所需数据的默认值。State 可能会随着时间的推移而发生突变，但多数时候是作为用户事件行为的结果。</li><li>Props(properties 的简写)则是组件的配置。props 由父组件传递给子组件，并且就子组件而言，props 是不可变的(immutable)。组件不能改变自身的 props，但是可以把其子组件的 props 放在一起(统一管理)。Props 也不仅仅是数据–回调函数也可以通过 props 传递。</li></ul><p><strong>何为受控组件(controlled component)</strong></p><p>在 HTML 中，类似 <code>&lt;input&gt;, &lt;textarea&gt; 和 &lt;select&gt;</code> 这样的表单元素会维护自身的状态，并基于用户的输入来更新。当用户提交表单时，前面提到的元素的值将随表单一起被发送。但在 React 中会有些不同，包含表单元素的组件将会在 state 中追踪输入的值，并且每次调用回调函数时，如 onChange 会更新 state，重新渲染组件。一个输入表单元素，它的值通过 React 的这种方式来控制，这样的元素就被称为”受控元素”。</p><p><strong>何为高阶组件(higher order component)</strong></p><p>高阶组件是一个以组件为参数并返回一个新组件的函数。HOC 运行你重用代码、逻辑和引导抽象。最常见的可能是 Redux 的 connect 函数。除了简单分享工具库和简单的组合，HOC 最好的方式是共享 React 组件之间的行为。如果你发现你在不同的地方写了大量代码来做同一件事时，就应该考虑将代码重构为可重用的 HOC。</p><h5 id="状态管理——React-redux"><a href="#状态管理——React-redux" class="headerlink" title="状态管理——React-redux"></a>状态管理——React-redux</h5><img src="https://i.loli.net/2019/09/26/mlMWQBGIaOqCAot.png" alt="redux-flow" width="60%"><p><strong>Redux的设计原则：</strong></p><ul><li>store是唯一的</li><li>只有store能够改变state的内容（reducer不要改变state的内容）</li><li>Reducer必须是纯函数</li></ul><p><strong>Store相关函数</strong>：</p><ul><li>createStore：创建store</li><li>store.dispatch：派发action</li><li>store.getState：获取state</li><li>store.subscribe：监听store的变化，store变化时自动运行函数</li></ul><p><strong>功能：</strong></p><ul><li>React-Redux 是为了方便在 React 项目中使用 Redux 所封装的库</li><li>React-Redux 把组件分为两类：UI 组件（Component）和容器组件（Container）</li><li>React-Redux 提供 Provider 组件，使它的子组件（容器组件）都能拿到 state</li><li>连接通信（connect） - 连接 UI 组件和容器组件，为输入输出 state 做准备</li><li>逻辑输入（mapStateToProps）- 将容器组件的 state 映射为 UI 组件的 props</li><li>逻辑输出（mapDispatchToProps） - 用户动作触发 UI 组件绑定事件，dispatch 更新容器组件 state</li></ul><p><strong>相关操作：</strong></p><ol><li><p>connect() 示例：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="keyword">const</span> Container = connect(</span><br><span class="line">    mapStateToProps,</span><br><span class="line">    mapDispatchToProps</span><br><span class="line">)(Component);</span><br></pre></td></tr></table></figure></li><li><p>mapStateToProps() 示例：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state, ownProps</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> props;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><p>mapStateToProps 会订阅 Store，每当 state 更新，就会自动执行，重新计算 UI 组件的 props，从而触发 UI 组件的重新渲染</p><ol start="3"><li>mapDispatchToProps 示例：<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mapDispatchToProps 函数：</span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = <span class="function">(<span class="params">dispatch, ownProps</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        handleClick: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            dispatch(action);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">mapDispatchToProps 对象：</span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = &#123;</span><br><span class="line">    handleClick: actionCreator;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><p>mapDispatchToProps 用来建立 UI 组件的 props 到 Store.dispatch 方法的映射<br>至此，容器组件与内部的 UI 组件的通信已经解决。容器组件还需要与外部通信，拿到 state 对象。<br>React-Redux 提供 Provider 组件，可以让容器组件拿到 state。</p><p>4、provider</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Provider&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> todoApp <span class="keyword">from</span> <span class="string">'./reducers'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./components/App'</span>;</span><br><span class="line"><span class="keyword">const</span> store = createStore(todoApp);</span><br><span class="line">render(</span><br><span class="line">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">        &lt;App /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Provider&gt;,</span></span><br><span class="line"><span class="regexp">    document.getElementById('root')</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><h5 id="状态管理——mobx"><a href="#状态管理——mobx" class="headerlink" title="状态管理——mobx"></a>状态管理——mobx</h5><ol><li>定义需要被全局观察的state，用@observable修饰</li><li>定义改变state的行为函数，用@action修饰</li><li>定义基于某state，通过计算产生新值的get函数，用@computed修饰</li><li>定义基于所传参数，通过计算得到state值的set函数，用@computed修饰</li><li>定义基于state变化，自动触发的行为函数，用@autorun修饰</li><li>在文件末尾，新建一个该组件的实例，并export</li></ol><h4 id="react原理"><a href="#react原理" class="headerlink" title="react原理"></a>react原理</h4><h5 id="调用-setState-后？"><a href="#调用-setState-后？" class="headerlink" title="调用 setState 后？"></a>调用 setState 后？</h5><p>在代码中调用 setState 函数之后，React 会将传入的参数对象与组件当前的状态合并，然后触发所谓的调和过程（Reconciliation）。</p><p>经过调和过程，React 会以相对高效的方式根据新的状态构建 React 元素树并且着手重新渲染整个 UI 界面。在 React 得到元素树之后，React 会自动计算出新的树与老树的节点差异，然后根据差异对界面进行最小化重渲染。</p><p>在差异计算算法中，React 能够相对精确地知道哪些位置发生了改变以及应该如何改变，这就保证了按需更新，而不是全部重新渲染。</p><h5 id="react-diff-原理"><a href="#react-diff-原理" class="headerlink" title="react diff 原理"></a>react diff 原理</h5><p>把树形结构按照层级分解，只比较同级元素。<br>给列表结构的每个单元添加唯一的 key 属性，方便比较。<br>React 只会匹配相同 class 的 component（这里面的 class 指的是组件的名字）</p><p>合并操作，调用 component 的 setState 方法的时候, React 将其标记为 dirty.到每一个事件循环结束, React 检查所有标记 dirty 的 component 重新绘制.<br>选择性子树渲染。开发人员可以重写 shouldComponentUpdate 提高 diff 的性能。</p><h5 id="flux-思想"><a href="#flux-思想" class="headerlink" title="flux 思想"></a>flux 思想</h5><p>Flux 的最大特点，就是数据的”单向流动”。</p><ol><li>用户访问 View</li><li>View 发出用户的 Action</li><li>Dispatcher 收到 Action，要求 Store 进行相应的更新</li><li>Store 更新后，发出一个”change”事件</li><li>View 收到”change”事件后，更新页面</li></ol><h5 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h5><p>Refs 是 React 中引用的简写。它是一个有助于存储对特定的 React 元素或组件的引用的属性，它将由组件渲染配置函数返回。用于对 render() 返回的特定元素或组件的引用。当需要进行 DOM 测量或向组件添加方法时，它们会派上用场。<br>以下是应该使用 refs 的情况： </p><ol><li>需要管理焦点、</li><li>选择文本或媒体播放时 </li><li>触发式动画</li><li>第三方 DOM 库集成</li></ol><h4 id="react应用"><a href="#react应用" class="headerlink" title="react应用"></a>react应用</h4><h5 id="性能优化方案"><a href="#性能优化方案" class="headerlink" title="性能优化方案"></a>性能优化方案</h5><p>组件更新：</p><p><strong>1、PureComponent</strong></p><p>如果组件挂载了connect连接react-redux，则当store内部的数据一旦发生改变时，相关联的组件都会重新渲染，而组件是否需要重新渲染取决于它所需要的部分属性，为了提高性能，新版的react提供了 PureComponent模块，<strong>Component改为PureComponent</strong>，能够内置shouldComponentUpdate函数，根据需要进行刷新，能提高性能。</p><p>但是我们要注意的是，这里的PureRender是浅比较的，因为深比较的场景是相当昂贵的。所以我们要注意：不要直接为props设置对象或者数组、不要将方法直接绑定在元素上，因为其实函数也是对象.<br>提醒：如果使用PureComponent，<strong>建议使用immutable.js</strong>管理项目数据，若未使用immutable.js，则尽量使用Component，否则会遇到一些意想不到的错误。</p><p><strong>2、PureRenderMixin 优化</strong></p><p>React 最基本的优化方式是使用<strong>PureRenderMixin</strong>，安装工具 npm i react-addons-pure-render-mixin –save，然后在组件中引用并使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;</span><br><span class="line">import PureRenderMixin from &apos;react-addons-pure-render-mixin&apos;</span><br><span class="line">class List extends React.Component &#123;</span><br><span class="line">    constructor(props, context) &#123;</span><br><span class="line">        super(props, context);</span><br><span class="line">        this.shouldComponentUpdate = PureRenderMixin.shouldComponentUpdate.bind(this);</span><br><span class="line">    &#125;</span><br><span class="line">    //...省略其他内容...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>React 有一个生命周期 hook 叫做shouldComponentUpdate，组件每次更新之前，都要过一遍这个函数，如果这个函数返回true则更新，如果返回false则不更新。而默认情况下，这个函数会一直返回true，就是说，如果有一些无效的改动触发了这个函数，也会导致无效的更新。<strong>因此，我们在开发过程中，在每个 React 组件中都尽量使用PureRenderMixin</strong></p><p><strong>组件管理：</strong></p><p><strong>3、Immutable.js</strong></p><p>React 的终极优化是使用 Immutable.js 来处理数据，Immutable 实现了 js 中不可变数据的概念。<br>但是也不是所有的场景都适合用它，当我们组件的props和state中的数据结构层次不深（例如普通的数组、对象等）的时候，就没必要用它。但是当数据结构层次很深（例如obj.x.y.a.b = 10这种），你就得考虑使用了。</p><p>之所以不轻易使用是，Immutable 定义了一种新的操作数据的语法，如下。和我们平时操作 js 数据完全不一样，而且每个地方都得这么用，学习成本高、易遗漏，风险很高。</p><p><strong>4、单个react组件性能优化</strong></p><p>render里面尽量减少新建变量和bind函数，传递参数是尽量减少传递参数的数量。<br><img src="https://i.loli.net/2019/09/26/HqVrtGhgTfDIAxB.png" width="80%" alt="单个react组件性能优化"></p><p><strong>5、多个react组件性能优化，key的优化</strong></p><p>给列表中的组件添加key属性——（针对列表遍历类型，遍历时候增加唯一 key 属性值，对子组件进行唯一性识别，准确知道要操作的子组件，提高 DOM Diff 的效率)</p><p>关于key的使用我们要注意的是，这个key值要稳定不变的，就如同身份证号之于我们是稳定不变的一样。</p><p>一个常见的错误就是，拿数组的的下标值去当做key，这个是很危险的，代码如下，我们一定要避免。</p><h5 id="异步处理中间件"><a href="#异步处理中间件" class="headerlink" title="异步处理中间件"></a>异步处理中间件</h5><ul><li><strong>Redux-thunk：redux的中间件</strong></li></ul><p>使用redux-thunk，可以将异步操作代码放入actionCreator中，在action中直接返回函数，而不是传统的action对象<br>优点：将组件生命周期中的大量异步逻辑代码提取出来，可以简化代码，方便自动化测试</p><p>原理：是store与action之间的中间件，修改了dispatch方法的逻辑，如果action是对象，直接将action连同state传给reducer；如果action是函数，则先执行函数后，再处理action的派发事件。</p><ul><li>Redux-saga：redux中间件</li></ul><p>将异步逻辑拆分到sagas.js里面统一管理</p><h5 id="服务器渲染SSR"><a href="#服务器渲染SSR" class="headerlink" title="服务器渲染SSR"></a>服务器渲染SSR</h5><p><strong>客户端渲染路线：</strong></p><ol><li>请求html</li><li>服务端返回html</li><li>浏览器下载html里面的js/css文件</li><li>等待js文件下载完成</li><li>等待js加载并初始化完成</li><li>js代码可以运行后由js代码向后端请求数据( ajax/fetch )</li><li>等待后端数据返回</li><li>react-dom( 客户端 )从无到完整地，把数据渲染为响应页面</li></ol><p><strong>服务端渲染路线：</strong></p><ol><li>请求html</li><li>服务端请求数据( 内网请求快 )</li><li>服务器初始渲染（服务端性能好，较快）</li><li>服务端返回已经有正确内容的页面</li><li>客户端请求js/css文件</li><li>等待js文件下载完成</li><li>等待js加载并初始化完成</li><li>react-dom( 客户端 )把剩下一部分渲染完成( 内容小，渲染快)</li></ol><h5 id="react-hooks"><a href="#react-hooks" class="headerlink" title="react hooks"></a>react hooks</h5><p>使用react hooks可以极大地简化代码写法，使用function代替原始的class写法，以下是class和function的对比：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原始class组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCount</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.interval = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123; <span class="attr">count</span>: <span class="keyword">this</span>.state.count + <span class="number">1</span> &#125;)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.interval) &#123;</span><br><span class="line">      clearInterval(<span class="keyword">this</span>.interval)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用react hooks</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyCountFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> interval = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      setCount(<span class="function"><span class="params">c</span> =&gt;</span> c + <span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> clearInterval(interval)</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyCountFunction</span><br></pre></td></tr></table></figure><p><strong>状态管理的hook：useState &amp; useReducer</strong></p><ol><li><p>使用useState</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyCountFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>) <span class="comment">//0是默认值</span></span><br><span class="line">  </span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> interval = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      setCount(<span class="function"><span class="params">c</span> =&gt;</span> c + <span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> clearInterval(interval)</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyCountFunction</span><br></pre></td></tr></table></figure></li><li><p>使用useReducer</p></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useReducer, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countReducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'add'</span>:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'minus'</span>:</span><br><span class="line">      <span class="keyword">return</span> state - <span class="number">1</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyCountFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, dispatchCount] = useReducer(countReducer, <span class="number">0</span>)</span><br><span class="line">  </span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> interval = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      dispatchCount(&#123; <span class="attr">type</span>: <span class="string">'add'</span> &#125;)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> clearInterval(interval)</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyCountFunction</span><br></pre></td></tr></table></figure><p><strong>useEffect和useLayoutEffect</strong><br><strong>useEffect</strong><br>如果第二个参数不传，则组件每次状态改变重新渲染时，都会执行useEffect中定义的函数<br>如果第二个参数传[]，则组件只在第一次渲染时会执行响应函数<br>如果第二个参数传[name]，则组件只有修改name时才会执行响应函数<br>如果第二个参数传[count]，则组件只有修改count时才会执行响应函数</p><p><strong>[react官方建议]</strong><br>在useEffect中用到的任何在外部定义的变量，就要把这个值作为第二项将其传进去，<br>我们称之为dependency，根据dependency判断是否要重新执行useEffect</p><p>useLayoutEffect永远要比useEffect先执行<br><strong>[原理]</strong><br>useLayoutEffect是在没有更新到真正的dom内容生成html之前执行<br>useEffect是在真正的dom内容生成html之后执行<br>如果useLayoutEffect时间执行过长，会影响页面渲染，如果没有特殊需要，不要使用useLayoutEffect</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useReducer, useEffect, useLayoutEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countReducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'add'</span>:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'minus'</span>:</span><br><span class="line">      <span class="keyword">return</span> state - <span class="number">1</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyCountFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, dispatchCount] = useReducer(countReducer, <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = useState(<span class="string">'yp'</span>)</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'useEffect start'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'useEffect end'</span>);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  useLayoutEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'useLayoutEffect start'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'useLayoutEffectend'</span>);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input type=<span class="string">"text"</span> value=&#123;name&#125; onChange=&#123;e =&gt; setName(e.target.value)&#125; /&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; dispatchCount(&#123; <span class="attr">type</span>: <span class="string">'add'</span> &#125;)&#125;&gt;+<span class="number">1</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyCountFunction</span><br></pre></td></tr></table></figure><p><strong>useContext</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useContext &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; UserContext &#125; <span class="keyword">from</span> <span class="string">'./UserContext'</span></span><br><span class="line"><span class="keyword">import</span> &#123; MessageContext &#125; <span class="keyword">from</span> <span class="string">'./MessageContext'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MessageList = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; user &#125; = useContext(UserContext)</span><br><span class="line">  <span class="keyword">const</span> &#123; loading, messages, onSelectMessage &#125; = useContext(MessageContext)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;</span><br><span class="line">        loading ? <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>加载中......<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> :</span><br><span class="line">          messages.length === <span class="number">0</span> ? <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>没有信息, &#123;user.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> :</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">              &#123;messages.map(<span class="function"><span class="params">message</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Message</span> <span class="attr">key</span>=<span class="string">&#123;message.id&#125;</span> <span class="attr">message</span>=<span class="string">&#123;message&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> onSelectMessage(message)&#125; /&gt;</span>)&#125;</span><br><span class="line">            &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Message = <span class="function">(<span class="params">&#123; message, onClick &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;li onClick=&#123;onClick&#125;&gt;</span><br><span class="line">    &lt;div&gt;&#123;message.subject&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>li&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MessageList</span><br></pre></td></tr></table></figure><p><strong>Ref hook</strong></p><p>获取dom元素，应用很简单，<code>const inputRef = useRef(), &lt;input ref={inputRef}/&gt;</code>即可</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect, useRef &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyCountFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, dispatchCount] = useReducer(countReducer, <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = useState(<span class="string">'yp'</span>)</span><br><span class="line">  <span class="keyword">const</span> inputRef = useRef()</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(inputRef);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'end'</span>);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input ref=&#123;inputRef&#125; type=<span class="string">"text"</span> value=&#123;name&#125; onChange=&#123;e =&gt; setName(e.target.value)&#125; /&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; dispatchCount(&#123; <span class="attr">type</span>: <span class="string">'add'</span> &#125;)&#125;&gt;+<span class="number">1</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyCountFunction</span><br></pre></td></tr></table></figure><p><strong>useMemo, useCallback</strong></p><p>useMemo, useCallback用于性能优化</p><p><strong>问题的产生</strong></p><p>每次name、count改变，MyCountFunction会重新渲染，从而导致MyChild的prop（onButtonClick, config）会重新生成【注意：与之前的值完全是两个不同的对象，即便值完全相等】</p><p>因此，属性需要使用到useMemo来优化，函数需要使用到useCallback来优化，使得prop相同时，子组件MyChild不必重新渲染</p><p><strong>解决组件渲染，提高组件性能</strong></p><p>useMemo第二个参数：</p><p>和useEffect第二个参数的效果是一样的<br>[count]表示只要count不变，返回的对象就不必重新生成，只要count不变，useMemo就会返回相同的对象</p><p>useCallback使得函数内容相同时，不必重新生成新的函数</p><p>针对方法，使用useMemo同样有效，只是useCallback是个更加简化的版本。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect, memo, useMemo, useCallback &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyCountFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>) <span class="comment">//0是默认值</span></span><br><span class="line">  <span class="keyword">const</span> [name, setName] = useState(<span class="string">'yp'</span>)</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> setCount(<span class="function"><span class="params">c</span> =&gt;</span> c + <span class="number">1</span>), [])</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> config = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    text: <span class="string">`count is <span class="subst">$&#123;count&#125;</span>`</span>,</span><br><span class="line">    color: count &gt; <span class="number">3</span> ? <span class="string">'red'</span> : <span class="string">'blue'</span></span><br><span class="line">  &#125;), [count])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleButtonClick = useCallback(<span class="function"><span class="params">()</span> =&gt;</span> setCount(<span class="function"><span class="params">c</span> =&gt;</span> c + <span class="number">1</span>), [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input type=<span class="string">"text"</span> value=&#123;name&#125; onChange=&#123;e =&gt; setName(e.target.value)&#125; /&gt;</span><br><span class="line">      &lt;MyChild</span><br><span class="line">        config=&#123;config&#125;</span><br><span class="line">        onButtonClick=&#123;handleButtonClick&#125;</span><br><span class="line">      &gt;</span><br><span class="line">      &lt;<span class="regexp">/MyChild&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyChild = memo(<span class="function"><span class="keyword">function</span> (<span class="params">&#123; onButtonClick, config &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'child render'</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;button onClick=&#123;onButtonClick&#125; style=&#123;&#123; <span class="attr">color</span>: config.color &#125;&#125;&gt;</span><br><span class="line">      &#123;config.text&#125;</span><br><span class="line">    &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default MyCountFunction</span></span><br></pre></td></tr></table></figure><p>存在闭包陷阱</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handleClickAlert = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    alert(count)</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> value=&#123;name&#125; onChange=&#123;e =&gt; setName(e.target.value)&#125; /&gt;</span><br><span class="line">    &lt;MyChild</span><br><span class="line">      config=&#123;config&#125;</span><br><span class="line">      onButtonClick=&#123;handleButtonClick&#125;</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;<span class="regexp">/MyChild&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button onClick=&#123;handleClickAlert&#125;&gt;alert&lt;/</span>button&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><p>如果先点击了alert按钮，再点击+1改变count值，会发现alert出现的内容仍然是点击时候的count值（非最新count值），每次执行的更新都是闭包中的状态，在这次状态下触发的任何东西，都不会去获得以后更新的状态，只会在这个闭包的状态下去执行它。</p><p><strong>解决办法：</strong><br>使用useRef来规避闭包陷阱</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countRef = useRef()</span><br><span class="line">countRef.current = count</span><br><span class="line"><span class="keyword">const</span> handleClickAlert = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    alert(countRef.current)</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>深入理解vue</title>
      <link href="/2019/09/24/vue%E6%A1%86%E6%9E%B6%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/09/24/vue%E6%A1%86%E6%9E%B6%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h4 id="vue基础"><a href="#vue基础" class="headerlink" title="vue基础"></a>vue基础</h4><h5 id="vue-cli脚手架"><a href="#vue-cli脚手架" class="headerlink" title="vue-cli脚手架"></a>vue-cli脚手架</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line">或</span><br><span class="line">yarn global add @vue/cli</span><br><span class="line"></span><br><span class="line">创建项目</span><br><span class="line">vue create [name]</span><br><span class="line"></span><br><span class="line">使用图形化界面</span><br><span class="line">vue ui</span><br></pre></td></tr></table></figure><p>调整 webpack 配置最简单的方式就是在 vue.config.js 中的 configureWebpack 选项提供一个对象.</p><h5 id="基础指令"><a href="#基础指令" class="headerlink" title="基础指令"></a>基础指令</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">文本插值是最基本的形式，用双大括号</span><br><span class="line">v-text、v-html</span><br><span class="line">监听事件指令 v-on，简写为@click</span><br><span class="line">属性绑定指令 v-bind，简写为</span><br><span class="line">遍历指令 v-<span class="keyword">for</span></span><br><span class="line">表单输入绑定指令 v-model（<span class="number">3</span>个修饰符.lazy .trim .number）</span><br><span class="line">条件渲染v-<span class="keyword">if</span> 和 v-show的区别、v-<span class="keyword">else</span>-<span class="keyword">if</span> 和 v-<span class="keyword">else</span> 不是必须的</span><br></pre></td></tr></table></figure><p><strong>v-if和v-show的区别</strong></p><ul><li>v-if是真实的条件渲染，当进行条件切换时，它会销毁和重建条件块的内容，并且它支持<template>语法；</template></li><li>v-show的条件切换时基于css的display属性，所以不会销毁和重建条件块的内容；</li><li>当你频繁需要切换条件时，推荐使用v-show；否则使用v-if；</li></ul><h5 id="class绑定"><a href="#class绑定" class="headerlink" title="class绑定"></a>class绑定</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.对象语法</span></span><br><span class="line">v-bind:<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123; active: isActive, 'text-danger': hasError &#125;</span></span><br><span class="line"><span class="string">data: &#123;  </span></span><br><span class="line"><span class="string">isActive: true,</span></span><br><span class="line"><span class="string">  hasError: false</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">// 2.数组语法</span></span><br><span class="line"><span class="string">&lt;div v-bind:class="</span>[activeClass, errorClass]<span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div v-bind:class="</span>[&#123; <span class="attr">active</span>: isActive &#125;, errorClass]<span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div v-bind:class="</span>[isActive ? activeClass : <span class="string">''</span>, errorClass]<span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">// 3.Style绑定</span></span><br><span class="line"><span class="string">v-bind:style="</span>&#123; <span class="attr">color</span>: activeColor, <span class="attr">fontSize</span>: fontSize + <span class="string">'px'</span> &#125;<span class="string">"</span></span><br></pre></td></tr></table></figure><h5 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vue还为v-on提供了事件修饰符</span><br><span class="line">  .stop 阻止事件继续传播</span><br><span class="line">  .prevent 提交的事件不再阻止页面</span><br><span class="line">  .capture 添加事件监听器时使用事件捕获模式</span><br><span class="line">  .self 只当在event.target是当前元素自身时触发处理函数</span><br><span class="line">  .once 点击事件将只触发一次</span><br><span class="line">  .passive 滚动事件的默认行为将会立即触发</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>   &lt;div v-on:click.prevent=<span class="string">"greet"</span>&gt;<span class="number">1</span>&lt;<span class="regexp">/div&gt;/</span><span class="regexp">/等价于event.preventDefault()</span></span><br><span class="line"><span class="regexp">2   &lt;div v-on:click.stop="greet"&gt;2&lt;/</span>div&gt;<span class="comment">//等价于event.stopPropagation()</span></span><br><span class="line"><span class="number">3</span>   &lt;div v-on:click.capture=<span class="string">"greet"</span>&gt;<span class="number">3</span>&lt;<span class="regexp">/div&gt;/</span><span class="regexp">/等价于事件回调函数采用捕获阶段监听事件</span></span><br><span class="line"><span class="regexp">4   &lt;div v-on:click.self="greet"&gt;4&lt;/</span>div&gt;<span class="comment">//等价于event.target</span></span><br></pre></td></tr></table></figure><h5 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h5><p>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。<br>需要注意的是，在 created 和 mounted 阶段，如果需要操作渲染后的试图，也要使用 nextTick 方法。<br><img src="https://i.loli.net/2019/09/26/oZsLnaCRl3qQJkM.png" alt="nextTick.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这样可以，nextTick里面的代码会在DOM更新后执行</span></span><br><span class="line">Vue.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(vm.$el.textContent) <span class="comment">//可以得到'changed'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意 mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.$nextTick 替换掉 mounted</span></span><br><span class="line">mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.$nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Code that will run only after the</span></span><br><span class="line">    <span class="comment">// entire view has been rendered</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h5><p><a href="http://www.imooc.com/article/70052" target="_blank" rel="noopener">Vue2.0之vue-router</a></p><p><a href="https://www.cnblogs.com/keepfool/p/5690366.html" target="_blank" rel="noopener">vue-router 60分钟快速入门</a></p><p>安装vue-router</p><p>几种实现方式动态路由匹配、嵌套路由、编程式路由、命名路由<br>命名视图、重定向与别名、路由组件传参</p><p><strong>导航护卫</strong></p><p><strong>全局前置守卫</strong>当一个导航触发时，全局前置守卫按照创建顺序调用。守卫是异步解析执行，此时导航在所有守卫 resolve 完之前一直处于 等待中。</p><p><strong>全局解析守卫</strong>这和 router.beforeEach 类似，区别是在导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后，解析守卫就被调用。</p><p><strong>全局后置钩子</strong><br>transition 可以定义路由过渡动画</p><h5 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h5><p><code>npm install vuex –save</code></p><ol><li><strong>state</strong>：定义全局状态属性<br>this.$store.state.showFooter</li><li><strong>getters</strong>：和vue计算属性computed一样，来实时监听state值的变化(最新状态)，并把它也仍进Vuex.Store里面</li><li><strong>mutations</strong>：具体的用法就是给里面的方法传入参数state或额外的参数,然后利用vue的双向数据驱动进行值的改变，同样的定义好之后也把这个mutations扔进Vuex.Store里面<br>this.$store.commit(‘show’)</li><li><strong>actions</strong>：通常用于异步操作或是mutations的封装，可以包含任意异步操作，这里面的方法是用来异步触发mutations里面的方法，actions里面自定义的函数接收一个context参数和要变化的形参，context与store实例具有相同的方法和属性，所以它可以执行context.commit(‘ ‘),然后也不要忘了把它也扔进Vuex.Store里面<br>this.$store.dispatch(‘showFooter’)</li></ol><p>举个栗子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"> <span class="keyword">const</span> state=&#123;   <span class="comment">//要设置的全局访问的state对象</span></span><br><span class="line">     showFooter: <span class="literal">true</span>,</span><br><span class="line">     changableNum:<span class="number">0</span></span><br><span class="line">     <span class="comment">//要设置的初始属性值</span></span><br><span class="line">   &#125;;</span><br><span class="line"><span class="keyword">const</span> getters = &#123;   <span class="comment">//实时监听state值的变化(最新状态)</span></span><br><span class="line">    isShow(state) &#123;  <span class="comment">//承载变化的showFooter的值</span></span><br><span class="line">       <span class="keyword">return</span> state.showFooter</span><br><span class="line">    &#125;,</span><br><span class="line">    getChangedNum()&#123;  <span class="comment">//承载变化的changebleNum的值</span></span><br><span class="line">       <span class="keyword">return</span> state.changableNum</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    show(state) &#123;   <span class="comment">//自定义改变state初始值的方法，这里面的参数除了state之外还可以再传额外的参数(变量或对象);</span></span><br><span class="line">        state.showFooter = <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    hide(state) &#123;  <span class="comment">//同上</span></span><br><span class="line">        state.showFooter = <span class="literal">false</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    newNum(state,sum)&#123; <span class="comment">//同上，这里面的参数除了state之外还传了需要增加的值sum</span></span><br><span class="line">       state.changableNum+=sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> <span class="keyword">const</span> actions = &#123;</span><br><span class="line">    hideFooter(context) &#123;  <span class="comment">//自定义触发mutations里函数的方法，context与store 实例具有相同方法和属性</span></span><br><span class="line">        context.commit(<span class="string">'hide'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    showFooter(context) &#123;  <span class="comment">//同上注释</span></span><br><span class="line">        context.commit(<span class="string">'show'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    getNewNum(context,num)&#123;   <span class="comment">//同上注释，num为要变化的形参</span></span><br><span class="line">        context.commit(<span class="string">'newNum'</span>,num)</span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br><span class="line">  <span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">       state,</span><br><span class="line">       getters,</span><br><span class="line">       mutations,</span><br><span class="line">       actions</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><p>modules 模块化 以及 组件中引入 mapGetters、mapActions 和 mapStates的使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapState,mapGetters,mapActions&#125; <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line">computed:&#123;</span><br><span class="line">    ...mapState(&#123;  <span class="comment">//这里的...是超引用，ES6的语法，意思是state里有多少属性值我可以在这里放多少属性值</span></span><br><span class="line">         isShow:<span class="function"><span class="params">state</span>=&gt;</span>state.footerStatus.showFooter <span class="comment">//注意这些与上面的区别就是state.footerStatus,</span></span><br><span class="line">      &#125;),</span><br><span class="line">...mapActions(<span class="string">'collection'</span>,[ <span class="comment">//collection是指modules文件夹下的collection.js</span></span><br><span class="line">          <span class="string">'invokePushItems'</span>  <span class="comment">//collection.js文件中的actions里的方法，在上面的@click中执行并传入实参</span></span><br><span class="line">      ])，</span><br><span class="line">...mapGetters(<span class="string">'collection'</span>,&#123; <span class="comment">//用mapGetters来获取collection.js里面的getters</span></span><br><span class="line">            arrList:<span class="string">'renderCollects'</span></span><br><span class="line">      &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h5><p>vue生命周期:Vue 实例从创建到销毁的过程，就是生命周期。从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、销毁等一系列过程，称之为 Vue 的生命周期。它的生命周期中有多个事件钩子，让我们在控制整个Vue实例的过程时更容易形成好的逻辑。</p><p>总共分为 8 个阶段beforeCreate（创建前） created（创建后） beforeMount（载入前） mounted（载入后） beforeUpdate（更新前）, updated（更新后） beforeDestroy（销毁前） destroyed（销毁后）。</p><ul><li>创建前/后：在 beforeCreate 阶段，vue 实例的挂载元素 el 还没有。</li><li>载入前/后：在 beforeMount 阶段，vue 实例的$el 和 data 都初始化了，但还是挂载之前为虚拟的 dom 节点，data.message 还未替换。在 mounted 阶段，vue 实例挂载完成，data.message 成功渲染。</li><li>更新前/后：当 data 变化时，会触发 beforeUpdate 和 updated 方法。</li><li>销毁前/后：在执行 destroy 方法后，对 data 的改变不会再触发周期函数，说明此时 vue 实例已经解除了事件监听以及和 dom 的绑定，但是 dom 结构依然存在。</li><li>另外还有 keep-alive 独有的生命周期，分别为 activated 和 deactivated 。用 keep-alive 包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行 deactivated 钩子函数，命中缓存渲染后会执行 activated钩子函数。</li></ul><p><strong>应用场景？</strong></p><ul><li>beforeCreate 可以在此时加一些loading效果，在created时进行移除</li><li>created 需要异步请求数据的方法可以在此时执行，完成数据的初始化</li><li>mounted 当需要操作dom的时候执行，可以配合$.nextTick 使用进行单一事件对数据的更新后更新dom</li><li>updated 当数据更新需要做统一业务处理的时候使用</li></ul><h5 id="vue调试方法"><a href="#vue调试方法" class="headerlink" title="vue调试方法"></a>vue调试方法</h5><ol><li><a href="https://cn.vuejs.org/v2/cookbook/debugging-in-vscode.html" target="_blank" rel="noopener">在 VS Code 中调试</a></li></ol><p>vscode安装Debugger for Chrome。在vue.config.js中设置source-map：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  configureWebpack: &#123;</span><br><span class="line">    devtool: <span class="string">'source-map'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击“调试”&gt;“添加配置”，生成launch.json，注意url的端口要与项目运行的端口一致，点击“开始调试”即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">  <span class="string">"configurations"</span>: [&#123;</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"chrome"</span>,</span><br><span class="line">    <span class="string">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"vuejs: chrome"</span>,</span><br><span class="line">    <span class="string">"url"</span>: <span class="string">"http://localhost:8081"</span>,</span><br><span class="line">    <span class="string">"webRoot"</span>: <span class="string">"$&#123;workspaceFolder&#125;/src"</span>,</span><br><span class="line">    <span class="string">"breakOnLoad"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"sourceMapPathOverrides"</span>: &#123;</span><br><span class="line">      <span class="string">"webpack:///./src/*"</span>: <span class="string">"$&#123;webRoot&#125;/*"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><a href="https://cn.vuejs.org/v2/cookbook/debugging-in-vscode.html#Vue-Devtools" target="_blank" rel="noopener">Vue DevTools</a></li></ol><p>直接在chrome中下载此插件即可。</p><p><strong>对于Vue-cli创建的工程化项目，哪些方式可以调试应用？</strong></p><ul><li>使用vue官方推荐的devTools进行调试（官方推荐的dev-Tools是最方便去查看vue的状态管理、vue变量的工具）</li><li>在webpack配置代码中打开source-map，插入debugger，使用chrome的调试窗口（但是要注意这种方式，不方便查看vuex的状态变化，vuex的commit事件无法监听）</li><li>使用alert, console.log，JSON.stringfy打印相关的日志（这个是最大众，最简单，也是最普通的一种方式了）</li></ul><h4 id="vue原理"><a href="#vue原理" class="headerlink" title="vue原理"></a>vue原理</h4><h5 id="组件化思想"><a href="#组件化思想" class="headerlink" title="组件化思想"></a>组件化思想</h5><p><strong>组件化</strong>是将页面的功能模块进行拆分、封装，组件代码包含了组件所有的功能代码与样式。<br><strong>组件化的作用</strong>是复用、高可维护性。<br>组件化不局限于前端代码，而是一种设计思想。</p><h5 id="vue响应式原理"><a href="#vue响应式原理" class="headerlink" title="vue响应式原理"></a>vue响应式原理</h5><p><a href="https://cn.vuejs.org/v2/guide/reactivity.html" target="_blank" rel="noopener">官方解释</a></p><p>如何追踪数据变化？</p><p>当你把一个普通的 JavaScript 对象传入 Vue 实例作为 data 选项，Vue 将遍历此对象所有的属性，并使用 Object.defineProperty 把这些属性全部转为 getter/setter。</p><p>这些 getter/setter 对用户来说是不可见的，但是在内部它们让 Vue 能够追踪依赖，在属性被访问和修改时通知变更。</p><p>以下是官方的流程图:<br><img alt="vue响应式原理" src="https://i.loli.net/2019/09/26/Bi9arClmjRevOoY.jpg" width="60%"><br>由上图可知，每个组件实例都对应一个 watcher 实例，它会在组件渲染的过程中把“接触”过的数据属性记录为依赖（借用getter实现）。之后当依赖项的 setter 触发时，会通知 watcher，从而使它关联的组件重新渲染。</p><h5 id="vue双向绑定原理"><a href="#vue双向绑定原理" class="headerlink" title="vue双向绑定原理"></a>vue双向绑定原理</h5><p>vue实现数据双向绑定主要是：采用<strong>数据劫持结合发布者-订阅者模式</strong>的方式，通过 <strong>Object.defineProperty（）</strong> 来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应监听回调。</p><p>当把一个普通 Javascript 对象传给 Vue 实例来作为它的 data 选项时，Vue 将遍历它的属性，用 Object.defineProperty 将它们转为 getter/setter。用户看不到 getter/setter，但是在内部它们让 Vue 追踪依赖，在属性被访问和修改时通知变化。</p><p>vue的数据双向绑定 将MVVM作为数据绑定的入口，整合Observer，Compile和Watcher三者，通过Observer来监听自己的model的数据变化，通过Compile来解析编译模板指令（vue中是用来解析），最终利用watcher搭起observer和Compile之间的通信桥梁，达到数据变化 —&gt;视图更新；视图交互变化（input）—&gt;数据model变更双向绑定效果。<br><img alt="vue双向绑定" src="https://i.loli.net/2019/09/26/jaxvf63mpghXLR5.png" width="60%"><br><img alt="vue双向绑定" src="https://i.loli.net/2019/09/26/WSqI6amD3BVx5G8.png" width="60%"><br>veu2.0使用Object.defineProperty存在一些缺陷，vue3.0改为使用proxy实现双向数据绑定。</p><p><strong>如何正确地更新页面列表list中第2个元素？</strong></p><p>由于 JavaScript 的限制，Vue 不能检测以下数组的变动：</p><ul><li>当你利用索引直接设置一个数组项时，例如：vm.items[indexOfItem] = newValue</li><li>当你修改数组的长度时，例如：vm.items.length = newLength</li></ul><p>所以，不能采用在Vue的实例中，this.lists[1] = data，或是在数据请求的回调中，使用vm.lists[1] = data。</p><p>解决方案：</p><ul><li>在数据请求的回调中，使用$set方法，Vue.$set(vm.lists, 1, data) <a href="https://cn.vuejs.org/v2/guide/list.html#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" target="_blank" rel="noopener">对应API</a></li><li>new一个新的数组listsNew，然后把第二个元素改成data，然后把this.lists = listsNew，赋值给数组。</li></ul><h4 id="其他知识点"><a href="#其他知识点" class="headerlink" title="其他知识点"></a>其他知识点</h4><h5 id="hash模式-和-history模式"><a href="#hash模式-和-history模式" class="headerlink" title="hash模式 和 history模式"></a>hash模式 和 history模式</h5><p><strong>hash模式</strong>：<br>在浏览器中符号“#”，#以及#后面的字符称之为hash，用window.location.hash读取</p><p><strong>特点：</strong> hash虽然在URL中，但不被包括在HTTP请求中；用来指导浏览器动作，对服务端安全无用，hash不会重加载页面。<br>hash 模式下，仅 hash 符号之前的内容会被包含在请求中，如 <a href="http://www.xxx.com，因此对于后端来说，即使没有做到对路由的全覆盖，也不会返回" target="_blank" rel="noopener">http://www.xxx.com，因此对于后端来说，即使没有做到对路由的全覆盖，也不会返回</a> 404 错误。</p><p><strong>history模式</strong>：history采用HTML5的新特性；且提供了两个新方法：pushState（），replaceState（）可以对浏览器历史记录栈进行修改，以及popState事件的监听到状态变更。<br>history 模式下，前端的 URL 必须和实际向后端发起请求的 URL 一致，如 <code>http://www.xxx.com/items/id</code>。 后端如果缺少对 /items/id 的路由处理，将返回 404 错误。</p><p><strong>特点</strong>：Vue-Router 官网里如此描述“不过这种模式要玩好，还需要后台配置支持……所以呢，你要在服务端增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，则应该返回同一个 index.html 页面，这个页面就是你 app 依赖的页面。”</p><h5 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h5><p>keep-alive是 Vue 内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染。<br>在vue 2.1.0 版本之后，keep-alive新加入了两个属性: include(包含的组件缓存) 与 exclude(排除的组件不缓存，优先级大于include) </p><h5 id="computed-和-watch"><a href="#computed-和-watch" class="headerlink" title="computed 和 watch"></a>computed 和 watch</h5><p><strong>computed</strong>： 是计算属性，依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed 的值；</p><p><strong>watch</strong>： 更多的是「观察」的作用，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作；</p><p>运用场景：</p><ul><li>当我们需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算；</li><li>当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch 选项允许我们执行异步操作 ( 访问一个 API )，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</li></ul><h5 id="vue项目性能优化"><a href="#vue项目性能优化" class="headerlink" title="vue项目性能优化"></a>vue项目性能优化</h5><p><strong>（1）代码层面的优化</strong></p><ul><li>v-if 和 v-show 区分使用场景</li><li>computed 和 watch 区分使用场景</li><li>v-for 遍历必须为 item 添加 key，且避免同时使用 v-if</li><li>长列表性能优化</li><li>事件的销毁</li><li>图片资源懒加载</li><li>路由懒加载</li><li>第三方插件的按需引入</li><li>优化无限列表性能</li><li>服务端渲染 SSR or 预渲染</li></ul><p><strong>（2）Webpack 层面的优化</strong></p><ul><li>Webpack 对图片进行压缩</li><li>减少 ES6 转为 ES5 的冗余代码</li><li>提取公共代码</li><li>模板预编译</li><li>提取组件的 CSS</li><li>优化 SourceMap</li><li>构建结果输出分析</li><li>Vue 项目的编译优化</li></ul><p><strong>（3）基础的 Web 技术的优化</strong></p><ul><li>开启 gzip 压缩</li><li>浏览器缓存</li><li>CDN 的使用</li><li>使用 Chrome Performance 查找性能瓶颈</li></ul><h5 id="vue3-0"><a href="#vue3-0" class="headerlink" title="vue3.0"></a>vue3.0</h5><p>Vue 3.0 正走在发布的路上，Vue 3.0 的目标是让 Vue 核心变得更小、更快、更强大，因此 Vue 3.0 增加以下这些新特性：</p><p><strong>（1）监测机制的改变</strong></p><p>3.0 将带来基于代理 Proxy 的 observer 实现，提供全语言覆盖的反应性跟踪。这消除了 Vue 2 当中基于 Object.defineProperty 的实现所存在的很多限制：</p><ul><li>只能监测属性，不能监测对象</li><li>检测属性的添加和删除；</li><li>检测数组索引和长度的变更；</li><li>支持 Map、Set、WeakMap 和 WeakSet。<br>新的 observer 还提供了以下特性：</li><li>用于创建 observable 的公开 API。这为中小规模场景提供了简单轻量级的跨组件状态管理解决方案。</li><li>默认采用惰性观察。在 2.x 中，不管反应式数据有多大，都会在启动时被观察到。如果你的数据集很大，这可能会在应用启动时带来明显的开销。在 3.x 中，只观察用于渲染应用程序最初可见部分的数据。</li><li>更精确的变更通知。在 2.x 中，通过 Vue.set 强制添加新属性将导致依赖于该对象的 watcher 收到变更通知。在 3.x 中，只有依赖于特定属性的 watcher 才会收到通知。</li><li>不可变的 observable：我们可以创建值的“不可变”版本（即使是嵌套属性），除非系统在内部暂时将其“解禁”。这个机制可用于冻结 prop 传递或 Vuex 状态树以外的变化。</li><li>更好的调试功能：我们可以使用新的 renderTracked 和 renderTriggered 钩子精确地跟踪组件在什么时候以及为什么重新渲染。</li></ul><p><strong>（2）模板</strong></p><p>模板方面没有大的变更，只改了作用域插槽，2.x 的机制导致作用域插槽变了，父组件会重新渲染，而 3.0 把作用域插槽改成了函数的方式，这样只会影响子组件的重新渲染，提升了渲染的性能。<br>同时，对于 render 函数的方面，vue3.0 也会进行一系列更改来方便习惯直接使用 api 来生成 vdom 。</p><p><strong>（3）对象式的组件声明方式</strong></p><p>vue2.x 中的组件是通过声明的方式传入一系列 option，和 TypeScript 的结合需要通过一些装饰器的方式来做，虽然能实现功能，但是比较麻烦。3.0 修改了组件的声明方式，改成了类式的写法，这样使得和 TypeScript 的结合变得很容易。</p><p>此外，vue 的源码也改用了 TypeScript 来写。其实当代码的功能复杂之后，必须有一个静态类型系统来做一些辅助管理。现在 vue3.0 也全面改用 TypeScript 来重写了，更是使得对外暴露的 api 更容易结合 TypeScript。静态类型系统对于复杂代码的维护确实很有必要。</p><p><strong>（4）其它方面的更改</strong></p><p>vue3.0 的改变是全面的，上面只涉及到主要的 3 个方面，还有一些其他的更改：</p><ul><li>支持自定义渲染器，从而使得 weex 可以通过自定义渲染器的方式来扩展，而不是直接 fork 源码来改的方式。</li><li>支持 Fragment（多个根节点）和 Protal（在 dom 其他部分渲染组建内容）组件，针对一些特殊的场景做了处理。</li><li>基于 treeshaking 优化，提供了更多的内置功能。</li></ul><p><strong>vue应用</strong></p><p><strong>父子组件通信中常用方法</strong></p><ol><li>在父组件中，使用component引用子组件，然后使用props属性：<br><code>&lt;child-component :property=&quot;data&quot;&gt;&lt;/child-component&gt;</code></li><li>使用Vuex状态管理进行父子组件通信，定义store.js，并定义state，在state中定义传递的属性比如叫childProperty。然后，在子组件中，使用<code>store.state.childProperty</code>进行使用。</li><li>使用router中的Params进行传参（即路径传参）,<br>设置路由<code>/child/:id</code>，当访问到/child/1元素的时候，在子组件中，使用<code>this.$route.params.id</code>的方式进行使用</li></ol><p>++不推荐使用LocalStorage缓存传参++，虽然使用缓存也可以获取到数据。但是，这不是推荐的做法，也不方便管理，容易丢失数据或者是数据紊乱（因为没有及时清理与回收）</p><p><strong>vue-cli与elementui集成</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装element</span></span><br><span class="line">vue add element</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js引入element</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(ElementUI);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现按需引入</span></span><br><span class="line">npm install babel-plugin-component -D</span><br><span class="line"><span class="comment">// .babelrc</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [[<span class="string">"es2015"</span>, &#123; <span class="string">"modules"</span>: <span class="literal">false</span> &#125;]],</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"component"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"libraryName"</span>: <span class="string">"element-ui"</span>,</span><br><span class="line">        <span class="string">"styleLibraryName"</span>: <span class="string">"theme-chalk"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Button, Select &#125; <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span>;</span><br><span class="line"></span><br><span class="line">Vue.component(Button.name, Button);</span><br><span class="line">Vue.component(Select.name, Select);</span><br><span class="line"><span class="comment">/* 或写为</span></span><br><span class="line"><span class="comment"> * Vue.use(Button)</span></span><br><span class="line"><span class="comment"> * Vue.use(Select)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="服务器渲染SSR"><a href="#服务器渲染SSR" class="headerlink" title="服务器渲染SSR"></a>服务器渲染SSR</h5><p><a href="https://ssr.vuejs.org/zh/" target="_blank" rel="noopener">Vue SSR指南</a></p><p><a href="https://segmentfault.com/a/1190000009352740" target="_blank" rel="noopener">从零开始搭建vue-ssr系列</a></p><p><strong>nuxt.js</strong><br><a href="https://zh.nuxtjs.org/guide" target="_blank" rel="noopener">官网</a><br><a href="https://iiong.com/nuxtjs-notes/" target="_blank" rel="noopener">学习笔记</a><br><a href="https://www.bilibili.com/video/av37607677/?p=7" target="_blank" rel="noopener">视频教程</a></p><p>客户端渲染和服务器端渲染的最重要的区别就是究竟是谁来完成html文件的完整拼接，如果是在服务器端完成的，然后返回给客户端，就是服务器端渲染，而如果是前端做了更多的工作完成了html的拼接，则就是客户端渲染<br>。<br>创建nuxt项目：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yarn create nuxt-app &lt;项目名&gt;</span><br><span class="line">yarn install</span><br><span class="line">cnpm run dev</span><br><span class="line"><span class="comment">// 如果要使用 sass 就必须要安装 node-sass和sass-loader</span></span><br><span class="line">npm install --save-dev node-sass sass-loader</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2019/09/26/jBaK4dVUvDIHWPy.png" width="60%" alt="nuxt"><p><a href="http://www.imooc.com/article/72021" target="_blank" rel="noopener">相关文章</a></p><p>前端vue等框架打包的项目一般为SPA应用，而单页面是不利于SEO的，现在的解决方案有两种：</p><ul><li>SSR服务器渲染</li><li>预渲染模式(这比服务端渲染要简单很多，而且可以配合 vue-meta-info 来生成title和meta标签，基本可以满足SEO的需求 )　  </li></ul><p><strong>TIPS</strong> : 使用预渲染vue-router必须使用history模式。当然，有时候我们也可能会遇到让人头疼的SEO问题，那么使用此插件配合 prerender-spa-plugin 也是再合适不过了<br><img src="https://i.loli.net/2019/09/26/C9B2uKNRY8fecvg.png" width="50%" alt="nuxt流程图"><br><a href="https://blog.csdn.net/aeoliancrazy/article/details/79539143" target="_blank" rel="noopener">Vue SEO处理1——Vue-meta-info&amp;prerender-spa-plugin</a></p><h5 id="警惕内存泄漏"><a href="#警惕内存泄漏" class="headerlink" title="警惕内存泄漏"></a>警惕内存泄漏</h5><ul><li>beforeDestroy()、destroyed钩子清除出定时器、相关变量置为null</li><li>使用内建的 keep-alive组件，状态就会保留，因此就留在了内存里</li></ul><p>要确保测试应用的内存泄漏问题并在适当的时机做必要的组件清理。</p><h5 id="页面过渡动画"><a href="#页面过渡动画" class="headerlink" title="页面过渡动画"></a>页面过渡动画</h5><p>Vue 在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果。<br>包括以下工具：</p><ul><li>在 CSS 过渡和动画中自动应用 class</li><li>可以配合使用第三方 CSS 动画库，如 Animate.css</li><li>在过渡钩子函数中使用 JavaScript 直接操作 DOM</li><li>可以配合使用第三方 JavaScript 动画库，如 Velocity.js</li></ul><p>Vue 提供了 transition的封装组件，在下列情形中，可以给任何元素和组件添加进入/离开过渡</p><ul><li>条件渲染 (使用 v-if)</li><li>条件展示 (使用 v-show)</li><li>动态组件</li><li>组件根节点</li></ul><p>在进入/离开的过渡中，会有 6 个 class 切换。<br><img src="https://i.loli.net/2019/09/26/DHv8Tj6kUKgMXut.jpg" alt="vue页面过渡" width="60%"><br>对于 Vue 的过渡系统和其他第三方 CSS 动画库，如 Animate.css 结合使用十分有用。</p><h5 id="可复用的过渡"><a href="#可复用的过渡" class="headerlink" title="可复用的过渡"></a>可复用的过渡</h5><p>过渡可以通过 Vue的组件系统实现复用。要创建一个可复用过渡组件，你需要做的就是将 <transition> 或者 <transition-group> 作为根组件，然后将任何子组件放置在其中就可以了。</transition-group></transition></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-special-transition'</span>, &#123;</span><br><span class="line">  template: <span class="string">'\</span></span><br><span class="line"><span class="string">    &lt;transition\</span></span><br><span class="line"><span class="string">      name="very-special-transition"\</span></span><br><span class="line"><span class="string">      mode="out-in"\</span></span><br><span class="line"><span class="string">      v-on:before-enter="beforeEnter"\</span></span><br><span class="line"><span class="string">      v-on:after-enter="afterEnter"\</span></span><br><span class="line"><span class="string">    &gt;\</span></span><br><span class="line"><span class="string">      &lt;slot&gt;&lt;/slot&gt;\</span></span><br><span class="line"><span class="string">    &lt;/transition&gt;\</span></span><br><span class="line"><span class="string">  '</span>,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    beforeEnter: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    afterEnter: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="vue-router-1"><a href="#vue-router-1" class="headerlink" title="vue-router"></a>vue-router</h5><p><a href="https://router.vuejs.org/zh/" target="_blank" rel="noopener">vue-router</a></p><h5 id="vuex-1"><a href="#vuex-1" class="headerlink" title="vuex"></a>vuex</h5><p><a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noopener">vuex</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux与docker实践</title>
      <link href="/2019/09/22/linux%E4%B8%8Edocker%E5%AE%9E%E8%B7%B5/"/>
      <url>/2019/09/22/linux%E4%B8%8Edocker%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<p><strong>devOps流程有哪些？</strong><br>DevOps要求开发、测试、运维一体化，实现敏捷开发、敏捷部署和敏捷生产的目标。包括plan（计划）、code（编码）、build（构建）、test（测试）、release（发布）、deploy（部署）、operate（运营）、monitor（监控）这几大流程。DevOps就是把敏捷开发部门和运维部门之间的围墙打通，形成闭环。</p><a id="more"></a><p>计划——编码——构建——测试——发布——部署——运营——监控<br><img src="https://i.loli.net/2019/09/18/DFfQdUReJAcuTHK.jpg" width="50%" alt="devOps流程"><br><a href="https://blog.csdn.net/gcttong00/article/details/82892676" target="_blank" rel="noopener">图片参考地址</a><br><strong>自己之前没有了解的流程有哪些？举一个自己开发的项目的例子，来描述devOps流程，思考怎样才能效率开发？</strong></p><p>在腾讯实习过程中，了解了部门项目开发流程：需求-视觉设计-需求评审-开发排期-开发与接口联调-测试-上线。每个新功能（feature）的提出必须排期，跟进团队日历，再依次根据这个流程进行。<br><img src="https://i.loli.net/2019/09/18/yrbklW7Emf8V1Rj.jpg" width="80%" alt="项目流程"></p><p><strong>linux测试环境搭建：</strong></p><ol><li>虚拟机自建环境（vmware等）</li><li>购买云服务（&gt;1C+2G)</li><li>安装Docker</li></ol><!-- more --><p><strong>Linux操作系统：</strong></p><ol><li>CentOS</li><li>debian</li><li>Ubuntu</li></ol><p><strong>Linux常见命令：</strong></p><ol><li>文档型：文件相关命令（touch、cat、echo、rm、vim、cd）</li><li>硬件型：磁盘/进程/服务/网络</li><li>功能型：压缩/解压缩、下载、远程</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">lsb_release -a //查看版本</span><br><span class="line">top //查看CPU资源和内存资源</span><br><span class="line">touch [name] //创建文件</span><br><span class="line">cat [name] //查看文件内容</span><br><span class="line">echo &apos;aaa&apos; &gt;&gt; text.txt //尾行增加内容</span><br><span class="line">echo &apos;aaa&apos; &gt; text.txt //覆盖全部内容</span><br><span class="line">rm [filename] //删除文件</span><br><span class="line">rm -r [dirname] //删除文件夹</span><br><span class="line">rm -rf //强制删除，不要使用</span><br><span class="line"></span><br><span class="line">wget [url] //下载资源</span><br><span class="line">tar -zxvf file.tar.gz //加压，z-.gz结尾的文件 x-解压 v-显示所有解压过程 f-使用规定的名字name</span><br><span class="line">tar zcvf directory filename.tar.gz //压缩</span><br><span class="line">ps -ef | grep docker //筛选进程</span><br><span class="line">kill -9 [pid] //强制杀死pid的进程</span><br><span class="line">service [serverName] status //查看服务状态</span><br><span class="line">service [serverName] stop //关闭服务</span><br><span class="line">service [serverName] restart //重启服务</span><br></pre></td></tr></table></figure><p><strong>ssh连接linux服务器</strong></p><p>可以直接采用 <code>ssh (-p 22) root@ip</code> 登录</p><ol><li>修改ssh的默认端口（建议，较为安全）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netstat -anlp | grep sshd //查看监听端口，默认为22</span><br><span class="line">vi /etc/ssh/sshd_config //修改文件内容中的Port</span><br><span class="line">接下来重启ssh服务即可</span><br></pre></td></tr></table></figure><ol start="2"><li>实现免密钥登录服务器</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen //生成ssh key</span><br><span class="line">…… 自行搜索</span><br></pre></td></tr></table></figure><p><strong>Docker</strong></p><p>Docker与虚拟机的区别：<br><img src="https://i.loli.net/2019/09/22/O1rLmWl8JboGgs3.jpg" width="80%"></p><p><strong>为什么会出现docker这个技术？</strong></p><p>一款产品从开发到上线，从操作系统，到运行环境，再到应用配置，作为开发+运维之间的协作我们需要关心很多东西，这也是很多互联网公司不得不面对的问题，特别是各种版本迭代之后，不同版本环境的兼容，对运维人员都是考验。Docker之所以发展如此迅速，也是因为它对此给出了哟个标准化的解决方案。</p><p>不再是“搬家”（打包的代码），而是“搬楼”（打包代码、运行文档、配置环境、运行环境、运行依赖包、操作系统发行版等），把原始环境复制过来，消除了“在开发工程师机器上能跑，但在运维工程师机器上不能正常运行”的场景。</p><p>而且现在部署的都是集群环境，会存在多台服务器，每一台都重新安装，会耗费很多的时间和精力。</p><p><strong>理念：</strong></p><p>一次封装，到处运行。</p><p><strong>镜像/容器/仓库</strong></p><p>Docker镜像就是一个只读的模板，镜像可以用来创建Docker容器，一个镜像可以创建多个容器。简言之，镜像相当于类，容器相当于它的实例。</p><p>Docker利用容器独立运行一个或一组应用，容器是用镜像创建的运行实例。它可以被启动、开始、停止，每个容器都是相互隔离的、保证安全的平台。</p><p>我们可以把容器视为一个简易版的linux环境（包括root用户权限、进程空间、用户空间和网络空间）和运行在其中的应用程序。</p><p>仓库是集中存放镜像文件的场所。仓库和仓库注册服务器是有区别的，仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签tag。最大的仓库是Docker Hub（国外网站，非常慢），存放了数量庞大的镜像供用户下载，国内的公开仓库包括阿里云、网易云等。</p><p><strong>Docker容器技术的特点：</strong></p><ol><li>文件系统隔离：每个进程容器运行在完全独立的根文件系统里。</li><li>资源隔离：可以使用cgroup为每个进程容器分配不同的系统资源，例如CPU和内存。</li><li>网络隔离：每个进程容器运行在自己的网络命名空间里，拥有自己的虚拟接口和IP地址。</li><li>写时复制：采用写时复制方式创建根文件系统，这让部署变得极其快捷，并且节省内存和硬盘空间。</li><li>日志记录：Docker将会收集和记录每个进程容器的标准流（stdout/stderr/stdin），用于实时检索或批量检索。</li><li>变更管理：容器文件系统的变更可以提交到新的映像中，并可重复使用以创建更多的容器。无需使用模板或手动配置。</li><li>交互式Shell：Docker可以分配一个虚拟终端并关联到任何容器的标准输入上，例如运行一个一次性交互shell。</li></ol><p><strong>Docker安装：</strong></p><p><a href="https://www.runoob.com/docker/centos-docker-install.html" target="_blank" rel="noopener">CentOS环境安装Docker步骤</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 移除旧的版本：</span><br><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine</span><br><span class="line">// 安装一些必要的系统工具：</span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">// 添加软件源信息：</span><br><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">// 更新 yum 缓存：</span><br><span class="line">sudo yum makecache fast</span><br><span class="line">// 安装 Docker-ce：</span><br><span class="line">sudo yum -y install docker-ce</span><br><span class="line">// 启动 Docker 后台服务</span><br><span class="line">sudo systemctl start docker</span><br><span class="line">// 测试运行 hello-world</span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p>到此，Docker 在 CentOS 系统的安装完成</p><p><a href="https://www.36nu.com/post/234" target="_blank" rel="noopener">Centos7安装完毕后无法联网问题的解决方法</a></p><p><strong>镜像加速</strong></p><p>修改/etc/docker/daemon.json（Linux），没有则新建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vim中无法打开并写入文件的解决办法:<code>w ! sudo tee %</code>,tee 用于读取输入文件，同时保存，%表示当前编辑文件 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload //重载配置文件</span><br><span class="line">systemctl restart docker //重启docker</span><br></pre></td></tr></table></figure><p>下次拉取docker镜像时，会直接拉取国内的源进行下载，从而加快速度。我们可以在<a href="https://hub.docker.com/" target="_blank" rel="noopener">docker hub</a>上下载镜像运行。</p><p>常见命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a 列出正在运行的docker</span><br><span class="line">docker images 查看正在运行的docker</span><br><span class="line">docker run 运行容器</span><br><span class="line">docker stop [name] 停止容器</span><br><span class="line">docker start [name] 启动容器</span><br><span class="line">docker restart [name] 重启容器</span><br><span class="line">docker rm [name] 删除容器</span><br><span class="line">docker logs -f [name] 查看容器详细运行信息</span><br></pre></td></tr></table></figure><p>以下这幅图清晰地展示了docker涉及到的常见命令：<br><img src="https://i.loli.net/2019/12/16/WjPCpwztqyJaYv6.png" alt="docker.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">build：创建出想要的镜像</span><br><span class="line"></span><br><span class="line">push：镜像上传到仓库</span><br><span class="line">search：仓库查找镜像</span><br><span class="line">pull：仓库下载镜像</span><br><span class="line"></span><br><span class="line">save/export：将镜像导出为压缩文件</span><br><span class="line">load/import：导入镜像文件压缩包</span><br><span class="line"></span><br><span class="line">rmi：删除镜像</span><br><span class="line">inspect：查看某一镜像详细信息</span><br><span class="line">images：查看所有镜像</span><br><span class="line"></span><br><span class="line">run/exec/attach：从镜像创建容器</span><br><span class="line">pause/unpause：暂停/恢复容器运行</span><br><span class="line">stop/start：停止/启动容器运行</span><br><span class="line"></span><br><span class="line">inspect：查看容器详细信息</span><br><span class="line">ps：查看所有容器</span><br><span class="line">rm：删除容器</span><br><span class="line">commit：将容器保存为镜像</span><br></pre></td></tr></table></figure><p><strong>docker-compose</strong></p><p>使用docker-compose可以同时管理多个容器，同时启动、停止，当容器数量很多时，能有效减少大量的人工操作。</p><p>安装docker-compose，注意提示权限不够时应提升权限，如使用sudo执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://github.com/docker/compose/releases/download/1.23.2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line">docker-compose --version //查看版本</span><br><span class="line"></span><br><span class="line">sudo rm /usr/local/bin/docker-compose //卸载docker-compose</span><br></pre></td></tr></table></figure><p>创建docker-compose.yml文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">version: &apos;3&apos;</span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;5000:5000&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - .:/code</span><br><span class="line">    environment:</span><br><span class="line">      FLASK_ENV: development</span><br><span class="line">  redis:</span><br><span class="line">    image: &quot;redis:alpine&quot;</span><br></pre></td></tr></table></figure><p>执行docker-compose up -d</p><p><strong>Docker Hub</strong></p><ol><li>注册docker hub账号</li><li><code>docker login</code>登录</li><li><code>docker commit -m &quot;xx&quot; [CONTAINER ID] username/repository:tag</code>提交，其中CONTAINER ID通过docker ps -a查看</li><li><code>docker push username/repository:tag</code>上传</li><li><code>docker pull username/repository:tag</code>拉取</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端调试技巧</title>
      <link href="/2019/09/22/%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
      <url>/2019/09/22/%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h5 id="真机调试方法"><a href="#真机调试方法" class="headerlink" title="真机调试方法"></a>真机调试方法</h5><ol><li>chrome+Android/IOS</li><li>fiddler（windows）/Charles（Mac）</li><li>weinre、spy-debugger、vConsole</li></ol><a id="more"></a><p><strong>代理原理</strong></p><p><strong>chrome+Android调试</strong></p><ul><li><strong>方法1：chrome+Android调试</strong></li></ul><ol><li>打开开发者模式，打开开发人员选项，打开USB调试</li><li>手机下载chrome浏览器</li><li>数据线连接</li><li>手机网络和电脑网络保持一致</li><li>在chrome://inspect/#devices中点击inspect调试页面</li></ol><ul><li><strong>方法2：fiddler（windows）/Charles（Mac）</strong></li></ul><ol><li>打开fiddler，设置代理端口，<code>Fiddler–&gt;Tools–&gt;Options…–&gt;Connections</code>，proxy：8888</li><li>打开手机，网络设置，选择http代理，手动设置ip和端口（8888）</li><li>手机浏览器打开任意网站，fiddler会提示连接进行抓包（这种方法存在局限性，只能看到接口详细情况，不能调试到交互和页面上元素）</li></ol><ul><li><strong>方法3：Weinre、Spy-Debugger、vConsole</strong></li></ul><ol><li><p><a href="https://github.com/wuchangming/spy-debugger" target="_blank" rel="noopener">Spy-Debugger</a></p><p> 一站式页面调试、抓包工具。远程调试任何手机浏览器页面，任何手机移动端webview（如：微信，HybridApp等）。支持HTTP/HTTPS，无需USB连接设备。  </p><p> spy-debugger内部集成了weinre、node-mitmproxy、AnyProxy。<br> Windows 下<code>npm install spy-debugger -g</code></p><ul><li>第一步：手机和PC保持在同一网络下（比如同时连到一个Wi-Fi下）</li><li>第二步：命令行输入spy-debugger，按命令行提示用浏览器打开相应地址。</li><li>第三步：设置手机的HTTP代理，代理IP地址设置为PC的IP地址，端口为spy-debugger的启动端口(默认端口：9888)。<ul><li>Android设置代理步骤：设置 - WLAN - 长按选中网络 - 修改网络 - 高级 - 代理设置 - 手动</li><li>iOS设置代理步骤：设置 - 无线局域网 - 选中网络 - HTTP代理手动</li></ul></li><li>第四步：手机安装证书。</li><li>第五步：用手机浏览器访问你要调试的页面即可。</li></ul></li><li><p><a href="https://github.com/Tencent/vConsole" target="_blank" rel="noopener">vConsole</a></p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm install vconsole</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;path/to/vconsole.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // init vConsole</span><br><span class="line">  var vConsole = new VConsole();</span><br><span class="line">  console.log(&apos;Hello world&apos;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="fiddler调试技巧"><a href="#fiddler调试技巧" class="headerlink" title="fiddler调试技巧"></a>fiddler调试技巧</h5><p>【注意】：使用fiddler时，需要开启chrome的插件，切换为fiddler模式</p><p><strong>如何配置使其能抓取chrome请求</strong></p><ol><li>设置fiddler端口</li></ol><p><a href="https://blog.csdn.net/Yyongchao/article/details/81386461" target="_blank" rel="noopener">详细步骤</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">打开工具Fiddler，在Tools选项里面点击options </span><br><span class="line">对https进行配置</span><br><span class="line">connections下勾选允许远程连接</span><br><span class="line">重启fiddler</span><br></pre></td></tr></table></figure><ol start="2"><li>chrome安装SwitchyOmega插件</li></ol><p><a href="https://github.com/FelisCatus/SwitchyOmega/releases" target="_blank" rel="noopener">SwitchyOmega插件下载地址</a></p><p>直接添加扩展程序即可。<br>如果chrome无法离线安装扩展程序，则采用以下解决方案：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">下载扩展包，并将.crx后缀修改为.rar。</span><br><span class="line">将上面的.rar文件解压</span><br><span class="line">在扩展程序页面选择Load unpacked选项，然后选中刚才解压的文件夹，确定。插件安装成功。</span><br></pre></td></tr></table></figure><p>点击插件图标，选择系统代理，即可完成抓包。</p><ul><li><strong>本地代理</strong></li></ul><p>使用willow做本地代理，访问在线地址<br><img src="https://i.loli.net/2019/09/22/X6TQpMzWuvgydac.png" width="70%"><br>chrome打开fiddler代理，如果fiddler中出现颜色高亮，则是成功代理到了本地<br><strong>坑</strong>：如果页面network中还有请求不到url，则检查是否是域名重复同样代理到了本地，导致找不到资源。应该add rule（选择对应域名，设置为ignore，并将其提前即可）<br><img src="https://i.loli.net/2019/09/22/uClKMG3d7eSjv5p.png" width="70%"></p><ul><li><strong>Auto Responsder重定向</strong></li></ul><p>Fiddler 的AutoResponder标签栏允许你从本地返回文件，而不用将http request 发送到服务器上。<br>1）选中Enable automatic responses 和unmatched requests passthrough，即打开auto responsder功能，标签栏的小闪电变绿了。<br><img src="https://i.loli.net/2019/09/22/1XAaU3LobvNlef8.png" alt="fiddler3.png"><br>2）添加规则<br>可以点击Add Rule来添加规则。<br>同时也可以在fiddler抓包记录中找到自己定义返回的会话，把此会话拖至AutoResponder下。<br>3）设置响应<br>如图所示：<br><img src="https://i.loli.net/2019/09/22/GgSZuylBhnsAfo9.png" alt="fiddler4.png"><br>1中填的是请求，前面不加EXACT:就代表模糊匹配，2中便是自己定义的返回会话。<br>autoresponder可以自定义返回响应参数啊，甚至自定义返回响应图片。可以先保存正常的js文件，然后修改里面的参数，在2处选择修改后的Js文件，下次请求的返回响应便会是修改后的Js。<br>设置完毕后，再次请求，可以看到fiddler抓包记录，IP为空，说明是从本地读取响应了。</p><ul><li><strong>使用fiddler修改hosts</strong></li></ul><p>点击Willow进入willow标签页，在空白处点击右键，新建工程，在刚刚新建的工程名字上点击右键，然后选择添加hosts，如所示：<br><img src="https://i.loli.net/2019/09/22/YhjOm5bRazEKoew.png" alt="fiddler5.png"><br><img src="https://i.loli.net/2019/09/22/X1CrL38i2Hyfvws.png" alt="fiddler6.png"></p><ul><li><strong>过滤会话</strong></li></ul><p>测试时，只想看到cgi到请求，过滤掉js等其他记录，可以在fiddler右侧选择：<br><img src="https://i.loli.net/2019/09/22/nGJj1zuq4QgL2MR.png" alt="fiddler7.png"><br>另外如果只想看对特定IP的请求，可以选择只显示指定IP的记录<br><img src="https://i.loli.net/2019/09/22/dD2eLlOqtyHIRNr.png" alt="fiddler8.png"></p><ul><li><strong>抓取手机http请求</strong></li></ul><p>1.打开Fiddler,然后Tools-&gt; Fiddler Options .切换至HTTPS面板，选中”Decrpt HTTPS traffic”,设置Fiddler可以截获HTTPS请求，如图5所示。<br><img src="https://i.loli.net/2019/09/22/AEodXGfTgLbl8iD.png" alt="fiddler9.png"><br>2.切换至Connections面板，选中”Allow remote computers to connect”.允许别的机器把HTTP/HTTPS请求发送到Fiddler上来，之后重启fiddler生效，如图6所示：<br><img src="https://i.loli.net/2019/09/22/byRLl7D9HGdkhEY.png" alt="fiddler10.png"><br>3.将手机与电脑接入同一个网络内，即连接同一个wifi，然后在手机的wifi高级设置里面添加代理ip与端口，代理ip是电脑在这个wifi下获取到的ip，将鼠标悬停至fiddler右上角的Online上，就会显示出本台电脑正在工作的所有ip，找出哪个是与手机处在同一个网络中的ip，填入手机的代理服务器中，如图7所示。<br><img src="https://i.loli.net/2019/09/22/dKoO1yUjaRXFlZ6.png" alt="fiddler11.png"><br>4.保存好之后，当用手机访问网页，或者使用手机app访问网络时，就可以在fiddler抓到手机发出的请求了，如图8所示。<br><img src="https://i.loli.net/2019/09/22/sVHjzkBcl9ovpit.png" alt="fiddler12.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>接口测试与数据模拟</title>
      <link href="/2019/09/18/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%A8%A1%E6%8B%9F/"/>
      <url>/2019/09/18/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%A8%A1%E6%8B%9F/</url>
      
        <content type="html"><![CDATA[<p><strong>常见接口测试工具</strong></p><ol><li>插件类（可以在chrome应用商店下进行下载）<ul><li>postman</li><li>DHC</li><li>REST client<a id="more"></a></li></ul></li><li>平台类（浏览器访问，不用下载任何终端，但是不能请求本地接口）<ul><li>Yapi</li><li>DOClever</li><li>RAP2</li><li>EasyMock</li><li>Swagger</li></ul></li><li>终端类（需要下载软件）<ul><li>postman</li><li>SoapUI</li><li>DOClever</li></ul></li></ol><p><strong>mock作用：</strong></p><ol><li>模拟真实接口——实现效率开发，前后端同步，特别是分布式系统</li><li>模拟交互与全过程——有些开发场景非常难触发，还要一些异常逻辑、交互逻辑</li><li>全量数据测试极端情况——压力测试</li></ol><p><strong>mock数据工具：</strong></p><ol><li>Yapi</li><li>DOClever</li><li>Easy Mock</li><li>Fast Mock</li></ol><p><strong>Mock数据开发流程：</strong></p><ol><li>前端定义接口</li><li>完成静态页面</li><li>完成UI交互</li><li>对接真实数据</li><li>页面/逻辑测试</li><li>线上部署</li></ol><p><strong>如何部署DOsClever统一管理接口？</strong></p><p><a href="https://github.com/sx1989827/DOClever" target="_blank" rel="noopener">DOClever github网址</a></p><ol><li>本地下载部署</li><li>linux上使用docker进行部署</li><li>在线控制台</li></ol><p><strong>Mock.js</strong></p><p><a href="http://mockjs.com/" target="_blank" rel="noopener">mockjs官方文档</a></p><p><a href="https://github.com/nuysoft/Mock" target="_blank" rel="noopener">github</a></p><p>Mock.js 的语法规范包括两部分：</p><ul><li>数据模板定义规范（Data Template Definition，DTD）</li><li>数据占位符定义规范（Data Placeholder Definition，DPD）</li></ul><p><strong>基础用法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line">var Mock = require(&apos;mockjs&apos;)</span><br><span class="line">var data = Mock.mock(&#123;</span><br><span class="line">    &quot;string|1-10&quot;: &quot;abc&quot;, //重复1-10次abc</span><br><span class="line">    &quot;string|3&quot;: &quot;abc&quot;, //重复3次abc</span><br><span class="line">    &quot;number|+1&quot;: 202, //number每次加1</span><br><span class="line">    &quot;number|1-100&quot;: 100, //number整数为1-100</span><br><span class="line">    &quot;number|1-100.1-10&quot;: 1, //number整数为1-100，小数为1-10位</span><br><span class="line">    &quot;number|123.1-10&quot;: 1, //number整数123，小数为1-10位</span><br><span class="line">    &quot;number|123.3&quot;: 1, //number整数123，小数为3位</span><br><span class="line">    &quot;number|123.10&quot;: 1.123, //number整数123，小数为10位</span><br><span class="line">    &quot;boolean|1&quot;: true, //随机生成一个布尔值，true 和 false 的概率同样是 1/2</span><br><span class="line">    &quot;boolean|1-2&quot;: true, //随机生成一个布尔值，值为 value 的概率是 min / (min + max)，值为 !value 的概率是 max / (min + max)</span><br><span class="line">    //随机取其中2项</span><br><span class="line">    &quot;object|2&quot;: &#123;</span><br><span class="line">        &quot;310000&quot;: &quot;上海市&quot;,</span><br><span class="line">        &quot;320000&quot;: &quot;江苏省&quot;,</span><br><span class="line">        &quot;330000&quot;: &quot;浙江省&quot;,</span><br><span class="line">        &quot;340000&quot;: &quot;安徽省&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    //随机取其中2-4项</span><br><span class="line">    &quot;object|2-4&quot;: &#123;</span><br><span class="line">        &quot;110000&quot;: &quot;北京市&quot;,</span><br><span class="line">        &quot;120000&quot;: &quot;天津市&quot;,</span><br><span class="line">        &quot;130000&quot;: &quot;河北省&quot;,</span><br><span class="line">        &quot;140000&quot;: &quot;山西省&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    //随机取其中1项</span><br><span class="line">    &quot;array|1&quot;: [</span><br><span class="line">        &quot;AMD&quot;,</span><br><span class="line">        &quot;CMD&quot;,</span><br><span class="line">        &quot;UMD&quot;</span><br><span class="line">    ],</span><br><span class="line">    //取上次的后1项</span><br><span class="line">    &quot;array|+1&quot;: [</span><br><span class="line">        &quot;AMD&quot;,</span><br><span class="line">        &quot;CMD&quot;,</span><br><span class="line">        &quot;UMD&quot;</span><br><span class="line">    ],</span><br><span class="line">    //array数组包括1-10项，其中name每次取上次的后1项</span><br><span class="line">    &quot;array|1-10&quot;: [&#123;</span><br><span class="line">        &quot;name|+1&quot;: [</span><br><span class="line">            &quot;Hello&quot;,</span><br><span class="line">            &quot;Mock.js&quot;,</span><br><span class="line">            &quot;!&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;],</span><br><span class="line">    // 数组元素重复1-10次</span><br><span class="line">    &quot;array|1-10&quot;: [</span><br><span class="line">        &quot;Mock.js&quot;</span><br><span class="line">    ],</span><br><span class="line">    // 数组元素重复1-10次</span><br><span class="line">    &quot;array|1-10&quot;: [</span><br><span class="line">        &quot;Hello&quot;,</span><br><span class="line">        &quot;Mock.js&quot;,</span><br><span class="line">        &quot;!&quot;</span><br><span class="line">    ],</span><br><span class="line">    // name为函数返回值</span><br><span class="line">    &apos;name&apos;: function() &#123;</span><br><span class="line">        return this.foo</span><br><span class="line">    &#125;,</span><br><span class="line">    // 使用正则表达式随机生成字符串</span><br><span class="line">    &apos;regexp&apos;: /[a-z][A-Z][0-9]/,</span><br><span class="line">    &apos;regexp&apos;: /\w\W\s\S\d\D/,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 用 @ 来标识其后的字符串是 占位符。</span><br><span class="line">    // 占位符 引用的是 Mock.Random 中的方法。</span><br><span class="line">    // 通过 Mock.Random.extend() 来扩展自定义占位符。</span><br><span class="line">    // 占位符 也可以引用 数据模板 中的属性。</span><br><span class="line">    // 占位符 会优先引用 数据模板 中的属性。</span><br><span class="line">    // 占位符 支持 相对路径 和 绝对路径。</span><br><span class="line"></span><br><span class="line">    // Random.boolean( min?, max?, current? )</span><br><span class="line">    // Random.boolean()</span><br><span class="line">    example: &#123;</span><br><span class="line">        // 基础类</span><br><span class="line">        boolean1: &apos;@boolean&apos;,</span><br><span class="line">        boolean2: &apos;@boolean(1, 9, true)&apos;,</span><br><span class="line"></span><br><span class="line">        natural1: &apos;@natural&apos;,</span><br><span class="line">        natural2: &apos;@natural(10000)&apos;,</span><br><span class="line">        natural3: &apos;@natural(1,10000)&apos;,</span><br><span class="line"></span><br><span class="line">        integer1: &apos;@integer&apos;,</span><br><span class="line">        integer1: &apos;@integer(10000)&apos;,</span><br><span class="line">        integer1: &apos;@integer(1,10000)&apos;,</span><br><span class="line"></span><br><span class="line">        float1: &apos;@float&apos;,</span><br><span class="line">        float2: &apos;@float(0)&apos;,</span><br><span class="line">        float3: &apos;@float(1,10000)&apos;, //Random.float( min, max )</span><br><span class="line">        float4: &apos;@float(1,10000,3)&apos;, //Random.float( min, max, dmin )</span><br><span class="line">        float5: &apos;@float(1,10000,3,5)&apos;, //Random.float( min, max, dmin, dmax )</span><br><span class="line"></span><br><span class="line">        character1: &apos;@character(&quot;lower&quot;)&apos;,</span><br><span class="line">        character2: &apos;@character(&quot;upper&quot;)&apos;,</span><br><span class="line">        character3: &apos;@character(&quot;number&quot;)&apos;,</span><br><span class="line">        character4: &apos;@character(&quot;symbol&quot;)&apos;,</span><br><span class="line"></span><br><span class="line">        string1: &apos;@string(&quot;lower&quot;,5)&apos;,</span><br><span class="line">        string2: &apos;@string(&quot;upper&quot;,5)&apos;,</span><br><span class="line">        string3: &apos;@string(&quot;number&quot;,5)&apos;,</span><br><span class="line">        string4: &apos;@string(&quot;symbol&quot;,5)&apos;,</span><br><span class="line">        string5: &apos;@string(7, 10)&apos;,</span><br><span class="line"></span><br><span class="line">        array1: &apos;@range(3, 7)&apos;,</span><br><span class="line">        array2: &apos;@range(1, 10, 2)&apos;,</span><br><span class="line"></span><br><span class="line">        // 时间类</span><br><span class="line">        date1: &apos;@date&apos;,</span><br><span class="line">        date2: &apos;@date(&quot;yyyy-MM-dd&quot;)&apos;,</span><br><span class="line">        date3: &apos;@date(&quot;yy-MM-dd&quot;)&apos;,</span><br><span class="line">        date4: &apos;@date(&quot;y-MM-dd&quot;)&apos;,</span><br><span class="line">        date5: &apos;@date(&quot;y-M-d&quot;)&apos;,</span><br><span class="line"></span><br><span class="line">        time1: &apos;@time&apos;,</span><br><span class="line">        time2: &apos;@time(&quot;A HH:mm:ss&quot;)&apos;,</span><br><span class="line">        time3: &apos;@time(&quot;a HH:mm:ss&quot;)&apos;,</span><br><span class="line">        time4: &apos;@time(&quot;HH:mm:ss&quot;)&apos;,</span><br><span class="line">        time5: &apos;@time(&quot;H:m:s&quot;)&apos;,</span><br><span class="line"></span><br><span class="line">        datetime1: &apos;@datetime&apos;,</span><br><span class="line">        datetime2: &apos;@datetime(&quot;yyyy-MM-dd A HH:mm:ss&quot;)&apos;,</span><br><span class="line">        datetime3: &apos;@datetime(&quot;yy-MM-dd a HH:mm:ss&quot;)&apos;,</span><br><span class="line">        datetime4: &apos;@datetime(&quot;y-MM-dd HH:mm:ss&quot;)&apos;,</span><br><span class="line">        datetime5: &apos;@datetime(&quot;y-M-d H:m:s&quot;)&apos;,</span><br><span class="line"></span><br><span class="line">        now1: &apos;@now&apos;,</span><br><span class="line">        now2: &apos;@now(&quot;yyyy-MM-dd HH:mm:ss SS&quot;)&apos;,</span><br><span class="line"></span><br><span class="line">        // 图片类</span><br><span class="line">        // Random.image()</span><br><span class="line">        // Random.image( size )</span><br><span class="line">        // Random.image( size, background )</span><br><span class="line">        // Random.image( size, background, text )</span><br><span class="line">        // Random.image( size, background, foreground, text )</span><br><span class="line">        // Random.image( size, background, foreground, format, text )</span><br><span class="line">        // Random.image(&apos;200x100&apos;, &apos;#894FC4&apos;, &apos;#FFF&apos;, &apos;png&apos;, &apos;!&apos;)</span><br><span class="line">        images1: &apos;@image(&quot;200x100&quot;)&apos;,</span><br><span class="line">        images2: &apos;@image(&quot;200x100&quot;,&quot;#FF6600&quot;)&apos;,</span><br><span class="line"></span><br><span class="line">        // 颜色类</span><br><span class="line">        color: &apos;@color&apos;,</span><br><span class="line"></span><br><span class="line">        // 文字类</span><br><span class="line">        // @cparagraph中文，@paragraph英文</span><br><span class="line">        paragraph1: &apos;@paragraph&apos;,</span><br><span class="line">        paragraph2: &apos;@paragraph(2)&apos;,</span><br><span class="line">        paragraph3: &apos;@paragraph(1,3)&apos;,</span><br><span class="line">        // @csentence中文，@sentence英文</span><br><span class="line">        sentence1: &apos;@sentence&apos;,</span><br><span class="line">        sentence2: &apos;@sentence(2)&apos;,</span><br><span class="line">        sentence3: &apos;@sentence(1,3)&apos;,</span><br><span class="line">        // @cword中文，@word英文</span><br><span class="line">        word1: &apos;@word&apos;,</span><br><span class="line">        word2: &apos;@word(2)&apos;,</span><br><span class="line">        word3: &apos;@word(1,3)&apos;,</span><br><span class="line">        // @ctitle中文，@title英文</span><br><span class="line">        title1: &apos;@title&apos;,</span><br><span class="line">        title2: &apos;@title(2)&apos;,</span><br><span class="line">        title3: &apos;@title(1,3)&apos;,</span><br><span class="line"></span><br><span class="line">        // 姓名类</span><br><span class="line">        first: &apos;@first&apos;,</span><br><span class="line">        last: &apos;@last&apos;,</span><br><span class="line">        name: &apos;@name&apos;,</span><br><span class="line">        cfirst: &apos;@cfirst&apos;,</span><br><span class="line">        clast: &apos;@clast&apos;,</span><br><span class="line">        cname: &apos;@cname&apos;,</span><br><span class="line"></span><br><span class="line">        // web类</span><br><span class="line">        url: &apos;@url&apos;,</span><br><span class="line">        domain: &apos;@domain&apos;,</span><br><span class="line">        protocol: &apos;@protocol&apos;,</span><br><span class="line">        email: &apos;@email&apos;,</span><br><span class="line">        ip: &apos;@ip&apos;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        // 地址类</span><br><span class="line">        region: &apos;@region&apos;,</span><br><span class="line">        province: &apos;@province&apos;,</span><br><span class="line">        city1: &apos;@city&apos;, // Random.city() &quot;滁州市&quot;</span><br><span class="line">        city2: &apos;@city(true)&apos;, // Random.city( prefix ) &quot;台湾 云林县&quot;</span><br><span class="line">        county1: &apos;@county&apos;, // Random.county()</span><br><span class="line">        county2: &apos;@county(true)&apos;, // Random.county( prefix )</span><br><span class="line">        zip: &apos;@zip&apos;, // 邮编</span><br><span class="line"></span><br><span class="line">        // helper类</span><br><span class="line">        // @capitalize</span><br><span class="line">        // @upper</span><br><span class="line">        // @lower</span><br><span class="line">        // @pick</span><br><span class="line">        // @shuffle</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 输出结果</span><br><span class="line">console.log(JSON.stringify(data, null, 2))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端自动化测试——jest必会</title>
      <link href="/2019/09/16/jest%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/09/16/jest%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><strong>常见前端自动化测试框架：</strong></p><ol><li>Jasmine</li><li>Mocha+Chai</li><li>Jest</li></ol><p>引入jest测试，则一定要针对模块进行测试</p><p><strong>jest作用：</strong></p><ol><li>单元测试（模块测试）</li><li>集成测试（多个模块测试）</li></ol><p><code>npx jest --init</code><br>会生成jest.config.js配置文件</p><p><code>npx jest --coverage</code><br>会自动生成测试覆盖率说明</p><p><strong>package.json</strong></p><ol><li>jest –watch 修改了哪个文件，重新运行那个文件的测试用例</li><li>jest –watchAll 修改了任意文件，重新运行所有文件的测试用例</li></ol><h4 id="jest语法基础"><a href="#jest语法基础" class="headerlink" title="jest语法基础"></a>jest语法基础</h4><h5 id="常用匹配器"><a href="#常用匹配器" class="headerlink" title="常用匹配器"></a>常用匹配器</h5><p><strong>1. boolean</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">toBe 相当于 === ，要完全相等才匹配（ 包括引用地址）</span><br><span class="line">toEqual 只匹配内容</span><br><span class="line">toBeNull 匹配null</span><br><span class="line">toBeUndefined 匹配undefined</span><br><span class="line">toBeDefined 匹配已定义</span><br><span class="line">toBeTruthy 转化为boolean是否为true</span><br><span class="line">toBeFalsy 转化为boolean是否为false</span><br><span class="line">not 非</span><br></pre></td></tr></table></figure><p><strong>2. number</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">toBeGreaterThan 大于</span><br><span class="line">toBeLessThan 小于</span><br><span class="line">toBeGreaterThanOrEqual 大于等于</span><br><span class="line">toBeLessThanOrEqual 小于等于</span><br><span class="line">toBeCloseTo 计算浮点数可使用，因为浮点数会出现小数溢出</span><br></pre></td></tr></table></figure><p><strong>3. string</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toMatch 正则表达式或字符串</span><br></pre></td></tr></table></figure><p><strong>4. array、set</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toContain 数组包含某个值</span><br></pre></td></tr></table></figure><p><strong>5. 异常</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toThrow 函数抛出异常</span><br></pre></td></tr></table></figure><h5 id="模式切换"><a href="#模式切换" class="headerlink" title="模式切换"></a>模式切换</h5><p>合理地使用这些模式，能够让测试变得更加地灵活、好用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Watch Usage</span><br><span class="line"> › Press f to run only failed tests.</span><br><span class="line"> › Press o to only run tests related to changed files.  </span><br><span class="line"> // 需要使用git来管理代码</span><br><span class="line"> // 以检测变化的文件</span><br><span class="line"> // jest --watch表示直接进入o模式</span><br><span class="line"> › Press p to filter by a filename regex pattern.</span><br><span class="line"> › Press t to filter by a test name regex pattern.</span><br><span class="line"> › Press q to quit watch mode.</span><br><span class="line"> › Press Enter to trigger a test run.</span><br></pre></td></tr></table></figure><h5 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h5><p><strong>1. 回调函数</strong></p><p>处理异步函数测试，需要使用done，在异步回调中加入done函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchData = <span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">    axios.get(<span class="string">'http://www.dell-lee.com/react/api/demo.json'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        fn(res.data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="string">'fetchData'</span>, (done) =&gt; &#123;</span><br><span class="line">    fetchData(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        expect(data).toEqual(&#123;</span><br><span class="line">            success: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">        done()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>promise<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchData = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> axios.get(<span class="string">'http://www.dell-lee.com/react/api/demo1.json'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法1</span></span><br><span class="line"><span class="comment">// 测试内容</span></span><br><span class="line">test(<span class="string">'fetchData'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> fetchData().then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        expect(res.data).toEqual(&#123;</span><br><span class="line">            success: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 测试404，记得一定要加expect.assertions(1)保证下面一定执行1个expect</span></span><br><span class="line">test(<span class="string">'fetchData'</span>, () =&gt; &#123;</span><br><span class="line">    expect.assertions(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> fetchData().catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        expect(e.toString().indexOf(<span class="string">'404'</span>) &gt; <span class="number">-1</span>).toBe(<span class="literal">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法2</span></span><br><span class="line"><span class="comment">// 测试内容</span></span><br><span class="line">test(<span class="string">'fetchData'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> expect(fetchData()).resolves.toMatchObject(&#123;</span><br><span class="line">        data: &#123;</span><br><span class="line">            success: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 测试404</span></span><br><span class="line">test(<span class="string">'fetchData'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> expect(fetchData()).rejects.toThrow()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法3</span></span><br><span class="line"><span class="comment">// 测试内容</span></span><br><span class="line">test(<span class="string">'fetchData'</span>, <span class="keyword">async</span>() =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> expect(fetchData()).resolves.toMatchObject(&#123;</span><br><span class="line">        data: &#123;</span><br><span class="line">            success: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 测试404</span></span><br><span class="line">test(<span class="string">'fetchData'</span>, <span class="keyword">async</span>() =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> expect(fetchData()).rejects.toThrow()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法4</span></span><br><span class="line"><span class="comment">// 测试内容</span></span><br><span class="line">test(<span class="string">'fetchData'</span>, <span class="keyword">async</span>() =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> fetchData()</span><br><span class="line">    expect(res.data).toEqual(&#123;</span><br><span class="line">        success: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 测试404</span></span><br><span class="line">test(<span class="string">'fetchData'</span>, <span class="keyword">async</span>() =&gt; &#123;</span><br><span class="line">    expect.assertions(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> fetchData()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        expect(e.toString().indexOf(<span class="string">'404'</span>) &gt; <span class="number">-1</span>).toBe(<span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h5 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">beforeAll：在所有测试用例之前执行</span><br><span class="line">beforeEach：在每个测试用例之前执行</span><br><span class="line">afterAll：在所有测试用例之后执行</span><br><span class="line">afterEach：在每个测试用例之后执行</span><br><span class="line"></span><br><span class="line">beforeEach(() =&gt; &#123;</span><br><span class="line">  initializeCityDatabase();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">afterEach(() =&gt; &#123;</span><br><span class="line">  clearCityDatabase();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">beforeAll(() =&gt; &#123;</span><br><span class="line">  return initializeCityDatabase();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">afterAll(() =&gt; &#123;</span><br><span class="line">  return clearCityDatabase();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h5><p>这样可以使结构看起来更为清晰</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">describe(&apos;outer&apos;, () =&gt; &#123;</span><br><span class="line">  describe(&apos;describe inner 1&apos;, () =&gt; &#123;</span><br><span class="line">    console.log(&apos;describe inner 1&apos;);</span><br><span class="line">    test(&apos;test 1&apos;, () =&gt; &#123;</span><br><span class="line">      console.log(&apos;test for describe inner 1&apos;);</span><br><span class="line">      expect(true).toEqual(true);</span><br><span class="line">    &#125;);</span><br><span class="line">    test(&apos;test 2&apos;, () =&gt; &#123;</span><br><span class="line">      console.log(&apos;test for describe inner 2);</span><br><span class="line">      expect(true).toEqual(true);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  describe(&apos;describe inner 2&apos;, () =&gt; &#123;</span><br><span class="line">    test(&apos;test1 for describe inner 2&apos;, () =&gt; &#123;</span><br><span class="line">      console.log(&apos;test for describe inner 2&apos;);</span><br><span class="line">      expect(false).toEqual(false);</span><br><span class="line">    &#125;);</span><br><span class="line">    test(&apos;test2 for describe inner 2&apos;, () =&gt; &#123;</span><br><span class="line">      console.log(&apos;test for describe inner 2&apos;);</span><br><span class="line">      expect(false).toEqual(false);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>test.only是指只执行那一个测试用例</p><h5 id="mock文件"><a href="#mock文件" class="headerlink" title="mock文件"></a>mock文件</h5><p>使用jest对axios做一个模拟，这样就不会去请求真正的数据，因为每次调用接口很耗费时间，假若要做大量的ajax测试，则会耗费很长的时间才能完成测试，而前端不需要在意接口返回的内容（此部分由后端完成接口测试），只在意接口是否成功请求，因此采用mock函数可以解决此问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">// demo.js</span><br><span class="line"></span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line">export const runCb = (cb) =&gt; &#123;</span><br><span class="line">    cb()</span><br><span class="line">&#125;</span><br><span class="line">export const getData = () =&gt; &#123;</span><br><span class="line">    return axios.get(&apos;/api&apos;).then(res =&gt; res.data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// demo.test.js</span><br><span class="line"></span><br><span class="line">import &#123;</span><br><span class="line">    runCb,</span><br><span class="line">    getData</span><br><span class="line">&#125; from &apos;./demo&apos;</span><br><span class="line">import axios from &apos;axios&apos;;</span><br><span class="line">jest.mock(&apos;axios&apos;) //使用jest对axios做一个模拟，这样就不会去请求真正的数据了</span><br><span class="line"></span><br><span class="line">//   mock函数，</span><br><span class="line">//   1、捕获函数的调用；</span><br><span class="line">//   2、自由地设置返回结果；</span><br><span class="line">//   3、改变内部函数的实现</span><br><span class="line"></span><br><span class="line">test(&apos;测试runCb函数&apos;, () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    const func = jest.fn()</span><br><span class="line"></span><br><span class="line">    //mock函数有返回值</span><br><span class="line">    // const func = jest.fn(()=&gt;&#123;</span><br><span class="line">    //     return &apos;aa&apos;</span><br><span class="line">    // &#125;) </span><br><span class="line"></span><br><span class="line">    // 模拟返回结果各一次</span><br><span class="line">    func.mockReturnValueOnce(&apos;aaa&apos;).mockReturnValueOnce(&apos;bbb&apos;)</span><br><span class="line">        // 模拟每次返回结果</span><br><span class="line">    func.mockReturnValue(&apos;aaa&apos;)</span><br><span class="line">        // 模拟函数内部具体实现</span><br><span class="line">    func.mockImplementation(() =&gt; &#123;</span><br><span class="line">        // ……</span><br><span class="line">        // 函数具体实现</span><br><span class="line">    &#125;)</span><br><span class="line">    func.mockImplementationOnce(() =&gt; &#123;</span><br><span class="line">            // ……</span><br><span class="line">            // 函数具体实现</span><br><span class="line">        &#125;)</span><br><span class="line">    // 模拟返回this</span><br><span class="line">    func.mockReturnThis()</span><br><span class="line">    runCb(func)</span><br><span class="line">    runCb(func)</span><br><span class="line">    expect(func).toBeCalled() //验证func被调用过</span><br><span class="line"></span><br><span class="line">    // console.log(func.mock); </span><br><span class="line">    // &#123;</span><br><span class="line">    //     calls: [[],[]],</span><br><span class="line">    //     instances: [undefined, undefined],</span><br><span class="line">    //     invocationCallOrder: [1, 2],</span><br><span class="line">    //     results: [&#123;</span><br><span class="line">    //             type: &apos;return&apos;,</span><br><span class="line">    //             value: &apos;aaa&apos;</span><br><span class="line">    //         &#125;,&#123;</span><br><span class="line">    //             type: &apos;return&apos;,</span><br><span class="line">    //             value: &apos;bbb&apos;</span><br><span class="line">    //         &#125;</span><br><span class="line">    //     ]</span><br><span class="line">    // &#125;</span><br><span class="line"></span><br><span class="line">    expect(func.mock.calls.length).toBe(2) // 验证调用了两次</span><br><span class="line">    expect(func.mock.calls[0]).toEqual([&apos;abc&apos;]) // 验证接收的参数</span><br><span class="line">    expect(func).toBeCalledWith(&apos;aaa&apos;) // 验证函数每次接收的参数都是aaa</span><br><span class="line">    expect(func.mock.results[0].value).toBe(&apos;aaa&apos;) // 验证函数返回结果</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">test(&apos;测试ajax请求&apos;, async() =&gt; &#123;</span><br><span class="line">    axios.get.mockResolvedValue(&#123;</span><br><span class="line">        data: &apos;hello&apos;</span><br><span class="line">    &#125;)</span><br><span class="line">    await getData().then((data) =&gt; &#123;</span><br><span class="line">        expect(data).toBe(&apos;hello&apos;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>推荐使用vscode提供的<code>jest插件</code>，安装后不需要执行<code>npm test</code>命令，保存文件即可执行测试，绿色代表测试用例通过</p><p><strong>实现mock文件和非mock文件</strong></p><p>如果不采用<code>jest.mock(&#39;axios&#39;)</code>来模拟ajax请求，而是直接模拟函数（用其他函数来代替），jest也提供了此类方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// jest会自动找__mocks__文件夹，将此文件夹下地demo.js代替原目录下的demo.js，这样可以模拟异步请求</span><br><span class="line">jest.mock(&apos;./demo&apos;)</span><br><span class="line"></span><br><span class="line">// 不采用以上语句也是可以的，可以直接修改jest.config.js配置文件，将automock设置为true</span><br><span class="line">automock: true</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jest.mock(&apos;./demo&apos;)</span><br><span class="line">import &#123;fetchData&#125; from &apos;./demo&apos; //这里使用的__mocks__下的demo.js文件</span><br><span class="line">const &#123;getNumber&#125; = jest.requireActual(&apos;./demo&apos;) //这里使用的项目中实际的demo.js文件</span><br></pre></td></tr></table></figure><p>一般在项目中，需要模拟异步请求，而不模拟同步函数，因此可以使用jest.requireActual来加载真正的同步函数<br>fetchData是模拟demo.js中的函数，而getNumber是真正demo.js中的函数</p><h5 id="mock定时器"><a href="#mock定时器" class="headerlink" title="mock定时器"></a>mock定时器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// timer.js</span><br><span class="line">export default (cb) =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">        cb()</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            cb()</span><br><span class="line">        &#125;, 2000)</span><br><span class="line">    &#125;, 1000)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用done可以测试setTimeout定时器，但是当定时时间非常大时，则需要等待很长的时间执行，因此可以使用jest提供的useFakeTimers函数，模拟定时器立即执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// time.test.js</span><br><span class="line"></span><br><span class="line">import timer from &apos;./timer&apos;</span><br><span class="line"></span><br><span class="line">test(&apos;测试定时器&apos;, (done) =&gt; &#123;</span><br><span class="line">    timer(() =&gt; &#123;</span><br><span class="line">        expect(2).toBe(2)</span><br><span class="line">        done()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用jest提供的useFakeTimers函数，模拟定时器立即执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import timer from &apos;./timer&apos;</span><br><span class="line">jest.useFakeTimers()</span><br><span class="line"></span><br><span class="line">// jest.useFakeTimers()和jest.runAllTimers()配对使用</span><br><span class="line">// 能够有效避免运行异步函数的等待时间</span><br><span class="line">test(&apos;测试定时器&apos;, () =&gt; &#123;</span><br><span class="line">    const fn = jest.fn()</span><br><span class="line">    timer(fn)</span><br><span class="line"></span><br><span class="line">    // 运行所有的定时器</span><br><span class="line">    jest.runAllTimers()</span><br><span class="line">    expect(fn).toHaveBeenCalledTimes(2)</span><br><span class="line">    // 只运行处于队列中的定时器</span><br><span class="line">    // jest.runOnlyPendingTimers()</span><br><span class="line">    // expect(fn).toHaveBeenCalledTimes(1)</span><br><span class="line">    // 任意地快进时间</span><br><span class="line">    // jest.advanceTimersByTime(3000)</span><br><span class="line">    // expect(fn).toHaveBeenCalledTimes(2)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>解释一下，<code>jest.useFakeTimers()</code>和<code>jest.runAllTimers()</code>必须配对使用。<code>runAllTimers()</code>是运行所有的定时器，如例子中的两个<code>setTimeout</code>都会被执行，而<code>runOnlyPendingTimers()</code>只运行处于队列中的定时器，即只执行最外层的<code>setTimeout</code>，还有<code>advanceTimersByTime()</code>函数是指定任意的快进时间</p><h5 id="snapshot"><a href="#snapshot" class="headerlink" title="snapshot"></a>snapshot</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import &#123;</span><br><span class="line">    config1,</span><br><span class="line">    config2</span><br><span class="line">&#125; from &apos;./aa&apos;</span><br><span class="line"></span><br><span class="line">test(&apos;测试静态配置&apos;, () =&gt; &#123;</span><br><span class="line">    expect(config1()).toMatchSnapshot()</span><br><span class="line">&#125;)</span><br><span class="line">test(&apos;测试动态配置&apos;, () =&gt; &#123;</span><br><span class="line">    expect(config2()).toMatchSnapshot(&#123;</span><br><span class="line">        time: expect.any(Date)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">test(&apos;测试行内snapshot&apos;, () =&gt; &#123;</span><br><span class="line">    expect(config2()).toMatchInlineSnapshot(&#123;</span><br><span class="line">        time: expect.any(Date)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果要使用行内snapshot（就是在test文件间生成快照，而不是单独地生成快照文件），则需要安装第三方模块prettier</p><h5 id="测试ES6中的类"><a href="#测试ES6中的类" class="headerlink" title="测试ES6中的类"></a>测试ES6中的类</h5><p>所谓单元测试，是针对此单元模块做测试，而不关心引入的外部模块是否正常，如果引入的外部模块中含有大量的复杂逻辑，则会拖慢测试的性能，因此可以采用模拟类的方式解决</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// util.js</span><br><span class="line">class Util &#123;</span><br><span class="line">    init() &#123;</span><br><span class="line">        // 异常复杂</span><br><span class="line">    &#125;</span><br><span class="line">    a() &#123;</span><br><span class="line">        // 异常复杂</span><br><span class="line">    &#125;</span><br><span class="line">    b() &#123;</span><br><span class="line">        // 异常复杂</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Util</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// class.js  待测试的方法</span><br><span class="line">import Util from &quot;./util&quot;;</span><br><span class="line">export const class1 = (a, b) =&gt; &#123;</span><br><span class="line">    const util = new Util()</span><br><span class="line">    util.a(a)</span><br><span class="line">    util.b(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// class.test.js 测试文件</span><br><span class="line"></span><br><span class="line">// jest.mock发现util是一个类, 会自动把类中的构造函数和方法替换为jest.fn()</span><br><span class="line">jest.mock(&apos;./util.js&apos;) </span><br><span class="line"></span><br><span class="line">// 转化如下:</span><br><span class="line">// const Util = jest.fn()</span><br><span class="line">// Util.prototype.inti=jest.fn()</span><br><span class="line">// Util.prototype.a=jest.fn()</span><br><span class="line">// Util.prototype.b=jest.fn()</span><br><span class="line"></span><br><span class="line">import &#123;class1&#125; from &apos;./class&apos;</span><br><span class="line">import Util from &apos;./util&apos;</span><br><span class="line"></span><br><span class="line">// 如果a b方法内部逻辑异常复杂,而我们只关心class1是否成功创建了实例,并执行了a b方法,不关注其内部实现,如果简化测试呢?</span><br><span class="line">test(&apos;测试class1是否成功创建了实例,并执行了a b方法&apos;, () =&gt; &#123;</span><br><span class="line">    class1()</span><br><span class="line">    expect(Util).toHaveBeenCalled()</span><br><span class="line">    console.log(Util.mock);</span><br><span class="line">    expect(Util.mock.instances[0].a).toHaveBeenCalled()</span><br><span class="line">    expect(Util.mock.instances[0].b).toHaveBeenCalled()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>集成测试（对此单元以及单元内所包含的其他单元模块统一地去做测试）</p><p>在单元测试中我们之所以使用mock，是因为mock能够让我们引入的外部模块变得简单，让单元测试运行起来会更加地快速</p><p>如果需要对Util类的mock做进一步的自定义，则可以使用之前提到的<strong>mocks</strong>文件夹进行手动模拟</p><h5 id="DOM节点操作"><a href="#DOM节点操作" class="headerlink" title="DOM节点操作"></a>DOM节点操作</h5><p>node环境下是不具备dom的，但是jest在node环境下自己模拟了一套dom api，需要安装jquery模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import $ from &apos;jquery&apos;</span><br><span class="line"></span><br><span class="line">const addDiv = () =&gt; &#123;</span><br><span class="line">    $(&apos;body&apos;).append(&apos;&lt;div&gt;aaa&lt;/div&gt;&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default addDiv</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import addDiv from &apos;./dom&apos;</span><br><span class="line">import $ from &apos;jquery&apos;</span><br><span class="line"></span><br><span class="line">// node环境下是不具备dom的</span><br><span class="line">// 但是jest在node环境下自己模拟了一套dom api</span><br><span class="line">test(&apos;测试dom&apos;, () =&gt; &#123;</span><br><span class="line">    addDiv()</span><br><span class="line">    expect($(&apos;body&apos;).find(&apos;div&apos;).length).toBe(1)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="自动化测试介绍"><a href="#自动化测试介绍" class="headerlink" title="自动化测试介绍"></a>自动化测试介绍</h4><h5 id="TDD-vs-BDD"><a href="#TDD-vs-BDD" class="headerlink" title="TDD vs BDD"></a>TDD vs BDD</h5><p><strong>（1）TDD</strong><br>测试驱动开发的模式，写代码之前先会去想测试怎么写，这样有助于先思考代码怎么实现，可以有效地提升写代码的质量<br><strong>开发流程</strong></p><ol><li>编写测试用例</li><li>运行测试，测试用例无法通过测试</li><li>编写代码，使测试用例通过测试</li><li>优化代码，完成开发</li><li>重复上述步骤</li></ol><p><strong>优势：</strong></p><ol><li>长期减少回归bug</li><li>代码质量更好（组织、可维护性）</li><li>测试覆盖率高</li><li>错误测试代码不容易出现</li></ol><p><strong>特点:</strong></p><ol><li>先写测试再写代码</li><li>一般结合单元测试使用，是白盒测试</li><li>测试重点是代码</li><li>安全感低</li><li>速度快</li></ol><p><strong>（2）BDD</strong><br>行为驱动开发的模式，先写完所有业务代码，之后再根据用户的行为去写测试代码，这样能够保证测试的行为在项目运行时能够正确地执行<br><strong>开发流程</strong></p><ol><li>编写完代码</li><li>根据用户行为编写测试用例</li><li>运行测试，验证测试用例是否通过</li><li>优化代码，保证测试用例全部通过</li><li>重复上述步骤</li></ol><p><strong>特点:</strong></p><ol><li>先写代码再写测试</li><li>一般结合集成测试使用，是黑盒测试</li><li>测试重点在UI（DOM）</li><li>安全感高</li><li>速度慢</li></ol><h5 id="单元测试-vs-集成测试"><a href="#单元测试-vs-集成测试" class="headerlink" title="单元测试 vs 集成测试"></a>单元测试 vs 集成测试</h5><p><strong>（1）单元测试</strong>：针对一个模块（单元）进行测试，当我们对一个模块或一个组件进行单元测试的时候，测试覆盖率会非常高，但是单元测试也存在一些缺点，比如业务耦合度高，当我们要修改组件逻辑或数据的时候，要重新修改单元测试的代码，会使代码量增大。单元测试也会增加工作量，因为要对组件或模块进行全覆盖地测试，有时候测试代码会比业务本身的代码还要多。</p><p>单元测试只能确保各模块或组件能正常运行，但是不能确保它们组件起来也能正常运行，单元测试过于独立，不能保证整个项目能够正常运行。结合它的一些优点和缺点，单元测试在某些场景下是适用的，某些场景下是不适用的。</p><p>例如我们要开发一个函数库，这个时候使用TDD+单元测试就很合适，因为函数库是一个个函数入参和结果生成，因此写单元测试不会和函数耦合得很紧密。当写业务代码的时候，业务耦合度会很高，单元测试实际上并不是很适用。</p><p><strong>（2）集成测试</strong>：测的是一个用户功能模块，比如用户注册功能，集成测试完全是用测试脚本去模拟用户操作，比如打开浏览器、点击注册链接、输入用户名密码、点击注册。集成测试不用关注代码自身的实现，而是根据一系列的用户操作编写测试用例，保证其功能正常即可。</p><p>集成测试能确保它们组件起来能正常运行，但是其测试覆盖率没有单元测试高。</p><p>在项目业务开发过程中，使用BDD+集成测试就很合适，因为我们可以先写完代码，再根据用户行为去测试功能是否正常，开发过程比单元测试更为快捷，并且能够有效保证功能逻辑正常。</p><h5 id="前端自动化测试的优势"><a href="#前端自动化测试的优势" class="headerlink" title="前端自动化测试的优势"></a>前端自动化测试的优势</h5><ol><li>更好的代码组织，项目的可维护性增强</li><li>更小的bug出现频率，尤其是回归测试中的bug</li><li>修改工程质量差的项目时，更加安全</li><li>项目具备潜在的文档特性</li><li>扩展前端的知识面（深入框架底层、node知识）</li></ol><h4 id="vue项目自动化测试"><a href="#vue项目自动化测试" class="headerlink" title="vue项目自动化测试"></a>vue项目自动化测试</h4><h5 id="vue环境下配置jest"><a href="#vue环境下配置jest" class="headerlink" title="vue环境下配置jest"></a>vue环境下配置jest</h5><ol><li>使用vue脚手架创建项目，<code>vue create [name]</code>,手动配置，选择jest，会自动生成jest.config.js配置文件</li><li>如果是自己手动搭建vue项目环境，需要支持jest的话，可以创建一个jest.config.js文件，内容如下：（记得安装第三方依赖）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    moduleFileExtensions: [</span><br><span class="line">        &apos;js&apos;,</span><br><span class="line">        &apos;jsx&apos;,</span><br><span class="line">        &apos;json&apos;,</span><br><span class="line">        &apos;vue&apos;</span><br><span class="line">    ],</span><br><span class="line">    transform: &#123;</span><br><span class="line">        &apos;^.+\\.vue$&apos;: &apos;vue-jest&apos;,</span><br><span class="line">        &apos;.+\\.(css|styl|less|sass|scss|svg|png|jpg|ttf|woff|woff2)$&apos;: &apos;jest-transform-stub&apos;,</span><br><span class="line">        &apos;^.+\\.jsx?$&apos;: &apos;babel-jest&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    transformIgnorePatterns: [</span><br><span class="line">        &apos;/node_modules/&apos;</span><br><span class="line">    ],</span><br><span class="line">    moduleNameMapper: &#123;</span><br><span class="line">        &apos;^@/(.*)$&apos;: &apos;&lt;rootDir&gt;/src/$1&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    snapshotSerializers: [</span><br><span class="line">        &apos;jest-serializer-vue&apos;</span><br><span class="line">    ],</span><br><span class="line">    testMatch: [</span><br><span class="line">        &apos;**/tests/unit/**/*.spec.(js|jsx|ts|tsx)|**/__tests__/*.(js|jsx|ts|tsx)&apos;</span><br><span class="line">    ],</span><br><span class="line">    testURL: &apos;http://localhost/&apos;,</span><br><span class="line">    watchPlugins: [</span><br><span class="line">        &apos;jest-watch-typeahead/filename&apos;,</span><br><span class="line">        &apos;jest-watch-typeahead/testname&apos;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="vue-test-utils的配置和使用"><a href="#vue-test-utils的配置和使用" class="headerlink" title="vue-test-utils的配置和使用"></a>vue-test-utils的配置和使用</h5><p><a href="https://vue-test-utils.vuejs.org/" target="_blank" rel="noopener">官方文档</a></p><ol><li>shallowMount适合单元测试时使用，只做浅渲染，不渲染内部引入的其他组件，知识用占位符代表其引入，从而提高性能</li><li>mount是全部渲染，做集成测试时，mount是合理的选择，但是会降低性能<br><code>import {shallowMount,mount} from &#39;@vue/test-utils&#39;</code></li></ol><p>使用快照测试，可以帮助我们及时捕获UI的变化，判断组件是否正常渲染。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import &#123;shallowMount&#125; from &apos;@vue/test-utils&apos;</span><br><span class="line">import Hello from &apos;@/components/Hello.vue&apos;</span><br><span class="line">import &#123;wrap&#125; from &apos;module&apos;;</span><br><span class="line"></span><br><span class="line">describe(&apos;测试Hello.vue&apos;, () =&gt; &#123;</span><br><span class="line">    it(&apos;不适用vue-test-utils，原始方法进行测试，较为繁琐&apos;, () =&gt; &#123;</span><br><span class="line">        const root = document.createElement(&apos;div&apos;)</span><br><span class="line">        root.className = &apos;root&apos;</span><br><span class="line">        document.body.append(root)</span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            render: h =&gt; h(Hello, &#123;</span><br><span class="line">                props: &#123;</span><br><span class="line">                    msg: &apos;hello&apos;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;).$mount(&apos;.root&apos;)</span><br><span class="line">        expect(document.getElementsByClassName(&apos;hello-container&apos;).length).toBe(1)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // shallowMount适合单元测试时使用，只做浅渲染，不渲染内部引入的其他组件，知识用占位符代表其引入，从而提高性能</span><br><span class="line">    // mount是全部渲染，做集成测试时，mount是合理的选择，但是会降低性能</span><br><span class="line">    it(&apos;使用vue-test-utils进行测试&apos;, () =&gt; &#123;</span><br><span class="line">        const msg = &apos;hello world&apos;</span><br><span class="line">        const wrapper = shallowMount(Hello, &#123;</span><br><span class="line">            propsData: &#123;</span><br><span class="line">                msg</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        expect(wrapper.text()).toMatch(msg)</span><br><span class="line">        expect(wrapper.props(&apos;msg&apos;)).toEqual(msg)</span><br><span class="line">        expect(wrapper.findAll(&apos;.hello-container&apos;).length).toBe(1)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 快照测试，可以帮助我们及时捕获UI的变化</span><br><span class="line">    it(&apos;单纯测试组件渲染是否正常&apos;, () =&gt; &#123;</span><br><span class="line">        const msg = &apos;hello world&apos;</span><br><span class="line">        const wrapper = shallowMount(Hello, &#123;</span><br><span class="line">            propsData: &#123;</span><br><span class="line">                msg</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        expect(wrapper).toMatchSnapshot()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h5><p>TDD开发Header组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import &#123;</span><br><span class="line">    shallowMount</span><br><span class="line">&#125; from &apos;@vue/test-utils&apos;</span><br><span class="line">import Header from &apos;../../components/header.vue&apos;</span><br><span class="line"></span><br><span class="line">// 建议看vue-test-utils英文文档，看wrapper具有哪些方法</span><br><span class="line">it(&apos;header 包含 input框&apos;, () =&gt; &#123;</span><br><span class="line">    const wrapper = shallowMount(Header)</span><br><span class="line">    const input = wrapper.find(&apos;[data-test=&quot;input&quot;]&apos;)</span><br><span class="line">    expect(input.exists()).toBe(true)</span><br><span class="line">&#125;)</span><br><span class="line">it(&apos;input 框初始值为空&apos;, () =&gt; &#123;</span><br><span class="line">    const wrapper = shallowMount(Header)</span><br><span class="line">    const inputValue = wrapper.vm.$data.inputValue</span><br><span class="line">    expect(inputValue).toBe(&apos;&apos;)</span><br><span class="line">&#125;)</span><br><span class="line">it(&apos;input 发生变化，数据跟着变化&apos;, () =&gt; &#123;</span><br><span class="line">    const wrapper = shallowMount(Header)</span><br><span class="line">    const input = wrapper.find(&apos;[data-test=&quot;input&quot;]&apos;)</span><br><span class="line">    input.setValue(&apos;hello world&apos;)</span><br><span class="line">    const inputValue = wrapper.vm.$data.inputValue</span><br><span class="line">    expect(inputValue).toBe(&apos;hello world&apos;)</span><br><span class="line">&#125;)</span><br><span class="line">it(&apos;input 中无内容时，无反应&apos;, () =&gt; &#123;</span><br><span class="line">    const wrapper = shallowMount(Header)</span><br><span class="line">    const input = wrapper.find(&apos;[data-test=&quot;input&quot;]&apos;)</span><br><span class="line">    input.setValue(&apos;&apos;)</span><br><span class="line">    input.trigger(&apos;keyup.enter&apos;)</span><br><span class="line">        // 不应该向外触发add事件</span><br><span class="line">    expect(wrapper.emitted().add).toBeFalsy()</span><br><span class="line">&#125;)</span><br><span class="line">it(&apos;input 中有内容时，向外触发add事件，同时清空input&apos;, () =&gt; &#123;</span><br><span class="line">    const wrapper = shallowMount(Header)</span><br><span class="line">    const input = wrapper.find(&apos;[data-test=&quot;input&quot;]&apos;)</span><br><span class="line">    input.setValue(&apos;aaaaaaaaa&apos;)</span><br><span class="line">    input.trigger(&apos;keyup.enter&apos;)</span><br><span class="line">    expect(wrapper.emitted().add).toBeTruthy()</span><br><span class="line">    expect(wrapper.vm.$data.inputValue).toBe(&apos;&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>TDD开发Todo页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import &#123;</span><br><span class="line">    shallowMount</span><br><span class="line">&#125; from &apos;@vue/test-utils&apos;</span><br><span class="line">import TodoList from &apos;../../TodoList.vue&apos;</span><br><span class="line">import Header from &apos;../../components/header.vue&apos;</span><br><span class="line"></span><br><span class="line">it(&apos;TodoList初始化时，undoList为空&apos;, () =&gt; &#123;</span><br><span class="line">    const wrapper = shallowMount(TodoList)</span><br><span class="line">    const undoList = wrapper.vm.$data.undoList</span><br><span class="line">    expect(undoList).toEqual([])</span><br><span class="line">&#125;)</span><br><span class="line">it(&apos;TodoList监听到Header的add事件时，会增加一个内容&apos;, () =&gt; &#123;</span><br><span class="line">    const content = &apos;learning IT&apos;</span><br><span class="line">    const wrapper = shallowMount(TodoList)</span><br><span class="line">    const header = wrapper.find(Header)</span><br><span class="line">    header.vm.$emit(&apos;add&apos;, content)</span><br><span class="line">    const undoList = wrapper.vm.$data.undoList</span><br><span class="line">    expect(undoList).toEqual([content])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>修复eslint报错：<code>npm run lint --fix</code></p><p>增加快照测试，能够保证页面UI样式不发生变化，如果变化会及时通知，输入w/u进行手动确认</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">it(&apos;header样式发生改变作提示&apos;, () =&gt; &#123;</span><br><span class="line">    const wrapper = shallowMount(Header)</span><br><span class="line">    expect(wrapper).toMatchSnapshot()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="react项目自动化测试"><a href="#react项目自动化测试" class="headerlink" title="react项目自动化测试"></a>react项目自动化测试</h4><h5 id="react环境下配置jest"><a href="#react环境下配置jest" class="headerlink" title="react环境下配置jest"></a>react环境下配置jest</h5><p>create-react-app中自动集成了jest，具体配置在package.json文件中。</p><p>如果是自己搭建react项目环境，则可以配置jest.config.js文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    &quot;roots&quot;: [</span><br><span class="line">        &quot;&lt;rootDir&gt;/src&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;collectCoverageFrom&quot;: [</span><br><span class="line">        &quot;src/**/*.&#123;js,jsx,ts,tsx&#125;&quot;,</span><br><span class="line">        &quot;!src/**/*.d.ts&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;setupFiles&quot;: [</span><br><span class="line">        &quot;react-app-polyfill/jsdom&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;setupFilesAfterEnv&quot;: [],</span><br><span class="line">    &quot;testMatch&quot;: [</span><br><span class="line">        &quot;&lt;rootDir&gt;/src/**/__tests__/**/*.&#123;js,jsx,ts,tsx&#125;&quot;,</span><br><span class="line">        &quot;&lt;rootDir&gt;/src/**/*.&#123;spec,test&#125;.&#123;js,jsx,ts,tsx&#125;&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;testEnvironment&quot;: &quot;jest-environment-jsdom-fourteen&quot;,</span><br><span class="line">    &quot;transform&quot;: &#123;</span><br><span class="line">        &quot;^.+\\.(js|jsx|ts|tsx)$&quot;: &quot;&lt;rootDir&gt;/node_modules/babel-jest&quot;,</span><br><span class="line">        &quot;^.+\\.css$&quot;: &quot;&lt;rootDir&gt;/config/jest/cssTransform.js&quot;,</span><br><span class="line">        &quot;^(?!.*\\.(js|jsx|ts|tsx|css|json)$)&quot;: &quot;&lt;rootDir&gt;/config/jest/fileTransform.js&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;transformIgnorePatterns&quot;: [</span><br><span class="line">        &quot;[/\\\\]node_modules[/\\\\].+\\.(js|jsx|ts|tsx)$&quot;,</span><br><span class="line">        &quot;^.+\\.module\\.(css|sass|scss)$&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;modulePaths&quot;: [],</span><br><span class="line">    &quot;moduleNameMapper&quot;: &#123;</span><br><span class="line">        &quot;^react-native$&quot;: &quot;react-native-web&quot;,</span><br><span class="line">        &quot;^.+\\.module\\.(css|sass|scss)$&quot;: &quot;identity-obj-proxy&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;moduleFileExtensions&quot;: [</span><br><span class="line">        &quot;web.js&quot;,</span><br><span class="line">        &quot;js&quot;,</span><br><span class="line">        &quot;web.ts&quot;,</span><br><span class="line">        &quot;ts&quot;,</span><br><span class="line">        &quot;web.tsx&quot;,</span><br><span class="line">        &quot;tsx&quot;,</span><br><span class="line">        &quot;json&quot;,</span><br><span class="line">        &quot;web.jsx&quot;,</span><br><span class="line">        &quot;jsx&quot;,</span><br><span class="line">        &quot;node&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;watchPlugins&quot;: [</span><br><span class="line">        &quot;jest-watch-typeahead/filename&quot;,</span><br><span class="line">        &quot;jest-watch-typeahead/testname&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="安装enzyme"><a href="#安装enzyme" class="headerlink" title="安装enzyme"></a>安装enzyme</h5><p><a href="https://github.com/airbnb/enzyme" target="_blank" rel="noopener">github平台</a>、<a href="https://airbnb.io/enzyme/" target="_blank" rel="noopener">官方文档</a></p><p>安装：<code>npm i --save-dev enzyme enzyme-adapter-react-16</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 在test文件中引入</span><br><span class="line">import Enzyme from &apos;enzyme&apos;;</span><br><span class="line">import Adapter from &apos;enzyme-adapter-react-16&apos;;</span><br><span class="line"></span><br><span class="line">Enzyme.configure(&#123; adapter: new Adapter() &#125;);</span><br></pre></td></tr></table></figure><p>在测试时，建议给DOM添加data-test属性，这样能降低与原代码class、id等选择器的耦合度，改动class、id依然能选择出正确的DOM节点。</p><p>单元测试适合用shallow、集成测试适合用mount；shallow是浅渲染（不渲染内部子组件）、mount是深渲染。</p><p><code>import Enzyme, {shallow,mount} from &#39;enzyme&#39;</code></p><p><code>wrapper.debug()</code>可以打印出完整的DOM信息（对应wrapper），更方便调试。</p><p>快照<code>expect(wrapper).toMatchSnapshot()</code>的使用：如果我们对页面的展示内容比较敏感，一般不会去改动，改动时需要反复校验，遇到这种页面或组件时，可以采用snapshot对其进行约束。</p><p>安装<code>jest-enzyme</code>可以采用更多的匹配器，方便测试的书写。<br>具体匹配器写法详见 <a href="https://github.com/FormidableLabs/enzyme-matchers/tree/master/packages/jest-enzyme" target="_blank" rel="noopener">jest-enzyme</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import App from &apos;./App&apos;;</span><br><span class="line">import Enzyme, &#123;</span><br><span class="line">    shallow,</span><br><span class="line">    mount</span><br><span class="line">&#125; from &apos;enzyme&apos;</span><br><span class="line">import Adapter from &apos;enzyme-adapter-react-16&apos;</span><br><span class="line"></span><br><span class="line">Enzyme.configure(&#123;</span><br><span class="line">    adapter: new Adapter()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(&apos;renders without crashing&apos;, () =&gt; &#123;</span><br><span class="line">    const wrapper = shallow( &lt; App / &gt; )</span><br><span class="line">    expect(wrapper).toMatchSnapshot()</span><br><span class="line">    const container = wrapper.find(&apos;[data-test=&quot;container&quot;]&apos;)</span><br><span class="line">    expect(container).toExist()</span><br><span class="line">    expect(container).toHaveProp(&apos;title&apos;, &apos;app&apos;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>分别编写Header和TodoList组件的测试代码：</p><h5 id="实战-1"><a href="#实战-1" class="headerlink" title="实战"></a>实战</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">// Header组件</span><br><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import Enzyme, &#123;</span><br><span class="line">    shallow</span><br><span class="line">&#125; from &apos;enzyme&apos;</span><br><span class="line">import Adapter from &apos;enzyme-adapter-react-16&apos;</span><br><span class="line">import Header from &apos;../../components/Header.jsx&apos;</span><br><span class="line">Enzyme.configure(&#123;</span><br><span class="line">    adapter: new Adapter()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">describe(&apos;Header组件&apos;, () =&gt; &#123;</span><br><span class="line">    it(&apos;包含一个input框&apos;, () =&gt; &#123;</span><br><span class="line">        const wrapper = shallow(&lt; Header /&gt;)</span><br><span class="line">        const inputEle = wrapper.find(&apos;[data-test=&quot;input&quot;]&apos;)</span><br><span class="line">        expect(inputEle.length).toBe(1)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(&apos;input初始化应该为空&apos;, () =&gt; &#123;</span><br><span class="line">        const wrapper = shallow(&lt; Header /&gt;)</span><br><span class="line">        const inputEle = wrapper.find(&apos;[data-test=&quot;input&quot;]&apos;)</span><br><span class="line">        expect(inputEle.prop(&apos;value&apos;)).toEqual(&apos;&apos;)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(&apos;当用户输入时，input内容应相应变化&apos;, () =&gt; &#123;</span><br><span class="line">        const wrapper = shallow(&lt; Header /&gt;)</span><br><span class="line">        const inputEle = wrapper.find(&apos;[data-test=&quot;input&quot;]&apos;)</span><br><span class="line">        const userInput = &apos;learning&apos;</span><br><span class="line">        inputEle.simulate(&apos;change&apos;, &#123;</span><br><span class="line">            target: &#123;</span><br><span class="line">                value: userInput</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        &#123;/* 或者测试数据 */&#125;</span><br><span class="line">        expect(wrapper.state(&apos;value&apos;)).toEqual(userInput)</span><br><span class="line">        &#123;/* 或者测试DOM */&#125;</span><br><span class="line">        const newInputEle = wrapper.find(&apos;[data-test=&quot;input&quot;]&apos;)</span><br><span class="line">        expect(newInputEle.prop(&apos;value&apos;)).toBe(userInput)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(&apos;input框输入回车时，如果无内容则无操作&apos;, () =&gt; &#123;</span><br><span class="line">        const fn = jest.fn()</span><br><span class="line">        const wrapper = shallow(&lt; Header addUndoItem=&#123;fn&#125; /&gt;)</span><br><span class="line">        const inputEle = wrapper.find(&apos;[data-test=&quot;input&quot;]&apos;)</span><br><span class="line">        wrapper.setState(&#123;</span><br><span class="line">            value: &apos;&apos;</span><br><span class="line">        &#125;)</span><br><span class="line">        inputEle.simulate(&apos;keyup&apos;, &#123;</span><br><span class="line">            keyCode: 13</span><br><span class="line">        &#125;)</span><br><span class="line">        expect(fn).not().toHaveBeenCalled()</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(&apos;input框输入回车时，如果有内容则调用添加函数&apos;, () =&gt; &#123;</span><br><span class="line">        const fn = jest.fn()</span><br><span class="line">        const wrapper = shallow(&lt; Header addUndoItem=&#123;fn&#125; /&gt;)</span><br><span class="line">        const inputEle = wrapper.find(&apos;[data-test=&quot;input&quot;]&apos;)</span><br><span class="line">        const userInput = &apos;hhhhhh&apos;</span><br><span class="line">        wrapper.setState(&#123;</span><br><span class="line">            value: userInput</span><br><span class="line">        &#125;)</span><br><span class="line">        inputEle.simulate(&apos;keyup&apos;, &#123;</span><br><span class="line">            keyCode: 13</span><br><span class="line">        &#125;)</span><br><span class="line">        expect(fn).toHaveBeenCalled()</span><br><span class="line">        expect(fn).toHaveBeenLastCalledWith(userInput)</span><br><span class="line">        const newInputEle = wrapper.find(&apos;[data-test=&quot;input&quot;]&apos;)</span><br><span class="line">        expect(newInputEle.prop(&apos;value&apos;)).toBe(&apos;&apos;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// TodoList组件</span><br><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import Enzyme, &#123;</span><br><span class="line">    shallow</span><br><span class="line">&#125; from &apos;enzyme&apos;</span><br><span class="line">import Adapter from &apos;enzyme-adapter-react-16&apos;</span><br><span class="line">import Todolist from &apos;../../index.jsx&apos;</span><br><span class="line">Enzyme.configure(&#123;</span><br><span class="line">    adapter: new Adapter()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">describe(&apos;Todolistr组件&apos;, () =&gt; &#123;</span><br><span class="line">    it(&apos;初始化列表为空&apos;, () =&gt; &#123;</span><br><span class="line">        const wrapper = shallow(&lt;Todolist /&gt;)</span><br><span class="line">        expect(wrapper.state(&apos;undoList&apos;)).toEqual([])</span><br><span class="line">    &#125;)</span><br><span class="line">    it(&apos;应该给header传递增加undoList的方法&apos;, () =&gt; &#123;</span><br><span class="line">        const wrapper = shallow(&lt;Todolist /&gt;)</span><br><span class="line">        const header = wrapper.find(&apos;Header&apos;)</span><br><span class="line">        expect(header.prop(&apos;addUndoItem&apos;)).toBe(wrapper.instance.addUndoItem)</span><br><span class="line">    &#125;)</span><br><span class="line">    it(&apos;header回车时，undoList应该新增内容&apos;, () =&gt; &#123;</span><br><span class="line">        const wrapper = shallow(&lt;Todolist /&gt;)</span><br><span class="line">        const header = wrapper.find(&apos;Header&apos;)</span><br><span class="line">        const addFunc = header.prop(&apos;addUndoItem&apos;)</span><br><span class="line">        const userInput = &apos;learning makes me happy&apos;</span><br><span class="line">        addFunc(userInput)</span><br><span class="line">        expect(wrapper.state(&apos;undoList&apos;).length).toBe(1)</span><br><span class="line">        expect(wrapper.state(&apos;undoList&apos;)[0]).toBe(userInput)</span><br><span class="line">        addFunc(userInput)</span><br><span class="line">        expect(wrapper.state(&apos;undoList&apos;).length).toBe(2)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>提取enzyme通用配置，需要在jest.config.js中进行配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// test.setup.js</span><br><span class="line">import Enzyme from &apos;enzyme&apos;</span><br><span class="line">import Adapter from &apos;enzyme-adapter-react-16&apos;</span><br><span class="line">Enzyme.configure(&#123;</span><br><span class="line">    adapter: new Adapter()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// jest.config.js</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  &quot;setupFilesAfterEnv&quot;: [</span><br><span class="line">     &apos;./node_modules/jest-enzyme/lib/index.js&apos;, </span><br><span class="line">     //这里是新增的js文件</span><br><span class="line">     &apos;&lt;rootDir&gt;/src/utils/test.setup.js&apos;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>tts功能开发上遇到的坑</title>
      <link href="/2019/08/12/tts%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91%E4%B8%8A%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
      <url>/2019/08/12/tts%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91%E4%B8%8A%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p><strong>tts功能开发上遇到的坑</strong></p><ol><li>使用request库请求音频，返回文件的文件无法试听——应该设置encoing:null，这样可以返回buffer</li></ol><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request(item.src, &#123; <span class="attr">encoding</span>: <span class="literal">null</span> &#125;,<span class="function"><span class="keyword">function</span> (<span class="params">error, response, body</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>文件type问题解决（后端音频返回的格式有很多，因此需要提前与后端确定，使用动态的方式添加文件名后缀）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> suffix = response.headers[<span class="string">'content-type'</span>];</span><br><span class="line"><span class="keyword">let</span> suffixMap = &#123;</span><br><span class="line">              <span class="string">'audio/mp3'</span>: <span class="string">'mp3'</span>,</span><br><span class="line">              <span class="string">'audio/mp4'</span>: <span class="string">'mp4'</span>,</span><br><span class="line">              <span class="string">'audio/wav'</span>: <span class="string">'wav'</span>,</span><br><span class="line">              <span class="string">'audio/x-ms-wma'</span>: <span class="string">'wma'</span>,</span><br><span class="line">              <span class="string">'audio/mpegurl'</span>: <span class="string">'m3u'</span>,</span><br><span class="line">            &#125;</span><br><span class="line"><span class="keyword">let</span> fileName = <span class="string">`<span class="subst">$&#123;item.id&#125;</span>.<span class="subst">$&#123;suffixMap[suffix]&#125;</span>`</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>下载的文件出现502请求</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">502</span>就是后台服务异常,是外部依赖的异常,直接给相应的后端反馈</span><br><span class="line">后端服务负载, 异常率：</span><br><span class="line">并发高, 对方负载就高, 异常率就高</span><br><span class="line">浏览器单个访问, 负载低, 不异常, 就很正常</span><br></pre></td></tr></table></figure><ol start="4"><li>excel交互解决（采用的是elementui库，但是上传的文件无法覆盖上次上传的文件，因此需要手动删除再进行上传），解决方案如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-upload</span><br><span class="line">     ref=&quot;upload&quot;</span><br><span class="line">     :action=&quot;/tts/import`&quot;</span><br><span class="line">     accept=&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;</span><br><span class="line">     :on-success=&quot;onImportSuccess&quot;</span><br><span class="line">     :on-error=&quot;onImportError&quot;</span><br><span class="line">     name=&quot;file&quot;</span><br><span class="line">     :file-list=&quot;fileList&quot;  //设置fileList</span><br><span class="line">     :on-exceed=&quot;onExceed&quot;  //文件超出指定个数的处理函数</span><br><span class="line">     :limit=&quot;1&quot;  //规定文件上传的个数</span><br><span class="line">   &gt;</span><br><span class="line"> &lt;/el-upload&gt;</span><br><span class="line"></span><br><span class="line"> data()&#123;</span><br><span class="line">     return&#123;</span><br><span class="line">         fileList: [],</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> methods:&#123;</span><br><span class="line">     onExceed(file) &#123;</span><br><span class="line">         this.fileList = [</span><br><span class="line">             &#123;</span><br><span class="line">               name: file[0].name</span><br><span class="line">            &#125;</span><br><span class="line">         ];</span><br><span class="line">     &#125;,</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>音频下载时，url中含有中文下载不成功（502），数字字符等下载成功（200），因为没有针对url进行encodeURIComponent转码处理，解决方案如下：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.open(</span><br><span class="line">  <span class="string">`<span class="subst">$&#123;downloadUrl&#125;</span>?data=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(</span></span></span><br><span class="line"><span class="string"><span class="subst">    <span class="built_in">JSON</span>.stringify(data)  <span class="regexp">//</span>如果传递的是json格式，则需要进行序列化 [&#123;id:<span class="number">1</span>,src:<span class="string">'xx'</span>&#125;</span>,&#123;id:2,src:'xx'&#125;]</span></span><br><span class="line"><span class="string">  )&#125;`</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：在后端不进行decode操作</span></span><br></pre></td></tr></table></figure><ol start="6"><li>在异步下载版本中，下载文件数量过大时，会导致很多请求返回502.因为后端限制了并发数量，因此应该改为同步版本进行下载。解决方案：使用request-promise库可以解决，具体参考<a href="https://www.npmjs.com/package/request-promise" target="_blank" rel="noopener">npm文档</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jquery源码解析</title>
      <link href="/2019/08/11/jquery%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2019/08/11/jquery%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>拜读一个开源框架，最想学到的就是设计的思想和实现的技巧。</p><a id="more"></a><h4 id="简化框架"><a href="#简化框架" class="headerlink" title="简化框架"></a>简化框架</h4><p>将框架的各部分作精简,提出大体上的架构,知道jquery框架的整体构建思路,再针对各部分进行深入挖掘学习,效果会更好.</p><p>以下是提炼出的整体框架:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匿名函数自执行,与其他代码避免冲突</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, undefined</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 21-94 </span></span><br><span class="line">    <span class="comment">// 定义一系列变量和函数</span></span><br><span class="line">    jQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 96-281</span></span><br><span class="line">    <span class="comment">// 给jQuery对象添加一些方法和属性</span></span><br><span class="line">    jQuery.fn = jQuery.prototype = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 285-347</span></span><br><span class="line">    <span class="comment">// jQuery继承方法,很方便去扩展方法</span></span><br><span class="line">    jQuery.extend = jQuery.fn.extend = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 349-816</span></span><br><span class="line">    <span class="comment">// 扩展一些工具方法(静态方法)</span></span><br><span class="line">    jQuery.extend(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 877-2868</span></span><br><span class="line">    <span class="comment">// Sizzle:复杂选择器的实现 </span></span><br><span class="line">    <span class="comment">// Sizzle CSS Selector Engine</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2903 - 3065</span></span><br><span class="line">    <span class="comment">// 回调对象,函数的统一管理</span></span><br><span class="line">    jQuery.Callbacks = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3066-3206</span></span><br><span class="line">    <span class="comment">// Deferred:延迟对象,对异步的统一管理</span></span><br><span class="line">    jQuery.extend(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3206-3220</span></span><br><span class="line">    <span class="comment">// 功能检测:通过功能判断浏览器</span></span><br><span class="line">    jQuery.support = (<span class="function"><span class="keyword">function</span>(<span class="params">support</span>) </span>&#123;&#125;)(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3333-3678</span></span><br><span class="line">    <span class="comment">// data():数据缓存</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Data</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    Data.prototype = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3679-3823</span></span><br><span class="line">    <span class="comment">// 队列管理queue dequeue</span></span><br><span class="line">    jQuery.extend(&#123;</span><br><span class="line">        queue: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">        dequeue: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    jQuery.fn.extend(&#123;</span><br><span class="line">        queue: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">        dequeue: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3824-4278</span></span><br><span class="line">    <span class="comment">// 对元素属性的操作</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 事件操作的相关方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5161-6025</span></span><br><span class="line">    <span class="comment">// dom操作封装(添加\删除\筛选)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6025-6638</span></span><br><span class="line">    <span class="comment">// CSS方法(样式操作)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6638-7913</span></span><br><span class="line">    <span class="comment">// ajax操作</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7914-8584</span></span><br><span class="line">    <span class="comment">// animate运动方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 8585-8792</span></span><br><span class="line">    <span class="comment">// 位置与尺寸的方法 offsetTop等</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 8804-8821</span></span><br><span class="line">    <span class="comment">// jquery支持模块化的模式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向外提供接口,在window中绑定全局变量</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> === <span class="string">"object"</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">window</span>.document === <span class="string">"object"</span>) &#123;</span><br><span class="line">        <span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure><p>接下来,针对各个部分进行深入地解析和学习.</p><h4 id="1-定义一系列变量和函数"><a href="#1-定义一系列变量和函数" class="headerlink" title="1. 定义一系列变量和函数"></a>1. 定义一系列变量和函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匿名函数自执行,与其他代码避免冲突</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// window 作为参数传入,是为了提高查询速度,也方便压缩时不失去其含义(window变为w等变量仍然会代表window变量)</span></span><br><span class="line"><span class="comment">// undefined 在某些浏览器下是可以被修改掉的,因此应该作为参数传递</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, undefined</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//"use strict";//不建议使用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 21-94 </span></span><br><span class="line">    <span class="comment">// 定义一系列变量和函数</span></span><br><span class="line">    <span class="keyword">var</span></span><br><span class="line">        rootjQuery, <span class="comment">//在后面会赋值为jQuery(document)</span></span><br><span class="line">        readyList, <span class="comment">//DOM加载</span></span><br><span class="line">        core_strundefined = <span class="keyword">typeof</span> <span class="literal">undefined</span>, <span class="comment">//在老版本浏览器下xmlNode.method !== undefined,应该使用typeof undefined=='undefined'</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 存成变量,有利于压缩</span></span><br><span class="line">        location = <span class="built_in">window</span>.location,</span><br><span class="line">        <span class="built_in">document</span> = <span class="built_in">window</span>.document,</span><br><span class="line">        docElem = <span class="built_in">document</span>.documentElement,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为了防止冲突,如引入的其他库中也存在$或jQuery</span></span><br><span class="line">        _jQuery = <span class="built_in">window</span>.jQuery,</span><br><span class="line">        _$ = <span class="built_in">window</span>.$,</span><br><span class="line"></span><br><span class="line">        class2type = &#123;&#125;, <span class="comment">//jquery中类型判断,存储的是js中的类型  $.type</span></span><br><span class="line"></span><br><span class="line">        core_deletedIds = [], <span class="comment">//与数据缓存有关</span></span><br><span class="line"></span><br><span class="line">        core_version = <span class="string">"2.0.3"</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 常用数组方法存储</span></span><br><span class="line">        core_concat = core_deletedIds.concat,</span><br><span class="line">        core_push = core_deletedIds.push,</span><br><span class="line">        core_slice = core_deletedIds.slice,</span><br><span class="line">        core_indexOf = core_deletedIds.indexOf,</span><br><span class="line">        core_toString = class2type.toString,</span><br><span class="line">        core_hasOwn = class2type.hasOwnProperty,</span><br><span class="line">        core_trim = core_version.trim,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 相当于$()与jQuery(),返回的是对象,后面才可以调用方法</span></span><br><span class="line">        jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> jQuery.fn.init(selector, context, rootjQuery);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        core_pnum = <span class="regexp">/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/</span>.source, <span class="comment">// 匹配数字正则</span></span><br><span class="line">        core_rnotwhite = <span class="regexp">/\S+/g</span>, <span class="comment">// 匹配空格正则</span></span><br><span class="line">        rquickExpr = <span class="regexp">/^(?:\s*(&lt;[\w\W]+&gt;)[^&gt;]*|#([\w-]*))$/</span>, <span class="comment">// 匹配html标签,并且防止xss漏洞</span></span><br><span class="line">        rsingleTag = <span class="regexp">/^&lt;(\w+)\s*\/?&gt;(?:&lt;\/\1&gt;|)$/</span>,</span><br><span class="line">        rmsPrefix = <span class="regexp">/^-ms-/</span>, <span class="comment">//检测-ms-前缀.与css驼峰转码有关</span></span><br><span class="line">        rdashAlpha = <span class="regexp">/-([\da-z])/gi</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转驼峰的回调函数</span></span><br><span class="line">        fcamelCase = <span class="function"><span class="keyword">function</span>(<span class="params">all, letter</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> letter.toUpperCase();</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载完毕后的处理(移除事件监听)</span></span><br><span class="line">        completed = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.removeEventListener(<span class="string">"DOMContentLoaded"</span>, completed, <span class="literal">false</span>);</span><br><span class="line">            <span class="built_in">window</span>.removeEventListener(<span class="string">"load"</span>, completed, <span class="literal">false</span>);</span><br><span class="line">            jQuery.ready();</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//对象的沿用,因此针对jQuery.prototype的原型修改和在jQuery.fn.init.prototype原型上进行修改的效果是一样的,因为是同一引用</span></span><br><span class="line">    <span class="comment">// 请看part2</span></span><br><span class="line">    jQuery.fn = jQuery.prototype = &#123;</span><br><span class="line">        <span class="comment">// ......</span></span><br><span class="line">    &#125;</span><br><span class="line">    jQuery.fn.init.prototype = jQuery.fn;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向外提供接口,在window中绑定全局变量</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> === <span class="string">"object"</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">window</span>.document === <span class="string">"object"</span>) &#123;</span><br><span class="line">        <span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure><h4 id="2-给jQuery对象添加一些方法和属性"><a href="#2-给jQuery对象添加一些方法和属性" class="headerlink" title="2. 给jQuery对象添加一些方法和属性"></a>2. 给jQuery对象添加一些方法和属性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, undefined</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 96-281</span></span><br><span class="line">    <span class="comment">// 给jQuery对象添加一些方法和属性</span></span><br><span class="line">    jQuery.fn = jQuery.prototype = &#123;</span><br><span class="line">        jquery: core_version, <span class="comment">//获取jQuery版本,$().jquery获取版本号</span></span><br><span class="line">        <span class="keyword">constructor</span>: jQuery, //js中自动生成 AAA.prototype.<span class="keyword">constructor</span>=AAA,因为写的是jQuery.prototype =&#123;&#125;形式,因此需要修正<span class="keyword">constructor</span>指向</span><br><span class="line">        // 补充js知识:</span><br><span class="line">        // function AAA &#123;&#125;;</span><br><span class="line">        <span class="comment">// 方法1</span></span><br><span class="line">        <span class="comment">// AAA.prototype.name = 'zhang';</span></span><br><span class="line">        <span class="comment">// AAA.prototype.age = 12;</span></span><br><span class="line">        <span class="comment">// AAA.prototype.constructor=AAA; 成立</span></span><br><span class="line">        <span class="comment">// 方法2</span></span><br><span class="line">        <span class="comment">// AAA.prototype = &#123;</span></span><br><span class="line">        <span class="comment">//     name: 'zhang',</span></span><br><span class="line">        <span class="comment">//     age: 12</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// AAA.prototype.constructor=Object; 成立</span></span><br><span class="line">        <span class="comment">// 因此需要手动修复constructor指向,AAA.prototype.constructor=AAA</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * selector:选择的元素</span></span><br><span class="line"><span class="comment">         * context:上下文,如$("li" "ul")</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        init: <span class="function"><span class="keyword">function</span>(<span class="params">selector, context, rootjQuery</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> match, elem;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 过滤不正确元素 $(""), $(null), $(undefined), $(false)</span></span><br><span class="line">            <span class="keyword">if</span> (!selector) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 补充js知识:</span></span><br><span class="line">            <span class="comment">// $('li').css('background','red');</span></span><br><span class="line">            <span class="comment">// 如果存为带有length属性的json变量,可以遍历赋值</span></span><br><span class="line">            <span class="comment">// this = &#123;</span></span><br><span class="line">            <span class="comment">//     0: 'li',</span></span><br><span class="line">            <span class="comment">//     1: 'li',</span></span><br><span class="line">            <span class="comment">//     2: 'li',</span></span><br><span class="line">            <span class="comment">//     length: 3</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            <span class="comment">// for (var i = 0; i &lt; this.length; i++) &#123;</span></span><br><span class="line">            <span class="comment">//     this[i].style.background = 'red';</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 根据selector种类进行处理</span></span><br><span class="line">            <span class="comment">// 1)如果selector是字符串</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> selector === <span class="string">"string"</span>) &#123;</span><br><span class="line">                <span class="comment">// 检测是否为标签(创建标签)</span></span><br><span class="line">                <span class="keyword">if</span> (selector.charAt(<span class="number">0</span>) === <span class="string">"&lt;"</span> &amp;&amp; selector.charAt(selector.length - <span class="number">1</span>) === <span class="string">"&gt;"</span> &amp;&amp; selector.length &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">                    match = [<span class="literal">null</span>, selector, <span class="literal">null</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    match = rquickExpr.exec(selector);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 创建id或是创建标签 $('#id) $('&lt;div&gt;hello&lt;/div&gt;')</span></span><br><span class="line">                <span class="keyword">if</span> (match &amp;&amp; (match[<span class="number">1</span>] || !context)) &#123;</span><br><span class="line">                    <span class="comment">// 创建标签</span></span><br><span class="line">                    <span class="keyword">if</span> (match[<span class="number">1</span>]) &#123;</span><br><span class="line">                        context = context <span class="keyword">instanceof</span> jQuery ? context[<span class="number">0</span>] : context; <span class="comment">//创建标签的上下文,制定document(考虑iframe,需要传入contentWindow.document)</span></span><br><span class="line">                        <span class="comment">// jQuery.parseHTML:将字符串转化为DOM数组</span></span><br><span class="line">                        <span class="comment">// jQuery.merge是数组的合并操作(对外提供数组合并,对内提供特殊的json合并)</span></span><br><span class="line">                        jQuery.merge(<span class="keyword">this</span>, jQuery.parseHTML(</span><br><span class="line">                            match[<span class="number">1</span>],</span><br><span class="line">                            context &amp;&amp; context.nodeType ? context.ownerDocument || context : <span class="built_in">document</span>,</span><br><span class="line">                            <span class="literal">true</span> <span class="comment">//parseHTML这个参数是看script是否能添加进来</span></span><br><span class="line">                        ));</span><br><span class="line">                        <span class="comment">// 处理: $(html, props)形式,如$("li",&#123;title:'hello'&#125;)</span></span><br><span class="line">                        <span class="comment">// rsingleTag匹配单标签</span></span><br><span class="line">                        <span class="keyword">if</span> (rsingleTag.test(match[<span class="number">1</span>]) &amp;&amp; jQuery.isPlainObject(context)) &#123;</span><br><span class="line">                            <span class="keyword">for</span> (match <span class="keyword">in</span> context) &#123;</span><br><span class="line">                                <span class="comment">// 执行jQuery方法,如$("li",&#123;html:'text'&#125;),执行$('li').html('text')方法 </span></span><br><span class="line">                                <span class="keyword">if</span> (jQuery.isFunction(<span class="keyword">this</span>[match])) &#123;</span><br><span class="line">                                    <span class="keyword">this</span>[match](context[match]);</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    <span class="comment">// 添加属性,如$("li",&#123;title:'hello'&#125;)</span></span><br><span class="line">                                    <span class="keyword">this</span>.attr(match, context[match]);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 获取id的element</span></span><br><span class="line">                        elem = <span class="built_in">document</span>.getElementById(match[<span class="number">2</span>]); <span class="comment">//想要的id</span></span><br><span class="line">                        <span class="comment">// 存成json形式</span></span><br><span class="line">                        <span class="keyword">if</span> (elem &amp;&amp; elem.parentNode) &#123;</span><br><span class="line">                            <span class="keyword">this</span>.length = <span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">this</span>[<span class="number">0</span>] = elem;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">this</span>.context = <span class="built_in">document</span>;</span><br><span class="line">                        <span class="keyword">this</span>.selector = selector;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!context || context.jquery) &#123;</span><br><span class="line">                    <span class="comment">// 处理 $(expr, $(...))</span></span><br><span class="line">                    <span class="comment">// find-&gt;Sissle库</span></span><br><span class="line">                    <span class="comment">// rootjQuery是jQuery(document)</span></span><br><span class="line">                    <span class="keyword">return</span> (context || rootjQuery).find(selector);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 处理$(expr, context)</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.constructor(context).find(selector);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (selector.nodeType) &#123;</span><br><span class="line">                <span class="comment">// 2) 如果selector是DOM节点, 如$(this) $(document)</span></span><br><span class="line">                <span class="keyword">this</span>.context = <span class="keyword">this</span>[<span class="number">0</span>] = selector;</span><br><span class="line">                <span class="keyword">this</span>.length = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (jQuery.isFunction(selector)) &#123;</span><br><span class="line">                <span class="comment">// 3)selector是函数</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// $(function() &#123;&#125;) 还是调的$(document).ready(function() &#123;&#125;)方法</span></span><br><span class="line">                <span class="keyword">return</span> rootjQuery.ready(selector);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 对特殊情况作处理,如$(&#123;&#125;) $([]) $($('div'))</span></span><br><span class="line">            <span class="keyword">if</span> (selector.selector !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.selector = selector.selector;</span><br><span class="line">                <span class="keyword">this</span>.context = selector.context;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// jQuery.makeArray方法将伪数组转化为真正的数组,传递第二个参数是属于内部方法,最后会转化为json(含有length属性)</span></span><br><span class="line">            <span class="keyword">return</span> jQuery.makeArray(selector, <span class="keyword">this</span>);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        selector: <span class="string">""</span>,</span><br><span class="line">        length: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法定义</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转数组</span></span><br><span class="line">        toArray: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 调用slice方法,在json环境下去执行.会返回数组</span></span><br><span class="line">            <span class="comment">// 如:</span></span><br><span class="line">            <span class="comment">// let arr = &#123;</span></span><br><span class="line">            <span class="comment">//     0: 'hello',</span></span><br><span class="line">            <span class="comment">//     1: 'hello',</span></span><br><span class="line">            <span class="comment">//     2: 'hello',</span></span><br><span class="line">            <span class="comment">//     length: 3</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            <span class="comment">// let realArr = arr.slice() //转化为了真正的数组['hello','hello','hello']</span></span><br><span class="line">            <span class="keyword">return</span> core_slice.call(<span class="keyword">this</span>);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转原生集合,可以调用原生DOM方法</span></span><br><span class="line">        <span class="keyword">get</span>: function(num) &#123;</span><br><span class="line">            <span class="keyword">return</span> num == <span class="literal">null</span> ?</span><br><span class="line">                <span class="keyword">this</span>.toArray() :</span><br><span class="line">                (num &lt; <span class="number">0</span> ? <span class="keyword">this</span>[<span class="keyword">this</span>.length + num] : <span class="keyword">this</span>[num]); <span class="comment">//找集合中的第num个</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// jQuery的入栈处理(先进后出)</span></span><br><span class="line">        pushStack: <span class="function"><span class="keyword">function</span>(<span class="params">elems</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> ret = jQuery.merge(<span class="keyword">this</span>.constructor(), elems);</span><br><span class="line">            <span class="comment">// 举例:$('div').pushStack($('span')).css('background','red').end().css('background','yellow')</span></span><br><span class="line">            <span class="comment">// 含义是:将span元素变red,div元素变yellow</span></span><br><span class="line">            ret.prevObject = <span class="keyword">this</span>; <span class="comment">//可以通过end找到stack的下一级</span></span><br><span class="line">            ret.context = <span class="keyword">this</span>.context;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过工具方法jQuery.each实现</span></span><br><span class="line">        each: <span class="function"><span class="keyword">function</span>(<span class="params">callback, args</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> jQuery.each(<span class="keyword">this</span>, callback, args);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 调用jQuery.ready</span></span><br><span class="line">        ready: <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">            jQuery.ready.promise().done(fn);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        slice: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 入栈</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.pushStack(core_slice.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>));</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 找第一项</span></span><br><span class="line">        first: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.eq(<span class="number">0</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 找最后一项</span></span><br><span class="line">        last: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.eq(<span class="number">-1</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 找第i项</span></span><br><span class="line">        eq: <span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> len = <span class="keyword">this</span>.length,</span><br><span class="line">                j = +i + (i &lt; <span class="number">0</span> ? len : <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.pushStack(j &gt;= <span class="number">0</span> &amp;&amp; j &lt; len ? [<span class="keyword">this</span>[j]] : []);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// map操作</span></span><br><span class="line">        map: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 调用jQuery.map</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.pushStack(jQuery.map(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">elem, i</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> callback.call(elem, i, elem);</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 回溯到栈的下一层</span></span><br><span class="line">        end: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.prevObject || <span class="keyword">this</span>.constructor(<span class="literal">null</span>);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数组方法,作为内部使用,不建议在外部使用</span></span><br><span class="line">        push: core_push,</span><br><span class="line">        sort: [].sort,</span><br><span class="line">        splice: [].splice</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对象的沿用,因此针对jQuery.prototype的原型修改和在jQuery.fn.init.prototype原型上进行修改的效果是一样的,因为是同一引用</span></span><br><span class="line">    jQuery.fn.init.prototype = jQuery.fn;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> === <span class="string">"object"</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">window</span>.document === <span class="string">"object"</span>) &#123;</span><br><span class="line">        <span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure><h4 id="3-extend继承方法"><a href="#3-extend继承方法" class="headerlink" title="3. extend继承方法"></a>3. extend继承方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, undefined</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    jQuery.fn.init.prototype = jQuery.fn;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 285-347</span></span><br><span class="line">    <span class="comment">// jQuery继承方法,很方便去扩展方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// jQuery.extend扩展静态方法,jQuery.fn.extend扩展实例方法(jQuery.fn.extend相当于jQuery.prototype.extend)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基本使用:</span></span><br><span class="line">    <span class="comment">// $.extend() </span></span><br><span class="line">    <span class="comment">// 1)当只写一个对象自变量的时候,是JQ中扩展插件的形式</span></span><br><span class="line">    <span class="comment">// 如:</span></span><br><span class="line">    <span class="comment">// $.extend(&#123; //扩展工具方法</span></span><br><span class="line">    <span class="comment">//     aa:function()&#123;&#125;,</span></span><br><span class="line">    <span class="comment">//     bb:function()&#123;&#125;</span></span><br><span class="line">    <span class="comment">// &#125;) </span></span><br><span class="line">    <span class="comment">// $.aa  \   $.bb</span></span><br><span class="line">    <span class="comment">// 2)当写多个对象的时候,后面的对象都是扩展到第一个对象之上</span></span><br><span class="line">    <span class="comment">// 如:</span></span><br><span class="line">    <span class="comment">// $.extend(a,&#123;name:'wang',age:21&#125;)</span></span><br><span class="line">    <span class="comment">// 3)还可以做深拷贝和浅拷贝</span></span><br><span class="line">    <span class="comment">// var a=&#123;a:1&#125;,b=&#123;b:1&#125;</span></span><br><span class="line">    <span class="comment">// $.extend(a,b) 浅拷贝</span></span><br><span class="line">    <span class="comment">// $.extend(true,a,b) 深拷贝</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// $.fn.extend()</span></span><br><span class="line">    <span class="comment">// 如:</span></span><br><span class="line">    <span class="comment">// $.extend(&#123; //扩展JQ实例方法</span></span><br><span class="line">    <span class="comment">//     aa:function()&#123;&#125;,</span></span><br><span class="line">    <span class="comment">//     bb:function()&#123;&#125;</span></span><br><span class="line">    <span class="comment">// &#125;) </span></span><br><span class="line">    <span class="comment">// $('div').aa  \  $('div').bb</span></span><br><span class="line"></span><br><span class="line">    jQuery.extend = jQuery.fn.extend = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> options, name, src, copy, copyIsArray, clone,</span><br><span class="line">            target = <span class="built_in">arguments</span>[<span class="number">0</span>] || &#123;&#125;,</span><br><span class="line">            i = <span class="number">1</span>,</span><br><span class="line">            length = <span class="built_in">arguments</span>.length,</span><br><span class="line">            deep = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 看是不是深拷贝</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">"boolean"</span>) &#123;</span><br><span class="line">            deep = target;</span><br><span class="line">            target = <span class="built_in">arguments</span>[<span class="number">1</span>] || &#123;&#125;;</span><br><span class="line">            i = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 看参数是否正确</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> target !== <span class="string">"object"</span> &amp;&amp; !jQuery.isFunction(target)) &#123;</span><br><span class="line">            target = &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 看是不是插件情况下</span></span><br><span class="line">        <span class="keyword">if</span> (length === i) &#123;</span><br><span class="line">            target = <span class="keyword">this</span>;</span><br><span class="line">            --i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可能有多个对象的情况下</span></span><br><span class="line">        <span class="keyword">for</span> (; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((options = <span class="built_in">arguments</span>[i]) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (name <span class="keyword">in</span> options) &#123;</span><br><span class="line">                    src = target[name];</span><br><span class="line">                    copy = options[name];</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 防止循环引用</span></span><br><span class="line">                    <span class="keyword">if</span> (target === copy) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 深拷贝</span></span><br><span class="line">                    <span class="keyword">if</span> (deep &amp;&amp; copy &amp;&amp; (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) &#123;</span><br><span class="line">                        <span class="comment">// 补充实例:</span></span><br><span class="line">                        <span class="comment">// var a=&#123;person:&#123;name:'zhang'&#125;&#125;,b=&#123;person:&#123;age:23&#125;&#125;</span></span><br><span class="line">                        <span class="comment">// $.extend(true,a,b)</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">// JQ:拷贝继承</span></span><br><span class="line">                        <span class="comment">// JS:类式继承/原型继承</span></span><br><span class="line">                        <span class="keyword">if</span> (copyIsArray) &#123;</span><br><span class="line">                            copyIsArray = <span class="literal">false</span>;</span><br><span class="line">                            clone = src &amp;&amp; jQuery.isArray(src) ? src : [];</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            clone = src &amp;&amp; jQuery.isPlainObject(src) ? src : &#123;&#125;;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 使用递归</span></span><br><span class="line">                        target[name] = jQuery.extend(deep, clone, copy);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (copy !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                        <span class="comment">// 浅拷贝,value不是对象类型,直接赋值即可</span></span><br><span class="line">                        target[name] = copy;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> === <span class="string">"object"</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">window</span>.document === <span class="string">"object"</span>) &#123;</span><br><span class="line">        <span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure><h4 id="4-工具方法"><a href="#4-工具方法" class="headerlink" title="4. 工具方法"></a>4. 工具方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, undefined</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 349-816</span></span><br><span class="line">    <span class="comment">// 扩展一些工具方法(静态方法),jQuery最底层的方法</span></span><br><span class="line">    jQuery.extend(&#123;</span><br><span class="line">        <span class="comment">// 生成唯一jQuery字符串(内部方法,对外未提供接口),唯一性,可以做映射关系</span></span><br><span class="line">        expando: <span class="string">"jQuery"</span> + (core_version + <span class="built_in">Math</span>.random()).replace(<span class="regexp">/\D/g</span>, <span class="string">""</span>),</span><br><span class="line">        <span class="comment">// 防止冲突</span></span><br><span class="line">        <span class="comment">// 举例:</span></span><br><span class="line">        <span class="comment">// var _$ = $.noConflict()</span></span><br><span class="line">        <span class="comment">// _$(function()&#123;</span></span><br><span class="line">        <span class="comment">//      alert($)  //仍然弹出原始定义的$</span></span><br><span class="line">        <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在前面part1部分,</span></span><br><span class="line">        <span class="comment">// 已经定义过两个变量:</span></span><br><span class="line">        <span class="comment">// _jQuery=window.jQuery</span></span><br><span class="line">        <span class="comment">// _$=window.$</span></span><br><span class="line"></span><br><span class="line">        noConflict: <span class="function"><span class="keyword">function</span>(<span class="params">deep</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">window</span>.$ === jQuery) &#123;</span><br><span class="line">                <span class="built_in">window</span>.$ = _$;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (deep &amp;&amp; <span class="built_in">window</span>.jQuery === jQuery) &#123;</span><br><span class="line">                <span class="built_in">window</span>.jQuery = _jQuery;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> jQuery;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// $(function()&#123;&#125;) 等DOM加载完.时机早于window.onload,原生中的DOM加载结束事件是DOMContentLoaded</span></span><br><span class="line">        <span class="comment">// window.onload=function()&#123;&#125; 等全部资源加载完</span></span><br><span class="line">        isReady: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        readyWait: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">        holdReady: <span class="function"><span class="keyword">function</span>(<span class="params">hold</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (hold) &#123;</span><br><span class="line">                jQuery.readyWait++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                jQuery.ready(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这是工具方法,$.ready()</span></span><br><span class="line">        ready: <span class="function"><span class="keyword">function</span>(<span class="params">wait</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (wait === <span class="literal">true</span> ? --jQuery.readyWait : jQuery.isReady) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            jQuery.isReady = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (wait !== <span class="literal">true</span> &amp;&amp; --jQuery.readyWait &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            readyList.resolveWith(<span class="built_in">document</span>, [jQuery]);</span><br><span class="line">            <span class="keyword">if</span> (jQuery.fn.trigger) &#123;</span><br><span class="line">                jQuery(<span class="built_in">document</span>).trigger(<span class="string">"ready"</span>).off(<span class="string">"ready"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检测是否为函数</span></span><br><span class="line">        isFunction: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> jQuery.type(obj) === <span class="string">"function"</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 检测是否为数组</span></span><br><span class="line">        isArray: <span class="built_in">Array</span>.isArray,</span><br><span class="line">        <span class="comment">// 检测是否为window对象</span></span><br><span class="line">        isWindow: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> obj != <span class="literal">null</span> &amp;&amp; obj === obj.window;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 检测是否为数字</span></span><br><span class="line">        <span class="comment">// 使用typeof方法判断不太靠谱,能把NaN判断为number类型</span></span><br><span class="line">        isNumeric: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !<span class="built_in">isNaN</span>(<span class="built_in">parseFloat</span>(obj)) &amp;&amp; <span class="built_in">isFinite</span>(obj);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 判断数据类型</span></span><br><span class="line">        type: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">String</span>(obj);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">typeof</span> obj === <span class="string">"object"</span> || <span class="keyword">typeof</span> obj === <span class="string">"function"</span> ?</span><br><span class="line">                class2type[core_toString.call(obj)] || <span class="string">"object"</span> :</span><br><span class="line">                <span class="keyword">typeof</span> obj;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 检测是否是普通对象</span></span><br><span class="line">        <span class="comment">// 非普通对象的情况:type不是"[object Object]" \ dom元素 \ window</span></span><br><span class="line">        isPlainObject: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (jQuery.type(obj) !== <span class="string">"object"</span> || obj.nodeType || jQuery.isWindow(obj)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (obj.constructor &amp;&amp;</span><br><span class="line">                    !core_hasOwn.call(obj.constructor.prototype, <span class="string">"isPrototypeOf"</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 检测是否为空对象</span></span><br><span class="line">        isEmptyObject: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> name;</span><br><span class="line">            <span class="keyword">for</span> (name <span class="keyword">in</span> obj) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 抛出异常</span></span><br><span class="line">        error: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(msg);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析节点,将字符串转化为HTML DOM数组</span></span><br><span class="line">        parseHTML: <span class="function"><span class="keyword">function</span>(<span class="params">data, context, keepScripts</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!data || <span class="keyword">typeof</span> data !== <span class="string">"string"</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> context === <span class="string">"boolean"</span>) &#123;</span><br><span class="line">                keepScripts = context;</span><br><span class="line">                context = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            context = context || <span class="built_in">document</span>;</span><br><span class="line">            <span class="comment">// rsingleTag为单标签正则</span></span><br><span class="line">            <span class="keyword">var</span> parsed = rsingleTag.exec(data),</span><br><span class="line">                scripts = !keepScripts &amp;&amp; [];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理单标签创建问题</span></span><br><span class="line">            <span class="keyword">if</span> (parsed) &#123;</span><br><span class="line">                <span class="keyword">return</span> [context.createElement(parsed[<span class="number">1</span>])];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 处理多标签创建问题</span></span><br><span class="line">            parsed = jQuery.buildFragment([data], context, scripts);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (scripts) &#123;</span><br><span class="line">                jQuery(scripts).remove();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> jQuery.merge([], parsed.childNodes);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析JSON,不兼容IE6/7</span></span><br><span class="line">        parseJSON: <span class="built_in">JSON</span>.parse,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析XML</span></span><br><span class="line">        parseXML: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> xml, tmp;</span><br><span class="line">            <span class="keyword">if</span> (!data || <span class="keyword">typeof</span> data !== <span class="string">"string"</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 支持 IE9</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                tmp = <span class="keyword">new</span> DOMParser();</span><br><span class="line">                xml = tmp.parseFromString(data, <span class="string">"text/xml"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                xml = <span class="literal">undefined</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!xml || xml.getElementsByTagName(<span class="string">"parsererror"</span>).length) &#123;</span><br><span class="line">                jQuery.error(<span class="string">"Invalid XML: "</span> + data);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> xml;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 返回空函数</span></span><br><span class="line">        noop: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在全局环境下执行js代码</span></span><br><span class="line">        globalEval: <span class="function"><span class="keyword">function</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> script,</span><br><span class="line">                indirect = <span class="built_in">eval</span>;</span><br><span class="line"></span><br><span class="line">            code = jQuery.trim(code);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (code) &#123;</span><br><span class="line">                <span class="comment">// 在严格模式下,不支持eval,则创建script标签插入document,执行此代码</span></span><br><span class="line">                <span class="keyword">if</span> (code.indexOf(<span class="string">"use strict"</span>) === <span class="number">1</span>) &#123;</span><br><span class="line">                    script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">                    script.text = code;</span><br><span class="line">                    <span class="built_in">document</span>.head.appendChild(script).parentNode.removeChild(script);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 正常模式下,直接使用eval解析js即可</span></span><br><span class="line">                    indirect(code);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换CSS</span></span><br><span class="line">        camelCase: <span class="function"><span class="keyword">function</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> string.replace(rmsPrefix, <span class="string">"ms-"</span>).replace(rdashAlpha, fcamelCase);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 是否为指定节点名</span></span><br><span class="line">        nodeName: <span class="function"><span class="keyword">function</span>(<span class="params">elem, name</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> elem.nodeName &amp;&amp; elem.nodeName.toLowerCase() === name.toLowerCase();</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// args参数仅作为内部使用</span></span><br><span class="line">        each: <span class="function"><span class="keyword">function</span>(<span class="params">obj, callback, args</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> value,</span><br><span class="line">                i = <span class="number">0</span>,</span><br><span class="line">                length = obj.length,</span><br><span class="line">                isArray = isArraylike(obj);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (args) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isArray) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (; i &lt; length; i++) &#123;</span><br><span class="line">                        value = callback.apply(obj[i], args);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (value === <span class="literal">false</span>) &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">                        value = callback.apply(obj[i], args);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (value === <span class="literal">false</span>) &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (isArray) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (; i &lt; length; i++) &#123;</span><br><span class="line">                        value = callback.call(obj[i], i, obj[i]);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (value === <span class="literal">false</span>) &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">                        value = callback.call(obj[i], i, obj[i]);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (value === <span class="literal">false</span>) &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        trim: <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> text == <span class="literal">null</span> ? <span class="string">""</span> : core_trim.call(text);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// results仅作为内部使用</span></span><br><span class="line">        <span class="comment">// 将伪数组转化为真正的数组</span></span><br><span class="line">        makeArray: <span class="function"><span class="keyword">function</span>(<span class="params">arr, results</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> ret = results || [];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (arr != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isArraylike(<span class="built_in">Object</span>(arr))) &#123;</span><br><span class="line">                    jQuery.merge(ret,</span><br><span class="line">                        <span class="keyword">typeof</span> arr === <span class="string">"string"</span> ? [arr] : arr</span><br><span class="line">                    );</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    core_push.call(ret, arr);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        inArray: <span class="function"><span class="keyword">function</span>(<span class="params">elem, arr, i</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> arr == <span class="literal">null</span> ? <span class="number">-1</span> : core_indexOf.call(arr, elem, i);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        merge: <span class="function"><span class="keyword">function</span>(<span class="params">first, second</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> l = second.length,</span><br><span class="line">                i = first.length,</span><br><span class="line">                j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> l === <span class="string">"number"</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (; j &lt; l; j++) &#123;</span><br><span class="line">                    first[i++] = second[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (second[j] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                    first[i++] = second[j++];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            first.length = i;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        grep: <span class="function"><span class="keyword">function</span>(<span class="params">elems, callback, inv</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> retVal,</span><br><span class="line">                ret = [],</span><br><span class="line">                i = <span class="number">0</span>,</span><br><span class="line">                length = elems.length;</span><br><span class="line">            inv = !!inv;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (; i &lt; length; i++) &#123;</span><br><span class="line">                retVal = !!callback(elems[i], i);</span><br><span class="line">                <span class="keyword">if</span> (inv !== retVal) &#123;</span><br><span class="line">                    ret.push(elems[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// arg参数仅作为内部使用</span></span><br><span class="line">        map: <span class="function"><span class="keyword">function</span>(<span class="params">elems, callback, arg</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> value,</span><br><span class="line">                i = <span class="number">0</span>,</span><br><span class="line">                length = elems.length,</span><br><span class="line">                isArray = isArraylike(elems),</span><br><span class="line">                ret = [];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (isArray) &#123;</span><br><span class="line">                <span class="keyword">for</span> (; i &lt; length; i++) &#123;</span><br><span class="line">                    value = callback(elems[i], i, arg);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">                        ret[ret.length] = value;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (i <span class="keyword">in</span> elems) &#123;</span><br><span class="line">                    value = callback(elems[i], i, arg);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">                        ret[ret.length] = value;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> core_concat.apply([], ret);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        guid: <span class="number">1</span>, <span class="comment">//GUID</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绑定函数到指定的上下文</span></span><br><span class="line">        proxy: <span class="function"><span class="keyword">function</span>(<span class="params">fn, context</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> tmp, args, proxy;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> context === <span class="string">"string"</span>) &#123;</span><br><span class="line">                tmp = fn[context];</span><br><span class="line">                context = fn;</span><br><span class="line">                fn = tmp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!jQuery.isFunction(fn)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            args = core_slice.call(<span class="built_in">arguments</span>, <span class="number">2</span>);</span><br><span class="line">            proxy = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> fn.apply(context || <span class="keyword">this</span>, args.concat(core_slice.call(<span class="built_in">arguments</span>)));</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            proxy.guid = fn.guid = fn.guid || jQuery.guid++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> proxy;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        access: <span class="function"><span class="keyword">function</span>(<span class="params">elems, fn, key, value, chainable, emptyGet, raw</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> i = <span class="number">0</span>,</span><br><span class="line">                length = elems.length,</span><br><span class="line">                bulk = key == <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Sets many values</span></span><br><span class="line">            <span class="keyword">if</span> (jQuery.type(key) === <span class="string">"object"</span>) &#123;</span><br><span class="line">                chainable = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span> (i <span class="keyword">in</span> key) &#123;</span><br><span class="line">                    jQuery.access(elems, fn, i, key[i], <span class="literal">true</span>, emptyGet, raw);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Sets one value</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                chainable = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!jQuery.isFunction(value)) &#123;</span><br><span class="line">                    raw = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (bulk) &#123;</span><br><span class="line">                    <span class="comment">// Bulk operations run against the entire set</span></span><br><span class="line">                    <span class="keyword">if</span> (raw) &#123;</span><br><span class="line">                        fn.call(elems, value);</span><br><span class="line">                        fn = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// ...except when executing function values</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        bulk = fn;</span><br><span class="line">                        fn = <span class="function"><span class="keyword">function</span>(<span class="params">elem, key, value</span>) </span>&#123;</span><br><span class="line">                            <span class="keyword">return</span> bulk.call(jQuery(elem), value);</span><br><span class="line">                        &#125;;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (fn) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (; i &lt; length; i++) &#123;</span><br><span class="line">                        fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> chainable ?</span><br><span class="line">                elems :</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Gets</span></span><br><span class="line">                bulk ?</span><br><span class="line">                fn.call(elems) :</span><br><span class="line">                length ? fn(elems[<span class="number">0</span>], key) : emptyGet;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        now: <span class="built_in">Date</span>.now,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// A method for quickly swapping in/out CSS properties to get correct calculations.</span></span><br><span class="line">        swap: <span class="function"><span class="keyword">function</span>(<span class="params">elem, options, callback, args</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> ret, name,</span><br><span class="line">                old = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Remember the old values, and insert the new ones</span></span><br><span class="line">            <span class="keyword">for</span> (name <span class="keyword">in</span> options) &#123;</span><br><span class="line">                old[name] = elem.style[name];</span><br><span class="line">                elem.style[name] = options[name];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ret = callback.apply(elem, args || []);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Revert the old values</span></span><br><span class="line">            <span class="keyword">for</span> (name <span class="keyword">in</span> options) &#123;</span><br><span class="line">                elem.style[name] = old[name];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    jQuery.ready.promise = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!readyList) &#123;</span><br><span class="line"></span><br><span class="line">            readyList = jQuery.Deferred();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Catch cases where $(document).ready() is called after the browser event has already occurred.</span></span><br><span class="line">            <span class="comment">// we once tried to use readyState "interactive" here, but it caused issues like the one</span></span><br><span class="line">            <span class="comment">// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">document</span>.readyState === <span class="string">"complete"</span>) &#123;</span><br><span class="line">                <span class="comment">// Handle it asynchronously to allow scripts the opportunity to delay ready</span></span><br><span class="line">                setTimeout(jQuery.ready);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">document</span>.addEventListener(<span class="string">"DOMContentLoaded"</span>, completed, <span class="literal">false</span>);</span><br><span class="line">                <span class="built_in">window</span>.addEventListener(<span class="string">"load"</span>, completed, <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> readyList.promise(obj);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算class2type map</span></span><br><span class="line">    jQuery.each(<span class="string">"Boolean Number String Function Array Date RegExp Object Error"</span>.split(<span class="string">" "</span>), <span class="function"><span class="keyword">function</span>(<span class="params">i, name</span>) </span>&#123;</span><br><span class="line">        class2type[<span class="string">"[object "</span> + name + <span class="string">"]"</span>] = name.toLowerCase();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isArraylike</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> length = obj.length,</span><br><span class="line">            type = jQuery.type(obj);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jQuery.isWindow(obj)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (obj.nodeType === <span class="number">1</span> &amp;&amp; length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> type === <span class="string">"array"</span> || type !== <span class="string">"function"</span> &amp;&amp;</span><br><span class="line">            (length === <span class="number">0</span> ||</span><br><span class="line">                <span class="keyword">typeof</span> length === <span class="string">"number"</span> &amp;&amp; length &gt; <span class="number">0</span> &amp;&amp; (length - <span class="number">1</span>) <span class="keyword">in</span> obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> === <span class="string">"object"</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">window</span>.document === <span class="string">"object"</span>) &#123;</span><br><span class="line">        <span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure><p>未完待续…</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ts设计模式详解</title>
      <link href="/2019/08/10/typescript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/08/10/typescript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>由于设计模式和软件开发的语言，平台都没有关系，因此，前端工程师对设计模式也是有需求的。</p><a id="more"></a><blockquote><p><strong>创建型模式</strong><br><br>创建型模式一共有4个，分别为工厂（工厂，工厂方法，抽象工厂合并），建造者，原型，单例<br><br><strong>结构型模式</strong><br><br>结构型模式一共有7种：适配器，桥接，组合，装饰，外观，享元，代理<br><br><strong>行为型模式</strong><br><br>行为型模式一共有5种：命令，中介者，观察者，状态，策略<br></p></blockquote><h4 id="一、创建型模式"><a href="#一、创建型模式" class="headerlink" title="一、创建型模式"></a>一、创建型模式</h4><h5 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> FactoryMethodPattern &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> AbstractProduct &#123;</span><br><span class="line">        method(param?: <span class="built_in">any</span>) : <span class="built_in">void</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteProductA <span class="keyword">implements</span> AbstractProduct &#123;</span><br><span class="line">        method = <span class="function">(<span class="params">param?: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Method of ConcreteProductA"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteProductB <span class="keyword">implements</span> AbstractProduct &#123;</span><br><span class="line">        method = <span class="function">(<span class="params">param?: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Method of ConcreteProductB"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">namespace</span> ProductFactory &#123;</span><br><span class="line">        <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createProduct</span>(<span class="params"><span class="keyword">type</span>: <span class="built_in">string</span></span>) : <span class="title">AbstractProduct</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">type</span> === <span class="string">"A"</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProductA();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">type</span> === <span class="string">"B"</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProductB();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> FactoryMethodPattern &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> Demo &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) : <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a: FactoryMethodPattern.AbstractProduct = FactoryMethodPattern.ProductFactory.createProduct(<span class="string">"A"</span>);</span><br><span class="line">    <span class="keyword">var</span> b: FactoryMethodPattern.AbstractProduct = FactoryMethodPattern.ProductFactory.createProduct(<span class="string">"B"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(a.method());</span><br><span class="line">    <span class="built_in">console</span>.log(b.method());</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="抽象工场模式"><a href="#抽象工场模式" class="headerlink" title="抽象工场模式"></a>抽象工场模式</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> AbstractFactoryPattern &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> AbstractProductA &#123;</span><br><span class="line">        methodA(): <span class="built_in">string</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> AbstractProductB &#123;</span><br><span class="line">        methodB(): <span class="built_in">number</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> AbstractFactory &#123;</span><br><span class="line">        createProductA(param?: <span class="built_in">any</span>) : AbstractProductA;</span><br><span class="line">        createProductB() : AbstractProductB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ProductA1 <span class="keyword">implements</span> AbstractProductA &#123;</span><br><span class="line">        methodA = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"This is methodA of ProductA1"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ProductB1 <span class="keyword">implements</span> AbstractProductB &#123;</span><br><span class="line">        methodB = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ProductA2 <span class="keyword">implements</span> AbstractProductA &#123;</span><br><span class="line">        methodA = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"This is methodA of ProductA2"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ProductB2 <span class="keyword">implements</span> AbstractProductB &#123;</span><br><span class="line">        methodB = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteFactory1 <span class="keyword">implements</span> AbstractFactory &#123;</span><br><span class="line">        createProductA(param?: <span class="built_in">any</span>) : AbstractProductA &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ProductA1();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        createProductB(param?: <span class="built_in">any</span>) : AbstractProductB &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ProductB1();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteFactory2 <span class="keyword">implements</span> AbstractFactory &#123;</span><br><span class="line">        createProductA(param?: <span class="built_in">any</span>) : AbstractProductA &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ProductA2();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        createProductB(param?: <span class="built_in">any</span>) : AbstractProductB &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ProductB2();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Tester &#123;</span><br><span class="line">        <span class="keyword">private</span> abstractProductA: AbstractProductA;</span><br><span class="line">        <span class="keyword">private</span> abstractProductB: AbstractProductB;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span>(<span class="params">factory: AbstractFactory</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.abstractProductA = factory.createProductA();</span><br><span class="line">            <span class="keyword">this</span>.abstractProductB = factory.createProductB();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> test(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.abstractProductA.methodA());</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.abstractProductB.methodB());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> AbstractFactoryPattern &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> Demo &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Abstract factory1</span></span><br><span class="line">    <span class="keyword">var</span> factory1: AbstractFactoryPattern.AbstractFactory = <span class="keyword">new</span> AbstractFactoryPattern.ConcreteFactory1();</span><br><span class="line">    <span class="keyword">var</span> tester1: AbstractFactoryPattern.Tester = <span class="keyword">new</span> AbstractFactoryPattern.Tester(factory1);</span><br><span class="line">    tester1.test();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Abstract factory2</span></span><br><span class="line">    <span class="keyword">var</span> factory2: AbstractFactoryPattern.AbstractFactory = <span class="keyword">new</span> AbstractFactoryPattern.ConcreteFactory2();</span><br><span class="line"><span class="keyword">var</span> tester2: AbstractFactoryPattern.Tester = <span class="keyword">new</span> AbstractFactoryPattern.Tester(factory2);</span><br><span class="line">    tester2.test();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> BuilderPattern &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> UserBuilder &#123;</span><br><span class="line">        <span class="keyword">private</span> name: <span class="built_in">string</span>;</span><br><span class="line">        <span class="keyword">private</span> age: <span class="built_in">number</span>;</span><br><span class="line">        <span class="keyword">private</span> phone: <span class="built_in">string</span>;</span><br><span class="line">        <span class="keyword">private</span> address: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">get</span> Name() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">        &#125;</span><br><span class="line">        setAge(value: <span class="built_in">number</span>): UserBuilder &#123;</span><br><span class="line">            <span class="keyword">this</span>.age = value;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">get</span> Age() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">        &#125;</span><br><span class="line">        setPhone(value: <span class="built_in">string</span>): UserBuilder &#123;</span><br><span class="line">            <span class="keyword">this</span>.phone = value;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">get</span> Phone() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.phone;</span><br><span class="line">        &#125;</span><br><span class="line">        setAddress(value: <span class="built_in">string</span>): UserBuilder &#123;</span><br><span class="line">            <span class="keyword">this</span>.address = value;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">get</span> Address() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.address;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        build(): User &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> User &#123;</span><br><span class="line">        <span class="keyword">private</span> name: <span class="built_in">string</span>;</span><br><span class="line">        <span class="keyword">private</span> age: <span class="built_in">number</span>;</span><br><span class="line">        <span class="keyword">private</span> phone: <span class="built_in">string</span>;</span><br><span class="line">        <span class="keyword">private</span> address: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span>(<span class="params">builder: UserBuilder</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = builder.Name;</span><br><span class="line">            <span class="keyword">this</span>.age = builder.Age;</span><br><span class="line">            <span class="keyword">this</span>.phone = builder.Phone;</span><br><span class="line">            <span class="keyword">this</span>.address = builder.Address</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">get</span> Name() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">get</span> Age() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">get</span> Phone() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.phone;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">get</span> Address() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.address;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> BuilderPattern &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> Demo &#123; </span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) : <span class="title">void</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> u: BuilderPattern.User = <span class="keyword">new</span> BuilderPattern.UserBuilder(<span class="string">"Jancsi"</span>)</span><br><span class="line">                        .setAge(<span class="number">12</span>)</span><br><span class="line">                        .setPhone(<span class="string">"0123456789"</span>)</span><br><span class="line">                        .setAddress(<span class="string">"asdf"</span>)</span><br><span class="line">                        .build();</span><br><span class="line">    <span class="built_in">console</span>.log(u.Name + <span class="string">" "</span> + u.Age + <span class="string">" "</span> + u.Phone + <span class="string">" "</span> + u.Address);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> PrototypePattern &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> Prototype &#123;</span><br><span class="line">        clone(): Prototype;</span><br><span class="line">        toString(): <span class="built_in">string</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Concrete1 <span class="keyword">implements</span> Prototype &#123;</span><br><span class="line"></span><br><span class="line">        clone() : Prototype &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Concrete1();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        toString(): <span class="built_in">string</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"This is Concrete1"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Concrete2 <span class="keyword">implements</span> Prototype &#123;</span><br><span class="line"></span><br><span class="line">        clone() : Prototype &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Concrete2();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        toString(): <span class="built_in">string</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"This is Concrete2"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Concrete3 <span class="keyword">implements</span> Prototype &#123;</span><br><span class="line"></span><br><span class="line">        clone() : Prototype &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Concrete3();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        toString(): <span class="built_in">string</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"This is Concrete3"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Builder &#123;</span><br><span class="line">        <span class="keyword">private</span> prototypeMap: &#123; [s: <span class="built_in">string</span>]: Prototype; &#125; = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.prototypeMap[<span class="string">'c1'</span>] = <span class="keyword">new</span> Concrete1();</span><br><span class="line">            <span class="keyword">this</span>.prototypeMap[<span class="string">'c2'</span>] = <span class="keyword">new</span> Concrete2();</span><br><span class="line">            <span class="keyword">this</span>.prototypeMap[<span class="string">'c3'</span>] = <span class="keyword">new</span> Concrete3();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        createOne(s: <span class="built_in">string</span>): Prototype &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(s);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.prototypeMap[s].clone();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> PrototypePattern &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> Demo &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) : <span class="title">void</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> builder : PrototypePattern.Builder = <span class="keyword">new</span> PrototypePattern.Builder();</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(builder.createOne(<span class="string">"c"</span> + i).toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> SingletonPattern &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Singleton &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> singleton: Singleton;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> getInstance(): Singleton &#123;</span><br><span class="line">            <span class="keyword">if</span> (!Singleton.singleton) &#123;</span><br><span class="line">                Singleton.singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Singleton.singleton;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> SingletonPattern &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> Demo &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) : <span class="title">void</span> </span>&#123;</span><br><span class="line"><span class="keyword">const</span> singleton1 = SingletonPattern.Singleton.getInstance();</span><br><span class="line"><span class="keyword">const</span> singleton2 = SingletonPattern.Singleton.getInstance();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (singleton1 === singleton2) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"two singletons are equivalent"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"two singletons are not equivalent"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二、结构型模式"><a href="#二、结构型模式" class="headerlink" title="二、结构型模式"></a>二、结构型模式</h4><h5 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> AdapterPattern &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Adaptee &#123;</span><br><span class="line">        <span class="keyword">public</span> method(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"`method` of Adaptee is being called"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> Target &#123;</span><br><span class="line">        call(): <span class="built_in">void</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Adapter <span class="keyword">implements</span> Target &#123;</span><br><span class="line">        <span class="keyword">public</span> call(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Adapter's `call` method is being called"</span>);</span><br><span class="line">            <span class="keyword">var</span> adaptee: Adaptee = <span class="keyword">new</span> Adaptee();</span><br><span class="line">            adaptee.method();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> AdapterPattern &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> Demo &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) : <span class="title">void</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> adapter: AdapterPattern.Adapter = <span class="keyword">new</span> AdapterPattern.Adapter();</span><br><span class="line">adapter.call();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> ChainOfResponsibilityPattern &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Handler &#123;</span><br><span class="line">        <span class="keyword">private</span> handler: Handler;</span><br><span class="line">        <span class="keyword">private</span> req: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span>(<span class="params">req: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.req = req;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> setHandler(handler: Handler): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.handler = handler;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> operation(msg: <span class="built_in">string</span>, req: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (req &lt;= <span class="keyword">this</span>.req) &#123;</span><br><span class="line">                <span class="keyword">this</span>.handlerRequest(msg)</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.handler !== <span class="literal">null</span> &amp;&amp; <span class="keyword">this</span>.handler !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.handler.operation(msg, req);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> handlerRequest(msg: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Abstract method!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteHandler1 <span class="keyword">extends</span> Handler &#123;</span><br><span class="line">        <span class="keyword">constructor</span>(<span class="params">req: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">            <span class="keyword">super</span>(req);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> handlerRequest(msg: <span class="built_in">string</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Message (ConcreteHandler1) :: "</span>, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteHandler2 <span class="keyword">extends</span> Handler &#123;</span><br><span class="line">        <span class="keyword">constructor</span>(<span class="params">req: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">            <span class="keyword">super</span>(req);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> handlerRequest(msg: <span class="built_in">string</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Message :: (ConcreteHandler2) "</span>, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteHandler3 <span class="keyword">extends</span> Handler &#123;</span><br><span class="line">        <span class="keyword">constructor</span>(<span class="params">req: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">            <span class="keyword">super</span>(req);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> handlerRequest(msg: <span class="built_in">string</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Message :: (ConcreteHandler3) "</span>, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> ChainOfResponsibilityPattern &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> Demo &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) : <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> h1: ChainOfResponsibilityPattern.Handler,</span><br><span class="line">h2: ChainOfResponsibilityPattern.Handler,</span><br><span class="line">h3: ChainOfResponsibilityPattern.Handler,</span><br><span class="line">reqs: <span class="built_in">number</span>[],</span><br><span class="line">i: <span class="built_in">number</span>,</span><br><span class="line">max: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">reqs = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">23</span>, <span class="number">34</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">h1 = <span class="keyword">new</span> ChainOfResponsibilityPattern.ConcreteHandler1(<span class="number">3</span>);</span><br><span class="line">h2 = <span class="keyword">new</span> ChainOfResponsibilityPattern.ConcreteHandler2(<span class="number">7</span>);</span><br><span class="line">h3 = <span class="keyword">new</span> ChainOfResponsibilityPattern.ConcreteHandler3(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">h1.setHandler(h2);</span><br><span class="line">h2.setHandler(h3);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, max = reqs.length; i &lt; max; i += <span class="number">1</span>) &#123;</span><br><span class="line">h1.operation(<span class="string">"operation is fired!"</span>, reqs[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> BridgePattern &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Abstraction &#123;</span><br><span class="line">        implementor: Implementor;</span><br><span class="line">        <span class="keyword">constructor</span>(<span class="params">imp: Implementor</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.implementor = imp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> callIt(s: <span class="built_in">String</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"This method is abstract!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> RefinedAbstractionA <span class="keyword">extends</span> Abstraction &#123;</span><br><span class="line">        <span class="keyword">constructor</span>(<span class="params">imp: Implementor</span>) &#123;</span><br><span class="line">            <span class="keyword">super</span>(imp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> callIt(s: <span class="built_in">String</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"This is RefinedAbstractionA"</span>);</span><br><span class="line">            <span class="keyword">this</span>.implementor.callee(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> RefinedAbstractionB <span class="keyword">extends</span> Abstraction &#123;</span><br><span class="line">        <span class="keyword">constructor</span>(<span class="params">imp: Implementor</span>) &#123;</span><br><span class="line">            <span class="keyword">super</span>(imp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> callIt(s: <span class="built_in">String</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"This is RefinedAbstractionB"</span>);</span><br><span class="line">            <span class="keyword">this</span>.implementor.callee(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> Implementor &#123;</span><br><span class="line">        callee(s: <span class="built_in">any</span>): <span class="built_in">void</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteImplementorA <span class="keyword">implements</span> Implementor &#123;</span><br><span class="line">        <span class="keyword">public</span> callee(s: <span class="built_in">any</span>) : <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"`callee` of ConcreteImplementorA is being called."</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteImplementorB <span class="keyword">implements</span> Implementor &#123;</span><br><span class="line">        <span class="keyword">public</span> callee(s: <span class="built_in">any</span>) : <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"`callee` of ConcreteImplementorB is being called."</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> BridgePattern &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> Demo &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) : <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> abstractionA: BridgePattern.Abstraction = <span class="keyword">new</span> BridgePattern.RefinedAbstractionA(<span class="keyword">new</span> BridgePattern.ConcreteImplementorA());</span><br><span class="line">    <span class="keyword">var</span> abstractionB: BridgePattern.Abstraction = <span class="keyword">new</span> BridgePattern.RefinedAbstractionB(<span class="keyword">new</span> BridgePattern.ConcreteImplementorB());</span><br><span class="line"></span><br><span class="line">abstractionA.callIt(<span class="string">"abstractionA"</span>);</span><br><span class="line">abstractionB.callIt(<span class="string">"abstractionB"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> CompositePattern &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> Component &#123;</span><br><span class="line">        operation(): <span class="built_in">void</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Composite <span class="keyword">implements</span> Component &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> list: Component[];</span><br><span class="line">        <span class="keyword">private</span> s: <span class="built_in">String</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span>(<span class="params">s: <span class="built_in">String</span></span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.list = [];</span><br><span class="line">            <span class="keyword">this</span>.s = s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> operation(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"`operation of `"</span>, <span class="keyword">this</span>.s)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.list.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.list[i].operation();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> add(c: Component): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.list.push(c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> remove(i: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.list.length &lt;= i) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"index out of bound!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.list.splice(i, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Leaf <span class="keyword">implements</span> Component &#123;</span><br><span class="line">        <span class="keyword">private</span> s: <span class="built_in">String</span>;</span><br><span class="line">        <span class="keyword">constructor</span>(<span class="params">s: <span class="built_in">String</span></span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.s = s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> operation(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"`operation` of Leaf"</span>, <span class="keyword">this</span>.s, <span class="string">" is called."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> CompositePattern &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> Demo &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) : <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> leaf1 = <span class="keyword">new</span> CompositePattern.Leaf(<span class="string">"1"</span>),</span><br><span class="line">leaf2 = <span class="keyword">new</span> CompositePattern.Leaf(<span class="string">"2"</span>),</span><br><span class="line">leaf3 = <span class="keyword">new</span> CompositePattern.Leaf(<span class="string">"3"</span>),</span><br><span class="line"></span><br><span class="line">composite1 = <span class="keyword">new</span> CompositePattern.Composite(<span class="string">"Comp1"</span>),</span><br><span class="line">composite2 = <span class="keyword">new</span> CompositePattern.Composite(<span class="string">"Comp2"</span>);</span><br><span class="line"></span><br><span class="line">composite1.add(leaf1);</span><br><span class="line">composite1.add(leaf2);</span><br><span class="line">composite1.add(leaf3);</span><br><span class="line"></span><br><span class="line">composite1.remove(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">composite2.add(leaf1);</span><br><span class="line">composite2.add(leaf3);</span><br><span class="line"></span><br><span class="line">composite1.operation();</span><br><span class="line">composite2.operation();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> DecoratorPattern &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> Component &#123;</span><br><span class="line">        operation(): <span class="built_in">void</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteComponent <span class="keyword">implements</span> Component &#123;</span><br><span class="line">        <span class="keyword">private</span> s: <span class="built_in">String</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span>(<span class="params">s: <span class="built_in">String</span></span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.s = s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> operation(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"`operation` of ConcreteComponent"</span>, <span class="keyword">this</span>.s, <span class="string">" is being called!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Decorator <span class="keyword">implements</span> Component &#123;</span><br><span class="line">        <span class="keyword">private</span> component: Component;</span><br><span class="line">        <span class="keyword">private</span> id: <span class="built_in">Number</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span>(<span class="params">id: <span class="built_in">Number</span>, component: Component</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">            <span class="keyword">this</span>.component = component;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">get</span> Id(): <span class="built_in">Number</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.id;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> operation(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"`operation` of Decorator"</span>, <span class="keyword">this</span>.id, <span class="string">" is being called!"</span>);</span><br><span class="line">            <span class="keyword">this</span>.component.operation();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteDecorator <span class="keyword">extends</span> Decorator &#123;</span><br><span class="line">        <span class="keyword">constructor</span>(<span class="params">id: <span class="built_in">Number</span>, component: Component</span>) &#123;</span><br><span class="line">            <span class="keyword">super</span>(id, component);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> operation(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.operation();</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"`operation` of ConcreteDecorator"</span>, <span class="keyword">this</span>.Id, <span class="string">" is being called!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> DecoratorPattern &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> Demo &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) : <span class="title">void</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> decorator1: DecoratorPattern.Decorator = <span class="keyword">new</span> DecoratorPattern.ConcreteDecorator(<span class="number">1</span>, <span class="keyword">new</span> DecoratorPattern.ConcreteComponent(<span class="string">"Comp1"</span>));</span><br><span class="line">decorator1.operation();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> FacadePattern &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Part1 &#123;</span><br><span class="line">        <span class="keyword">public</span> method1(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"`method1` of Part1"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Part2 &#123;</span><br><span class="line">        <span class="keyword">public</span> method2(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"`method2` of Part2"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Part3 &#123;</span><br><span class="line">        <span class="keyword">public</span> method3(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"`method3` of Part3"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Facade &#123;</span><br><span class="line">        <span class="keyword">private</span> part1: Part1 = <span class="keyword">new</span> Part1();</span><br><span class="line">        <span class="keyword">private</span> part2: Part2 = <span class="keyword">new</span> Part2();</span><br><span class="line">        <span class="keyword">private</span> part3: Part3 = <span class="keyword">new</span> Part3();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> operation1(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"`operation1` is called ==="</span>);</span><br><span class="line">            <span class="keyword">this</span>.part1.method1();</span><br><span class="line">            <span class="keyword">this</span>.part2.method2();</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"=========================="</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> operation2(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"`operation2` is called ==="</span>);</span><br><span class="line">            <span class="keyword">this</span>.part1.method1();</span><br><span class="line">            <span class="keyword">this</span>.part3.method3();</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"=========================="</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> FacadePattern &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> Demo &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) : <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> facade: FacadePattern.Facade = <span class="keyword">new</span> FacadePattern.Facade();</span><br><span class="line">facade.operation1();</span><br><span class="line">facade.operation2();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> FlyweightPattern &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> Flyweight &#123;</span><br><span class="line">        operation(s: <span class="built_in">String</span>): <span class="built_in">void</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteFlyweight <span class="keyword">implements</span> Flyweight &#123;</span><br><span class="line">        <span class="keyword">private</span> instrinsicState: <span class="built_in">String</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span>(<span class="params">instrinsicState: <span class="built_in">String</span></span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.instrinsicState = instrinsicState;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> operation(s: <span class="built_in">String</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"`operation` of ConcreteFlyweight"</span>, s, <span class="string">" is being called!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> UnsharedConcreteFlyweight <span class="keyword">implements</span> Flyweight &#123;</span><br><span class="line">        <span class="keyword">private</span> allState: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span>(<span class="params">allState: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.allState = allState;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> operation(s: <span class="built_in">String</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"`operation` of UnsharedConcreteFlyweight"</span>, s, <span class="string">" is being called!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> FlyweightFactory &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> fliesMap: &#123; [s: <span class="built_in">string</span>]: Flyweight; &#125; = &lt;<span class="built_in">any</span>&gt;&#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> getFlyweight(key: <span class="built_in">string</span>): Flyweight &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.fliesMap[key] === <span class="literal">undefined</span> || <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.fliesMap[key] = <span class="keyword">new</span> ConcreteFlyweight(key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.fliesMap[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> FlyweightPattern &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> Demo &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) : <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> factory: FlyweightPattern.FlyweightFactory   = <span class="keyword">new</span> FlyweightPattern.FlyweightFactory(),</span><br><span class="line"></span><br><span class="line">conc1: FlyweightPattern.ConcreteFlyweight    = &lt;FlyweightPattern.ConcreteFlyweight&gt;factory.getFlyweight(<span class="string">"conc1"</span>),</span><br><span class="line">conc2: FlyweightPattern.ConcreteFlyweight    = &lt;FlyweightPattern.ConcreteFlyweight&gt;factory.getFlyweight(<span class="string">"conc2"</span>);</span><br><span class="line"></span><br><span class="line">conc1.operation(<span class="string">"1"</span>);</span><br><span class="line">conc2.operation(<span class="string">"2"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> ProxyPattern &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> Subject &#123;</span><br><span class="line">        doAction(): <span class="built_in">void</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Proxy <span class="keyword">implements</span> Subject &#123;</span><br><span class="line">        <span class="keyword">private</span> realSubject: RealSubject;</span><br><span class="line">        <span class="keyword">private</span> s: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span>(<span class="params">s: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.s = s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> doAction(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"`doAction` of Proxy("</span>, <span class="keyword">this</span>.s, <span class="string">")"</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.realSubject === <span class="literal">null</span> || <span class="keyword">this</span>.realSubject === <span class="literal">undefined</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"creating a new RealSubject."</span>);</span><br><span class="line">                <span class="keyword">this</span>.realSubject = <span class="keyword">new</span> RealSubject(<span class="keyword">this</span>.s);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.realSubject.doAction();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> RealSubject <span class="keyword">implements</span> Subject &#123;</span><br><span class="line">        <span class="keyword">private</span> s: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span>(<span class="params">s: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.s = s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> doAction(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"`doAction` of RealSubject"</span>, <span class="keyword">this</span>.s, <span class="string">"is being called!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> ProxyPattern &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> Demo &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) : <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> proxy1: ProxyPattern.Proxy = <span class="keyword">new</span> ProxyPattern.Proxy(<span class="string">"proxy1"</span>),</span><br><span class="line"></span><br><span class="line">proxy2: ProxyPattern.Proxy = <span class="keyword">new</span> ProxyPattern.Proxy(<span class="string">"proxy2"</span>);</span><br><span class="line"></span><br><span class="line">proxy1.doAction();</span><br><span class="line">proxy1.doAction();</span><br><span class="line">proxy2.doAction();</span><br><span class="line">proxy2.doAction();</span><br><span class="line">proxy1.doAction();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> TemplateMethodPattern &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> AbstractClass &#123;</span><br><span class="line">        <span class="keyword">public</span> method1(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Abstract Method"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> method2(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Abstract Method"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> method3(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Abstract Method"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> templateMethod(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"templateMethod is being called"</span>);</span><br><span class="line">            <span class="keyword">this</span>.method1();</span><br><span class="line">            <span class="keyword">this</span>.method2();</span><br><span class="line">            <span class="keyword">this</span>.method3();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteClass1 <span class="keyword">extends</span> AbstractClass &#123;</span><br><span class="line">        <span class="keyword">public</span> method1(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"method1 of ConcreteClass1"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> method2(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"method2 of ConcreteClass1"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> method3(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"method3 of ConcreteClass1"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteClass2 <span class="keyword">extends</span> AbstractClass &#123;</span><br><span class="line">        <span class="keyword">public</span> method1(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"method1 of ConcreteClass2"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> method2(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"method2 of ConcreteClass2"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> method3(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"method3 of ConcreteClass2"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> TemplateMethodPattern &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> Demo &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) : <span class="title">void</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> c1: TemplateMethodPattern.ConcreteClass1 = <span class="keyword">new</span> TemplateMethodPattern.ConcreteClass1(),</span><br><span class="line">c2: TemplateMethodPattern.ConcreteClass2 = <span class="keyword">new</span> TemplateMethodPattern.ConcreteClass2();</span><br><span class="line"></span><br><span class="line">c1.templateMethod();</span><br><span class="line">c2.templateMethod();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三、行为型模式"><a href="#三、行为型模式" class="headerlink" title="三、行为型模式"></a>三、行为型模式</h4><h5 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> InterpreterPattern &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Context &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> AbstractExpression &#123;</span><br><span class="line">        interpret(context: Context): <span class="built_in">void</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> TerminalExpression <span class="keyword">implements</span> AbstractExpression &#123;</span><br><span class="line">        <span class="keyword">public</span> interpret(context: Context): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"`interpret` method of TerminalExpression is being called!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> NonterminalExpression <span class="keyword">implements</span> AbstractExpression &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> interpret(context: Context): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"`interpret` method of NonterminalExpression is being called!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> InterpreterPattern &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> Demo &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) : <span class="title">void</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> context: InterpreterPattern.Context = <span class="keyword">new</span> InterpreterPattern.Context(),</span><br><span class="line">list = [],</span><br><span class="line">i = <span class="number">0</span>,</span><br><span class="line">max;</span><br><span class="line"></span><br><span class="line">list.push(<span class="keyword">new</span> InterpreterPattern.NonterminalExpression());</span><br><span class="line">list.push(<span class="keyword">new</span> InterpreterPattern.NonterminalExpression());</span><br><span class="line">list.push(<span class="keyword">new</span> InterpreterPattern.NonterminalExpression());</span><br><span class="line">list.push(<span class="keyword">new</span> InterpreterPattern.TerminalExpression());</span><br><span class="line">list.push(<span class="keyword">new</span> InterpreterPattern.NonterminalExpression());</span><br><span class="line">list.push(<span class="keyword">new</span> InterpreterPattern.NonterminalExpression());</span><br><span class="line">list.push(<span class="keyword">new</span> InterpreterPattern.TerminalExpression());</span><br><span class="line">list.push(<span class="keyword">new</span> InterpreterPattern.TerminalExpression());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, max = list.length; i &lt; max; i += <span class="number">1</span>) &#123;</span><br><span class="line">list[i].interpret(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> CommandPattern &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Command &#123;</span><br><span class="line">        <span class="keyword">public</span> execute(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Abstract method!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteCommand1 <span class="keyword">extends</span> Command &#123;</span><br><span class="line">        <span class="keyword">private</span> receiver: Receiver;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span>(<span class="params">receiver: Receiver</span>) &#123;</span><br><span class="line">            <span class="keyword">super</span>();</span><br><span class="line">            <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> execute(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"`execute` method of ConcreteCommand1 is being called!"</span>);</span><br><span class="line">            <span class="keyword">this</span>.receiver.action();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteCommand2 <span class="keyword">extends</span> Command &#123;</span><br><span class="line">        <span class="keyword">private</span> receiver: Receiver;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span>(<span class="params">receiver: Receiver</span>) &#123;</span><br><span class="line">            <span class="keyword">super</span>();</span><br><span class="line">            <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> execute(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"`execute` method of ConcreteCommand2 is being called!"</span>);</span><br><span class="line">            <span class="keyword">this</span>.receiver.action();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Invoker &#123;</span><br><span class="line">        <span class="keyword">private</span> commands: Command[];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.commands = [];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> storeAndExecute(cmd: Command) &#123;</span><br><span class="line">            <span class="keyword">this</span>.commands.push(cmd);</span><br><span class="line">            cmd.execute();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Receiver &#123;</span><br><span class="line">        <span class="keyword">public</span> action(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"action is being called!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> receiver: CommandPattern.Receiver = <span class="keyword">new</span> CommandPattern.Receiver(),</span><br><span class="line">        command1: CommandPattern.Command  = <span class="keyword">new</span> CommandPattern.ConcreteCommand1(receiver),</span><br><span class="line">        command2: CommandPattern.Command  = <span class="keyword">new</span> CommandPattern.ConcreteCommand2(receiver),</span><br><span class="line">        invoker : CommandPattern.Invoker  = <span class="keyword">new</span> CommandPattern.Invoker();</span><br><span class="line"></span><br><span class="line">    invoker.storeAndExecute(command1);</span><br><span class="line">    invoker.storeAndExecute(command2);</span><br><span class="line"></span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> CommandPattern &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> Demo &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) : <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> receiver: CommandPattern.Receiver = <span class="keyword">new</span> CommandPattern.Receiver(),</span><br><span class="line">command1: CommandPattern.Command  = <span class="keyword">new</span> CommandPattern.ConcreteCommand1(receiver),</span><br><span class="line">command2: CommandPattern.Command  = <span class="keyword">new</span> CommandPattern.ConcreteCommand2(receiver),</span><br><span class="line">invoker : CommandPattern.Invoker  = <span class="keyword">new</span> CommandPattern.Invoker();</span><br><span class="line"></span><br><span class="line">invoker.storeAndExecute(command1);</span><br><span class="line">invoker.storeAndExecute(command2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> MediatorPattern &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> Mediator &#123;</span><br><span class="line">        send(msg: <span class="built_in">string</span>, colleague: Colleague): <span class="built_in">void</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Colleague &#123;</span><br><span class="line">        <span class="keyword">public</span> mediator: Mediator;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span>(<span class="params">mediator: Mediator</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.mediator = mediator;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> send(msg: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Abstract Method!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> receive(msg: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Abstract Method!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteColleagueA <span class="keyword">extends</span> Colleague &#123;</span><br><span class="line">        <span class="keyword">constructor</span>(<span class="params">mediator: Mediator</span>) &#123;</span><br><span class="line">            <span class="keyword">super</span>(mediator);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> send(msg: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.mediator.send(msg, <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> receive(msg: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(msg, <span class="string">"`receive` of ConcreteColleagueA is being called!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteColleagueB <span class="keyword">extends</span> Colleague &#123;</span><br><span class="line">        <span class="keyword">constructor</span>(<span class="params">mediator: Mediator</span>) &#123;</span><br><span class="line">            <span class="keyword">super</span>(mediator);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> send(msg: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.mediator.send(msg, <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> receive(msg: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(msg, <span class="string">"`receive` of ConcreteColleagueB is being called!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteMediator <span class="keyword">implements</span> Mediator &#123;</span><br><span class="line">        <span class="keyword">public</span> concreteColleagueA: ConcreteColleagueA;</span><br><span class="line">        <span class="keyword">public</span> concreteColleagueB: ConcreteColleagueB;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> send(msg: <span class="built_in">string</span>, colleague: Colleague): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.concreteColleagueA === colleague) &#123;</span><br><span class="line">                <span class="keyword">this</span>.concreteColleagueB.receive(msg);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.concreteColleagueA.receive(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> MediatorPattern &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> Demo &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) : <span class="title">void</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> cm: MediatorPattern.ConcreteMediator = <span class="keyword">new</span> MediatorPattern.ConcreteMediator(),</span><br><span class="line">c1: MediatorPattern.ConcreteColleagueA = <span class="keyword">new</span> MediatorPattern.ConcreteColleagueA(cm),</span><br><span class="line">c2: MediatorPattern.ConcreteColleagueB = <span class="keyword">new</span> MediatorPattern.ConcreteColleagueB(cm);</span><br><span class="line"></span><br><span class="line">cm.concreteColleagueA = c1;</span><br><span class="line">cm.concreteColleagueB = c2;</span><br><span class="line"></span><br><span class="line">c1.send(<span class="string">"`send` of ConcreteColleagueA is being called!"</span>);</span><br><span class="line">c2.send(<span class="string">"`send` of ConcreteColleagueB is being called!"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> ObserverPattern &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Subject &#123;</span><br><span class="line">        <span class="keyword">private</span> observers: Observer[] = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> register(observer: Observer): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(observer, <span class="string">"is pushed!"</span>);</span><br><span class="line">            <span class="keyword">this</span>.observers.push(observer);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> unregister(observer: Observer): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> n: <span class="built_in">number</span> = <span class="keyword">this</span>.observers.indexOf(observer);</span><br><span class="line">            <span class="built_in">console</span>.log(observer, <span class="string">"is removed"</span>);</span><br><span class="line">            <span class="keyword">this</span>.observers.splice(n, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> notify(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"notify all the observers"</span>, <span class="keyword">this</span>.observers);</span><br><span class="line">            <span class="keyword">var</span> i: <span class="built_in">number</span></span><br><span class="line">              , max: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>, max = <span class="keyword">this</span>.observers.length; i &lt; max; i += <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.observers[i].notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteSubject <span class="keyword">extends</span> Subject &#123;</span><br><span class="line">        <span class="keyword">private</span> subjectState: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">get</span> SubjectState(): <span class="built_in">number</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.subjectState;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">set</span> SubjectState(subjectState: <span class="built_in">number</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.subjectState = subjectState;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Observer &#123;</span><br><span class="line">        <span class="keyword">public</span> notify(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Abstract Method!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteObserver <span class="keyword">extends</span> Observer &#123;</span><br><span class="line">        <span class="keyword">private</span> name: <span class="built_in">string</span>;</span><br><span class="line">        <span class="keyword">private</span> state: <span class="built_in">number</span>;</span><br><span class="line">        <span class="keyword">private</span> subject: ConcreteSubject;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span> (<span class="params">subject: ConcreteSubject, name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">            <span class="keyword">super</span>();</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"ConcreteObserver"</span>, name, <span class="string">"is created!"</span>);</span><br><span class="line">            <span class="keyword">this</span>.subject = subject;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> notify(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"ConcreteObserver's notify method"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name, <span class="keyword">this</span>.state);</span><br><span class="line">            <span class="keyword">this</span>.state = <span class="keyword">this</span>.subject.SubjectState;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">get</span> Subject(): ConcreteSubject &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.subject;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">set</span> Subject(subject: ConcreteSubject) &#123;</span><br><span class="line">            <span class="keyword">this</span>.subject = subject;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> ObserverPattern &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> Demo &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) : <span class="title">void</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> sub: ObserverPattern.ConcreteSubject = <span class="keyword">new</span> ObserverPattern.ConcreteSubject();</span><br><span class="line"></span><br><span class="line">sub.register(<span class="keyword">new</span> ObserverPattern.ConcreteObserver(sub, <span class="string">"Jancsi"</span>));</span><br><span class="line">sub.register(<span class="keyword">new</span> ObserverPattern.ConcreteObserver(sub, <span class="string">"Julcsa"</span>));</span><br><span class="line">sub.register(<span class="keyword">new</span> ObserverPattern.ConcreteObserver(sub, <span class="string">"Marcsa"</span>));</span><br><span class="line"></span><br><span class="line">sub.SubjectState = <span class="number">123</span>;</span><br><span class="line">sub.notify();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> StatePattern &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> State &#123;</span><br><span class="line">        handle(context: Context): <span class="built_in">void</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteStateA <span class="keyword">implements</span> State &#123;</span><br><span class="line">        <span class="keyword">public</span> handle(context: Context): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"`handle` method of ConcreteStateA is being called!"</span>);</span><br><span class="line">            context.State = <span class="keyword">new</span> ConcreteStateB();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteStateB <span class="keyword">implements</span> State &#123;</span><br><span class="line">        <span class="keyword">public</span> handle(context: Context): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"`handle` method of ConcreteStateB is being called!"</span>);</span><br><span class="line">            context.State = <span class="keyword">new</span> ConcreteStateA();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Context &#123;</span><br><span class="line">        <span class="keyword">private</span> state: State;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span>(<span class="params">state: State</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.state = state;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">get</span> State(): State &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.state;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">set</span> State(state: State) &#123;</span><br><span class="line">            <span class="keyword">this</span>.state = state;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> request(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"request is being called!"</span>);</span><br><span class="line">            <span class="keyword">this</span>.state.handle(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> StatePattern &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> Demo &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) : <span class="title">void</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> context: StatePattern.Context = <span class="keyword">new</span> StatePattern.Context(<span class="keyword">new</span> StatePattern.ConcreteStateA());</span><br><span class="line">context.request();</span><br><span class="line">context.request();</span><br><span class="line">context.request();</span><br><span class="line">context.request();</span><br><span class="line">context.request();</span><br><span class="line">context.request();</span><br><span class="line">context.request();</span><br><span class="line">context.request();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> StrategyPattern &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> Strategy &#123;</span><br><span class="line">        execute(): <span class="built_in">void</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteStrategy1 <span class="keyword">implements</span> Strategy &#123;</span><br><span class="line">        <span class="keyword">public</span> execute(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"`execute` method of ConcreteStrategy1 is being called"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteStrategy2 <span class="keyword">implements</span> Strategy &#123;</span><br><span class="line">        <span class="keyword">public</span> execute(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"`execute` method of ConcreteStrategy2 is being called"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteStrategy3 <span class="keyword">implements</span> Strategy &#123;</span><br><span class="line">        <span class="keyword">public</span> execute(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"`execute` method of ConcreteStrategy3 is being called"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Context &#123;</span><br><span class="line">        <span class="keyword">private</span> strategy: Strategy;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span>(<span class="params">strategy: Strategy</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> executeStrategy(): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.strategy.execute();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> StrategyPattern &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> Demo &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) : <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context: StrategyPattern.Context = <span class="keyword">new</span> StrategyPattern.Context(<span class="keyword">new</span> StrategyPattern.ConcreteStrategy1());</span><br><span class="line"></span><br><span class="line">context.executeStrategy();</span><br><span class="line"></span><br><span class="line">context = <span class="keyword">new</span> StrategyPattern.Context(<span class="keyword">new</span> StrategyPattern.ConcreteStrategy2());</span><br><span class="line">context.executeStrategy();</span><br><span class="line"></span><br><span class="line">context = <span class="keyword">new</span> StrategyPattern.Context(<span class="keyword">new</span> StrategyPattern.ConcreteStrategy3());</span><br><span class="line">context.executeStrategy();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> IteratorPattern &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> Iterator &#123;</span><br><span class="line"></span><br><span class="line">        next(): <span class="built_in">any</span>;</span><br><span class="line">        hasNext(): <span class="built_in">boolean</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> Aggregator &#123;</span><br><span class="line">        createIterator(): Iterator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteIterator <span class="keyword">implements</span> Iterator &#123;</span><br><span class="line">        <span class="keyword">private</span> collection: <span class="built_in">any</span>[] = [];</span><br><span class="line">        <span class="keyword">private</span> position: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span>(<span class="params">collection: <span class="built_in">any</span>[]</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.collection = collection;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> next(): <span class="built_in">any</span> &#123;</span><br><span class="line">            <span class="comment">// Error handling is left out</span></span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">this</span>.collection[<span class="keyword">this</span>.position];</span><br><span class="line">            <span class="keyword">this</span>.position += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> hasNext(): <span class="built_in">boolean</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.position &lt; <span class="keyword">this</span>.collection.length;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Numbers <span class="keyword">implements</span> Aggregator &#123;</span><br><span class="line">        <span class="keyword">private</span> collection: <span class="built_in">number</span>[] = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span>(<span class="params">collection: <span class="built_in">number</span>[]</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.collection = collection;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> createIterator(): Iterator &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConcreteIterator(<span class="keyword">this</span>.collection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> IteratorPattern &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> Demo &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) : <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nArray = [<span class="number">1</span>, <span class="number">7</span>, <span class="number">21</span>, <span class="number">657</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">765</span>, <span class="number">13</span>, <span class="number">65</span>],</span><br><span class="line">numbers: IteratorPattern.Numbers = <span class="keyword">new</span> IteratorPattern.Numbers(nArray),</span><br><span class="line">it: IteratorPattern.ConcreteIterator = &lt;IteratorPattern.ConcreteIterator&gt;numbers.createIterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(it.next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> MementoPattern &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> State &#123;</span><br><span class="line">        <span class="keyword">private</span> str: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span>(<span class="params">str: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.str = str;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">get</span> Str() : <span class="built_in">string</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.str;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">set</span> Str(str: <span class="built_in">string</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.str = str;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Originator &#123;</span><br><span class="line">        <span class="keyword">private</span> state: State;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span>(<span class="params">state: State</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.state = state;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">get</span> State(): State &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.state;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">set</span> State(state: State) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"State :: "</span>, state);</span><br><span class="line">            <span class="keyword">this</span>.state = state;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> createMemento(): Memento &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"creates a memento with a given state!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Memento(<span class="keyword">this</span>.state);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> setMemento(memento: Memento) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"sets the state back"</span>);</span><br><span class="line">            <span class="keyword">this</span>.State = memento.State;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Memento &#123;</span><br><span class="line">        <span class="keyword">private</span> state: State;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span> (<span class="params">state: State</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.state = state;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">get</span> State(): State &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"get memento's state"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.state;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> CareTaker &#123;</span><br><span class="line">        <span class="keyword">private</span> memento: Memento;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">get</span> Memento(): Memento &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.memento;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">set</span> Memento(memento: Memento) &#123;</span><br><span class="line">            <span class="keyword">this</span>.memento = memento;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> MementoPattern &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> Demo &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) : <span class="title">void</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> state: MementoPattern.State = <span class="keyword">new</span> MementoPattern.State(<span class="string">"... State "</span>),</span><br><span class="line">originator: MementoPattern.Originator = <span class="keyword">new</span> MementoPattern.Originator(state),</span><br><span class="line">careTaker: MementoPattern.CareTaker = <span class="keyword">new</span> MementoPattern.CareTaker();</span><br><span class="line"></span><br><span class="line">careTaker.Memento = originator.createMemento();</span><br><span class="line">originator.State = <span class="keyword">new</span> MementoPattern.State(<span class="string">"something else..."</span>);</span><br><span class="line"></span><br><span class="line">originator.setMemento(careTaker.Memento);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> VisitorPattern &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> Visitor &#123;</span><br><span class="line">        visitConcreteElement1(concreteElement1: ConcreteElement1): <span class="built_in">void</span>;</span><br><span class="line">        visitConcreteElement2(concreteElement2: ConcreteElement2): <span class="built_in">void</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteVisitor1 <span class="keyword">implements</span> Visitor &#123;</span><br><span class="line">        <span class="keyword">public</span> visitConcreteElement1(concreteElement1: ConcreteElement1): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"`visitConcreteElement1` of ConcreteVisitor1 is being called!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> visitConcreteElement2(concreteElement2: ConcreteElement2): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"`visitConcreteElement2` of ConcreteVisitor1 is being called!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteVisitor2 <span class="keyword">implements</span> Visitor &#123;</span><br><span class="line">        <span class="keyword">public</span> visitConcreteElement1(concreteElement1: ConcreteElement1): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"`visitConcreteElement1` of ConcreteVisitor2 is being called!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> visitConcreteElement2(concreteElement2: ConcreteElement2): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"`visitConcreteElement2` of ConcreteVisitor2 is being called!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> Element &#123;</span><br><span class="line">        operate(visitor: Visitor): <span class="built_in">void</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteElement1 <span class="keyword">implements</span> Element &#123;</span><br><span class="line">        <span class="keyword">public</span> operate(visitor: Visitor): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"`operate` of ConcreteElement1 is being called!"</span>);</span><br><span class="line">            visitor.visitConcreteElement1(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteElement2 <span class="keyword">implements</span> Element &#123;</span><br><span class="line">        <span class="keyword">public</span> operate(visitor: Visitor): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"`operate` of ConcreteElement2 is being called!"</span>);</span><br><span class="line">            visitor.visitConcreteElement2(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Objs &#123;</span><br><span class="line">        <span class="keyword">private</span> elements: Element[] = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> attach(e: Element): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.elements.push(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> detach(e: Element): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> index = <span class="keyword">this</span>.elements.indexOf(e);</span><br><span class="line">            <span class="keyword">this</span>.elements.splice(index, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> operate(visitor: Visitor): <span class="built_in">void</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> i = <span class="number">0</span>,</span><br><span class="line">                max = <span class="keyword">this</span>.elements.length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(; i &lt; max; i += <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.elements[i].operate(visitor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> VisitorPattern &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> Demo &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) : <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> objs: VisitorPattern.Objs = <span class="keyword">new</span> VisitorPattern.Objs();</span><br><span class="line"></span><br><span class="line">objs.attach(<span class="keyword">new</span> VisitorPattern.ConcreteElement1());</span><br><span class="line">objs.attach(<span class="keyword">new</span> VisitorPattern.ConcreteElement2());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> v1: VisitorPattern.ConcreteVisitor1 = <span class="keyword">new</span> VisitorPattern.ConcreteVisitor1(),</span><br><span class="line">v2: VisitorPattern.ConcreteVisitor2 = <span class="keyword">new</span> VisitorPattern.ConcreteVisitor2();</span><br><span class="line"></span><br><span class="line">objs.operate(v1);</span><br><span class="line">objs.operate(v2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>typescript详解</title>
      <link href="/2019/07/29/typescript%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/07/29/typescript%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h5 id="基本配置（自动编译）"><a href="#基本配置（自动编译）" class="headerlink" title="基本配置（自动编译）"></a>基本配置（自动编译）</h5><p><strong>vscode 配置自动编译 ts 代码</strong></p><ol><li>运行 tsc –init，生成配置文件，改 outDir</li><li>运行任务，选择监视 tsconfig</li></ol><!-- more --><h5 id="一、typescript-的数据类型-存在类型校验"><a href="#一、typescript-的数据类型-存在类型校验" class="headerlink" title="一、typescript 的数据类型(存在类型校验)"></a>一、typescript 的数据类型(存在类型校验)</h5><p><strong>布尔、数字、字符串</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> flag: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">let</span> str: <span class="built_in">string</span> = <span class="string">"hello"</span>;</span><br></pre></td></tr></table></figure><p><strong>数组</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2: <span class="built_in">any</span>[] = [<span class="number">1</span>, <span class="string">"ji"</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr3: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><p><strong>元祖(属于数组的一种)</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tuple: [<span class="built_in">number</span>, <span class="built_in">string</span>] = [<span class="number">123</span>, <span class="string">"hello"</span>];</span><br></pre></td></tr></table></figure><p><strong>枚举</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Status &#123;</span><br><span class="line">  success = <span class="number">1</span>,</span><br><span class="line">  error = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">enum</span> Color &#123;</span><br><span class="line">  blue,</span><br><span class="line">  red,</span><br><span class="line">  white</span><br><span class="line">&#125; <span class="comment">//如果未赋值，结果打印下标</span></span><br><span class="line"><span class="comment">//let s: Status = Status.success</span></span><br><span class="line"><span class="comment">//console.log(s);</span></span><br></pre></td></tr></table></figure><p><strong>对象</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">o: object | <span class="literal">null</span></span>): <span class="title">void</span></span>;</span><br><span class="line">create(&#123; prop: <span class="number">0</span> &#125;);</span><br></pre></td></tr></table></figure><p><strong>【特殊类型】</strong></p><p><strong>任意类型any</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> random: <span class="built_in">any</span> = <span class="number">123</span>;</span><br><span class="line"><span class="comment">//null和undefined 其他类型的子类型</span></span><br><span class="line"><span class="keyword">let</span> num1: <span class="built_in">number</span> | <span class="literal">undefined</span>; <span class="comment">//定义未赋值就是undefined</span></span><br><span class="line"><span class="keyword">let</span> num2: <span class="built_in">number</span> | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><p><strong>null和undefined</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">let</span> str: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这些类型能被赋予</span></span><br><span class="line">num = <span class="literal">null</span>;</span><br><span class="line">str = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><p><strong>空类型void(方法没有返回值)</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run1</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"void"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run2</span>(<span class="params"></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>never 类型(表示从来不会出现的值，基本用不到)</strong></p><p>一个从来不会有返回值的函数（如：如果函数内含有 while(true) {}）；<br>一个总是会抛出错误的函数（如：function foo() { throw new Error(‘Not Implemented’) }，foo 的返回类型是 never）；</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用场景（详细检查）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">'number'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果不是一个 never 类型，这会报错：</span></span><br><span class="line">  <span class="comment">// - 不是所有条件都有返回值 （严格模式下）</span></span><br><span class="line">  <span class="comment">// - 或者检查到无法访问的代码</span></span><br><span class="line">  <span class="comment">// 但是由于 TypeScript 理解 `fail` 函数返回为 `never` 类型</span></span><br><span class="line">  <span class="comment">// 它可以让你调用它，因为你可能会在运行时用它来做安全或者详细的检查。</span></span><br><span class="line">  <span class="keyword">return</span> fail(<span class="string">'Unexhaustive'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>never 表示一个从来不会优雅的返回的函数时，你可能马上就会想到与此类似的 void，然而实际上，void 表示没有任何类型，never 表示永远不存在的值的类型。</p><p><strong>[其他类型]</strong></p><p><strong>泛型</strong>（在计算机科学中，许多算法和数据结构并不会依赖于对象的实际类型。然而，你仍然会想在每个变量里强制提供约束）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>&lt;<span class="title">T</span>&gt;(<span class="params">items: T[]</span>): <span class="title">T</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> toreturn = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = items.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    toreturn.push(items[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> toreturn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>联合类型</strong>（在 JavaScript 中，你希望属性为多种类型之一，如字符串或者数组。这就是联合类型所能派上用场的地方）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatCommandline</span>(<span class="params">command: <span class="built_in">string</span>[] | <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> line = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> command === <span class="string">'string'</span>) &#123;</span><br><span class="line">    line = command.trim();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    line = command.join(<span class="string">' '</span>).trim();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Do stuff with line: string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>交叉类型</strong>（在 JavaScript 中， extend 是一种非常常见的模式，在这种模式中，你可以从两个对象中创建一个新对象，新对象会拥有着两个对象所有的功能。）</p><figure class="highlight plain"><figcaption><span>JavaScript 中， extend 是一种非常常见的模式，在这种模式中，你可以从两个对象中创建一个新对象，新对象会拥有着两个对象所有的功能。）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function extend&lt;T, U&gt;(first: T, second: U): T &amp; U &#123;</span><br><span class="line">  const result = &lt;T &amp; U&gt;&#123;&#125;;</span><br><span class="line">  for (let id in first) &#123;</span><br><span class="line">    (&lt;T&gt;result)[id] = first[id];</span><br><span class="line">  &#125;</span><br><span class="line">  for (let id in second) &#123;</span><br><span class="line">    if (!result.hasOwnProperty(id)) &#123;</span><br><span class="line">      (&lt;U&gt;result)[id] = second[id];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const x = extend(&#123; a: &apos;hello&apos; &#125;, &#123; b: 42 &#125;);</span><br><span class="line"></span><br><span class="line">// 现在 x 拥有了 a 属性与 b 属性</span><br><span class="line">const a = x.a;</span><br><span class="line">const b = x.b;</span><br></pre></td></tr></table></figure><p>【tips】</p><blockquote><ul><li>如果你需要使用类型注解的层次结构，请使用接口。</li><li>它能使用 implements 和 extends<br>为一个简单的对象类型（像例子中的Coordinates）使用类型别名，仅仅有一个语义化的作用。与此相似，当你想给一个联合类型和交叉类型使用一个语意化的名称时，一个类型别名将会是一个好的选择。</li></ul></blockquote><h4 id="二、typescript-函数"><a href="#二、typescript-函数" class="headerlink" title="二、typescript 函数"></a>二、typescript 函数</h4><p><strong>1、函数声明</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"run"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fn2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"run2"</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>2、方法传参</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo1</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>---<span class="subst">$&#123;age&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> getInfo2 = <span class="function"><span class="keyword">function</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>---<span class="subst">$&#123;age&#125;</span>`</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>3、可选参数</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">name: <span class="built_in">string</span>, age?: <span class="built_in">number</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (age) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>---<span class="subst">$&#123;age&#125;</span>`</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>---年龄保密`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4、默认参数</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get1</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span> = 20</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>---<span class="subst">$&#123;age&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5、剩余参数</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span>, c: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三点运算符接收形参</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum1</span>(<span class="params">...result: <span class="built_in">number</span>[]</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; result.length; i++) &#123;</span><br><span class="line">    sum += result[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum2</span>(<span class="params">initNum: <span class="built_in">number</span>, ...result: <span class="built_in">number</span>[]</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = initNum;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; result.length; i++) &#123;</span><br><span class="line">    sum += result[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6、函数重载(es5 中同名方法会存在替换)</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">info1</span>(<span class="params">name: <span class="built_in">string</span></span>): <span class="title">string</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">info1</span>(<span class="params">age: <span class="built_in">number</span></span>): <span class="title">number</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">info1</span>(<span class="params">str: <span class="built_in">any</span></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> str === <span class="string">"string"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`我叫<span class="subst">$&#123;str&#125;</span>`</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`我的年龄是<span class="subst">$&#123;str&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//console.log(info1('Amy'));</span></span><br><span class="line"><span class="comment">//console.log(info1(12));</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">info2</span>(<span class="params">name: <span class="built_in">string</span></span>): <span class="title">string</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">info2</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>): <span class="title">string</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">info2</span>(<span class="params">name: <span class="built_in">any</span>, age?: <span class="built_in">any</span></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (age) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`我叫<span class="subst">$&#123;name&#125;</span>,我的年龄是<span class="subst">$&#123;age&#125;</span>`</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`我叫<span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重载</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padding</span>(<span class="params">all: <span class="built_in">number</span></span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padding</span>(<span class="params">topAndBottom: <span class="built_in">number</span>, leftAndRight: <span class="built_in">number</span></span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padding</span>(<span class="params">top: <span class="built_in">number</span>, right: <span class="built_in">number</span>, bottom: <span class="built_in">number</span>, left: <span class="built_in">number</span></span>)</span>;</span><br><span class="line"><span class="comment">// Actual implementation that is a true representation of all the cases the function body needs to handle</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padding</span>(<span class="params">a: <span class="built_in">number</span>, b?: <span class="built_in">number</span>, c?: <span class="built_in">number</span>, d?: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (b === <span class="literal">undefined</span> &amp;&amp; c === <span class="literal">undefined</span> &amp;&amp; d === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    b = c = d = a;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c === <span class="literal">undefined</span> &amp;&amp; d === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    c = a;</span><br><span class="line">    d = b;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    top: a,</span><br><span class="line">    right: b,</span><br><span class="line">    bottom: c,</span><br><span class="line">    left: d</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Overloaded &#123;</span><br><span class="line">  (foo: <span class="built_in">string</span>): <span class="built_in">string</span>;</span><br><span class="line">  (foo: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现接口的一个例子：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringOrNumber</span>(<span class="params">foo: <span class="built_in">number</span></span>): <span class="title">number</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringOrNumber</span>(<span class="params">foo: <span class="built_in">string</span></span>): <span class="title">string</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringOrNumber</span>(<span class="params">foo: <span class="built_in">any</span></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> foo === <span class="string">'number'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> foo * foo;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> foo === <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`hello <span class="subst">$&#123;foo&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> overloaded: Overloaded = stringOrNumber;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> str = overloaded(<span class="string">''</span>); <span class="comment">// str 被推断为 'string'</span></span><br><span class="line"><span class="keyword">const</span> num = overloaded(<span class="number">123</span>); <span class="comment">// num 被推断为 'number'</span></span><br></pre></td></tr></table></figure><p>TypeScript 中的函数重载没有任何运行时开销。它只允许你记录希望调用函数的方式，并且编译器会检查其余代码。</p><p><strong>7、箭头函数(this 指向上下文)</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  alert(<span class="string">"run"</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h5 id="三、typescript-中类"><a href="#三、typescript-中类" class="headerlink" title="三、typescript 中类"></a>三、typescript 中类</h5><p>es5 的继承(原型链+对象冒充实现继承)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, age);</span><br><span class="line">  <span class="comment">//对象冒充(只能继承构造函数中的属性和方法,可以向父类传参)</span></span><br><span class="line">&#125;</span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">//原型链继承(既可以继承构造函数中的属性和方法，也可以继承原型链上的属性和方法,但是实例化时无法向父类传参)</span></span><br><span class="line">Student.prototype = Person.prototype; <span class="comment">//另一种写法</span></span><br></pre></td></tr></table></figure><p><strong>1、定义类</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span>; <span class="comment">//省略了public关键字</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  run(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">  getName(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">  setName(name: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、实现继承 extends super</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Student <span class="keyword">extends</span> Person &#123;</span><br><span class="line">​    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">​        <span class="keyword">super</span>(name)</span><br><span class="line">​    &#125;</span><br><span class="line">​    **子类扩展方法，子类也可以覆盖父类的方法</span><br><span class="line">​    work(): <span class="built_in">void</span> &#123;</span><br><span class="line">​        alert(<span class="string">'在运动'</span>)</span><br><span class="line">​    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、类修饰符(public protected private)</strong><br>public:在类内部、子类、和外部均可以访问<br>protected:在类内部和子类可以访问，外部无法访问<br>private:私有，只有类内部可以访问<br>属性如果不加修饰符，默认是 public</p><p><strong>4、静态属性&amp;&amp;静态方法(直接使用类名调用即可)</strong><br>应用举例(jquery)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Base(element);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//静态方法</span></span><br><span class="line">$.<span class="keyword">get</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.element = element;</span><br><span class="line">  <span class="keyword">this</span>.css = <span class="function"><span class="keyword">function</span>(<span class="params">attr, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.element.style.attr = value;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person1 &#123;</span><br><span class="line">  name: <span class="built_in">string</span>; <span class="comment">//省略了public关键字</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125; <span class="comment">//静态属性</span></span><br><span class="line">  <span class="keyword">static</span> sex = <span class="string">"男"</span>; <span class="comment">//静态方法，无法直接调用类的属性，只能调用静态属性</span></span><br><span class="line">  <span class="keyword">static</span> print(): <span class="built_in">void</span> &#123;</span><br><span class="line">    alert(<span class="string">"静态方法"</span>);</span><br><span class="line">  &#125; <span class="comment">//实例方法</span></span><br><span class="line">  getName(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">  setName(name: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5、多态(父类定义方法不去实现，让继承它的子类去实现，每个子类有不同的表现)</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"吃的方法"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">"吃肉"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Cat <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">"吃鱼"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6、抽象类(abstract 关键字，无法创造抽象类的实例)</strong><br>抽象类和抽象方法用来定义标准，要求子类必须实现抽象类中的所有方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Animal1 &#123;</span><br><span class="line">  <span class="keyword">public</span> name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">abstract</span> eat(): <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Dog1 <span class="keyword">extends</span> Animal1 &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>吃肉`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="四、typescript-接口（定义标准）"><a href="#四、typescript-接口（定义标准）" class="headerlink" title="四、typescript 接口（定义标准）"></a>四、typescript 接口（定义标准）</h5><p><strong>1、属性接口</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对传入地值进行约束</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print_label1</span>(<span class="params">label: <span class="built_in">string</span></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(label);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print_label2</span>(<span class="params">labelInfo: &#123; label: <span class="built_in">string</span> &#125;</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(labelInfo);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口（批量方法约束）</span></span><br><span class="line"><span class="keyword">interface</span> FullName &#123;</span><br><span class="line">  firstname: <span class="built_in">string</span>;</span><br><span class="line">  lastname: <span class="built_in">string</span>; <span class="comment">//可选属性 lastname?: string;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//传到的参数必须包含firstname、lastname</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printName</span>(<span class="params">name: FullName</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;name.firstname&#125;</span>---<span class="subst">$&#123;name.lastname&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2 函数类型接口</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> encrypt &#123;</span><br><span class="line">  (key: <span class="built_in">string</span>, value: <span class="built_in">string</span>): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> md5: encrypt = <span class="function"><span class="keyword">function</span>(<span class="params">key: <span class="built_in">string</span>, value: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> key + value;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> sha1: encrypt = <span class="function"><span class="keyword">function</span>(<span class="params">key: <span class="built_in">string</span>, value: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> key + <span class="string">"---"</span> + value;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>3 可索引接口(对数组\对象的约束,不常用)</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> UserArr &#123;</span><br><span class="line">  [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr: UserArr = [<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> UserObj &#123;</span><br><span class="line">  [index: <span class="built_in">string</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj: UserObj = &#123; name: <span class="string">"zhangsan"</span>, age: <span class="string">"12"</span> &#125;;</span><br></pre></td></tr></table></figure><p><strong>4 类类型接口(对类的约束,和抽象类很相似)</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> AnimalI &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  eat(str: <span class="built_in">string</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> a1 <span class="keyword">implements</span> AnimalI &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  eat(food: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`我是<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>,我吃<span class="subst">$&#123;food&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5 接口扩展(接口集成接口,类实现接口时需要实现所有的方法)</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Ani &#123;</span><br><span class="line">  eat(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口也可以相互继承</span></span><br><span class="line"><span class="keyword">interface</span> Per <span class="keyword">extends</span> Ani &#123;</span><br><span class="line">  work(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Programmer &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  coding(code: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + code);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//集成父类+实现接口</span></span><br><span class="line"><span class="keyword">class</span> Web1 <span class="keyword">extends</span> Programmer <span class="keyword">implements</span> Per &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">  eat() &#123;&#125;</span><br><span class="line">  work() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="五-typescript-泛型"><a href="#五-typescript-泛型" class="headerlink" title="五 typescript 泛型"></a>五 typescript 泛型</h5><p><strong>1 泛型函数</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//泛型就是解决类\接口\方法的复用性 以及对不特定数据类型的支持</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">value: <span class="built_in">string</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果要传入什么类型,返回什么类型,就要使用到泛型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData1</span>&lt;<span class="title">T</span>&gt;(<span class="params">value: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line">getData1&lt;<span class="built_in">number</span>&gt;(<span class="number">123</span>);</span><br><span class="line">getData1&lt;<span class="built_in">string</span>&gt;(<span class="string">"abc"</span>);</span><br></pre></td></tr></table></figure><p><strong>2 泛型类</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(原始)</span></span><br><span class="line"><span class="keyword">class</span> MinClass &#123;</span><br><span class="line">  list: <span class="built_in">number</span>[] = [];</span><br><span class="line">  add(value: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.list.push(value);</span><br><span class="line">  &#125;</span><br><span class="line">  min(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> min = <span class="keyword">this</span>.list[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.list.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (min &gt; <span class="keyword">this</span>.list[i]) &#123;</span><br><span class="line">        min = <span class="keyword">this</span>.list[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//(泛型)</span></span><br><span class="line"><span class="keyword">class</span> MinClass1&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">public</span> list: T[] = [];</span><br><span class="line">  add(value: T): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.list.push(value);</span><br><span class="line">  &#125;</span><br><span class="line">  min(): T &#123;</span><br><span class="line">    <span class="keyword">let</span> min = <span class="keyword">this</span>.list[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.list.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (min &gt; <span class="keyword">this</span>.list[i]) &#123;</span><br><span class="line">        min = <span class="keyword">this</span>.list[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> m1 = <span class="keyword">new</span> MinClass1&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">m1.add(<span class="number">1</span>);</span><br><span class="line">m1.add(<span class="number">2</span>);</span><br><span class="line">m1.add(<span class="number">3</span>);</span><br><span class="line">alert(m1.min());</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> m2 = <span class="keyword">new</span> MinClass1&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">m2.add(<span class="string">"a"</span>);</span><br><span class="line">m2.add(<span class="string">"b"</span>);</span><br><span class="line">m2.add(<span class="string">"c"</span>);</span><br><span class="line">alert(m2.min());</span><br></pre></td></tr></table></figure><p><strong>3 泛型接口</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(普通函数类型接口)</span></span><br><span class="line"><span class="keyword">interface</span> ConfigFn0 &#123;</span><br><span class="line">  (value1: <span class="built_in">string</span>, value2: <span class="built_in">string</span>): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> setData0: ConfigFn0 = <span class="function"><span class="keyword">function</span>(<span class="params">value1: <span class="built_in">string</span>, value2: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value1 + value2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//泛型接口(写法1)</span></span><br><span class="line"><span class="keyword">interface</span> ConfigFn1 &#123;</span><br><span class="line">  &lt;T&gt;(value1: T): T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> setData1: ConfigFn1 = <span class="function"><span class="keyword">function</span>&lt;<span class="title">T</span>&gt;(<span class="params">value: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;;</span><br><span class="line">setData1 &lt; <span class="built_in">string</span> &gt; <span class="string">"abdc"</span>;</span><br><span class="line"><span class="comment">//泛型接口(写法2)</span></span><br><span class="line"><span class="keyword">interface</span> ConfigFn2&lt;T&gt; &#123;</span><br><span class="line">  (value1: T): T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myGetData</span>&lt;<span class="title">T</span>&gt;(<span class="params">value: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myFn: ConfigFn2&lt;<span class="built_in">string</span>&gt; = myGetData;</span><br></pre></td></tr></table></figure><h5 id="六、其他补充"><a href="#六、其他补充" class="headerlink" title="六、其他补充"></a>六、其他补充</h5><p><strong>1、枚举类型</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> CardSuit &#123;</span><br><span class="line">  Clubs,</span><br><span class="line">  Diamonds,</span><br><span class="line">  Hearts,</span><br><span class="line">  Spades</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 简单的使用枚举类型</span></span><br><span class="line"><span class="keyword">let</span> Card = CardSuit.Clubs;</span><br><span class="line"><span class="comment">// 类型安全</span></span><br><span class="line">Card = <span class="string">'not a member of card suit'</span>; <span class="comment">// Error: string 不能赋值给 `CardSuit` 类型</span></span><br></pre></td></tr></table></figure><p><strong>2、联合类型</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatCommandline</span>(<span class="params">command: <span class="built_in">string</span>[] | <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> line = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> command === <span class="string">"string"</span>) &#123;</span><br><span class="line">    line = command.trim();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    line = command.join(<span class="string">" "</span>).trim();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Do stuff with line: string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Square &#123;</span><br><span class="line">  kind: <span class="string">"square"</span>;</span><br><span class="line">  size: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Rectangle &#123;</span><br><span class="line">  kind: <span class="string">"rectangle"</span>;</span><br><span class="line">  width: <span class="built_in">number</span>;</span><br><span class="line">  height: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Shape = Square | Rectangle;</span><br></pre></td></tr></table></figure><p><strong>3、交叉类型</strong><br>在 JavaScript 中， extend 是一种非常常见的模式，在这种模式中，你可以从两个对象中创建一个新对象，新对象会拥有着两个对象所有的功能。交叉类型可以让你安全的使用此种模式：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>&lt;<span class="title">T</span>, <span class="title">U</span>&gt;(<span class="params">first: T, second: U</span>): <span class="title">T</span> &amp; <span class="title">U</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = &lt;T &amp; U&gt;&#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> id <span class="keyword">in</span> first) &#123;</span><br><span class="line">    (&lt;T&gt;result)[id] = first[id];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> id <span class="keyword">in</span> second) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!result.hasOwnProperty(id)) &#123;</span><br><span class="line">      (&lt;U&gt;result)[id] = second[id];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> x = extend(&#123; a: <span class="string">"hello"</span> &#125;, &#123; b: <span class="number">42</span> &#125;);</span><br><span class="line"><span class="comment">// 现在 x 拥有了 a 属性与 b 属性</span></span><br><span class="line"><span class="keyword">const</span> a = x.a;</span><br><span class="line"><span class="keyword">const</span> b = x.b;</span><br></pre></td></tr></table></figure><p><strong>4、元组类型</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nameNumber: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line"><span class="comment">// Ok</span></span><br><span class="line">nameNumber = [<span class="string">"Jenny"</span>, <span class="number">221345</span>];</span><br><span class="line"><span class="comment">// Error</span></span><br><span class="line">nameNumber = [<span class="string">"Jenny"</span>, <span class="string">"221345"</span>];</span><br><span class="line"><span class="comment">// 将其与 TypeScript 中的解构一起使用：</span></span><br><span class="line"><span class="keyword">const</span> [name, num] = nameNumber;</span><br></pre></td></tr></table></figure><p><strong>5、类型别名</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> StrOrNum = <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">let</span> sample: StrOrNum;</span><br><span class="line">sample = <span class="number">123</span>;</span><br><span class="line">sample = <span class="string">"123"</span>;</span><br><span class="line"><span class="comment">// 会检查类型</span></span><br><span class="line">sample = <span class="literal">true</span>; <span class="comment">// Error</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Text = <span class="built_in">string</span> | &#123; text: <span class="built_in">string</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> Coordinates = [<span class="built_in">number</span>, <span class="built_in">number</span>];</span><br><span class="line"><span class="keyword">type</span> Callback = <span class="function">(<span class="params">data: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br></pre></td></tr></table></figure><p><strong><em>tips</em></strong><br>如果你需要使用类型注解的层次结构，请使用接口。它能使用 implements 和 extends<br>为一个简单的对象类型（像例子中的 Coordinates）使用类型别名，仅仅有一个语义化的作用。与此相似，当你想给一个联合类型和交叉类型使用一个语意化的名称时，一个类型别名将会是一个好的选择。</p><p><strong>6、类型断言</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123;&#125;;</span><br><span class="line">foo.bar = <span class="number">123</span>; <span class="comment">// Error: 'bar' 属性不存在于 ‘&#123;&#125;’</span></span><br><span class="line">foo.bas = <span class="string">"hello"</span>; <span class="comment">// Error: 'bas' 属性不存在于 '&#123;&#125;'</span></span><br><span class="line"><span class="comment">// 这里的代码发出了错误警告，因为 foo 的类型推断为 &#123;&#125;，即是具有零属性的对象。因此，你不能在它的属性上添加 bar 或 bas</span></span><br><span class="line"><span class="keyword">interface</span> Foo &#123;</span><br><span class="line">  bar: <span class="built_in">number</span>;</span><br><span class="line">  bas: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> foo = &#123;&#125; <span class="keyword">as</span> Foo;</span><br><span class="line">foo.bar = <span class="number">123</span>;</span><br><span class="line">foo.bas = <span class="string">"hello"</span>;</span><br></pre></td></tr></table></figure><p>双重断言</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params">event: Event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> element = event <span class="keyword">as</span> HTMLElement; <span class="comment">// Error: 'Event' 和 'HTMLElement' 中的任何一个都不能赋值给另外一个</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果你仍然想使用那个类型，你可以使用双重断言。首先断言成兼容所有类型的 any，编译器将不会报错：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params">event: Event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> element = (event <span class="keyword">as</span> <span class="built_in">any</span>) <span class="keyword">as</span> HTMLElement; <span class="comment">// ok</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>7、类型保护</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSome</span>(<span class="params">x: <span class="built_in">number</span> | <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">"string"</span>) &#123;</span><br><span class="line">    <span class="comment">// 在这个块中，TypeScript 知道 `x` 的类型必须是 `string`</span></span><br><span class="line">    <span class="built_in">console</span>.log(x.subtr(<span class="number">1</span>)); <span class="comment">// Error: 'subtr' 方法并没有存在于 `string` 上</span></span><br><span class="line">    <span class="built_in">console</span>.log(x.substr(<span class="number">1</span>)); <span class="comment">// ok</span></span><br><span class="line">  &#125;</span><br><span class="line">  x.substr(<span class="number">1</span>); <span class="comment">// Error: 无法保证 `x` 是 `string` 类型</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doStuff</span>(<span class="params">arg: Foo | Bar</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arg <span class="keyword">instanceof</span> Foo) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.foo); <span class="comment">// ok</span></span><br><span class="line">    <span class="built_in">console</span>.log(arg.bar); <span class="comment">// Error</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (arg <span class="keyword">instanceof</span> Bar) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.foo); <span class="comment">// Error</span></span><br><span class="line">    <span class="built_in">console</span>.log(arg.bar); <span class="comment">// ok</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doStuff</span>(<span class="params">arg: Foo | Bar</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arg <span class="keyword">instanceof</span> Foo) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.foo); <span class="comment">// ok</span></span><br><span class="line">    <span class="built_in">console</span>.log(arg.bar); <span class="comment">// Error</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 这个块中，一定是 'Bar'</span></span><br><span class="line">    <span class="built_in">console</span>.log(arg.foo); <span class="comment">// Error</span></span><br><span class="line">    <span class="built_in">console</span>.log(arg.bar); <span class="comment">// ok</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doStuff</span>(<span class="params">q: A | B</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">"x"</span> <span class="keyword">in</span> q) &#123;</span><br><span class="line">    <span class="comment">// q: A</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// q: B</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doStuff</span>(<span class="params">arg: Foo | Bar</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arg.kind === <span class="string">"foo"</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.foo); <span class="comment">// ok</span></span><br><span class="line">    <span class="built_in">console</span>.log(arg.bar); <span class="comment">// Error</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 一定是 Bar</span></span><br><span class="line">    <span class="built_in">console</span>.log(arg.foo); <span class="comment">// Error</span></span><br><span class="line">    <span class="built_in">console</span>.log(arg.bar); <span class="comment">// ok</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>8、自变量类型</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CardinalDirection = <span class="string">"North"</span> | <span class="string">"East"</span> | <span class="string">"South"</span> | <span class="string">"West"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">distance: <span class="built_in">number</span>, direction: CardinalDirection</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">move(<span class="number">1</span>, <span class="string">"North"</span>); <span class="comment">// ok</span></span><br><span class="line">move(<span class="number">1</span>, <span class="string">"Nurth"</span>); <span class="comment">// Error</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> OneToFive = <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span>;</span><br><span class="line"><span class="keyword">type</span> Bools = <span class="literal">true</span> | <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p><strong>使用用例</strong></p><p>TypeScript 枚举类型是基于数字的，你可以使用带字符串字面量的联合类型，来模拟一个基于字符串的枚举类型，就好像上文中提出的 CardinalDirection。你甚至可以使用下面的函数来生成 key: value 的结构：<br>// 用于创建字符串列表映射至 <code>K: V</code> 的函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于创建字符串列表映射至 `K: V` 的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strEnum</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">string</span>&gt;(<span class="params">o: <span class="built_in">Array</span>&lt;T&gt;</span>): </span>&#123; [K <span class="keyword">in</span> T]: K &#125; &#123;</span><br><span class="line">  <span class="keyword">return</span> o.reduce(<span class="function">(<span class="params">res, key</span>) =&gt;</span> &#123;</span><br><span class="line">    res[key] = key;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;, <span class="built_in">Object</span>.create(<span class="literal">null</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建 K: V</span></span><br><span class="line"><span class="keyword">const</span> Direction = strEnum([<span class="string">"North"</span>, <span class="string">"South"</span>, <span class="string">"East"</span>, <span class="string">"West"</span>]);</span><br><span class="line"><span class="comment">// 创建一个类型</span></span><br><span class="line"><span class="keyword">type</span> Direction = keyof <span class="keyword">typeof</span> Direction;</span><br><span class="line"><span class="comment">// 简单的使用</span></span><br><span class="line"><span class="keyword">let</span> sample: Direction;</span><br><span class="line">sample = Direction.North; <span class="comment">// Okay</span></span><br><span class="line">sample = <span class="string">"North"</span>; <span class="comment">// Okay</span></span><br><span class="line">sample = <span class="string">"AnythingElse"</span>; <span class="comment">// ERROR!</span></span><br></pre></td></tr></table></figure><p><strong>9、readonly</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">config: &#123; readonly bar: <span class="built_in">number</span>; readonly bas: <span class="built_in">number</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ..</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Foo = &#123;</span><br><span class="line">  readonly bar: <span class="built_in">number</span>;</span><br><span class="line">  readonly bas: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> Foo &#123;</span><br><span class="line">  readonly bar = <span class="number">1</span>; <span class="comment">// OK</span></span><br><span class="line">  readonly baz: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.baz = <span class="string">"hello"</span>; <span class="comment">// OK</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这有一个 Readonly 的映射类型，它接收一个泛型 T，用来把它的所有属性标记为只读类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Foo = &#123;</span><br><span class="line">  bar: <span class="built_in">number</span>;</span><br><span class="line">  bas: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">type</span> FooReadonly = Readonly&lt;Foo&gt;;</span><br><span class="line"><span class="keyword">const</span> foo: Foo = &#123; bar: <span class="number">123</span>, bas: <span class="number">456</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> fooReadonly: FooReadonly = &#123; bar: <span class="number">123</span>, bas: <span class="number">456</span> &#125;;</span><br><span class="line">foo.bar = <span class="number">456</span>; <span class="comment">// ok</span></span><br><span class="line">fooReadonly.bar = <span class="number">456</span>; <span class="comment">// Error: bar 属性只读</span></span><br></pre></td></tr></table></figure><p><strong>设置为绝对的而不可变</strong></p><p>你甚至可以把索引签名标记为只读：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Foo &#123;</span><br><span class="line">  readonly [x: <span class="built_in">number</span>]: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> foo: Foo = &#123; <span class="number">0</span>: <span class="number">123</span>, <span class="number">2</span>: <span class="number">345</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(foo[<span class="number">0</span>]); <span class="comment">// ok（读取）</span></span><br><span class="line">foo[<span class="number">0</span>] = <span class="number">456</span>; <span class="comment">// Error: 属性只读</span></span><br></pre></td></tr></table></figure><p><strong>自动推断</strong></p><p>在一些情况下，编译器能把一些特定的属性推断为 readonly，例如在一个 class 中，如果你有一个只含有 getter 但是没有 setter 的属性，他能被推断为只读：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  firstName: <span class="built_in">string</span> = <span class="string">"John"</span>;</span><br><span class="line">  lastName: <span class="built_in">string</span> = <span class="string">"Doe"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> fullName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="keyword">this</span>.lastName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(person.fullName); <span class="comment">// John Doe</span></span><br><span class="line">person.fullName = <span class="string">"Dear Reader"</span>; <span class="comment">// Error, fullName 只读</span></span><br></pre></td></tr></table></figure><p><em>readonly 与 const 的不同点</em><br>const 用于变量；变量不能重新赋值给其他任何事物。<br>readonly 用于属性；用于别名，可以修改属性；</p><p><strong>10、详解泛型</strong></p><p><strong>使用泛型</strong></p><p>例如当你想创建一个字符串的队列时，你将不得不再次修改相当大的代码。我们真正想要的一种方式是无论什么类型被推入队列，被推出的类型都与推入类型一样。当你使用泛型时，这会很容易：</p><p>// 创建一个泛型类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个泛型类</span></span><br><span class="line"><span class="keyword">class</span> Queue&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> data: T[] = [];</span><br><span class="line">  push = <span class="function">(<span class="params">item: T</span>) =&gt;</span> <span class="keyword">this</span>.data.push(item);</span><br><span class="line">  pop = (): T | <span class="function"><span class="params">undefined</span> =&gt;</span> <span class="keyword">this</span>.data.shift();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单的使用</span></span><br><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> Queue&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">queue.push(<span class="number">0</span>);</span><br><span class="line">queue.push(<span class="string">"1"</span>); <span class="comment">// Error：不能推入一个 `string`，只有 number 类型被允许</span></span><br></pre></td></tr></table></figure><p><strong>tip:</strong><br>你可以随意调用泛型参数，当你使用简单的泛型时，泛型常用 T、U、V 表示。如果在你的参数里，不止拥有一个泛型，你应该使用一个更语义化名称，如 TKey 和 TValue （通常情况下，以 T 做为泛型前缀也在如 C++ 的其他语言里做为模版。）</p><h6 id="七、高级特性"><a href="#七、高级特性" class="headerlink" title="七、高级特性"></a>七、高级特性</h6><p><strong>1、类型断言</strong><br>TypeScript 允许你覆盖它的推断，并且能以你任何你想要的方式分析它，这种机制被称为「类型断言」。TypeScript 类型断言用来告诉编译器你比它更了解这个类型，并且它不应该再发出错误。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Foo &#123;</span><br><span class="line">  bar: <span class="built_in">number</span>;</span><br><span class="line">  bas: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = &#123;&#125; <span class="keyword">as</span> Foo;</span><br><span class="line">foo.bar = <span class="number">123</span>;</span><br><span class="line">foo.bas = <span class="string">'hello'</span>;</span><br></pre></td></tr></table></figure><p><strong>双重断言</strong><br>类型断言，尽管我们已经证明了它并不是那么安全，但它也还是有用武之地。如下一个非常实用的例子所示，当使用者了解传入参数更具体的类型时，类型断言能按预期工作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function handler(event: Event) &#123;</span><br><span class="line">  const element = event as HTMLElement; // Error: &apos;Event&apos; 和 &apos;HTMLElement&apos; 中的任何一个都不能赋值给另外一个</span><br><span class="line">&#125;</span><br><span class="line">function handler(event: Event) &#123;</span><br><span class="line">  const element = (event as any) as HTMLElement; // ok</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TypeScript 是怎么确定单个断言是否足够:</p><p>当 S 类型是 T 类型的子集，或者 T 类型是 S 类型的子集时，S 能被成功断言成 T。这是为了在进行类型断言时提供额外的安全性，完全毫无根据的断言是危险的，如果你想这么做，你可以使用 any。</p><p><strong>2、Freshness</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function logIfHasName(something: &#123; name?: string &#125;) &#123;</span><br><span class="line">  if (something.name) &#123;</span><br><span class="line">    console.log(something.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const person = &#123; name: &apos;matt&apos;, job: &apos;being awesome&apos; &#125;;</span><br><span class="line">const animal = &#123; name: &apos;cow&apos;, diet: &apos;vegan, but has milk of own species&apos; &#125;;</span><br><span class="line"></span><br><span class="line">logIfHasName(person); // okay</span><br><span class="line">logIfHasName(animal); // okay</span><br><span class="line"></span><br><span class="line">logIfHasName(&#123; neme: &apos;I just misspelled name to neme&apos; &#125;); // Error: 对象字面量只能指定已知属性，`neme` 属性不存在。</span><br><span class="line"></span><br><span class="line">//允许额外的属性——一个类型能够包含索引签名，以明确表明可以使用额外的属性</span><br><span class="line">let x: &#123; foo: number, [x: string]: any &#125;;</span><br><span class="line">x = &#123; foo: 1, baz: 2 &#125;; // ok, &apos;baz&apos; 属性匹配于索引签名</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//案例：Facebook ReactJS 为对象的 Freshness 提供了一个很好的用例，通常在组件中，你只使用少量属性，而不是传入所有，来调用 setState</span><br><span class="line"></span><br><span class="line">// 假设</span><br><span class="line">interface State &#123;</span><br><span class="line">  foo: string;</span><br><span class="line">  bar: string;</span><br><span class="line">&#125;</span><br><span class="line">// 你可能想做：</span><br><span class="line">this.setState(&#123; foo: &apos;Hello&apos; &#125;); // Error: 没有属性 &apos;bar&apos;</span><br><span class="line">// 因为 state 包含 &apos;foo&apos; 与 &apos;bar&apos;，TypeScript 会强制你这么做：</span><br><span class="line">this.setState(&#123; foo: &apos;Hello&apos;, bar: this.state.bar &#125;);</span><br></pre></td></tr></table></figure><p><strong>3、类型保护</strong></p><p><strong>typeof</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function doSome(x: number | string) &#123;</span><br><span class="line">  if (typeof x === &apos;string&apos;) &#123;</span><br><span class="line">    // 在这个块中，TypeScript 知道 `x` 的类型必须是 `string`</span><br><span class="line">    console.log(x.subtr(1)); // Error: &apos;subtr&apos; 方法并没有存在于 `string` 上</span><br><span class="line">    console.log(x.substr(1)); // ok</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  x.substr(1); // Error: 无法保证 `x` 是 `string` 类型</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>instanceof</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Foo &#123;</span><br><span class="line">  foo = 123;</span><br><span class="line">  common = &apos;123&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Bar &#123;</span><br><span class="line">  bar = 123;</span><br><span class="line">  common = &apos;123&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function doStuff(arg: Foo | Bar) &#123;</span><br><span class="line">  if (arg instanceof Foo) &#123;</span><br><span class="line">    console.log(arg.foo); // ok</span><br><span class="line">    console.log(arg.bar); // Error</span><br><span class="line">  &#125;</span><br><span class="line">  if (arg instanceof Bar) &#123;</span><br><span class="line">    console.log(arg.foo); // Error</span><br><span class="line">    console.log(arg.bar); // ok</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doStuff(new Foo());</span><br><span class="line">doStuff(new Bar());</span><br></pre></td></tr></table></figure><p><strong>in</strong>（in 操作符可以安全的检查一个对象上是否存在一个属性）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">interface A &#123;</span><br><span class="line">  x: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface B &#123;</span><br><span class="line">  y: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function doStuff(q: A | B) &#123;</span><br><span class="line">  if (&apos;x&apos; in q) &#123;</span><br><span class="line">    // q: A</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // q: B</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>字面量类型保护</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">type Foo = &#123;</span><br><span class="line">  kind: &apos;foo&apos;; // 字面量类型</span><br><span class="line">  foo: number;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">type Bar = &#123;</span><br><span class="line">  kind: &apos;bar&apos;; // 字面量类型</span><br><span class="line">  bar: number;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function doStuff(arg: Foo | Bar) &#123;</span><br><span class="line">  if (arg.kind === &apos;foo&apos;) &#123;</span><br><span class="line">    console.log(arg.foo); // ok</span><br><span class="line">    console.log(arg.bar); // Error</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // 一定是 Bar</span><br><span class="line">    console.log(arg.foo); // Error</span><br><span class="line">    console.log(arg.bar); // ok</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用定义的类型保护</strong></p><p>JavaScript 并没有内置非常丰富的、运行时的自我检查机制。当你在使用普通的 JavaScript 对象时（使用结构类型，更有益处），你甚至无法访问 instacneof 和 typeof。在这种情景下，你可以创建用户自定义的类型保护函数，这仅仅是一个返回值为类似于someArgumentName is SomeType 的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 仅仅是一个 interface</span><br><span class="line">interface Foo &#123;</span><br><span class="line">  foo: number;</span><br><span class="line">  common: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Bar &#123;</span><br><span class="line">  bar: number;</span><br><span class="line">  common: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 用户自己定义的类型保护！</span><br><span class="line">function isFoo(arg: Foo | Bar): arg is Foo &#123;</span><br><span class="line">  return (arg as Foo).foo !== undefined;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 用户自己定义的类型保护使用用例：</span><br><span class="line">function doStuff(arg: Foo | Bar) &#123;</span><br><span class="line">  if (isFoo(arg)) &#123;</span><br><span class="line">    console.log(arg.foo); // ok</span><br><span class="line">    console.log(arg.bar); // Error</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    console.log(arg.foo); // Error</span><br><span class="line">    console.log(arg.bar); // ok</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doStuff(&#123; foo: 123, common: &apos;123&apos; &#125;);</span><br><span class="line">doStuff(&#123; bar: 123, common: &apos;123&apos; &#125;);</span><br></pre></td></tr></table></figure><p><strong>4、字面量类型</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">type CardinalDirection = &apos;North&apos; | &apos;East&apos; | &apos;South&apos; | &apos;West&apos;;</span><br><span class="line"></span><br><span class="line">function move(distance: number, direction: CardinalDirection) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">move(1, &apos;North&apos;); // ok</span><br><span class="line">move(1, &apos;Nurth&apos;); // Error</span><br><span class="line"></span><br><span class="line">//其他字面量类型</span><br><span class="line">type OneToFive = 1 | 2 | 3 | 4 | 5;</span><br><span class="line">type Bools = true | false;</span><br><span class="line"></span><br><span class="line">//使用类型注解</span><br><span class="line">function iTakeFoo(foo: &apos;foo&apos;) &#123;&#125;</span><br><span class="line">type Test = &#123;</span><br><span class="line">  someProp: &apos;foo&apos;;</span><br><span class="line">&#125;;</span><br><span class="line">const test: Test = &#123;</span><br><span class="line">  // 推断 `someProp` 永远是 &apos;foo&apos;</span><br><span class="line">  someProp: &apos;foo&apos;</span><br><span class="line">&#125;;</span><br><span class="line">iTakeFoo(test.someProp); // ok</span><br></pre></td></tr></table></figure><p><strong>使用用例</strong><br>TypeScript 枚举类型是基于数字的，你可以使用带字符串字面量的联合类型，来模拟一个基于字符串的枚举类型，然后，你就可以使用 keyof、typeof 来生成字符串的联合类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 用于创建字符串列表映射至 `K: V` 的函数</span><br><span class="line">function strEnum&lt;T extends string&gt;(o: Array&lt;T&gt;): &#123; [K in T]: K &#125; &#123;</span><br><span class="line">  return o.reduce((res, key) =&gt; &#123;</span><br><span class="line">    res[key] = key;</span><br><span class="line">    return res;</span><br><span class="line">  &#125;, Object.create(null));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 创建 K: V</span><br><span class="line">const Direction = strEnum([&apos;North&apos;, &apos;South&apos;, &apos;East&apos;, &apos;West&apos;]);</span><br><span class="line"></span><br><span class="line">// 创建一个类型</span><br><span class="line">type Direction = keyof typeof Direction;</span><br><span class="line"></span><br><span class="line">// 简单的使用</span><br><span class="line">let sample: Direction;</span><br><span class="line"></span><br><span class="line">sample = Direction.North; // Okay</span><br><span class="line">sample = &apos;North&apos;; // Okay</span><br><span class="line">sample = &apos;AnythingElse&apos;; // ERROR!</span><br></pre></td></tr></table></figure><p><strong>5、控制只读</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//函数参数只读</span><br><span class="line">function foo(config: &#123; readonly bar: number, readonly bas: number &#125;) &#123;</span><br><span class="line">  // ..</span><br><span class="line">&#125;</span><br><span class="line">const config = &#123; bar: 123, bas: 123 &#125;;</span><br><span class="line">foo(config);// 现在你能够确保 &apos;config&apos; 不能够被改变了</span><br><span class="line"></span><br><span class="line">//interface或type只读</span><br><span class="line">type Foo = &#123;</span><br><span class="line">  readonly bar: number;</span><br><span class="line">  readonly bas: number;</span><br><span class="line">&#125;;</span><br><span class="line">const foo: Foo = &#123; bar: 123, bas: 456 &#125;;// 不能被改变</span><br><span class="line">foo.bar = 456; // Error: foo.bar 为仅读属性</span><br><span class="line"></span><br><span class="line">//class类只读</span><br><span class="line">class Foo &#123;</span><br><span class="line">  readonly bar = 1; // OK</span><br><span class="line">  readonly baz: string;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    this.baz = &apos;hello&apos;; // OK</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//这有一个 Readonly 的映射类型，它接收一个泛型 T，用来把它的所有属性标记为只读类型：</span><br><span class="line">type Foo = &#123;</span><br><span class="line">  bar: number;</span><br><span class="line">  bas: number;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">type FooReadonly = Readonly&lt;Foo&gt;;</span><br><span class="line"></span><br><span class="line">const foo: Foo = &#123; bar: 123, bas: 456 &#125;;</span><br><span class="line">const fooReadonly: FooReadonly = &#123; bar: 123, bas: 456 &#125;;</span><br><span class="line"></span><br><span class="line">foo.bar = 456; // ok</span><br><span class="line">fooReadonly.bar = 456; // Error: bar 属性只读</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//绝对的不可变</span><br><span class="line">interface Foo &#123;</span><br><span class="line">  readonly [x: number]: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用</span><br><span class="line">const foo: Foo = &#123; 0: 123, 2: 345 &#125;;</span><br><span class="line">console.log(foo[0]); // ok（读取）</span><br><span class="line">foo[0] = 456; // Error: 属性只读</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//自动推断为只读——在一些情况下，编译器能把一些特定的属性推断为 readonly，例如在一个 class 中，如果你有一个只含有 getter 但是没有 setter 的属性，他能被推断为只读</span><br><span class="line">class Person &#123;</span><br><span class="line">  firstName: string = &apos;John&apos;;</span><br><span class="line">  lastName: string = &apos;Doe&apos;;</span><br><span class="line"></span><br><span class="line">  get fullName() &#123;</span><br><span class="line">    return this.firstName + this.lastName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const person = new Person();</span><br><span class="line"></span><br><span class="line">console.log(person.fullName); // John Doe</span><br><span class="line">person.fullName = &apos;Dear Reader&apos;; // Error, fullName 只读</span><br></pre></td></tr></table></figure><p><strong>对比：</strong></p><p>const</p><ul><li>用于变量；</li><li>变量不能重新赋值给其他任何事物。</li></ul><p>readonly</p><ul><li>用于属性；</li><li>用于别名，可以修改属性；</li></ul><p><strong>6、泛型</strong></p><p>设计泛型的关键目的是在成员之间提供有意义的约束，这些成员可以是：</p><ul><li>类的实例成员</li><li>类的方法</li><li>函数参数</li><li>函数返回值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 创建一个泛型类</span><br><span class="line">class Queue&lt;T&gt; &#123;</span><br><span class="line">  private data :T[] = [];</span><br><span class="line">  push = (item: T) =&gt; this.data.push(item);</span><br><span class="line">  pop = (): T | undefined =&gt; this.data.shift();</span><br><span class="line">&#125;</span><br><span class="line">// 简单的使用</span><br><span class="line">const queue = new Queue&lt;number&gt;();</span><br><span class="line">queue.push(0);</span><br><span class="line">queue.push(&apos;1&apos;); // Error：不能推入一个 `string`，只有 number 类型被允许</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function reverse&lt;T&gt;(items: T[]): T[] &#123;</span><br><span class="line">  const toreturn = [];</span><br><span class="line">  for (let i = items.length - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">    toreturn.push(items[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  return toreturn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const sample = [1, 2, 3];</span><br><span class="line">let reversed = reverse(sample);</span><br><span class="line"></span><br><span class="line">reversed[0] = &apos;1&apos;; // Error</span><br><span class="line">reversed = [&apos;1&apos;, &apos;2&apos;]; // Error</span><br><span class="line"></span><br><span class="line">reversed[0] = 1; // ok</span><br><span class="line">reversed = [1, 2]; // ok</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Utility &#123;</span><br><span class="line">  reverse&lt;T&gt;(items: T[]): T[] &#123;</span><br><span class="line">    const toreturn = [];</span><br><span class="line">    for (let i = items.length; i &gt;= 0; i--) &#123;</span><br><span class="line">      toreturn.push(items[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return toreturn;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以随意调用泛型参数，当你使用简单的泛型时，泛型常用 T、U、V 表示。如果在你的参数里，不止拥有一个泛型，你应该使用一个更语义化名称，如 TKey 和 TValue （通常情况下，以 T 做为泛型前缀也在如 C++ 的其他语言里做为模版。）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//另一个明显的例子是，一个用于加载 json 返回值函数，它返回你任何传入类型的 Promise</span><br><span class="line">const getJSON = &lt;T&gt;(config: &#123; url: string; headers?: &#123; [key: string]: string &#125; &#125;): Promise&lt;T&gt; =&gt; &#123;</span><br><span class="line">  const fetchConfig = &#123;</span><br><span class="line">    method: &apos;GET&apos;,</span><br><span class="line">    Accept: &apos;application/json&apos;,</span><br><span class="line">    &apos;Content-Type&apos;: &apos;application/json&apos;,</span><br><span class="line">    ...(config.headers || &#123;&#125;)</span><br><span class="line">  &#125;;</span><br><span class="line">  return fetch(config.url, fetchConfig).then&lt;T&gt;(response =&gt; response.json());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//请注意，你仍然需要明显的注解任何你需要的类型，但是 getJSON&lt;T&gt; 的签名 config =&gt; Promise&lt;T&gt; 能够减少你一些关键的步骤（你不需要注解 loadUsers 的返回类型，因为它能够被推出来）</span><br><span class="line">type LoadUserResponse = &#123;</span><br><span class="line">  user: &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    email: string;</span><br><span class="line">  &#125;[];</span><br><span class="line">&#125;;</span><br><span class="line">function loaderUser() &#123;</span><br><span class="line">  return getJSON&lt;LoadUserResponse&gt;(&#123; url: &apos;https://example.com/users&apos; &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>7、辨析联合类型</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">//原始辨析（根据属性值）</span><br><span class="line">interface Square &#123;</span><br><span class="line">  kind: &apos;square&apos;;</span><br><span class="line">  size: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Rectangle &#123;</span><br><span class="line">  kind: &apos;rectangle&apos;;</span><br><span class="line">  width: number;</span><br><span class="line">  height: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 有人仅仅是添加了 `Circle` 类型</span><br><span class="line">// 我们可能希望 TypeScript 能在任何被需要的地方抛出错误</span><br><span class="line">interface Circle &#123;</span><br><span class="line">  kind: &apos;circle&apos;;</span><br><span class="line">  radius: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Shape = Square | Rectangle | Circle;</span><br><span class="line"></span><br><span class="line">function area(s: Shape) &#123;</span><br><span class="line">  switch (s.kind) &#123;</span><br><span class="line">    case &apos;square&apos;:</span><br><span class="line">      return s.size * s.size;</span><br><span class="line">    case &apos;rectangle&apos;:</span><br><span class="line">      return s.width * s.height;</span><br><span class="line">    case &apos;circle&apos;:</span><br><span class="line">      return Math.PI * s.radius ** 2;</span><br><span class="line">    default:</span><br><span class="line">    //如果你使用 strictNullChecks 选项来做详细的检查，你应该返回 _exhaustiveCheck 变量（类型是 never），否则 TypeScript 可能会推断返回值为 undefined</span><br><span class="line">      const _exhaustiveCheck: never = s;</span><br><span class="line">      return _exhaustiveCheck;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>8、索引签名</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const foo: &#123;</span><br><span class="line">  [index: string]: &#123; message: string &#125;;</span><br><span class="line">&#125; = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">// 储存的东西必须符合结构</span><br><span class="line">// ok</span><br><span class="line">foo[&apos;a&apos;] = &#123; message: &apos;some message&apos; &#125;;</span><br><span class="line"></span><br><span class="line">// Error, 必须包含 `message`</span><br><span class="line">foo[&apos;a&apos;] = &#123; messages: &apos;some message&apos; &#125;;</span><br><span class="line"></span><br><span class="line">// 读取时，也会有类型检查</span><br><span class="line">// ok</span><br><span class="line">foo[&apos;a&apos;].message;</span><br><span class="line"></span><br><span class="line">// Error: messages 不存在</span><br><span class="line">foo[&apos;a&apos;].messages;</span><br></pre></td></tr></table></figure><p>索引签名的名称（如：{ [index: string]: { message: string } } 里的 index ）除了可读性外，并没有任何意义。例如：如果有一个用户名，你可以使用 { username: string}: { message: string }，这有利于下一个开发者理解你的代码。</p><p><strong>所有成员都必须符合字符串的索引签名</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// ok</span><br><span class="line">interface Foo &#123;</span><br><span class="line">  [key: string]: number;</span><br><span class="line">  x: number;</span><br><span class="line">  y: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Error</span><br><span class="line">interface Bar &#123;</span><br><span class="line">  [key: string]: number;</span><br><span class="line">  x: number;</span><br><span class="line">  y: string; // Error: y 属性必须为 number 类型</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用一组有限的字符串字面量</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">type Index = &apos;a&apos; | &apos;b&apos; | &apos;c&apos;;</span><br><span class="line">type FromIndex = &#123; [k in Index]?: number &#125;;</span><br><span class="line"></span><br><span class="line">const good: FromIndex = &#123; b: 1, c: 2 &#125;;</span><br><span class="line"></span><br><span class="line">// Error:</span><br><span class="line">// `&#123; b: 1, c: 2, d: 3 &#125;` 不能分配给 &apos;FromIndex&apos;</span><br><span class="line">// 对象字面量只能指定已知类型，&apos;d&apos; 不存在 &apos;FromIndex&apos; 类型上</span><br><span class="line">const bad: FromIndex = &#123; b: 1, c: 2, d: 3 &#125;;</span><br></pre></td></tr></table></figure><p><strong>同时拥有 string 和 number 类型的索引签名</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">interface ArrStr &#123;</span><br><span class="line">  [key: string]: string | number; // 必须包括所用成员类型</span><br><span class="line">  [index: number]: string; // 字符串索引类型的子级</span><br><span class="line"></span><br><span class="line">  // example</span><br><span class="line">  length: number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>9、混合</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">// 所有 mixins 都需要</span><br><span class="line">type Constructor&lt;T = &#123;&#125;&gt; = new (...args: any[]) =&gt; T;</span><br><span class="line"></span><br><span class="line">/////////////</span><br><span class="line">// mixins 例子</span><br><span class="line">////////////</span><br><span class="line"></span><br><span class="line">// 添加属性的混合例子</span><br><span class="line">function TimesTamped&lt;TBase extends Constructor&gt;(Base: TBase) &#123;</span><br><span class="line">  return class extends Base &#123;</span><br><span class="line">    timestamp = Date.now();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 添加属性和方法的混合例子</span><br><span class="line">function Activatable&lt;TBase extends Constructor&gt;(Base: TBase) &#123;</span><br><span class="line">  return class extends Base &#123;</span><br><span class="line">    isActivated = false;</span><br><span class="line"></span><br><span class="line">    activate() &#123;</span><br><span class="line">      this.isActivated = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    deactivate() &#123;</span><br><span class="line">      this.isActivated = false;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">///////////</span><br><span class="line">// 组合类</span><br><span class="line">///////////</span><br><span class="line"></span><br><span class="line">// 简答的类</span><br><span class="line">class User &#123;</span><br><span class="line">  name = &apos;&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 添加 TimesTamped 的 User</span><br><span class="line">const TimestampedUser = TimesTamped(User);</span><br><span class="line"></span><br><span class="line">// Tina TimesTamped 和 Activatable 的类</span><br><span class="line">const TimestampedActivatableUser = TimesTamped(Activatable(User));</span><br><span class="line"></span><br><span class="line">//////////</span><br><span class="line">// 使用组合类</span><br><span class="line">//////////</span><br><span class="line"></span><br><span class="line">const timestampedUserExample = new TimestampedUser();</span><br><span class="line">console.log(timestampedUserExample.timestamp);</span><br><span class="line"></span><br><span class="line">const timestampedActivatableUserExample = new TimestampedActivatableUser();</span><br><span class="line">console.log(timestampedActivatableUserExample.timestamp);</span><br><span class="line">console.log(timestampedActivatableUserExample.isActivated);</span><br></pre></td></tr></table></figure><p><strong>TIP：</strong><br>「混合」是一个函数：<br>传入一个构造函数；<br>创建一个带有新功能，并且扩展构造函数的新类；<br>返回这个新类。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>公共库函数封装</title>
      <link href="/2019/07/27/%E5%85%AC%E5%85%B1%E5%BA%93%E5%87%BD%E6%95%B0%E5%B0%81%E8%A3%85/"/>
      <url>/2019/07/27/%E5%85%AC%E5%85%B1%E5%BA%93%E5%87%BD%E6%95%B0%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>下面总结公共库的封装函数（JavaScript），在项目中可以直接使用已封装好的函数库：</p><a id="more"></a><h4 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h4><h6 id="1-常用数据处理"><a href="#1-常用数据处理" class="headerlink" title="1. 常用数据处理"></a>1. 常用数据处理</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataProcess</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取完整时间</span></span><br><span class="line">    getFullTime() &#123;</span><br><span class="line">        <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">return</span> date.getFullYear() + <span class="string">'-'</span> + (date.getMonth() + <span class="number">1</span>) + <span class="string">'-'</span> + date.getDate() + <span class="string">' '</span> + date.getHours() + <span class="string">':'</span> + date.getMinutes() + <span class="string">':'</span> + date.getSeconds();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取日期</span></span><br><span class="line">    getDate() &#123;</span><br><span class="line">        <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">return</span> date.getFullYear() + <span class="string">'-'</span> + (date.getMonth() + <span class="number">1</span>) + <span class="string">'-'</span> + date.getDate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取时间</span></span><br><span class="line">    getTime() &#123;</span><br><span class="line">        <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">return</span> date.getHours() + <span class="string">':'</span> + date.getMinutes() + <span class="string">':'</span> + date.getSeconds();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 格式化金额,单位:分(eg:430分=4.30元)</span></span><br><span class="line">    formatFee(fee, suffix = <span class="string">''</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!fee) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Number</span>(fee).toFixed(<span class="number">2</span>) + suffix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将金额变为美元书写方式</span></span><br><span class="line">    formatToDollar(val) &#123;</span><br><span class="line">        <span class="comment">//金额转换 分-&gt;元 保留2位小数 并每隔3位用逗号分开 1,234.56</span></span><br><span class="line">        <span class="keyword">var</span> str = (val / <span class="number">100</span>).toFixed(<span class="number">2</span>) + <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">var</span> intSum = str.substring(<span class="number">0</span>, str.indexOf(<span class="string">"."</span>)).replace(<span class="regexp">/\B(?=(?:\d&#123;3&#125;)+$)/g</span>, <span class="string">','</span>); <span class="comment">//取到整数部分</span></span><br><span class="line">        <span class="keyword">var</span> dot = str.substring(str.length, str.indexOf(<span class="string">"."</span>)) <span class="comment">//取到小数部分搜索</span></span><br><span class="line">        <span class="keyword">var</span> ret = <span class="string">'$'</span> + intSum + dot;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 隐藏手机号中间4位</span></span><br><span class="line">    formatPhone(phone) &#123;</span><br><span class="line">        phone += <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">return</span> phone.replace(<span class="regexp">/(\d&#123;3&#125;)\d*(\d&#123;4&#125;)/g</span>, <span class="string">'$1***$2'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 隐藏身份证号中11位</span></span><br><span class="line">    formatIdentity(number) &#123;</span><br><span class="line">        number += <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">return</span> number.replace(<span class="regexp">/(\d&#123;3&#125;)\d*(\d&#123;4&#125;)/g</span>, <span class="string">'$1***********$2'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将句子的每个单词的首字母大写</span></span><br><span class="line">    firstUpperCase(str) &#123;</span><br><span class="line">        <span class="keyword">return</span> str.toLowerCase().replace(<span class="regexp">/( |^)[a-z]/g</span>, (L) =&gt; L.toUpperCase());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 句子首字母大写</span></span><br><span class="line">    formatEnSentence(str) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!str) <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">        str = str.trim();</span><br><span class="line">        <span class="keyword">let</span> strArr = str.split(<span class="string">''</span>)</span><br><span class="line">        strArr[<span class="number">0</span>] = strArr[<span class="number">0</span>].toUpperCase()</span><br><span class="line">        <span class="keyword">let</span> marks = [<span class="string">'.'</span>, <span class="string">'?'</span>, <span class="string">'!'</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; strArr.length; i++) &#123;</span><br><span class="line">            i = <span class="built_in">parseInt</span>(i)</span><br><span class="line">            <span class="keyword">if</span> (marks.includes(strArr[i])) &#123;</span><br><span class="line">                <span class="keyword">while</span> (strArr[i + <span class="number">1</span>] === <span class="string">' '</span>) &#123;</span><br><span class="line">                    strArr[i + <span class="number">1</span>] = <span class="string">''</span></span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (strArr[i + <span class="number">1</span>]) strArr[i + <span class="number">1</span>] = strArr[i + <span class="number">1</span>].toUpperCase()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> strArr.join(<span class="string">''</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DataProcess</span><br></pre></td></tr></table></figure><h6 id="2-常用DOM操作"><a href="#2-常用DOM操作" class="headerlink" title="2. 常用DOM操作"></a>2. 常用DOM操作</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为DOM添加class</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addClass</span>(<span class="params">el, className</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 首先要判断 el对象 是否有这个类名 如果有就直接返回 如果没有就添加</span></span><br><span class="line">    <span class="keyword">if</span> (hasClass(el, className)) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> newClass = el.className.split(<span class="string">' '</span>)</span><br><span class="line">    newClass.push(className)</span><br><span class="line">    el.className = newClass.join(<span class="string">' '</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断DOM是否有某个class</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">hasClass</span>(<span class="params">el, className</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(^|\\s)'</span> + className + <span class="string">'(\\s|$)'</span>)</span><br><span class="line">    <span class="keyword">return</span> reg.test(el.className)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取DOM属性name的值</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">el, name, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> prefix = <span class="string">'data-'</span></span><br><span class="line">    <span class="keyword">var</span> name = prefix + name</span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">        <span class="keyword">return</span> el.setAttribute(name, value)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> el.getAttribute(name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> elementStyle = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>).style</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> vendor = <span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> transformNames = &#123;</span><br><span class="line">        webkit: <span class="string">'webkitTransform'</span>,</span><br><span class="line">        Moz: <span class="string">'MozTransform'</span>,</span><br><span class="line">        O: <span class="string">'OTransform'</span>,</span><br><span class="line">        ms: <span class="string">'msTransform'</span>, <span class="comment">//IE</span></span><br><span class="line">        standard: <span class="string">'transform'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> transformNames) &#123;</span><br><span class="line">        <span class="keyword">if</span> (elementStyle[transformNames[key]] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> key</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">prefixStyle</span>(<span class="params">style</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vendor === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (vendor === <span class="string">'standard'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> style</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vendor + style.charAt(<span class="number">0</span>).toUpperCase() + style.substr(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-常用工具函数"><a href="#3-常用工具函数" class="headerlink" title="3. 常用工具函数"></a>3. 常用工具函数</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取随机数</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getRandomInt</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>) + min)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 洗牌函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">shuffle</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> newArr = arr.slice()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; newArr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> j = getRandomInt(<span class="number">0</span>, i)</span><br><span class="line">        <span class="keyword">let</span> tmp = newArr[i]</span><br><span class="line">        newArr[i] = newArr[j]</span><br><span class="line">        newArr[j] = tmp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 防抖函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">simpeDebounce</span>(<span class="params">func, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">        timer = setTimeout(func, delay);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fun, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">arguments</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//获取函数的作用域和变量</span></span><br><span class="line">        <span class="keyword">let</span> that = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">        clearTimeout(fun.id) <span class="comment">// 清除定时器</span></span><br><span class="line">        fun.id = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            fun.call(that, args)</span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 节流函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">simpleThrottle</span>(<span class="params">func, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            func();</span><br><span class="line">            timer = <span class="literal">null</span>;</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> lastTime;</span><br><span class="line">    <span class="keyword">let</span> timer;</span><br><span class="line">    delay || (delay = <span class="number">300</span>); <span class="comment">// 默认间隔为300ms</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">arguments</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">let</span> nowTime = +<span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// 获取系统当前的时间</span></span><br><span class="line">        <span class="keyword">if</span> (lastTime &amp;&amp; nowTime &lt; lastTime + delay) &#123; <span class="comment">// 当前距离上次执行的时间小于设置的时间间隔</span></span><br><span class="line">            clearTimeout(timer); <span class="comment">// 清除定时器</span></span><br><span class="line">            timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// delay时间后，执行函数</span></span><br><span class="line">                lastTime = nowTime;</span><br><span class="line">                fn.apply(context, args);</span><br><span class="line">            &#125;, delay);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 当前距离上次执行的时间大于等于设置的时间，直接执行函数</span></span><br><span class="line">            lastTime = nowTime;</span><br><span class="line">            fn.apply(context, args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> toString = <span class="built_in">Object</span>.prototype.toString</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为时间</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isDate</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> toString.call(val) === <span class="string">'[object Date]'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断是否为对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val !== <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> val === <span class="string">'object'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断是否为普通对象，不包含了formData、binaryData等</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isPlainObject</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> toString.call(val) === <span class="string">'[object Object]'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// encode解码</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">encode</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">encodeURIComponent</span>(val)</span><br><span class="line">        .replace(<span class="regexp">/%40/g</span>, <span class="string">'@'</span>)</span><br><span class="line">        .replace(<span class="regexp">/%3A/gi</span>, <span class="string">':'</span>)</span><br><span class="line">        .replace(<span class="regexp">/%24/g</span>, <span class="string">'$'</span>)</span><br><span class="line">        .replace(<span class="regexp">/%2C/gi</span>, <span class="string">','</span>)</span><br><span class="line">        .replace(<span class="regexp">/%20/g</span>, <span class="string">'+'</span>)</span><br><span class="line">        .replace(<span class="regexp">/%5B/gi</span>, <span class="string">'['</span>)</span><br><span class="line">        .replace(<span class="regexp">/%5D/gi</span>, <span class="string">']'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// xss字符转义函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">xssEncode</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建ajax的url</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">buildURL</span>(<span class="params">url, params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!params) &#123;</span><br><span class="line">        <span class="keyword">return</span> url</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> parts = []</span><br><span class="line">    <span class="built_in">Object</span>.keys(params).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> val = params[key]</span><br><span class="line">        <span class="keyword">if</span> (val === <span class="literal">null</span> || <span class="keyword">typeof</span> val === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> values = []</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(val)) &#123;</span><br><span class="line">            values = val</span><br><span class="line">            key += <span class="string">'[]'</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            values = [val]</span><br><span class="line">        &#125;</span><br><span class="line">        values.forEach(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isDate(val)) &#123;</span><br><span class="line">                val = val.toISOString()</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isPlainObject(val)) &#123;</span><br><span class="line">                val = <span class="built_in">JSON</span>.stringify(val)</span><br><span class="line">            &#125;</span><br><span class="line">            parts.push(<span class="string">`<span class="subst">$&#123;encode(key)&#125;</span>=<span class="subst">$&#123;encode(val)&#125;</span>`</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> serializedParams = parts.join(<span class="string">'&amp;'</span>)</span><br><span class="line">    <span class="keyword">if</span> (serializedParams) &#123;</span><br><span class="line">        <span class="keyword">const</span> markIndex = url.indexOf(<span class="string">'#'</span>)</span><br><span class="line">        <span class="keyword">if</span> (markIndex !== <span class="number">-1</span>) &#123;</span><br><span class="line">            url = url.slice(<span class="number">0</span>, markIndex)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        url += (url.indexOf(<span class="string">'?'</span>) === <span class="number">-1</span> ? <span class="string">'?'</span> : <span class="string">'&amp;'</span>) + serializedParams</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> url</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h4><h6 id="1-简单文件处理"><a href="#1-简单文件处理" class="headerlink" title="1. 简单文件处理"></a>1. 简单文件处理</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 删除文件夹（文件夹内有文件也一并删除）</span></span><br><span class="line">    deleteFolder(path) &#123;</span><br><span class="line">        <span class="keyword">let</span> files = [];</span><br><span class="line">        <span class="keyword">if</span> (fs.existsSync(path)) &#123;</span><br><span class="line">            files = fs.readdirSync(path);</span><br><span class="line">            files.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">file, index</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">let</span> curPath = path + <span class="string">"/"</span> + file;</span><br><span class="line">                <span class="keyword">if</span> (fs.statSync(curPath).isDirectory()) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.deleteFolder(curPath);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    fs.unlinkSync(curPath);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            fs.rmdirSync(path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后端根据url下载文件，存至服务器目录</span></span><br><span class="line">    download(urlArr, dirPath) &#123;</span><br><span class="line">        <span class="built_in">Promise</span>.all(</span><br><span class="line">            urlArr.map(<span class="keyword">async</span>(url, i) =&gt; &#123;</span><br><span class="line">                <span class="keyword">let</span> fileName = <span class="string">`<span class="subst">$&#123;i + <span class="number">1</span>&#125;</span>.wav`</span>;</span><br><span class="line">                <span class="keyword">let</span> stream = fs.createWriteStream(path.join(dirPath, fileName));</span><br><span class="line">                <span class="comment">// 下载文件并压缩</span></span><br><span class="line">                <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                    request(url)</span><br><span class="line">                        .pipe(stream)</span><br><span class="line">                        .on(<span class="string">"close"</span>, err =&gt; &#123;</span><br><span class="line">                            <span class="keyword">if</span> (err) reject(err);</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="built_in">console</span>.log(<span class="string">"文件["</span> + fileName + <span class="string">"]下载完毕"</span>);</span><br><span class="line">                                resolve();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">        ).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            zip.addLocalFolder(dirPath);</span><br><span class="line">            <span class="keyword">let</span> zippath = path.join(__dirname, <span class="string">"zip"</span>);</span><br><span class="line">            zip.writeZip(zippath + <span class="string">"/adm-archive.zip"</span>, err =&gt; &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后端返回文件下载</span></span><br><span class="line">    returnFile(filePath, fileName) &#123;</span><br><span class="line">        <span class="keyword">let</span> file = path.join(__dirname, filePath);</span><br><span class="line">        <span class="keyword">let</span> size = fs.statSync(file).size;</span><br><span class="line">        <span class="keyword">let</span> f = fs.createReadStream(file);</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">            <span class="string">"Content-Type"</span>: <span class="string">"application/force-download"</span>,</span><br><span class="line">            <span class="string">"Content-Disposition"</span>: <span class="string">"attachment; filename="</span> + fileName,</span><br><span class="line">            <span class="string">"Content-Length"</span>: size</span><br><span class="line">        &#125;);</span><br><span class="line">        f.pipe(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> File()</span><br></pre></td></tr></table></figure><h6 id="2-详细文件处理"><a href="#2-详细文件处理" class="headerlink" title="2. 详细文件处理"></a>2. 详细文件处理</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> unzip = <span class="built_in">require</span>(<span class="string">"unzip"</span>)</span><br><span class="line"><span class="keyword">const</span> AdmZip = <span class="built_in">require</span>(<span class="string">"adm-zip"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="comment">//递归创建目录 同步方法</span></span><br><span class="line">    mkdirsSync(dirname) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fs.existsSync(dirname)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mkdirsSync(path.dirname(dirname))) &#123;</span><br><span class="line">                fs.mkdirSync(dirname)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//递归创建目录 异步方法</span></span><br><span class="line">    mkdirs(dirname, callback) &#123;</span><br><span class="line">        fs.exists(dirname, <span class="function"><span class="keyword">function</span>(<span class="params">exists</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (exists) &#123;</span><br><span class="line">                callback()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//console.log(path.dirname(dirname))</span></span><br><span class="line">                mkdirs(path.dirname(dirname), <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    fs.mkdir(dirname, callback)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *同步创建文件夹</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;string[]&#125;</span> </span>folders 要创建的文件夹，由键值对表示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    createFolderSync(...folders) &#123;</span><br><span class="line">        <span class="built_in">Promise</span>.all(folders.map(<span class="function"><span class="params">folder</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> folder) &#123;</span><br><span class="line">                <span class="keyword">if</span> (folder[key] != <span class="string">""</span>) mkdirsSync(folder[key])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *异步创建文件夹</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;string[]&#125;</span> </span>folders 要创建的文件夹，由键值对表示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    createFolder(...folders) &#123;</span><br><span class="line">        <span class="built_in">Promise</span>.all(folders.map(<span class="function"><span class="params">folder</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> folder) &#123;</span><br><span class="line">                <span class="keyword">if</span> (folder[key] != <span class="string">""</span>)</span><br><span class="line">                    mkdirs(folder[key], () =&gt; &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;folder[key]&#125;</span>已存在`</span>)</span><br><span class="line">                    &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description </span>递归删除文件夹</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>path 要删除的文件夹</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    deleteFolderRecursiveSync(path) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fs.existsSync(path)) &#123;</span><br><span class="line">            fs.readdirSync(path).forEach(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> curPath = <span class="string">`<span class="subst">$&#123;path&#125;</span>/<span class="subst">$&#123;file&#125;</span>`</span></span><br><span class="line">                <span class="keyword">if</span> (fs.statSync(curPath).isDirectory()) &#123;</span><br><span class="line">                    <span class="comment">// recurse</span></span><br><span class="line">                    deleteFolderRecursiveSync(curPath)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    deleteFileSync(curPath)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            fs.rmdirSync(path)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description </span>同步删除文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>file 文件路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    deleteFileSync(file) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fs.existsSync(file)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fs.unlinkSync(file)</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(error, <span class="string">`删除<span class="subst">$&#123;file&#125;</span>失败`</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description </span>异步删除文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>file 文件路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    deleteFile(file) &#123;</span><br><span class="line">        fs.exists(file, (exists) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (exists) &#123;</span><br><span class="line">                fs.unlink(file, (err) =&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">`删除<span class="subst">$&#123;file&#125;</span>失败`</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description </span>同步移动文件夹中的文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>oldPath 源文件夹</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>newPath 目标文件夹</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">async</span> moveFolderFileSync(oldPath, newPath) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fs.readdirSync(oldPath).forEach(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!fs.statSync(<span class="string">`<span class="subst">$&#123;oldPath&#125;</span>\\<span class="subst">$&#123;file&#125;</span>`</span>).isDirectory())</span><br><span class="line">                    fs.renameSync(<span class="string">`<span class="subst">$&#123;oldPath&#125;</span>\\<span class="subst">$&#123;file&#125;</span>`</span>, <span class="string">`<span class="subst">$&#123;newPath&#125;</span>\\<span class="subst">$&#123;file&#125;</span>`</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(error, <span class="string">`移动文件夹<span class="subst">$&#123;oldPath&#125;</span>失败`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description </span>异步移动文件夹中的文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>oldPath 源文件夹</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>newPath 目标文件夹</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    moveFolderFile(oldPath, newPath) &#123;</span><br><span class="line">        fs.readdir(oldPath, (err, files) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (!err)</span><br><span class="line">                files.forEach(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">                    fs.stat(<span class="string">`<span class="subst">$&#123;oldPath&#125;</span>\\<span class="subst">$&#123;file&#125;</span>`</span>, (err, stats) =&gt; &#123;</span><br><span class="line">                        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                            <span class="built_in">console</span>.log(err, <span class="string">`读取<span class="subst">$&#123;oldPath&#125;</span>\\<span class="subst">$&#123;file&#125;</span>文件状态失败`</span>)</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (!stats.isDirectory()) &#123;</span><br><span class="line">                                <span class="keyword">try</span> &#123;</span><br><span class="line">                                    fs.rename(<span class="string">`<span class="subst">$&#123;oldPath&#125;</span>\\<span class="subst">$&#123;file&#125;</span>`</span>, <span class="string">`<span class="subst">$&#123;newPath&#125;</span>\\<span class="subst">$&#123;file&#125;</span>`</span>)</span><br><span class="line">                                &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                                    <span class="built_in">console</span>.log(error, <span class="string">`移动<span class="subst">$&#123;oldPath&#125;</span>\\<span class="subst">$&#123;file&#125;</span>失败`</span>)</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description </span>同步复制文件夹</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>oldPath 源文件夹</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>newPath 目标文件夹</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">async</span> moveFolderSync(oldPath, newPath) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fs.existsSync(newPath)) &#123;</span><br><span class="line">            deleteFolderRecursiveSync(newPath)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fs.renameSync(oldPath, newPath)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(error, <span class="string">`<span class="subst">$&#123;oldPath&#125;</span>移动失败`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description </span>异步复制文件夹</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>oldPath 源文件夹</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>newPath 目标文件夹</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    moveFolder(oldPath, newPath) &#123;</span><br><span class="line">        fs.exists(newPath, (exists) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (exists) &#123;</span><br><span class="line">                deleteFolderRecursiveSync(oldPath)</span><br><span class="line">            &#125;</span><br><span class="line">            fs.rename(oldPath, newPath, (err) =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(err, <span class="string">`<span class="subst">$&#123;oldPath&#125;</span>移动失败`</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description </span>同步复制文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>oldFile 源文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>newFile 新文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">async</span> copyFileSync(oldFile, newFile) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fs.writeFileSync(newFile, fs.readFileSync(oldFile))</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(error, <span class="string">`复制文件<span class="subst">$&#123;oldFile&#125;</span>失败`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description </span>异步复制文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>oldFile 源文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>newFile 新文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    copyFile(oldFile, newFile) &#123;</span><br><span class="line">        fs.createReadStream(oldFile)</span><br><span class="line">            .pipe(fs.createWriteStream(newFile))</span><br><span class="line">            .on(<span class="string">"finish"</span>, () =&gt; &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;oldFile&#125;</span>文件复制完成`</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">            .on(<span class="string">"error"</span>, (error) =&gt; &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(error, <span class="string">"文件复制失败"</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步复制文件夹,可以通过参数决定是否复制子文件夹，可根据名字过滤并重命名为filter</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;string&#125;</span></span>oldPath 要复制的文件夹</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;string&#125;</span></span>newPath 复制到的文件夹</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;Boolean&#125;</span></span>OnlyFile 是否复制子文件夹</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;string&#125;</span></span>filter 根据名字过滤要复制的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;Boolean&#125;</span></span>rename 是否重命名为filter</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    copyFolder(oldPath, newPath, OnlyFile = <span class="literal">false</span>, filter = <span class="string">""</span>, rename = <span class="literal">false</span>) &#123;</span><br><span class="line">        fs.readdir(oldPath, (err, files) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">                files.forEach(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (file.indexOf(filter) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!fs.statSync(<span class="string">`<span class="subst">$&#123;oldPath&#125;</span>\\<span class="subst">$&#123;file&#125;</span>`</span>).isDirectory()) &#123;</span><br><span class="line">                            <span class="keyword">let</span> name = file</span><br><span class="line">                            <span class="keyword">if</span> (rename) name = <span class="string">`<span class="subst">$&#123;filter&#125;</span><span class="subst">$&#123;path.extname(file)&#125;</span>`</span></span><br><span class="line">                            copyFile(<span class="string">`<span class="subst">$&#123;oldPath&#125;</span>\\<span class="subst">$&#123;file&#125;</span>`</span>, <span class="string">`<span class="subst">$&#123;newPath&#125;</span>\\<span class="subst">$&#123;name&#125;</span>`</span>)</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (!OnlyFile)</span><br><span class="line">                                copyFolder(</span><br><span class="line">                                    <span class="string">`<span class="subst">$&#123;oldPath&#125;</span>\\<span class="subst">$&#123;file&#125;</span>`</span>,</span><br><span class="line">                                    <span class="string">`<span class="subst">$&#123;newPath&#125;</span>\\<span class="subst">$&#123;file&#125;</span>`</span>,</span><br><span class="line">                                    OnlyFile,</span><br><span class="line">                                    filter,</span><br><span class="line">                                    rename,</span><br><span class="line">                                )</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步复制文件夹,可以通过参数决定是否复制子文件夹，可根据名字过滤并重命名为filter</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;string&#125;</span></span>oldPath 要复制的文件夹</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;string&#125;</span></span>newPath 复制到的文件夹</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;Boolean&#125;</span></span>OnlyFile 是否复制子文件夹</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;string&#125;</span></span>filter 根据名字过滤要复制的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;Boolean&#125;</span></span>rename 是否重命名为filter</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    copyFolderSync(oldPath, newPath, OnlyFile = <span class="literal">false</span>, filter = <span class="string">""</span>, rename = <span class="literal">false</span>) &#123;</span><br><span class="line">        fs.readdirSync(oldPath).forEach(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.indexOf(filter) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!fs.statSync(<span class="string">`<span class="subst">$&#123;oldPath&#125;</span>\\<span class="subst">$&#123;file&#125;</span>`</span>).isDirectory()) &#123;</span><br><span class="line">                    name = file</span><br><span class="line">                    <span class="keyword">if</span> (rename) name = <span class="string">`<span class="subst">$&#123;filter&#125;</span><span class="subst">$&#123;path.extname(file)&#125;</span>`</span></span><br><span class="line">                    copyFileSync(<span class="string">`<span class="subst">$&#123;oldPath&#125;</span>\\<span class="subst">$&#123;file&#125;</span>`</span>, <span class="string">`<span class="subst">$&#123;newPath&#125;</span>\\<span class="subst">$&#123;name&#125;</span>`</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!OnlyFile)</span><br><span class="line">                        copyFolderSync(</span><br><span class="line">                            <span class="string">`<span class="subst">$&#123;oldPath&#125;</span>\\<span class="subst">$&#123;file&#125;</span>`</span>,</span><br><span class="line">                            <span class="string">`<span class="subst">$&#123;newPath&#125;</span>\\<span class="subst">$&#123;file&#125;</span>`</span>,</span><br><span class="line">                            OnlyFile,</span><br><span class="line">                            filter,</span><br><span class="line">                            rename,</span><br><span class="line">                        )</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description </span>同步解压文件夹，用adm-zip解压</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>filePath 压缩文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>extracePath 解压文件夹</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ExtractZipSync(filePath, extracePath) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> zip = <span class="keyword">new</span> AdmZip(filePath)</span><br><span class="line">                zip.extractAllTo(extracePath, <span class="literal">true</span>)</span><br><span class="line">                <span class="keyword">return</span> resolve()</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="keyword">return</span> reject(error)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description </span>异步解压文件夹，用unzip解压</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>filePath 压缩文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>extracePath 解压文件夹</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ExtractZip(filePath, extracePath, callback = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;) &#123;</span><br><span class="line">        fs.createReadStream(filePath)</span><br><span class="line">            .pipe(</span><br><span class="line">                unzip.Extract(&#123;</span><br><span class="line">                    path: extracePath,</span><br><span class="line">                &#125;),</span><br><span class="line">            )</span><br><span class="line">            .on(<span class="string">"finish"</span>, () =&gt; &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"解压完成"</span>)</span><br><span class="line">                callback()</span><br><span class="line">            &#125;)</span><br><span class="line">            .on(<span class="string">"error"</span>, (error) =&gt; &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(error, <span class="string">"解压失败"</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description </span>将多个文件夹文件移动到一个文件夹</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>path 源文件夹</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>newpath 新文件夹</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    moveToOne(path, newpath) &#123;</span><br><span class="line">        fs.readdir(path, (err, files) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">                files.forEach(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> OldFile = <span class="string">`<span class="subst">$&#123;path&#125;</span>\\<span class="subst">$&#123;file&#125;</span>`</span></span><br><span class="line">                    <span class="keyword">if</span> (!fs.statSync(OldFile).isDirectory())</span><br><span class="line">                        fs.createReadStream(OldFile)</span><br><span class="line">                        .pipe(fs.createWriteStream(<span class="string">`<span class="subst">$&#123;newpath&#125;</span>\\<span class="subst">$&#123;file&#125;</span>`</span>));</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        move(OldFile, newpath);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为文件夹下的全部文件增加前缀，复制至另一文件夹</span></span><br><span class="line">    renameAllFileWithPrefix(fileDirectory, newfileDirectory, prefix) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fs.existsSync(fileDirectory)) &#123;</span><br><span class="line">            <span class="keyword">var</span> files = fs.readdirSync(fileDirectory);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; files.length; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> filePath = fileDirectory + <span class="string">"/"</span> + files[i];</span><br><span class="line">                <span class="keyword">var</span> fileName = prefix + files[i];</span><br><span class="line">                <span class="keyword">var</span> newFilePath = newfileDirectory + <span class="string">"/"</span> + fileName;</span><br><span class="line">                fs.rename(filePath, newFilePath, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(fileDirectory + <span class="string">"  Not Found!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为文件夹下的全部文件增加后缀，复制至另一文件夹</span></span><br><span class="line">    renameAllFileWithSuffix(fileDirectory, newfileDirectory, suffix) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fs.existsSync(fileDirectory)) &#123;</span><br><span class="line">            <span class="keyword">var</span> files = fs.readdirSync(fileDirectory);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; files.length; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> filePath = fileDirectory + <span class="string">"/"</span> + files[i];</span><br><span class="line">                <span class="keyword">var</span> fileName = files[i] + suffix;</span><br><span class="line">                <span class="keyword">var</span> newFilePath = newfileDirectory + <span class="string">"/"</span> + fileName;</span><br><span class="line">                fs.rename(filePath, newFilePath, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(fileDirectory + <span class="string">"  Not Found!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> File()</span><br></pre></td></tr></table></figure><h4 id="http请求"><a href="#http请求" class="headerlink" title="http请求"></a>http请求</h4><h6 id="1-axios库封装"><a href="#1-axios库封装" class="headerlink" title="1. axios库封装"></a>1. axios库封装</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> JsonP <span class="keyword">from</span> <span class="string">'jsonp'</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Axios</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> jsonp(options) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            JsonP(options.url, &#123;</span><br><span class="line">                param: <span class="string">'callback'</span></span><br><span class="line">            &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, response</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (response.status == <span class="string">'success'</span>) &#123;</span><br><span class="line">                    resolve(response);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    reject(response.messsage);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> ajax(options, baseApi, loadingDomId) &#123;</span><br><span class="line">        <span class="keyword">let</span> loading;</span><br><span class="line">        <span class="keyword">if</span> (options.data &amp;&amp; options.data.isShowLoading !== <span class="literal">false</span>) &#123;</span><br><span class="line">            loading = <span class="built_in">document</span>.getElementById(loadingDomId);</span><br><span class="line">            loading.style.display = <span class="string">'block'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            axios(&#123;</span><br><span class="line">                url: options.url,</span><br><span class="line">                method: <span class="string">'get'</span>,</span><br><span class="line">                baseURL: baseApi,</span><br><span class="line">                timeout: <span class="number">5000</span>,</span><br><span class="line">                params: (options.data &amp;&amp; options.data.params) || <span class="string">''</span></span><br><span class="line">            &#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (options.data &amp;&amp; options.data.isShowLoading !== <span class="literal">false</span>) &#123;</span><br><span class="line">                    loading = <span class="built_in">document</span>.getElementById(loadingDomId);</span><br><span class="line">                    loading.style.display = <span class="string">'none'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (response.status == <span class="string">'200'</span>) &#123;</span><br><span class="line">                    <span class="keyword">let</span> res = response.data;</span><br><span class="line">                    <span class="keyword">if</span> (res.code == <span class="string">'0'</span>) &#123;</span><br><span class="line">                        resolve(res);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        Modal.info(&#123;</span><br><span class="line">                            title: <span class="string">"提示"</span>,</span><br><span class="line">                            content: res.msg</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    reject(response.data);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Axios()</span><br></pre></td></tr></table></figure><h6 id="2-jsonp封装"><a href="#2-jsonp封装" class="headerlink" title="2. jsonp封装"></a>2. jsonp封装</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> originJsonp <span class="keyword">from</span> <span class="string">'jsonp'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 三个参数粉笔为 目标url 需要拼接在url上的参数 以及jsonp插件 需要的option</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">url, paramdata, options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在这里引入一个  拼接字符串的方法</span></span><br><span class="line">    url += (url.indexOf(<span class="string">'?'</span>) &lt; <span class="number">0</span> ? <span class="string">'?'</span> : <span class="string">'&amp;'</span>) + param(paramdata)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在这里返回一个Promise对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 在这里的data 跟上面的paramdata是不一样的  一个是 json的返回对象  一个是你传入的参数</span></span><br><span class="line">        originJsonp(url, options, (err, data) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">                resolve(data)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">param</span>(<span class="params">paramdata</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> url = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> paramdata) &#123;</span><br><span class="line">        <span class="comment">//  对参数对象里的每一项进行判断</span></span><br><span class="line">        <span class="keyword">let</span> value = paramdata[k] == <span class="literal">undefined</span> ? <span class="string">''</span> : paramdata[k]</span><br><span class="line">        url += <span class="string">`&amp;<span class="subst">$&#123;k&#125;</span>=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(value)&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 循环结束  url 拼接完毕 将其返回</span></span><br><span class="line">    <span class="keyword">return</span> url</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="nodejs操作mysql"><a href="#nodejs操作mysql" class="headerlink" title="nodejs操作mysql"></a>nodejs操作mysql</h4><h6 id="1-直接操作，批量修改值"><a href="#1-直接操作，批量修改值" class="headerlink" title="1. 直接操作，批量修改值"></a>1. 直接操作，批量修改值</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">"mysql"</span>);</span><br><span class="line"><span class="keyword">const</span> inspect = <span class="built_in">require</span>(<span class="string">"eyes"</span>).inspector(&#123;</span><br><span class="line">    maxLength: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//使用数据库连接池</span></span><br><span class="line"><span class="keyword">const</span> mysqlCofig = &#123;</span><br><span class="line">    host: <span class="string">"localhost"</span>,</span><br><span class="line">    port: <span class="number">3306</span>,</span><br><span class="line">    database: <span class="string">"test4"</span>,</span><br><span class="line">    user: <span class="string">"root"</span>,</span><br><span class="line">    password: <span class="string">"574820ypczjs"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> pool = mysql.createPool(mysqlCofig);</span><br><span class="line">pool.getConnection(<span class="function"><span class="keyword">function</span>(<span class="params">err, connection</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//通过getConnection()方法进行数据库连接</span></span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`mysql链接失败<span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> EIDs = [],</span><br><span class="line">            centerX = [],</span><br><span class="line">            centerY = [];</span><br><span class="line">        connection.query(<span class="string">"select EID,extent from extent"</span>, (err, result) =&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> result) &#123;</span><br><span class="line">                <span class="keyword">const</span> element = result[key];</span><br><span class="line">                <span class="keyword">let</span> EID = element[<span class="string">'EID'</span>],</span><br><span class="line">                    extent = element[<span class="string">'extent'</span>];</span><br><span class="line">                extent = <span class="built_in">JSON</span>.parse(extent);</span><br><span class="line">                <span class="keyword">let</span> x = (extent[<span class="string">'minX'</span>] + extent[<span class="string">'maxX'</span>]) / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">let</span> y = (extent[<span class="string">'minY'</span>] + extent[<span class="string">'maxY'</span>]) / <span class="number">2</span>;</span><br><span class="line">                EIDs.push(EID);</span><br><span class="line">                centerX.push(x);</span><br><span class="line">                centerY.push(y);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> res = [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> EIDs) &#123;</span><br><span class="line">                res.push(&#123;</span><br><span class="line">                    EID: EIDs[key],</span><br><span class="line">                    centerX: centerX[key],</span><br><span class="line">                    centerY: centerY[key]</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> res) &#123;</span><br><span class="line">                <span class="keyword">if</span> (res.hasOwnProperty(key)) &#123;</span><br><span class="line">                    <span class="keyword">const</span> element = res[key];</span><br><span class="line">                    connection.query(<span class="string">'update extent set ? where EID=?'</span>, [element, element[<span class="string">'EID'</span>]], (err, result) =&gt; &#123;</span><br><span class="line">                        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                            inspect(err, <span class="string">'更新数据出错'</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            inspect(<span class="string">'更新数据成功'</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="openlayer绘图函数"><a href="#openlayer绘图函数" class="headerlink" title="openlayer绘图函数"></a>openlayer绘图函数</h4><h6 id="1-图形绘制"><a href="#1-图形绘制" class="headerlink" title="1. 图形绘制"></a>1. 图形绘制</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Map</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@function </span>绘制点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>map 地图对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>x x坐标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>y y坐标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>fillColor 填充色 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>strokeColor 边线颜色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>imageColor 图案颜色</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    drawPoint(map, x, y, fillColor = <span class="string">'#000'</span>, strokeColor = <span class="string">'#000'</span>, imageColor = <span class="string">'#000'</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> point = <span class="keyword">new</span> ol.Feature(&#123;</span><br><span class="line">            geometry: <span class="keyword">new</span> ol.geom.Point([x, y])</span><br><span class="line">        &#125;);</span><br><span class="line">        point.setStyle(<span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">            fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span><br><span class="line">                color: fillColor</span><br><span class="line">            &#125;),</span><br><span class="line">            stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span><br><span class="line">                color: strokeColor,</span><br><span class="line">                width: <span class="number">1</span></span><br><span class="line">            &#125;),</span><br><span class="line">            image: <span class="keyword">new</span> ol.style.Circle(&#123;</span><br><span class="line">                radius: <span class="number">8</span>,</span><br><span class="line">                fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span><br><span class="line">                    color: imageColor</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;));</span><br><span class="line">        <span class="keyword">let</span> source = <span class="keyword">new</span> ol.source.Vector(&#123;</span><br><span class="line">            features: [point]</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">let</span> vector = <span class="keyword">new</span> ol.layer.Vector(&#123;</span><br><span class="line">            source: source</span><br><span class="line">        &#125;);</span><br><span class="line">        map.addLayer(vector);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>map 地图</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> </span>startPoint 起始点坐标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> </span>endPoint 结束点坐标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    drawStaticLine(map, startPoint, endPoint, fillColor = <span class="string">'#000'</span>, strokeColor = <span class="string">'#000'</span>, imageColor = <span class="string">'#000'</span>) &#123;</span><br><span class="line">        <span class="comment">//创建一个线</span></span><br><span class="line">        <span class="keyword">let</span> Line = <span class="keyword">new</span> ol.Feature(&#123;</span><br><span class="line">            geometry: <span class="keyword">new</span> ol.geom.LineString([startPoint, endPoint])</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置线的样式</span></span><br><span class="line">        Line.setStyle(<span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">            <span class="comment">//填充色</span></span><br><span class="line">            fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span><br><span class="line">                color: fillColor</span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="comment">//边线颜色</span></span><br><span class="line">            stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span><br><span class="line">                lineDash: [<span class="number">1</span>, <span class="number">4</span>],</span><br><span class="line">                color: strokeColor,</span><br><span class="line">                width: <span class="number">2</span></span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="comment">//形状</span></span><br><span class="line">            image: <span class="keyword">new</span> ol.style.Circle(&#123;</span><br><span class="line">                radius: <span class="number">7</span>,</span><br><span class="line">                fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span><br><span class="line">                    color: imageColor</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;));</span><br><span class="line">        <span class="keyword">let</span> source = <span class="keyword">new</span> ol.source.Vector(&#123;</span><br><span class="line">            features: [Line]</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">let</span> vector = <span class="keyword">new</span> ol.layer.Vector(&#123;</span><br><span class="line">            source: source</span><br><span class="line">        &#125;);</span><br><span class="line">        map.addLayer(vector);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>map </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> </span>center 中心点坐标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> </span>others 其余点坐标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    drawDynamicLine(map, center, others) &#123;</span><br><span class="line">        <span class="keyword">let</span> style = <span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">            stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span><br><span class="line">                color: <span class="string">'#EAE911'</span>,</span><br><span class="line">                width: <span class="number">2</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">let</span> flightsSource;</span><br><span class="line">        <span class="keyword">let</span> addLater = <span class="function"><span class="keyword">function</span>(<span class="params">feature, timeout</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                feature.set(<span class="string">'start'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime());</span><br><span class="line">                flightsSource.addFeature(feature);</span><br><span class="line">            &#125;, timeout);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">let</span> pointsPerMs = <span class="number">0.1</span>;</span><br><span class="line">        <span class="keyword">let</span> animateFlights = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> vectorContext = event.vectorContext;</span><br><span class="line">            <span class="keyword">let</span> frameState = event.frameState;</span><br><span class="line">            vectorContext.setStyle(style);</span><br><span class="line">            <span class="keyword">let</span> features = flightsSource.getFeatures();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; features.length; i++) &#123;</span><br><span class="line">                <span class="keyword">let</span> feature = features[i];</span><br><span class="line">                <span class="keyword">if</span> (!feature.get(<span class="string">'finished'</span>)) &#123;</span><br><span class="line">                    <span class="keyword">let</span> coords = feature.getGeometry().getCoordinates();</span><br><span class="line">                    <span class="keyword">let</span> elapsedTime = frameState.time - feature.get(<span class="string">'start'</span>);</span><br><span class="line">                    <span class="keyword">let</span> elapsedPoints = elapsedTime * pointsPerMs;</span><br><span class="line">                    <span class="keyword">if</span> (elapsedPoints &gt;= coords.length) &#123;</span><br><span class="line">                        feature.set(<span class="string">'finished'</span>, <span class="literal">true</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">let</span> maxIndex = <span class="built_in">Math</span>.min(elapsedPoints, coords.length);</span><br><span class="line">                    <span class="keyword">let</span> currentLine = <span class="keyword">new</span> ol.geom.LineString(coords.slice(<span class="number">0</span>, maxIndex));</span><br><span class="line">                    <span class="comment">//根据要素来描绘出线条</span></span><br><span class="line">                    vectorContext.drawGeometry(currentLine);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//继续动画效果</span></span><br><span class="line">            map.render();</span><br><span class="line">        &#125;;</span><br><span class="line">        flightsSource = <span class="keyword">new</span> ol.source.Vector(&#123;</span><br><span class="line">            wrapX: <span class="literal">false</span>,</span><br><span class="line">            loader: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; others.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">let</span> <span class="keyword">from</span> = center[<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">let</span> to = others[i];</span><br><span class="line">                    <span class="comment">//创建一个两个地点之间的弧段</span></span><br><span class="line">                    <span class="keyword">let</span> arcGenerator = <span class="keyword">new</span> arc.GreatCircle(&#123;</span><br><span class="line">                        x: <span class="keyword">from</span>[<span class="number">1</span>],</span><br><span class="line">                        y: <span class="keyword">from</span>[<span class="number">0</span>]</span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        x: to[<span class="number">1</span>],</span><br><span class="line">                        y: to[<span class="number">0</span>]</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">let</span> arcLine = arcGenerator.Arc(<span class="number">100</span>, &#123;</span><br><span class="line">                        offset: <span class="number">10</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">if</span> (arcLine.geometries.length === <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">let</span> line = <span class="keyword">new</span> ol.geom.LineString(arcLine.geometries[<span class="number">0</span>].coords);</span><br><span class="line">                        line.transform(ol.proj.get(<span class="string">'EPSG:4326'</span>), ol.proj.get(<span class="string">'EPSG:3857'</span>));</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">let</span> feature = <span class="keyword">new</span> ol.Feature(&#123;</span><br><span class="line">                            geometry: line,</span><br><span class="line">                            finished: <span class="literal">false</span></span><br><span class="line">                        &#125;);</span><br><span class="line">                        <span class="comment">//添加动画的特性与延迟所有功能并不在同一时间开始</span></span><br><span class="line">                        addLater(feature, i * <span class="number">50</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                map.on(<span class="string">'postcompose'</span>, animateFlights);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> flightsLayer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span><br><span class="line">            source: flightsSource,</span><br><span class="line">            style: <span class="function"><span class="keyword">function</span>(<span class="params">feature</span>) </span>&#123;</span><br><span class="line">                <span class="comment">//如果动画仍然是活跃的特性,不渲染图层样式的特性</span></span><br><span class="line">                <span class="keyword">if</span> (feature.get(<span class="string">'finished'</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> style;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        map.addLayer(flightsLayer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为非中心点创建注记</span></span><br><span class="line">    createOtherLabelStyle(feature) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">            text: <span class="keyword">new</span> ol.style.Text(&#123;</span><br><span class="line">                <span class="comment">//位置</span></span><br><span class="line">                textAlign: <span class="string">'center'</span>,</span><br><span class="line">                <span class="comment">//基准线</span></span><br><span class="line">                textBaseline: <span class="string">'middle'</span>,</span><br><span class="line">                <span class="comment">//文字样式</span></span><br><span class="line">                font: <span class="string">'normal 10px 微软雅黑'</span>,</span><br><span class="line">                <span class="comment">//文本内容</span></span><br><span class="line">                text: feature.get(<span class="string">'name'</span>),</span><br><span class="line">                <span class="comment">//文本填充样式（即文字颜色）</span></span><br><span class="line">                fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span><br><span class="line">                    color: <span class="string">'#aa3300'</span></span><br><span class="line">                &#125;),</span><br><span class="line">                stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span><br><span class="line">                    color: <span class="string">'#ffcc33'</span>,</span><br><span class="line">                    width: <span class="number">1</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为中心点创建注记</span></span><br><span class="line">    createCenterLabelStyle(feature) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">            text: <span class="keyword">new</span> ol.style.Text(&#123;</span><br><span class="line">                <span class="comment">//位置</span></span><br><span class="line">                textAlign: <span class="string">'center'</span>,</span><br><span class="line">                <span class="comment">//基准线</span></span><br><span class="line">                textBaseline: <span class="string">'middle'</span>,</span><br><span class="line">                <span class="comment">//文字样式</span></span><br><span class="line">                font: <span class="string">'normal 18px 微软雅黑'</span>,</span><br><span class="line">                <span class="comment">//文本内容</span></span><br><span class="line">                text: feature.get(<span class="string">'name'</span>),</span><br><span class="line">                fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span><br><span class="line">                    color: <span class="string">'#104E8B'</span></span><br><span class="line">                &#125;),</span><br><span class="line">                stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span><br><span class="line">                    color: <span class="string">'#104E8B'</span>,</span><br><span class="line">                    width: <span class="number">1</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createIconStyle(feature, src) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">            <span class="comment">/**&#123;olx.style.IconOptions&#125;类型*/</span></span><br><span class="line">            image: <span class="keyword">new</span> ol.style.Icon(</span><br><span class="line">                (&#123;</span><br><span class="line">                    anchor: [<span class="number">0.5</span>, <span class="number">60</span>],</span><br><span class="line">                    anchorOrigin: <span class="string">'top-right'</span>,</span><br><span class="line">                    anchorXUnits: <span class="string">'fraction'</span>,</span><br><span class="line">                    anchorYUnits: <span class="string">'pixels'</span>,</span><br><span class="line">                    offsetOrigin: <span class="string">'top-right'</span>,</span><br><span class="line">                    opacity: <span class="number">0.75</span>,</span><br><span class="line">                    src: src</span><br><span class="line">                &#125;)</span><br><span class="line">            )</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description </span>添加图层注记</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>map 地图</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>point 点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>name 名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>type 类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    mark(map, point, name, type) &#123;</span><br><span class="line">        <span class="keyword">let</span> iconFeature = <span class="keyword">new</span> ol.Feature(&#123;</span><br><span class="line">            geometry: <span class="keyword">new</span> ol.geom.Point(point),</span><br><span class="line">            name: name,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (type === <span class="number">1</span>) &#123;</span><br><span class="line">            iconFeature.setStyle(<span class="keyword">this</span>.createCenterLabelStyle(iconFeature))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            iconFeature.setStyle(<span class="keyword">this</span>.createOtherLabelStyle(iconFeature));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> vectorSource = <span class="keyword">new</span> ol.source.Vector(&#123;</span><br><span class="line">            features: [iconFeature]</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">let</span> vectorLayer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span><br><span class="line">            source: vectorSource</span><br><span class="line">        &#125;);</span><br><span class="line">        map.addLayer(vectorLayer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description </span>为中心点添加icon</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>map </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>point </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    addIcon(map, point, imgSrc) &#123;</span><br><span class="line">        <span class="keyword">let</span> iconFeature = <span class="keyword">new</span> ol.Feature(&#123;</span><br><span class="line">            geometry: <span class="keyword">new</span> ol.geom.Point(point)</span><br><span class="line">        &#125;);</span><br><span class="line">        iconFeature.setStyle(<span class="keyword">this</span>.createIconStyle(iconFeature, imgSrc));</span><br><span class="line">        <span class="keyword">let</span> vectorSource = <span class="keyword">new</span> ol.source.Vector(&#123;</span><br><span class="line">            features: [iconFeature]</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">let</span> vectorLayer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span><br><span class="line">            source: vectorSource</span><br><span class="line">        &#125;);</span><br><span class="line">        map.addLayer(vectorLayer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LinValidator源码学习</title>
      <link href="/2019/07/25/LinValidator%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/07/25/LinValidator%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>在闲暇时间，学习了一下林间有风团队开发的 LinValidator 插件源码，具体的调用方式如下，使用方法很简单，只需要在校验器类中针对待检验的属性各创建自己的Rule的实例，里面写具体的校验规则即可，当然也可以自定义规则函数。同时，校验器之间可以实现继承。</p><a id="more"></a><p><a href="http://doc.cms.7yue.pro/lin/server/koa/validator.html#%E4%BD%BF%E7%94%A8" target="_blank" rel="noopener">官方网站</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 规则</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先任何一个规则函数，满足以validate开头的类方法，除validate()这个函数外。</span></span><br><span class="line"><span class="comment">// 都会被带入一个重要的参数data。 data是前端传入参数的容器， 它的整体结构如下：</span></span><br><span class="line"><span class="comment">// this.data = &#123;</span></span><br><span class="line"><span class="comment">//     body: ctx.request.body, // body -&gt; body</span></span><br><span class="line"><span class="comment">//     query: ctx.request.query, // query -&gt; query</span></span><br><span class="line"><span class="comment">//     path: ctx.params, // params -&gt; path</span></span><br><span class="line"><span class="comment">//     header: ctx.request.header // header -&gt; header</span></span><br><span class="line"><span class="comment">//   &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//会对 ctx.request.body(上下文请求体)、ctx.request.query(上下文请求query参数) 、ctx.request.header(上下文请求头)、ctx.param(路由参数)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterValidator</span> <span class="keyword">extends</span> <span class="title">LinValidator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.nickname = [</span><br><span class="line">      <span class="keyword">new</span> Rule(<span class="string">"isNotEmpty"</span>, <span class="string">"昵称不可为空"</span>),</span><br><span class="line">      <span class="keyword">new</span> Rule(<span class="string">"isLength"</span>, <span class="string">"昵称长度必须在2~10之间"</span>, <span class="number">2</span>, <span class="number">10</span>)</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">this</span>.group_id = <span class="keyword">new</span> Rule(<span class="string">"isInt"</span>, <span class="string">"分组id必须是整数，且大于0"</span>, &#123;</span><br><span class="line">      min: <span class="number">1</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">this</span>.email = [</span><br><span class="line">      <span class="keyword">new</span> Rule(<span class="string">"isOptional"</span>),</span><br><span class="line">      <span class="keyword">new</span> Rule(<span class="string">"isEmail"</span>, <span class="string">"电子邮箱不符合规范，请输入正确的邮箱"</span>)</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">this</span>.password = [</span><br><span class="line">      <span class="keyword">new</span> Rule(</span><br><span class="line">        <span class="string">"matches"</span>,</span><br><span class="line">        <span class="string">"密码长度必须在6~22位之间，包含字符、数字和 _ "</span>,</span><br><span class="line">        /^[A-Za-z0-9_*&amp;$#@]&#123;6,22&#125;$/</span><br><span class="line">      )</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">this</span>.confirm_password = <span class="keyword">new</span> Rule(<span class="string">"isNotEmpty"</span>, <span class="string">"确认密码不可为空"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//   自定义规则函数</span></span><br><span class="line">  validateConfirmPassword(data) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!data.body.password || !data.body.confirm_password) &#123;</span><br><span class="line">      <span class="keyword">return</span> [<span class="literal">false</span>, <span class="string">"两次输入的密码不一致，请重新输入"</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> ok = data.body.password === data.body.confirm_password;</span><br><span class="line">    <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">      <span class="keyword">return</span> ok;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> [<span class="literal">false</span>, <span class="string">"两次输入的密码不一致，请重新输入"</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PositiveIdValidator</span> <span class="keyword">extends</span> <span class="title">LinValidator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.id = <span class="keyword">new</span> Rule(<span class="string">"isInt"</span>, <span class="string">"id必须为正整数"</span>, &#123;</span><br><span class="line">      min: <span class="number">1</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpdateUserInfoValidator</span> <span class="keyword">extends</span> <span class="title">PositiveIdValidator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.group_id = <span class="keyword">new</span> Rule(<span class="string">"isInt"</span>, <span class="string">"分组id必须是正整数"</span>, &#123;</span><br><span class="line">      min: <span class="number">1</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">this</span>.email = <span class="keyword">new</span> Rule(<span class="string">"isEmail"</span>, <span class="string">"电子邮箱不符合规范，请输入正确的邮箱"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 别名，会对uid参数值做校验</span></span><br><span class="line"><span class="keyword">const</span> v = <span class="keyword">await</span> <span class="keyword">new</span> PositiveIdValidator().validate(ctx, &#123;</span><br><span class="line">  id: <span class="string">"uid"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>代码组织结构图如下：<br><img style="width:100%" src="https://i.loli.net/2019/09/02/83DoHCrNsM4fBTJ.jpg"></p><p>具体的源码如下，并作详细的源码讲解：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> validator = <span class="built_in">require</span>(<span class="string">"validator"</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="keyword">get</span>, <span class="keyword">set</span>, cloneDeep &#125; = require("lodash");</span><br></pre></td></tr></table></figure><p>lodash中get函数使用时需要的参数：<br>object(Object): 要检索的对象。<br>path (Array|string): 要获取属性的路径。<br>[defaultValue] (*): 如果解析值是 undefined ，这值会被返回</p><p>cloneDeep是lodash提供的深拷贝方法，如果想具体了解深拷贝，可以跳转这里：</p><ul><li><a href="#cloneDeep">cloneDeep</a></li></ul><p>以下的_findMember函数，是找出obj对象上(包括原型链)所有的以prefix开头|是type的实例|满足filter条件的属性。<br>举个栗子：<br>如果这样调用_findMembers(obj,{prefix=”class”,type=”Student”,filter=”name”),则代表要保留obj实例自身和原型链上以”class”开头、或是Student实例、或是name的全部属性。</p><p>_getAllParams是一次获取ctx上的参数和属性，包括body、query、params、header</p><p>_findAllRulesArr是获取class中所有是Rule实例的属性,方便之后的校验</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _findMembers = <span class="function">(<span class="params">obj, &#123; prefix, type, filter &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_find</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.__proto__ === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> names = <span class="built_in">Reflect</span>.ownKeys(obj);</span><br><span class="line">    names = names.filter(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> _needKeep(name);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> [...names, ..._find(obj.__proto__)];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_needKeep</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (prefix) &#123;</span><br><span class="line">      <span class="keyword">if</span> (name.startsWith(prefix)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (type) &#123;</span><br><span class="line">      <span class="keyword">if</span> (obj[name] <span class="keyword">instanceof</span> type) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (filter) &#123;</span><br><span class="line">      <span class="keyword">if</span> (filter(name)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> _find(obj);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">_getAllParams(ctx) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    body: ctx.request.body,</span><br><span class="line">    query: ctx.request.query,</span><br><span class="line">    path: ctx.params,</span><br><span class="line">    header: ctx.request.header</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取class中所有是Rule实例的属性,方便之后的校验</span></span><br><span class="line">_findAllRulesArr(key) &#123;</span><br><span class="line">  <span class="comment">// 这里是什么意思,不太明白</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/validate([A-Z])\w+/g</span>.test(key)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>[key] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>[key].forEach(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!(value <span class="keyword">instanceof</span> Rule)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"验证数组必须全部为Rule类型"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义自定义异常,与后端约定返回字段，msg为提示消息，code为自定义错误码，status为http状态码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpError</span> <span class="keyword">extends</span> <span class="title">Error</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(msg = "服务器异常", code = 10000, status = 500) &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="built_in">Object</span>.assign(<span class="keyword">this</span>, &#123;</span><br><span class="line">      msg,</span><br><span class="line">      code,</span><br><span class="line">      status</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParamsError</span> <span class="keyword">extends</span> <span class="title">HttpError</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(msg, code) &#123;</span><br><span class="line">    <span class="keyword">this</span>.msg = msg || <span class="string">"参数错误"</span>;</span><br><span class="line">    <span class="keyword">this</span>.code = code || <span class="number">10001</span>;</span><br><span class="line">    <span class="keyword">this</span>.status = <span class="number">400</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyValidator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.data = &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.parsed = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端调用的形式是const v = await new PositiveIdValidator().validate(ctx, {id: “uid”});</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">async</span> validate(ctx, alias = &#123;&#125;) &#123;</span><br><span class="line">    <span class="keyword">this</span>.alias = alias;</span><br><span class="line">    <span class="keyword">let</span> params = <span class="keyword">this</span>._getAllParams(ctx);</span><br><span class="line">    <span class="keyword">this</span>.data = cloneDeep(params);</span><br><span class="line">    <span class="keyword">this</span>.parsed = cloneDeep(params);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> members = _findMembers(<span class="keyword">this</span>, &#123;</span><br><span class="line">      filter: <span class="keyword">this</span>._findAllRulesArr.bind(<span class="keyword">this</span>)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> errorMsg = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> members) &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="keyword">this</span>._check(key, alias);</span><br><span class="line">      <span class="keyword">if</span> (!result.success) &#123;</span><br><span class="line">        errorMsg.push(result.msg);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (errorMsg.length !== <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ParamsError(errorMsg);</span><br><span class="line">    &#125;</span><br><span class="line">    ctx.v = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 验证每个字段是否通过rules数组</span></span><br><span class="line">  <span class="keyword">async</span> _check(key, alias = &#123;&#125;) &#123;</span><br><span class="line">    <span class="keyword">let</span> isFunc = <span class="keyword">typeof</span> <span class="keyword">this</span>[key] === <span class="string">"function"</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 如果是函数,则是采用自定义校验形式</span></span><br><span class="line">    <span class="keyword">let</span> result;</span><br><span class="line">    <span class="keyword">if</span> (isFunc) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="keyword">this</span>[key](<span class="keyword">this</span>.data);</span><br><span class="line">        result = <span class="keyword">new</span> RuleResult(<span class="literal">true</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        result = <span class="keyword">new</span> RuleResult(</span><br><span class="line">          <span class="literal">false</span>,</span><br><span class="line">          error.msg || error.message || <span class="string">"参数错误"</span></span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//如果不是函数,则使用rules数组中的rule分别校验字段是否满足条件</span></span><br><span class="line">      <span class="keyword">const</span> rules = <span class="keyword">this</span>[key];</span><br><span class="line">      <span class="keyword">const</span> ruleField = <span class="keyword">new</span> RuleField(rules);</span><br><span class="line">      <span class="comment">// 如果存在别名,则进行替换</span></span><br><span class="line">      key = alias[key] ? alias[key] : key;</span><br><span class="line">      <span class="keyword">const</span> param = <span class="keyword">this</span>._findParams(key);</span><br><span class="line">      result = ruleField.validate(param.value);</span><br><span class="line">      <span class="keyword">if</span> (result.pass) &#123;</span><br><span class="line">        <span class="comment">// 如果参数路径不存在，往往是因为用户传了空值，而又设置了默认值</span></span><br><span class="line">        <span class="keyword">if</span> (param.path.length === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">set</span>(this.parsed, ["default", key], result.legalValue);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          <span class="keyword">set</span>(this.parsed, param.path, result.legalValue);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!result.pass) &#123;</span><br><span class="line">      <span class="keyword">const</span> msg = <span class="string">`<span class="subst">$&#123;isCustomFunc ? <span class="string">""</span> : key&#125;</span><span class="subst">$&#123;result.msg&#125;</span>`</span>;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        msg: msg,</span><br><span class="line">        success: <span class="literal">false</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">"ok"</span>,</span><br><span class="line">      success: <span class="literal">true</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 使用lodash中的get函数,第二个参数是路径,可以采用a.b.c的形式,也可以采用['a','b','c']的形式</span></span><br><span class="line">  _findParams(key) &#123;</span><br><span class="line">    <span class="keyword">let</span> value;</span><br><span class="line">    value = <span class="keyword">get</span>(this.data, ["query", key]);</span><br><span class="line">    if (value) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        value,</span><br><span class="line">        path: [<span class="string">"query"</span>, key]</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    value = <span class="keyword">get</span>(this.data, ["body", key]);</span><br><span class="line">    if (value) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        value,</span><br><span class="line">        path: [<span class="string">"body"</span>, key]</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    value = <span class="keyword">get</span>(this.data, ["path", key]);</span><br><span class="line">    if (value) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        value,</span><br><span class="line">        path: [<span class="string">"path"</span>, key]</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    value = <span class="keyword">get</span>(this.data, ["header", key]);</span><br><span class="line">    if (value) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        value,</span><br><span class="line">        path: [<span class="string">"header"</span>, key]</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      value: <span class="literal">null</span>,</span><br><span class="line">      path: []</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对每个字段中一个rule校验规则进行校验的结果类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RuleResult</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(pass, msg: "") &#123;</span><br><span class="line">    <span class="built_in">Object</span>.assign(<span class="keyword">this</span>, &#123;</span><br><span class="line">      pass,</span><br><span class="line">      msg</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对每个字段全部rule校验规则进行校验的结果类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RuleFieldResult</span> <span class="keyword">extends</span> <span class="title">RuleResult</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(pass, msg, legalValue = null) &#123;</span><br><span class="line">    <span class="keyword">super</span>(pass, msg);</span><br><span class="line">    <span class="keyword">this</span>.legalValue = legalValue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Rule校验类<br>调用形式: this.group_id = new Rule(“isInt”, “分组id必须是整数，且大于0”, {min: 1});<br>params参数可以为空<br>针对单条rule进行校验</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rule</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, msg, ...params) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.assign(<span class="keyword">this</span>, &#123;</span><br><span class="line">      name,</span><br><span class="line">      msg,</span><br><span class="line">      params</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  validate(field) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.name === <span class="string">"isOptional"</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> RuleResult(<span class="literal">true</span>); <span class="comment">//pass置为true,表示此条规则验证通过</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// validate库的使用,内置了大量的校验函数</span></span><br><span class="line">    <span class="keyword">if</span> (!validator[<span class="keyword">this</span>.name](field + <span class="string">""</span>, ...this.params)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> RuleResult(<span class="literal">false</span>, <span class="keyword">this</span>.msg || <span class="keyword">this</span>.message || <span class="string">"参数错误"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RuleResult(<span class="literal">true</span>, <span class="string">""</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对字段所有的rule进行校验</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RuleField</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(rules) &#123;</span><br><span class="line">    <span class="keyword">this</span>.rules = rules;</span><br><span class="line">  &#125;</span><br><span class="line">  validate(field) &#123;</span><br><span class="line">    <span class="comment">// 如果待校验的字段为空,则检查是否设置了可以为空,或有默认值</span></span><br><span class="line">    <span class="keyword">if</span> (field == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> allowEmpty = <span class="keyword">this</span>._allowEmpty();</span><br><span class="line">      <span class="keyword">const</span> defaultValue = <span class="keyword">this</span>._hasDefault();</span><br><span class="line">      <span class="keyword">if</span> (allowEmpty) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RuleFieldResult(<span class="literal">true</span>, <span class="string">""</span>, defaultValue);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RuleFieldResult(<span class="literal">false</span>, <span class="string">"字段是必填参数"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> fieldResult = <span class="keyword">new</span> RuleFieldResult(<span class="literal">false</span>); <span class="comment">//先设置初始状态为false,此字段验证没通过</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> rule <span class="keyword">of</span> <span class="keyword">this</span>.rules) &#123;</span><br><span class="line">      <span class="keyword">let</span> result = rule.validate(field);</span><br><span class="line">      <span class="keyword">if</span> (!result.pass) &#123;</span><br><span class="line">        fieldResult.msg = result.msg;</span><br><span class="line">        fieldResult.legalValue = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 一旦一条校验规则不通过，则立即终止这个字段的验证</span></span><br><span class="line">        <span class="keyword">return</span> filedResult;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RuleFieldResult(<span class="literal">true</span>, <span class="string">""</span>, <span class="keyword">this</span>._convert(field));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果字段设置形式为 isInt\isFloat\isBoolean 的形式,则要进行字段格式转化</span></span><br><span class="line">  <span class="comment">// 如 this.id = new Rule("isInt", "必须为整数");</span></span><br><span class="line">  _convert(value) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> rule <span class="keyword">of</span> <span class="keyword">this</span>.rules) &#123;</span><br><span class="line">      <span class="keyword">if</span> (rule.name == <span class="string">"isInt"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">parseInt</span>(value);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (rule.name == <span class="string">"isFloat"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">parseFloat</span>(value);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (rule.name == <span class="string">"isBoolean"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">  _allowEmpty() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> rule <span class="keyword">of</span> <span class="keyword">this</span>.rules) &#123;</span><br><span class="line">      <span class="keyword">if</span> (rule.name == <span class="string">"isOptional"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  _hasDefault() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> rule <span class="keyword">of</span> <span class="keyword">this</span>.rules) &#123;</span><br><span class="line">      <span class="keyword">const</span> defaultValue = rule.params[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">if</span> (rule.name == <span class="string">"isOptional"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> defaultValue;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后将Rule、MyValidator分别导出，引入项目中即可使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  Rule,</span><br><span class="line">  MyValidator</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="cloneDeep"><a href="#cloneDeep" class="headerlink" title="cloneDeep"></a><a id="cloneDeep">cloneDeep</a></h3><p>在了解深拷贝之前，首先需要了解一下深拷贝与浅拷贝的区别：</p><p>1.浅拷贝： 创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以如果其中一个对象改变了这个地址，就会影响到另一个对象。<br>2.深拷贝： 将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,且修改新对象不会影响原对象</p><p>当然，要想实现深拷贝，则需要将对象中的每个属性完全拷贝到新的对象中。而往往项目中我们常使用Object.assign()实现的复制，要注意，这里的Object.assign()只是一个浅复制的过程，因为对象只会被克隆最外部的一层,至于更深层的对象,依然是通过引用指向同一块堆内存。可见，对于结构层次很深的对象，这种方法并不是好的解决方案。</p><p>下面由浅入深，依次来完善这个深拷贝函数：</p><ul><li><strong>JSON.parse方法</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newObj = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(oldObj));</span><br></pre></td></tr></table></figure></li></ul><p>这种方法其实是存在很多坑的，比如：</p><ol><li>无法实现对函数 、RegExp等特殊对象的克隆</li><li>抛弃对象的constructor,所有的构造函数会指向Object</li><li>对象有循环引用,会报错</li></ol><p>实现一个完整的深克隆是由许多坑要踩的,npm上一些库的实现也不够完整,在生产环境中最好用<strong>lodash</strong>的深克隆实现.</p><ul><li><strong>递归调用，完成各层次属性的拷贝</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> cloneTarget = &#123;&#125;; <span class="comment">//这里有个问题，如何是拷贝数组呢？</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            cloneTarget[key] = clone(target[key]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cloneTarget;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p><strong>修复数组问题</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> cloneTarget = <span class="built_in">Array</span>.isArray(target) ? [] : &#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            cloneTarget[key] = clone(target[key]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cloneTarget;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>解决循环引用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">检查map中有无克隆过的对象</span><br><span class="line">有 - 直接返回</span><br><span class="line">没有 - 将当前对象作为key，克隆对象作为value进行存储</span><br><span class="line">继续克隆</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">target, map = new Map(</span>)) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> cloneTarget = <span class="built_in">Array</span>.isArray(target) ? [] : &#123;&#125;;</span><br><span class="line">        <span class="keyword">if</span> (map.get(target)) &#123;</span><br><span class="line">            <span class="keyword">return</span> map.get(target);</span><br><span class="line">        &#125;</span><br><span class="line">        map.set(target, cloneTarget);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            cloneTarget[key] = clone(target[key], map);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cloneTarget;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>性能优化</strong></li></ul><p>使用weakMap代替map</p><p>我们默认创建一个对象：const obj = {}，就默认创建了一个强引用的对象，我们只有手动将obj = null，它才会被垃圾回收机制进行回收，如果是弱引用对象，垃圾回收机制会自动帮我们回收。如果我们要拷贝的对象非常庞大时，使用Map会对内存造成非常大的额外消耗，而且我们需要手动清除Map的属性才能释放这块内存，而WeakMap会帮我们巧妙化解这个问题。</p><ul><li><strong>考虑其他数据类型</strong></li></ul><p>……</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>iframe和定时器的思考</title>
      <link href="/2019/07/25/iframe%E5%92%8C%E5%AE%9A%E6%97%B6%E5%99%A8%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2019/07/25/iframe%E5%92%8C%E5%AE%9A%E6%97%B6%E5%99%A8%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h4 id="关于-iframe-的思考"><a href="#关于-iframe-的思考" class="headerlink" title="关于 iframe 的思考"></a>关于 iframe 的思考</h4><p><strong>好处</strong></p><ol><li>方便插入第三方内容，但是由于发送了额外的 http 请求，会一定程度上影响整体页面加载，例如各种广告</li></ol><ul><li>iframe 能够原封不动的把嵌入的网页展现出来，如果有多个网页引用 iframe，那么你只需要修改 iframe 的内容，就可以实现调用的每一个页面内容的更改，方便快捷。</li></ul><!-- more --><ul><li>网页如果为了统一风格，头部和版本都是一样的，就可以写成一个页面，用 iframe 来嵌套，可以增加代码的可重用。但是随着现在前端使用的 MVVM 框架越来越流行，组件化开发方式也成为了大势所趋，越来越多的项目采用组件化编写的方式进行开发和维护，也逐渐抛弃了原有的 iframe。如果遇到加载缓慢的第三方内容如图标和广告，这些问题还是可以由 iframe 来解决。</li></ul><ol start="2"><li>缓存网页，主要是在网络不好的时候</li><li>用于 postMessage 通信</li><li>安全沙箱，避免污染环境</li><li>流量作弊，嵌入一个不展现的 iframe 页面，反作弊很难发现</li></ol><p><strong>缺点</strong></p><ol><li>页面样式调试麻烦，出现多个滚动条；</li><li>浏览器的后退按钮失效；</li><li>过多会增加服务器的 HTTP 请求；</li><li>小型的移动设备无法完全显示框架；</li><li>产生多个页面，不易管理；</li><li>不容易打印；</li><li>代码复杂，无法被一些搜索引擎解读。</li></ol><p><strong>总结</strong><br>1：iframe 会阻塞主页面的 Onload 事件；2：iframe 和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。 iframe，目前是一个过时的技术，不建议在项目中使用。</p><blockquote><p>运维性网站或继承性开发的网站，可以使用 iframe;<br>销售内，官网、展示性网站等建议不使用 iframe;<br>标准的网页设计是不使用 iframe 的。</p></blockquote><p><strong>iframe 与父组件之间的传值</strong></p><ul><li>主页面传值到 iframe：<br>let iFrame = document.getElementById(‘myframe’)<br>iFrame.onload = function(){<br>iFrame.contentWindow.postMessage(‘MessageFromIndex1’,’*‘);<br>}</li><li>iframe 接收传值：<br>function receiveMessageFromIndex ( event ) {<br>console.log( ‘receiveMessageFromIndex’, event )<br>}<br>window.addEventListener(“message”, receiveMessageFromIndex, false);</li><li>iframe 再向主页面传值：<br>parent.postMessage( {msg: ‘MessageFromIframePage’}, ‘*‘);</li><li>主页面接收传值：<br>function receiveMessageFromIframePage (event) {<br>console.log(‘receiveMessageFromIframePage’, event)<br>}<br>window.addEventListener(“message”, receiveMessageFromIframePage, false);</li></ul><!-- 目前在项目开发中，为了修改老旧的项目（html 页面和 jquery 操作 dom 的形式），融入新 cms 的表单（vue 组件式开发），暂且使用了 iframe 嵌入。同时也遇到了许多问题：1. iframe 的嵌入存在跨域的问题，如果子域与主域不是同域，则会产生跨域的问题。因此会产生调试不方便的问题。可以采用 fiddler 代理的方案进行本地调试，将在线的 js 代理到本地的 js，本地 localhost 调试的 iframe 静态页面映射到线上域名，实现预期的效果之后，可替换线上的文件。2. 开始在调整 iframe 时，会存在 iframe 的位置摆放问题。起初是采用 table 形式嵌入 iframe，动态调整参数可以解决   虽然能解决 iframe 摆放位置的问题，但是也存在新的问题：   表单数据时而可以点击，时而不能点击，后来去掉了 table 布局，删除了 iframe 中多余的部分，改为纯净的页面，直接通过 iframe 标签嵌入可以解决此问题。3. iframe 的高度动态调整方案：- 创建了 setInterval 定时器，在页面内容没有变化时，还是在不断地执行定时器，此处会消耗页面的性能；- 高度变化不连贯，存在延迟的现象；- 高度逐渐减小时，会出现卡顿变化的现象，一点点地在减小，不知道具体的原因； --><h4 id="定时器性能"><a href="#定时器性能" class="headerlink" title="定时器性能"></a>定时器性能</h4><p>探讨 setInterval 和 setTimeout 的解决方案：<br>无论是 setTimeout 还是 setInterval 都逃不过执行延迟，跳帧的问题。为什么呢？原因是事件环中 JS Stack 过于繁忙的原因，当排队轮到定时器的 callback 执行的时候，早已超时。还有一个原因是定时器本身的 callback 操作过于繁重，甚至有 async 的操作，以至于无法预估运行时间，从而设定时间。因此，在设置事件为 500ms 时，不一定是 500ms 时恰好执行。</p><p><strong>需要使用到定时器的场景：</strong><br>1、轮询：当要时刻监视页面内容高度变化时，可以采用轮询方式，实时查询页面高度，可实现动态调整<br>2、轮播：鼠标不在轮播图上时，创建定时器进行轮播，鼠标移开时，销毁定时器<br>3、时钟：制作动态时钟时，需要使用定时器<br>4、函数防抖：延迟函数的执行，减少执行的次数，从而提高性能</p><p><strong>创建和销毁定时器问题：</strong><br>在 vue 或 react 项目开发中，有时会在页面初始化时创建定时器，记得在页面销毁时删除定时器，防止内存泄漏；</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>koa+nuxt基础</title>
      <link href="/2019/06/10/koa+nuxt%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/06/10/koa+nuxt%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h4 id="koa"><a href="#koa" class="headerlink" title="koa"></a>koa</h4><h5 id="一、开始"><a href="#一、开始" class="headerlink" title="一、开始"></a>一、开始</h5><!-- more --><p><strong>async/await 使用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSyncTime</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> startTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> endTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        <span class="keyword">let</span> data = endTime - startTime;</span><br><span class="line">        resolve(data);</span><br><span class="line">      &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getSyncData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> time = <span class="keyword">await</span> getSyncTime();</span><br><span class="line">  <span class="keyword">let</span> data = <span class="string">`endTime - startTime = <span class="subst">$&#123;time&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data = <span class="keyword">await</span> getSyncData();</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getData();</span><br></pre></td></tr></table></figure><p><strong>中间件的使用（async 中间件只能在 koa v2 中使用）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ./middleware/logger-async.js */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ctx.method, ctx.header.host + ctx.url);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    log(ctx);</span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">"koa"</span>); <span class="comment">// koa v2</span></span><br><span class="line"><span class="keyword">const</span> loggerAsync = <span class="built_in">require</span>(<span class="string">"./middleware/logger-async"</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">app.use(loggerAsync());</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">  ctx.body = <span class="string">"hello world!"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"the server is starting at port 3000"</span>);</span><br></pre></td></tr></table></figure><h5 id="二、路由"><a href="#二、路由" class="headerlink" title="二、路由"></a>二、路由</h5><p><strong>koa-router 路由的使用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">"koa"</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">"koa-router"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子路由1</span></span><br><span class="line"><span class="keyword">let</span> home = <span class="keyword">new</span> Router();</span><br><span class="line">home.get(<span class="string">"/"</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> html = <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;&lt;a href="/page/helloworld"&gt;/page/helloworld&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;&lt;a href="/page/404"&gt;/page/404&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">      &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line">  ctx.body = html;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子路由2</span></span><br><span class="line"><span class="keyword">let</span> page = <span class="keyword">new</span> Router();</span><br><span class="line">page</span><br><span class="line">  .get(<span class="string">"/404"</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">    ctx.body = <span class="string">"404 page!"</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .get(<span class="string">"/helloworld"</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">    ctx.body = <span class="string">"helloworld page!"</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装载所有子路由</span></span><br><span class="line"><span class="keyword">let</span> router = <span class="keyword">new</span> Router();</span><br><span class="line">router.use(<span class="string">"/"</span>, home.routes(), home.allowedMethods());</span><br><span class="line">router.use(<span class="string">"/page"</span>, page.routes(), page.allowedMethods());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载路由中间件</span></span><br><span class="line">app.use(router.routes()).use(router.allowedMethods());</span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"[demo] route-use-middleware is starting at port 3000"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="三、请求数据"><a href="#三、请求数据" class="headerlink" title="三、请求数据"></a>三、请求数据</h5><p><strong>请求数据的获取</strong> 1.是从上下文中直接获取<br>请求对象 ctx.query，返回如 { a:1, b:2 }<br>请求字符串 ctx.querystring，返回如 a=1&amp;b=2 2.是从上下文的 request 对象中获取<br>请求对象 ctx.request.query，返回如 { a:1, b:2 }<br>请求字符串 ctx.request.querystring，返回如 a=1&amp;b=2</p><p><strong><em>get</em></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> url = ctx.url;</span><br><span class="line">  <span class="comment">// 从上下文的request对象中获取</span></span><br><span class="line">  <span class="keyword">let</span> request = ctx.request;</span><br><span class="line">  <span class="keyword">let</span> req_query = request.query;</span><br><span class="line">  <span class="keyword">let</span> req_querystring = request.querystring;</span><br><span class="line">  <span class="comment">// 从上下文中直接获取</span></span><br><span class="line">  <span class="keyword">let</span> ctx_query = ctx.query;</span><br><span class="line">  <span class="keyword">let</span> ctx_querystring = ctx.querystring;</span><br><span class="line"></span><br><span class="line">  ctx.body = &#123;</span><br><span class="line">    url,</span><br><span class="line">    req_query,</span><br><span class="line">    req_querystring,</span><br><span class="line">    ctx_query,</span><br><span class="line">    ctx_querystring</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong><em>post</em></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">"koa"</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (ctx.url === <span class="string">"/"</span> &amp;&amp; ctx.method === <span class="string">"GET"</span>) &#123;</span><br><span class="line">    <span class="comment">// 当GET请求时候返回表单页面</span></span><br><span class="line">    <span class="keyword">let</span> html = <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;h1&gt;koa2 request post demo&lt;/h1&gt;</span></span><br><span class="line"><span class="string">      &lt;form method="POST" action="/"&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;userName&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;input name="userName" /&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;nickName&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;input name="nickName" /&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;email&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;input name="email" /&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="string">        &lt;button type="submit"&gt;submit&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;/form&gt;</span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line">    ctx.body = html;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ctx.url === <span class="string">"/"</span> &amp;&amp; ctx.method === <span class="string">"POST"</span>) &#123;</span><br><span class="line">    <span class="comment">// 当POST请求的时候，解析POST表单里的数据，并显示出来</span></span><br><span class="line">    <span class="keyword">let</span> postData = <span class="keyword">await</span> parsePostData(ctx);</span><br><span class="line">    ctx.body = postData;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 其他请求显示404</span></span><br><span class="line">    ctx.body = <span class="string">"&lt;h1&gt;404！！！ o(╯□╰)o&lt;/h1&gt;"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析上下文里node原生请求的POST参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parsePostData</span>(<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> postdata = <span class="string">""</span>;</span><br><span class="line">      ctx.req.addListener(<span class="string">"data"</span>, data =&gt; &#123;</span><br><span class="line">        postdata += data;</span><br><span class="line">      &#125;);</span><br><span class="line">      ctx.req.addListener(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> parseData = parseQueryStr(postdata);</span><br><span class="line">        resolve(parseData);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将POST请求参数字符串解析成JSON</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseQueryStr</span>(<span class="params">queryStr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> queryData = &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> queryStrList = queryStr.split(<span class="string">"&amp;"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(queryStrList);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> [index, queryStr] <span class="keyword">of</span> queryStrList.entries()) &#123;</span><br><span class="line">    <span class="keyword">let</span> itemList = queryStr.split(<span class="string">"="</span>);</span><br><span class="line">    queryData[itemList[<span class="number">0</span>]] = <span class="built_in">decodeURIComponent</span>(itemList[<span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> queryData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"[demo] request post is starting at port 3000"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong><em>koa-bodyparser 中间件</em></strong><br>对于 POST 请求的处理，koa-bodyparser 中间件可以把 koa2 上下文的 formData 数据解析到 ctx.request.body 中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">"koa"</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">"koa-bodyparser"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用ctx.body解析中间件</span></span><br><span class="line">app.use(bodyParser());</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (ctx.url === <span class="string">"/"</span> &amp;&amp; ctx.method === <span class="string">"GET"</span>) &#123;</span><br><span class="line">    <span class="comment">// 当GET请求时候返回表单页面</span></span><br><span class="line">    <span class="keyword">let</span> html = <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;h1&gt;koa2 request post demo&lt;/h1&gt;</span></span><br><span class="line"><span class="string">      &lt;form method="POST" action="/"&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;userName&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;input name="userName" /&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;nickName&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;input name="nickName" /&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;email&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;input name="email" /&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="string">        &lt;button type="submit"&gt;submit&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;/form&gt;</span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line">    ctx.body = html;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ctx.url === <span class="string">"/"</span> &amp;&amp; ctx.method === <span class="string">"POST"</span>) &#123;</span><br><span class="line">    <span class="comment">// 当POST请求的时候，解析POST表单里的数据，并显示出来</span></span><br><span class="line">    <span class="keyword">let</span> postData = ctx.request.body;</span><br><span class="line">    ctx.body = postData;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 其他请求显示404</span></span><br><span class="line">    ctx.body = <span class="string">"&lt;h1&gt;404！！！ o(╯□╰)o&lt;/h1&gt;"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"[demo] request post is starting at port 3000"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="四、静态资源加载"><a href="#四、静态资源加载" class="headerlink" title="四、静态资源加载"></a>四、静态资源加载</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">"koa"</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> = <span class="built_in">require</span>(<span class="string">"koa-static"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态资源目录对于相对入口文件index.js的路径</span></span><br><span class="line"><span class="keyword">const</span> staticPath = <span class="string">"./static"</span>;</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">static</span>(path.join(__dirname, staticPath)));</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">"hello world"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"[demo] static-use-middleware is starting at port 3000"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="五、cookie-和-session"><a href="#五、cookie-和-session" class="headerlink" title="五、cookie 和 session"></a>五、cookie 和 session</h5><p><strong>cookie</strong><br>koa 提供了从上下文直接读取、写入 cookie 的方法<br>ctx.cookies.get(name, [options]) 读取上下文请求中的 cookie<br>ctx.cookies.set(name, value, [options]) 在上下文中写入 cookie</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">"koa"</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (ctx.url === <span class="string">"/index"</span>) &#123;</span><br><span class="line">    ctx.cookies.set(<span class="string">"cid"</span>, <span class="string">"hello world"</span>, &#123;</span><br><span class="line">      domain: <span class="string">"localhost"</span>, <span class="comment">// 写cookie所在的域名</span></span><br><span class="line">      path: <span class="string">"/index"</span>, <span class="comment">// 写cookie所在的路径</span></span><br><span class="line">      maxAge: <span class="number">10</span> * <span class="number">60</span> * <span class="number">1000</span>, <span class="comment">// cookie有效时长</span></span><br><span class="line">      expires: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2017-02-15"</span>), <span class="comment">// cookie失效时间</span></span><br><span class="line">      httpOnly: <span class="literal">false</span>, <span class="comment">// 是否只用于http请求中获取</span></span><br><span class="line">      overwrite: <span class="literal">false</span> <span class="comment">// 是否允许重写</span></span><br><span class="line">    &#125;);</span><br><span class="line">    ctx.body = <span class="string">"cookie is ok"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ctx.body = <span class="string">"hello world"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"[demo] cookie is starting at port 3000"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>session</strong><br>koa2 原生功能只提供了 cookie 的操作，但是没有提供 session 操作。session 就只用自己实现或者通过第三方中间件实现。在 koa2 中实现 session 的方案有一下几种</p><p>如果 session 数据量很小，可以直接存在内存中<br>如果 session 数据量很大，则需要存储介质存放 session 数据</p><p>将 session 存放在 MySQL 数据库中<br>需要用到中间件<br>koa-session-minimal 适用于 koa2 的 session 中间件，提供存储介质的读写接口 。<br>koa-mysql-session 为 koa-session-minimal 中间件提供 MySQL 数据库的 session 数据读写操作。<br>将 sessionId 和对于的数据存到数据库<br>将数据库的存储的 sessionId 存到页面的 cookie 中<br>根据 cookie 的 sessionId 去获取对于的 session 信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">"koa"</span>);</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">"koa-session-minimal"</span>);</span><br><span class="line"><span class="keyword">const</span> MysqlSession = <span class="built_in">require</span>(<span class="string">"koa-mysql-session"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置存储session信息的mysql</span></span><br><span class="line"><span class="keyword">let</span> store = <span class="keyword">new</span> MysqlSession(&#123;</span><br><span class="line">  user: <span class="string">"root"</span>,</span><br><span class="line">  password: <span class="string">"abc123"</span>,</span><br><span class="line">  database: <span class="string">"koa_demo"</span>,</span><br><span class="line">  host: <span class="string">"127.0.0.1"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存放sessionId的cookie配置</span></span><br><span class="line"><span class="keyword">let</span> cookie = &#123;</span><br><span class="line">  maxAge: <span class="string">""</span>, <span class="comment">// cookie有效时长</span></span><br><span class="line">  expires: <span class="string">""</span>, <span class="comment">// cookie失效时间</span></span><br><span class="line">  path: <span class="string">""</span>, <span class="comment">// 写cookie所在的路径</span></span><br><span class="line">  domain: <span class="string">""</span>, <span class="comment">// 写cookie所在的域名</span></span><br><span class="line">  httpOnly: <span class="string">""</span>, <span class="comment">// 是否只用于http请求中获取</span></span><br><span class="line">  overwrite: <span class="string">""</span>, <span class="comment">// 是否允许重写</span></span><br><span class="line">  secure: <span class="string">""</span>,</span><br><span class="line">  sameSite: <span class="string">""</span>,</span><br><span class="line">  signed: <span class="string">""</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.use(</span><br><span class="line">  session(&#123;</span><br><span class="line">    key: <span class="string">"SESSION_ID"</span>,</span><br><span class="line">    store: store,</span><br><span class="line">    cookie: cookie</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="comment">// 设置session</span></span><br><span class="line">  <span class="keyword">if</span> (ctx.url === <span class="string">"/set"</span>) &#123;</span><br><span class="line">    ctx.session = &#123;</span><br><span class="line">      user_id: <span class="built_in">Math</span>.random()</span><br><span class="line">        .toString(<span class="number">36</span>)</span><br><span class="line">        .substr(<span class="number">2</span>),</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">    ctx.body = ctx.session;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ctx.url === <span class="string">"/"</span>) &#123;</span><br><span class="line">    <span class="comment">// 读取session信息</span></span><br><span class="line">    ctx.session.count = ctx.session.count + <span class="number">1</span>;</span><br><span class="line">    ctx.body = ctx.session;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"[demo] session is starting at port 3000"</span>);</span><br></pre></td></tr></table></figure><h5 id="六、模板引擎"><a href="#六、模板引擎" class="headerlink" title="六、模板引擎"></a>六、模板引擎</h5><p><strong>安装 koa 模板使用中间件</strong><br>npm install –save koa-views<br><strong>安装 ejs 模板引擎</strong><br>npm install –save ejs</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">"koa"</span>);</span><br><span class="line"><span class="keyword">const</span> views = <span class="built_in">require</span>(<span class="string">"koa-views"</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载模板引擎</span></span><br><span class="line">app.use(</span><br><span class="line">  views(path.join(__dirname, <span class="string">"./view"</span>), &#123;</span><br><span class="line">    extension: <span class="string">"ejs"</span></span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> title = <span class="string">"hello koa2"</span>;</span><br><span class="line">  <span class="keyword">await</span> ctx.render(<span class="string">"index"</span>, &#123;</span><br><span class="line">    title</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h5 id="七、文件上传"><a href="#七、文件上传" class="headerlink" title="七、文件上传"></a>七、文件上传</h5><p><strong>busboy 模块</strong><br>npm install –save busboy</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inspect = <span class="built_in">require</span>(<span class="string">"util"</span>).inspect;</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">const</span> Busboy = <span class="built_in">require</span>(<span class="string">"busboy"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// req 为node原生请求</span></span><br><span class="line"><span class="keyword">const</span> busboy = <span class="keyword">new</span> Busboy(&#123; <span class="attr">headers</span>: req.headers &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听文件解析事件</span></span><br><span class="line">busboy.on(<span class="string">"file"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">fieldname, file, filename, encoding, mimetype</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`File [<span class="subst">$&#123;fieldname&#125;</span>]: filename: <span class="subst">$&#123;filename&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 文件保存到特定路径</span></span><br><span class="line">  file.pipe(fs.createWriteStream(<span class="string">"./upload"</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开始解析文件流</span></span><br><span class="line">  file.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`File [<span class="subst">$&#123;fieldname&#125;</span>] got <span class="subst">$&#123;data.length&#125;</span> bytes`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 解析文件结束</span></span><br><span class="line">  file.on(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`File [<span class="subst">$&#123;fieldname&#125;</span>] Finished`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听请求中的字段</span></span><br><span class="line">busboy.on(<span class="string">"field"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">fieldname, val, fieldnameTruncated, valTruncated</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Field [<span class="subst">$&#123;fieldname&#125;</span>]: value: <span class="subst">$&#123;inspect(val)&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听结束事件</span></span><br><span class="line">busboy.on(<span class="string">"finish"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Done parsing form!"</span>);</span><br><span class="line">  res.writeHead(<span class="number">303</span>, &#123; <span class="attr">Connection</span>: <span class="string">"close"</span>, <span class="attr">Location</span>: <span class="string">"/"</span> &#125;);</span><br><span class="line">  res.end();</span><br><span class="line">&#125;);</span><br><span class="line">req.pipe(busboy);</span><br></pre></td></tr></table></figure><p><strong>上传文件简单实现</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inspect = <span class="built_in">require</span>(<span class="string">"util"</span>).inspect;</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">"os"</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">const</span> Busboy = <span class="built_in">require</span>(<span class="string">"busboy"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同步创建文件目录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;string&#125;</span> </span>dirname 目录绝对地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span>        </span>创建目录结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mkdirsSync</span>(<span class="params">dirname</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (fs.existsSync(dirname)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mkdirsSync(path.dirname(dirname))) &#123;</span><br><span class="line">      fs.mkdirSync(dirname);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取上传文件的后缀名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;string&#125;</span> </span>fileName 获取上传文件的后缀名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span>          </span>文件后缀名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSuffixName</span>(<span class="params">fileName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> nameList = fileName.split(<span class="string">"."</span>);</span><br><span class="line">  <span class="keyword">return</span> nameList[nameList.length - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上传文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;object&#125;</span> </span>ctx     koa上下文</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;object&#125;</span> </span>options 文件上传参数 fileType文件类型， path文件存放路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;promise&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadFile</span>(<span class="params">ctx, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> req = ctx.req;</span><br><span class="line">  <span class="keyword">let</span> res = ctx.res;</span><br><span class="line">  <span class="keyword">let</span> busboy = <span class="keyword">new</span> Busboy(&#123; <span class="attr">headers</span>: req.headers &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取类型</span></span><br><span class="line">  <span class="keyword">let</span> fileType = options.fileType || <span class="string">"common"</span>;</span><br><span class="line">  <span class="keyword">let</span> filePath = path.join(options.path, fileType);</span><br><span class="line">  <span class="keyword">let</span> mkdirResult = mkdirsSync(filePath);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"文件上传中..."</span>);</span><br><span class="line">    <span class="keyword">let</span> result = &#123;</span><br><span class="line">      success: <span class="literal">false</span>,</span><br><span class="line">      formData: &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析请求文件事件</span></span><br><span class="line">    busboy.on(<span class="string">"file"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">fieldname, file, filename, encoding, mimetype</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> fileName =</span><br><span class="line">        <span class="built_in">Math</span>.random()</span><br><span class="line">          .toString(<span class="number">16</span>)</span><br><span class="line">          .substr(<span class="number">2</span>) +</span><br><span class="line">        <span class="string">"."</span> +</span><br><span class="line">        getSuffixName(filename);</span><br><span class="line">      <span class="keyword">let</span> _uploadFilePath = path.join(filePath, fileName);</span><br><span class="line">      <span class="keyword">let</span> saveTo = path.join(_uploadFilePath);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 文件保存到制定路径</span></span><br><span class="line">      file.pipe(fs.createWriteStream(saveTo));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 文件写入事件结束</span></span><br><span class="line">      file.on(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        result.success = <span class="literal">true</span>;</span><br><span class="line">        result.message = <span class="string">"文件上传成功"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"文件上传成功！"</span>);</span><br><span class="line">        resolve(result);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析表单中其他字段信息</span></span><br><span class="line">    busboy.on(<span class="string">"field"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">      fieldname,</span></span></span><br><span class="line"><span class="function"><span class="params">      val,</span></span></span><br><span class="line"><span class="function"><span class="params">      fieldnameTruncated,</span></span></span><br><span class="line"><span class="function"><span class="params">      valTruncated,</span></span></span><br><span class="line"><span class="function"><span class="params">      encoding,</span></span></span><br><span class="line"><span class="function"><span class="params">      mimetype</span></span></span><br><span class="line"><span class="function"><span class="params">    </span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"表单字段数据 ["</span> + fieldname + <span class="string">"]: value: "</span> + inspect(val));</span><br><span class="line">      result.formData[fieldname] = inspect(val);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析结束事件</span></span><br><span class="line">    busboy.on(<span class="string">"finish"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"文件上结束"</span>);</span><br><span class="line">      resolve(result);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析错误事件</span></span><br><span class="line">    busboy.on(<span class="string">"error"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"文件上出错"</span>);</span><br><span class="line">      reject(result);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    req.pipe(busboy);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  uploadFile</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>入口文件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">"koa"</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="comment">// const bodyParser = require('koa-bodyparser')</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; uploadFile &#125; = <span class="built_in">require</span>(<span class="string">"./util/upload"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.use(bodyParser())</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (ctx.url === <span class="string">"/"</span> &amp;&amp; ctx.method === <span class="string">"GET"</span>) &#123;</span><br><span class="line">    <span class="comment">// 当GET请求时候返回表单页面</span></span><br><span class="line">    <span class="keyword">let</span> html = <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;h1&gt;koa2 upload demo&lt;/h1&gt;</span></span><br><span class="line"><span class="string">      &lt;form method="POST" action="/upload.json" enctype="multipart/form-data"&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;file upload&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;span&gt;picName:&lt;/span&gt;&lt;input name="picName" type="text" /&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="string">        &lt;input name="file" type="file" /&gt;&lt;br/&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="string">        &lt;button type="submit"&gt;submit&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;/form&gt;</span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line">    ctx.body = html;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ctx.url === <span class="string">"/upload.json"</span> &amp;&amp; ctx.method === <span class="string">"POST"</span>) &#123;</span><br><span class="line">    <span class="comment">// 上传文件请求处理</span></span><br><span class="line">    <span class="keyword">let</span> result = &#123; <span class="attr">success</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">    <span class="keyword">let</span> serverFilePath = path.join(__dirname, <span class="string">"upload-files"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上传文件事件</span></span><br><span class="line">    result = <span class="keyword">await</span> uploadFile(ctx, &#123;</span><br><span class="line">      fileType: <span class="string">"album"</span>, <span class="comment">// common or album</span></span><br><span class="line">      path: serverFilePath</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    ctx.body = result;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 其他请求显示404</span></span><br><span class="line">    ctx.body = <span class="string">"&lt;h1&gt;404！！！ o(╯□╰)o&lt;/h1&gt;"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"[demo] upload-simple is starting at port 3000"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>异步上传图片实现</strong><br>参考网址：<a href="https://chenshenhai.github.io/koa2-note/note/upload/pic-async.html" target="_blank" rel="noopener">https://chenshenhai.github.io/koa2-note/note/upload/pic-async.html</a></p><h5 id="八、数据库-mysql"><a href="#八、数据库-mysql" class="headerlink" title="八、数据库 mysql"></a>八、数据库 mysql</h5><p>npm install –save mysql<br><strong>创建数据库会话</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">"mysql"</span>);</span><br><span class="line"><span class="keyword">const</span> connection = mysql.createConnection(&#123;</span><br><span class="line">  host: <span class="string">"127.0.0.1"</span>, <span class="comment">// 数据库地址</span></span><br><span class="line">  user: <span class="string">"root"</span>, <span class="comment">// 数据库用户</span></span><br><span class="line">  password: <span class="string">"123456"</span>, <span class="comment">// 数据库密码</span></span><br><span class="line">  database: <span class="string">"my_database"</span> <span class="comment">// 选中数据库</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行sql脚本对数据库进行读写</span></span><br><span class="line">connection.query(<span class="string">"SELECT * FROM my_table"</span>, (error, results, fields) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">  connection.release();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>创建数据连接池</strong><br>一般情况下操作数据库是很复杂的读写过程，不只是一个会话，如果直接用会话操作，就需要每次会话都要配置连接参数。所以这时候就需要连接池管理会话。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建数据池</span></span><br><span class="line"><span class="keyword">const</span> pool  = mysql.createPool(&#123;</span><br><span class="line">  host     : <span class="string">'127.0.0.1'</span>,   <span class="comment">// 数据库地址</span></span><br><span class="line">  user     : <span class="string">'root'</span>,    <span class="comment">// 数据库用户</span></span><br><span class="line">  password : <span class="string">'123456'</span>   <span class="comment">// 数据库密码</span></span><br><span class="line">  database : <span class="string">'my_database'</span>  <span class="comment">// 选中数据库</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在数据池中进行会话操作</span></span><br><span class="line">pool.getConnection(<span class="function"><span class="keyword">function</span>(<span class="params">err, connection</span>) </span>&#123;</span><br><span class="line">  connection.query(<span class="string">'SELECT * FROM my_table'</span>,  (error, results, fields) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 结束会话</span></span><br><span class="line">    connection.release();</span><br><span class="line">    <span class="comment">// 如果有错误就抛出</span></span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>async/await 封装使用 mysql</strong><br>由于 mysql 模块的操作都是异步操作，每次操作的结果都是在回调函数中执行，现在有了 async/await，就可以用同步的写法去操作数据库<br><strong><em>Promise 封装 mysql 模块</em></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">"mysql"</span>);</span><br><span class="line"><span class="keyword">const</span> pool = mysql.createPool(&#123;</span><br><span class="line">  host: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">  user: <span class="string">"root"</span>,</span><br><span class="line">  password: <span class="string">"123456"</span>,</span><br><span class="line">  database: <span class="string">"my_database"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> query = <span class="function"><span class="keyword">function</span>(<span class="params">sql, values</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    pool.getConnection(<span class="function"><span class="keyword">function</span>(<span class="params">err, connection</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        reject(err);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        connection.query(sql, values, (err, rows) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            reject(err);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resolve(rows);</span><br><span class="line">          &#125;</span><br><span class="line">          connection.release();</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123; query &#125;;</span><br></pre></td></tr></table></figure><p><strong><em>async/await 使用</em></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; query &#125; = <span class="built_in">require</span>(<span class="string">"./async-db"</span>);</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">selectAllData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sql = <span class="string">"SELECT * FROM my_table"</span>;</span><br><span class="line">  <span class="keyword">let</span> dataList = <span class="keyword">await</span> query(sql);</span><br><span class="line">  <span class="keyword">return</span> dataList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dataList = <span class="keyword">await</span> selectAllData();</span><br><span class="line">  <span class="built_in">console</span>.log(dataList);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getData();</span><br></pre></td></tr></table></figure><h5 id="九、jsonp"><a href="#九、jsonp" class="headerlink" title="九、jsonp"></a>九、jsonp</h5><p>在项目复杂的业务场景，有时候需要在前端跨域获取数据，这时候提供数据的服务就需要提供跨域请求的接口，通常是使用 JSONP 的方式提供跨域接口。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">"koa"</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="comment">// 如果jsonp 的请求为GET</span></span><br><span class="line">  <span class="keyword">if</span> (ctx.method === <span class="string">"GET"</span> &amp;&amp; ctx.url.split(<span class="string">"?"</span>)[<span class="number">0</span>] === <span class="string">"/getData.jsonp"</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取jsonp的callback</span></span><br><span class="line">    <span class="keyword">let</span> callbackName = ctx.query.callback || <span class="string">"callback"</span>;</span><br><span class="line">    <span class="keyword">let</span> returnData = &#123;</span><br><span class="line">      success: <span class="literal">true</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        text: <span class="string">"this is a jsonp api"</span>,</span><br><span class="line">        time: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// jsonp的script字符串</span></span><br><span class="line">    <span class="keyword">let</span> jsonpStr = <span class="string">`;<span class="subst">$&#123;callbackName&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(returnData)&#125;</span>)`</span>;</span><br><span class="line">    <span class="comment">// 用text/javascript，让请求支持跨域获取</span></span><br><span class="line">    ctx.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">    <span class="comment">// 输出jsonp字符串</span></span><br><span class="line">    ctx.body = jsonpStr;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ctx.body = <span class="string">"hello jsonp"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"[demo] jsonp is starting at port 3000"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>原理：<br>JSONP 跨域输出的数据是可执行的 JavaScript 代码<br>ctx 输出的类型应该是’text/javascript’<br>ctx 输出的内容为可执行的返回数据 JavaScript 代码字符串<br>需要有回调函数名 callbackName，前端获取后会通过动态执行 JavaScript 代码字符，获取里面的数据</p><p><strong>koa-jsonp 中间件</strong><br>npm install –save koa-jsonp</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">"koa"</span>);</span><br><span class="line"><span class="keyword">const</span> jsonp = <span class="built_in">require</span>(<span class="string">"koa-jsonp"</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="comment">// 使用中间件</span></span><br><span class="line">app.use(jsonp());</span><br><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> returnData = &#123;</span><br><span class="line">    success: <span class="literal">true</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      text: <span class="string">"this is a jsonp api"</span>,</span><br><span class="line">      time: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 直接输出JSON</span></span><br><span class="line">  ctx.body = returnData;</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"[demo] jsonp is starting at port 3000"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="十、单元测试"><a href="#十、单元测试" class="headerlink" title="十、单元测试"></a>十、单元测试</h5><p>测试是一个项目周期里必不可少的环节，开发者在开发过程中也是无时无刻进行“人工测试”，如果每次修改一点代码，都要牵一发动全身都要手动测试关联接口，这样子是禁锢了生产力。为了解放大部分测试生产力，相关的测试框架应运而生，比较出名的有 mocha，karma，jasmine 等。虽然框架繁多，但是使用起来都是大同小异。</p><p>npm install –save-dev mocha chai supertest<br><strong>开始写测试用例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> supertest = <span class="built_in">require</span>(<span class="string">"supertest"</span>);</span><br><span class="line"><span class="keyword">const</span> chai = <span class="built_in">require</span>(<span class="string">"chai"</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">"./../index"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> expect = chai.expect;</span><br><span class="line"><span class="keyword">const</span> request = supertest(app.listen());</span><br><span class="line"><span class="comment">// 测试套件/组</span></span><br><span class="line">describe(<span class="string">"开始测试demo的GET请求"</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 测试用例</span></span><br><span class="line">  it(<span class="string">"测试/getString.json请求"</span>, done =&gt; &#123;</span><br><span class="line">    request</span><br><span class="line">      .get(<span class="string">"/getString.json"</span>)</span><br><span class="line">      .expect(<span class="number">200</span>)</span><br><span class="line">      .end(<span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 断言判断结果是否为object类型</span></span><br><span class="line">        expect(res.body).to.be.an(<span class="string">"object"</span>);</span><br><span class="line">        expect(res.body.success).to.be.an(<span class="string">"boolean"</span>);</span><br><span class="line">        expect(res.body.data).to.be.an(<span class="string">"string"</span>);</span><br><span class="line">        done();</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="nuxt"><a href="#nuxt" class="headerlink" title="nuxt"></a>nuxt</h4><p><strong>vue 的服务器渲染</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Vue = <span class="built_in">require</span>(<span class="string">"vue"</span>);</span><br><span class="line"><span class="keyword">const</span> renderer = <span class="built_in">require</span>(<span class="string">"vue-server-renderer"</span>).createRenderer();</span><br><span class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">"express"</span>)();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"*"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  renderer.renderToString(vm, (err, html) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(err);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(html);</span><br><span class="line">    res.end(html);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"server listening at http://localhost:8000"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  template: <span class="string">"&lt;h1&gt;hello,&#123;&#123;name&#125;&#125;&lt;/h1&gt;"</span>,</span><br><span class="line">  data: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      name: <span class="string">"zhang"</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="nuxt-官方文档-https-zh-nuxtjs-org-guide"><a href="#nuxt-官方文档-https-zh-nuxtjs-org-guide" class="headerlink" title="nuxt 官方文档 https://zh.nuxtjs.org/guide/"></a>nuxt 官方文档 <a href="https://zh.nuxtjs.org/guide/" target="_blank" rel="noopener">https://zh.nuxtjs.org/guide/</a></h5><p><strong>nuxt 安装</strong><br>create-nuxt-app <project name><br><strong>nuxt 目录</strong><br><strong>nuxt 路由</strong><br>page 下的文件可以直接作为路由<br>1、基础路由<br>2、动态路由<br>3、路由参数校验<br>4、嵌套路由<br>5、动态嵌套路由</project></p><p>动态特效<br>1、全局过渡动效设置<br>2、页面过渡动效设置</p><p>中间件<br><strong>nuxt 视图</strong><br><strong>nuxt 异步数据</strong><br>asyncData 方法会在组件（限于页面组件）每次加载之前被调用。它可以在服务端或路由更新之前被调用。<br><strong>nuxt 资源文件</strong><br><strong>nuxt 插件</strong><br><strong>nuxt 模块</strong><br>Nuxt.js 团队提供 官方 模块:<br>@nuxt/http: 基于 ky-universal 的轻量级和通用的 HTTP 请求<br>@nuxtjs/axios: 安全和使用简单 Axios 与 Nuxt.js 集成用来请求 HTTP<br>@nuxtjs/pwa: 使用经过严格测试，更新且稳定的 PWA 解决方案来增强 Nuxt<br>@nuxtjs/auth: Nuxt.js 的身份验证模块，提供不同的方案和验证策略<br>Nuxt.js 社区制作的模块列表可在 <a href="https://github.com/topics/nuxt-module" target="_blank" rel="noopener">https://github.com/topics/nuxt-module</a> 中查询<br><strong>nuxt 状态树</strong><br><strong>支持 typescript</strong><br><strong>命令和部署</strong></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端面试题整理</title>
      <link href="/2019/06/06/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/"/>
      <url>/2019/06/06/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="vuejs"><a href="#vuejs" class="headerlink" title="vuejs"></a>vuejs</h3><p>特点：声明式渲染、组件化构建</p><h3 id="开发技能树"><a href="#开发技能树" class="headerlink" title="开发技能树"></a>开发技能树</h3><p><strong>1. 组件通讯（prop、Event、Global Event Bus、Vuex）</strong><br><strong>2. 插槽（普通插槽、作用域插槽）</strong><br><strong>3. 过渡动画（过渡类名、JavaScript 钩子）</strong><br><strong>4. DOM 操作</strong><br>1）操作 css<br>2）配合原生 js 库使用（如 cube-ui 对 better-scroll 的封装、element-ui 对 popper.js 的封装）<br><strong>5. 组件封装（就近管理、高复用性、分层设计、灵活扩展）</strong><br><strong>6. keep-alive（来回切换避免重复渲染）</strong><br>activated、deactivate<br><strong>7. 内存泄漏</strong><br>产生的原因（未清理的定时器、未清理的全局注册自定义事件、未清理的全局注册 DOM 事件）<br><strong>8. 错误调试</strong><br>常见错误：<br>1）深层对象数据访问问题（使用 v-if 判断）<br>2）对计算属性赋值<br>3）对 prop 直接修改（使用 emit 派发事件）<br>4）使用未注册的组件（局部注册、全局注册）<br>调试工具：<br>1）chrome 工具、vue-devtools、vConsole<br><strong>9. 性能优化</strong><br>1）数据定义（不一定全部定义在 data 中，可以将一些数据挂载到实例上）<br>2）按需加载（只下载首屏渲染的资源，可以使用异步组件、异步路由来实现）<br>3）预渲染（减少白屏时间）<br>4）后编译<br><strong>10. vuejs 渲染原理</strong><br>new Vue——init——$mount——compile——render——vnode——patch——DOM<br>虚拟 DOM（可以实现跨端）<br>编译过程涉及 AST 树（抽象语法树）(<a href="https://segmentfault.com/a/1190000016231512?utm_source=tag-newest" target="_blank" rel="noopener">https://segmentfault.com/a/1190000016231512?utm_source=tag-newest</a>)<br><strong>11. 组件化实现原理</strong><br><strong>12. 响应式实现原理</strong></p><h3 id="源码学习推荐"><a href="#源码学习推荐" class="headerlink" title="源码学习推荐"></a>源码学习推荐</h3><p>源码推荐学习：推荐学习 jquery、vue、react 的设计理念和源码架构</p><h3 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h3><p><strong>1. 脚手架（vue-cli3.0、插件化机制、webpack 配置）</strong><br>调整 webpack 配置最简单的方式是在 vue.config.js 中的 configureWebpack 选项提供一个对象<br><strong>2. webpack（module、entry、output、loader、plugin）</strong><br>[output]：线上运行时需要通过设置的 public path 指向 CDN 地址<br>[loader]：用于对模块的源代码进行转化<br>可以手写 loader<br>常见 loader：babel-loader、style-loader、css-loader、less-loader、file-loader、url-loader、vue-loader<br>[plugin]：插件比 loader 更加强大，可以帮助用户直接触及到编译过程<br>打包优化、<br><strong>3. 开发&amp;部署</strong><br>需求阶段——开发阶段——联调阶段——上线阶段（推荐增量发布，hash 化资源 / 或灰度发布）</p><h3 id="广度知识必知必会"><a href="#广度知识必知必会" class="headerlink" title="广度知识必知必会"></a>广度知识必知必会</h3><p><strong>1. HTTP 相关[图解 HTTP]</strong><br>常见状态码、浏览器缓存、抓包工具（fiddler、charles）<br><strong>2. 跨域</strong><br>常见跨域解决方案 (CORS JSONP……)<br><strong>3. 性能优化[高性能网站建设进阶指南]</strong><br>性能监测 lighthouse、数据埋点、雅虎军规<br><strong>4. web 安全</strong><br>xss、csrf、https<br><strong>5. 数据结构&amp;算法</strong><br>栈/队列/树/图<br>排序/递归<br>算法设计技巧<br><strong>6. 浏览器渲染原理</strong><br>DOM tree + CSSOM tree ——&gt; render tree (layout + painting)<br><strong>7. 正则表达式[精通正则表达式]</strong><br>基本语法、匹配原理、使用技巧<br><strong>8. 设计模式</strong><br>工厂模式、订阅发布模式、适配器模式……<br><strong>9. 后端语言</strong><br>java、php、nodejs……</p><h3 id="前端架构"><a href="#前端架构" class="headerlink" title="前端架构"></a>前端架构</h3><p><strong>1. 技术选型</strong><br>1）业务应该选择什么技术栈？<br>PC toB toC 移动 重交互 游戏 偏显示 电商……<br>2）选用的技术栈是否靠谱？<br>持续维护、star、download、社区生态、测试完成度、大公司使用情况、issue 解决情况……<br><strong>2. 老项目重构</strong><br><strong>3. 个人成长经验</strong></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>web安全</title>
      <link href="/2019/06/05/web%E5%AE%89%E5%85%A8/"/>
      <url>/2019/06/05/web%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="xss"><a href="#xss" class="headerlink" title="xss"></a>xss</h3><p>XSS (Cross-Site Scripting)，跨站脚本攻击，因为缩写和 CSS 重叠，所以只能叫 XSS。跨站脚本攻击是指通过存在安全漏洞的 Web 网站注册用户的浏览器内运行非法的 HTML 标签或 JavaScript 进行的一种攻击。<br><strong>跨站脚本攻击有可能造成以下影响:</strong><br>利用虚假输入表单骗取用户个人信息。<br>利用脚本窃取用户的 Cookie 值，被害者在不知情的情况下，帮助攻击者发送恶意请求。<br>显示伪造的文章或图片。<br>XSS 的原理是恶意攻击者往 Web 页面里插入恶意可执行网页脚本代码，当用户浏览该页之时，嵌入其中 Web 里面的脚本代码会被执行，从而可以达到攻击者盗取用户信息或其他侵犯用户安全隐私的目的。<br><strong>类型</strong><br>反射性 xss<br>存储型 xss<br><strong>如何防御</strong><br><strong>1）CSP</strong><br>CSP 本质上就是建立白名单，开发者明确告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截是由浏览器自己实现的。我们可以通过这种方式来尽量减少 XSS 攻击。<br>通常可以通过两种方式来开启 CSP：<br>设置 HTTP Header 中的 Content-Security-Policy<br>设置 meta 标签的方式<br><strong>2）转义字符</strong><br>用户的输入永远不可信任的，最普遍的做法就是转义输入输出的内容，对于引号、尖括号、斜杠进行转义<br>但是对于显示富文本来说，显然不能通过上面的办法来转义所有字符，因为这样会把需要的格式也过滤掉。对于这种情况，通常采用白名单过滤的办法，当然也可以通过黑名单过滤，但是考虑到需要过滤的标签和标签属性实在太多，更加推荐使用白名单的方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xss = <span class="built_in">require</span>(<span class="string">"xss"</span>);</span><br><span class="line"><span class="keyword">let</span> html = xss(<span class="string">'&lt;h1 id="title"&gt;XSS Demo&lt;/h1&gt;&lt;script&gt;alert("xss");&lt;/script&gt;'</span>);</span><br><span class="line"><span class="comment">// -&gt; &lt;h1&gt;XSS Demo&lt;/h1&gt;&amp;lt;script&amp;gt;alert("xss");&amp;lt;/script&amp;gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(html);</span><br></pre></td></tr></table></figure><p>以上示例使用了 js-xss 来实现，可以看到在输出中保留了 h1 标签且过滤了 script 标签。<br><strong>3）HttpOnly Cookie</strong><br>这是预防 XSS 攻击窃取用户 cookie 最有效的防御手段。Web 应用程序在设置 cookie 时，将其属性设为 HttpOnly，就可以避免该网页的 cookie 被客户端恶意 JavaScript 窃取，保护用户 cookie 信息。</p><h3 id="csrf"><a href="#csrf" class="headerlink" title="csrf"></a>csrf</h3><p>CSRF(Cross Site Request Forgery)，即跨站请求伪造，是一种常见的 Web 攻击，它利用用户已登录的身份，在用户毫不知情的情况下，以用户的名义完成非法操作。</p><p><strong>如何防御</strong><br><strong>1) SameSite</strong><br>可以对 Cookie 设置 SameSite 属性。该属性表示 Cookie 不随着跨域请求发送，可以很大程度减少 CSRF 的攻击，但是该属性目前并不是所有浏览器都兼容。<br><strong>2) Referer</strong><br>HTTP Referer 是 header 的一部分，当浏览器向 web 服务器发送请求时，一般会带上 Referer 信息告诉服务器是从哪个页面链接过来的，服务器籍此可以获得一些信息用于处理。可以通过检查请求的来源来防御 CSRF 攻击。正常请求的 referer 具有一定规律，如在提交表单的 referer 必定是在该页面发起的请求。所以通过检查 http 包头 referer 的值是不是这个页面，来判断是不是 CSRF 攻击。<br><strong>3) Anti CSRF Token</strong><br>目前比较完善的解决方案是加入 Anti-CSRF-Token。即发送请求时在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器建立一个拦截器来验证这个 token。服务器读取浏览器当前域 cookie 中这个 token 值，会进行校验该请求当中的 token 和 cookie 当中的 token 值是否都存在且相等，才认为这是合法的请求。否则认为这次请求是违法的，拒绝该次服务。<br>这种方法相比 Referer 检查要安全很多，token 可以在用户登陆后产生并放于 session 或 cookie 中，然后在每次请求时服务器把 token 从 session 或 cookie 中拿出，与本次请求中的 token 进行比对。由于 token 的存在，攻击者无法再构造出一个完整的 URL 实施 CSRF 攻击。但在处理多个页面共存问题时，当某个页面消耗掉 token 后，其他页面的表单保存的还是被消耗掉的那个 token，其他页面的表单提交时会出现 token 错误。<br><strong>4) 验证码</strong><br>应用程序和用户进行交互过程中，特别是账户交易这种核心步骤，强制用户输入验证码，才能完成最终请求。在通常情况下，验证码够很好地遏制 CSRF 攻击。但增加验证码降低了用户的体验，网站不能给所有的操作都加上验证码。所以只能将验证码作为一种辅助手段，在关键业务点设置验证码。</p><h3 id="点击劫持-操作是用户完成，但非用户意愿"><a href="#点击劫持-操作是用户完成，但非用户意愿" class="headerlink" title="点击劫持(操作是用户完成，但非用户意愿)"></a>点击劫持(操作是用户完成，但非用户意愿)</h3><p>将目标网站通过 iframe 嵌入到攻击网站中，设置 iframe 的透明度为 0（隐藏），通过对用户的点击引导，使其做一些指定的操作<br>用户亲手操作、用户不知情、盗取用户资金、获取用户敏感信息<br><strong>防御方法：</strong><br><strong>1）JavaScript 禁止内嵌</strong><br>​ if(top.location!==window.location){top.location=window.location}<br>​ 仍然存在劫持的可能性，因为攻击者可能禁止了 js 脚本，如在 iframe 中添加 sandbox 属性<br><strong>2）X-FRAME-OPTIONS 禁止内嵌</strong><br>​ 兼容性相当好（推荐）<br>​ X-FRAME-OPTIONS 是一个 HTTP 响应头，在现代浏览器有一个很好的支持。这个 HTTP 响应头 就是为了防御用 iframe 嵌套的点击劫持攻击。<br>​ 该响应头有三个值可选，分别是<br>​ DENY，表示页面不允许通过 iframe 的方式展示<br>​ SAMEORIGIN，表示页面可以在相同域名下通过 iframe 的方式展示<br>​ ALLOW-FROM，表示页面可以在指定来源的 iframe 中展示</p><h3 id="URL-跳转漏洞"><a href="#URL-跳转漏洞" class="headerlink" title="URL 跳转漏洞"></a>URL 跳转漏洞</h3><p>黑客利用 URL 跳转漏洞来诱导安全意识低的用户点击，导致用户信息泄露或者资金的流失。其原理是黑客构建恶意链接(链接需要进行伪装,尽可能迷惑),发在 QQ 群或者是浏览量多的贴吧/论坛中。<br>安全意识低的用户点击后,经过服务器或者浏览器解析后，跳到恶意的网站中。<br><strong>如何防御</strong><br><strong>1)referer 的限制</strong><br>如果确定传递 URL 参数进入的来源，我们可以通过该方式实现安全限制，保证该 URL 的有效性，避免恶意用户自己生成跳转链接<br><strong>2)加入有效性验证 Token</strong><br>我们保证所有生成的链接都是来自于我们可信域的，通过在生成的链接里加入用户不可控的 Token 对生成的链接进行校验，可以避免用户生成自己的恶意链接从而被利用，但是如果功能本身要求比较开放，可能导致有一定的限制。</p><h3 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h3><p><strong>1、SQL 注入攻击</strong><br>​ 探测是否存在 sql 注入问题（加恒等条件和恒不等条件）——涉及到信息泄露的问题<br>​ 探测服务器数据库版本号（使用 version 函数，此版本存在哪些漏洞）<br>​ 探测数据表的字段个数和字段名（使用 union）——可以拿到字段名和具体数据了<br>​ 危害：猜解密码、获取数据、删库删表<br><strong>2、SQL 注入防御</strong><br>​ 关闭错误输出（不抛出具体错误）<br>​ 检查数据类型（期待输入类型）<br>​ 对数据进行转义（带引号、sql 语句的全部转移掉，保证传入的永远是字符串）<br>​ 使用参数化查询方案（使用问号?）<br>​ 使用 ORM（如 sequelize，不需要使用 sql 语句）<br><strong>3、NoSQL 注入和防御</strong><br>​ 检查数据类型<br>​ 类型转换<br>​ 写完整条件</p><h3 id="OS-命令注入攻击"><a href="#OS-命令注入攻击" class="headerlink" title="OS 命令注入攻击"></a>OS 命令注入攻击</h3><p>OS 命令注入和 SQL 注入差不多，只不过 SQL 注入是针对数据库的，而 OS 命令注入是针对操作系统的。OS 命令注入攻击指通过 Web 应用，执行非法的操作系统命令达到攻击的目的。只要在能调用 Shell 函数的地方就有存在被攻击的风险。倘若调用 Shell 时存在疏漏，就可以执行插入的非法命令。<br>命令注入攻击可以向 Shell 发送命令，让 Windows 或 Linux 操作系统的命令行启动程序。也就是说，通过命令注入攻击可执行操作系统上安装着的各种程序。<br><strong>如何防御</strong><br>后端对前端提交内容进行规则限制（比如正则表达式）。<br>在调用系统命令前对所有传入参数进行命令行参数转义过滤。<br>不要直接拼接命令语句，借助一些工具做拼接、转义预处理，例如 Node.js 的 shell-escape npm 包</p><h3 id="传输安全"><a href="#传输安全" class="headerlink" title="传输安全"></a>传输安全</h3><p><strong>1、http 窃听</strong>（因为是明文传输，因此会产生传输链路的窃听和篡改）<br>​ http 篡改：插入广告、重定向网站、无法防御的 xss 和 csrf 攻击<br>​ 案例：运营商劫持、局域网劫持、公共 wifi 获取密码<br><strong>2、https</strong><br>​ 将明文变为密文（TLS，也叫做 SSL，加密），到达目的地后解密<br>​ 如何确定服务器身份</p><h3 id="密码安全"><a href="#密码安全" class="headerlink" title="密码安全"></a>密码安全</h3><p>1、泄露渠道：数据库被偷、服务器被入侵、通讯被窃听、内部人员泄露数据、其他网站（撞库）<br>2、防御：严谨密码明文存储、单向变化、变换复杂度要求、密码复杂度要求、加盐<br>​ 单向变化：哈希算法（明文-密文一一对应、雪崩效应、密文-明文无法反推、密文固定长度），常见哈希算法：md5、sha1、sha256</p><p>加密成本几乎不变（生成密码时速度慢一些）<br>彩虹表失效（数据量太大，无法建立通用性）<br>解密成本增大 N 倍<br>3、用户密码加固（加 salt 变换后存储）<br>4、密码传输的安全性（https 传输、频率限制、前端加密意义有限）<br>5、生物特征密码（指纹、声纹、虹膜、人脸等）——需要保持谨慎的态度<br>​ 缺少私密性（容易泄露，如通过照片可以识别指纹达到破解的目的）<br>​ 安全性——碰撞（相似性，如人脸受伤产生的变化，会有一定的容错性，可能会导致一些判断错误）<br>​ 唯一性（终身唯一，无法修改）</p><h3 id="cookie-安全"><a href="#cookie-安全" class="headerlink" title="cookie 安全"></a>cookie 安全</h3><p>xss 可能偷取 cookie（http-only 的 cookie 不会被盗取）<br>csrf 利用了用户的 cookie（攻击站点无法读取 cookie）<br>cookie 安全问题：<br>​ 1）cookie 被篡改，推荐使用 userId+签名<br>​ 2）cookie 被盗<br>cookie 安全策略：<br>​ 1）签名防篡改<br>​ 2）私有变换（加密）<br>​ 3）http-only（防止 xss）<br>​ 4）secure<br>​ 5）same-site（兼容性不是很好）</p><h3 id="接入层上传问题"><a href="#接入层上传问题" class="headerlink" title="接入层上传问题"></a>接入层上传问题</h3><p>上传问题（上传的文件当成程序解析）<br>防御：<br>1）限制上传后缀<br>2）文件类型检查<br>3）文件内容检查<br>4）程序输出<br>5）权限控制</p><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><p><strong>DOS 攻击</strong></p><p>DoS 是 Denial of Service 的简称，即拒绝服务，造成 DoS 的攻击行为被称为 DoS 攻击，其目的是使计算机或网络无法提供正常的服务。最常见的 DoS 攻击有计算机网络带宽攻击和连通性攻击。 [1]</p><p>DoS 攻击是指故意的攻击网络协议实现的缺陷或直接通过野蛮手段残忍地耗尽被攻击对象的资源，目的是让目标计算机或网络无法提供正常的服务或资源访问，使目标系统服务系统停止响应甚至崩溃，而在此攻击中并不包括侵入目标服务器或目标网络设备。这些服务资源包括网络带宽，文件系统空间容量，开放的进程或者允许的连接。这种攻击会导致资源的匮乏，无论计算机的处理速度多快、内存容量多大、网络带宽的速度多快都无法避免这种攻击带来的后果。</p><p><strong>重放攻击</strong></p><p>重放攻击(Replay Attacks)又称重播攻击、回放攻击，是指攻击者发送一个目的主机已接收过的包，来达到欺骗系统的目的，主要用于身份认证过程，破坏认证的正确性。重放攻击可以由发起者，也可以由拦截并重发该数据的敌方进行。攻击者利用<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%9B%91%E5%90%AC/10914318" target="_blank" rel="noopener">网络监听</a>或者其他方式盗取认证凭据，之后再把它重新发给<a href="https://baike.baidu.com/item/%E8%AE%A4%E8%AF%81%E6%9C%8D%E5%8A%A1%E5%99%A8" target="_blank" rel="noopener">认证服务器</a>。重放攻击在任何网络通过程中都可能发生，是计算机世界<a href="https://baike.baidu.com/item/%E9%BB%91%E5%AE%A2/118396" target="_blank" rel="noopener">黑客</a>常用的攻击方式之一。</p><p>加密 https、加时间戳、token、nonce、签名</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题:"></a>问题:</h3><p>1）xss 原理、xss 防御、xss 防御需要注意的点<br>2）csrf 原理、危害、csrf 防御<br>3）cookies 作用、和其他存储方式的区别、cookies 和 session 的关系、cookies 有哪些特性、属性、如何删除一个 cookie（设置过期时间为过去的时间即可）<br>4）https 是如何保证数据不被窃听、https 如何保证不被中间人攻击（证书机制)、部署 https 的步骤<br>5）SQL 注入的原理、危害、nodejs 如何防止 sql 注入（ORM、参数化查询）<br>6）文件上传漏洞的原理、如何防范文件上传漏洞<br>7）如何设计用户密码存储、如何设计登录过程、如何保证密码不被窃听</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端适配与性能优化</title>
      <link href="/2019/05/25/%E5%89%8D%E7%AB%AF%E9%80%82%E9%85%8D%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2019/05/25/%E5%89%8D%E7%AB%AF%E9%80%82%E9%85%8D%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h5 id="一、移动端适配"><a href="#一、移动端适配" class="headerlink" title="一、移动端适配"></a>一、移动端适配</h5><p><strong>（1）通过媒体查询的方式即 CSS3 的 meida queries：</strong><br>media query 可以做到设备像素比的判断，方法简单，成本低，特别是对移动和 PC 维护同一套代码的时候。目前像 Bootstrap 等框架使用这种方式布局<br>常见的媒体查询尺寸：</p><!-- more --><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (min-width:1200px)</span><br><span class="line">@media screen and (min-width:992px)</span><br><span class="line">@media screen and (min-width:768px)</span><br><span class="line">@media screen and (min-width:480px)</span><br></pre></td></tr></table></figure><p>在设置时，需要注意先后顺序，不然后面的会覆盖前面的样式。</p><p><strong>（2）以天猫首页为代表的 flex 弹性布局</strong><br>以天猫的实现方式进行说明：<br>它的 viewport 是固定的：<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no&quot;&gt;</code> 高度定死，宽度自适应，元素都采用 px 做单位。随着屏幕宽度变化，页面也会跟着变化，效果就和 PC 页面的流体布局差不多，在哪个宽度需要调整的时候使用响应式布局调调就行（比如网易新闻），这样就实现了『适配』。</p><p><strong>（3）以淘宝首页为代表的 rem+viewport 缩放</strong><br>这也是淘宝使用的方案，根据屏幕宽度设定 rem 值，需要适配的元素都使用 rem 为单位，不需要适配的元素还是使用 px 为单位。（1em = 16px）<br><strong>[实现原理]</strong><br>根据 rem 将页面放大 dpr 倍, 然后 viewport 设置为 1/dpr.如 iphone6 plus 的 dpr 为 3, 则页面整体放大 3 倍, 1px(css 单位)在 plus 下默认为 3px(物理像素) 。然后 viewport 设置为 1/3, 这样页面整体缩回原始大小. 从而实现高清。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name = <span class="string">"viewport"</span> content = <span class="string">"width = device-width,initial-scale = 1.0,user-scalable = no"</span>&gt;</span><br><span class="line">&lt;script type = <span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> width = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line"><span class="keyword">var</span> targetW = <span class="number">320</span>;</span><br><span class="line"><span class="keyword">var</span> scale = width/targetW;</span><br><span class="line"><span class="keyword">var</span> metaN = <span class="built_in">document</span>.querySelector(<span class="string">'meta[name="viewport"]'</span>);</span><br><span class="line">metaN.setAttribute(<span class="string">'content'</span>,<span class="string">'initial-scale'</span> + width);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>（4）rem 方式</strong><br>比如说“魅族”移动端的实现方式，viewport 也是固定的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no"</span>&gt;。</span><br></pre></td></tr></table></figure><p>通过代码来控制 rem 基准值(设计稿以 720px 宽度量取实际尺寸)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> width = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line">  <span class="keyword">var</span> styleN = <span class="built_in">document</span>.createElement(<span class="string">"style"</span>);</span><br><span class="line">  styleN.innerHTML = <span class="string">"html&#123;font-size:"</span> + width + <span class="string">"px;&#125;"</span>;</span><br><span class="line">  <span class="built_in">document</span>.head.appendChild(styleN);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p></p><hr><h5 id="二、响应式布局与自适应布局"><a href="#二、响应式布局与自适应布局" class="headerlink" title="二、响应式布局与自适应布局"></a>二、响应式布局与自适应布局</h5><blockquote><p><strong>响应式布局</strong>等于流动网格布局，而自适应布局等于使用固定分割点来进行布局。响应式布局就是实现不同屏幕分辨率的终端上浏览网页的不同展示方式。通过响应式设计能使网站在手机和平板电脑上有更好的浏览阅读体验。换句话说就是一个网站能够兼容多个终端，而不是为了每一个终端做一个特定的版本。<br><strong>自适应布局</strong>就是指能忘了使网页自适应的显示在不同大小终端设备上的新网页设计方式及技术，它需要开发多套界面来适应不同的终端。<br><strong>区别：</strong><br>自适应布局通过检测视口分辨率，来判断当前访问的设备是：pc 端、平板、手机，从而请求服务层，返回不同的页面；响应式布局通过检测视口分辨率，针对不同客户端在客户端做代码处理，来展现不同的布局和内容。<br>总之，响应式布局还是要比自适应布局要好一点，但是自适应布局更加贴切实际，因为你只需要考虑几种状态就可以了而不是像响应式布局需要考虑非常多状态。所以的说无论哪种设计都有它们各自的特点，我们要根据项目的需求来选择适合的布局方式。</p></blockquote><hr><h5 id="三、前端性能优化方案总结（划重点）"><a href="#三、前端性能优化方案总结（划重点）" class="headerlink" title="三、前端性能优化方案总结（划重点）"></a>三、前端性能优化方案总结（划重点）</h5><p><strong>1、加载资源优化</strong></p><ul><li><strong>减少 http 请求</strong><br>静态资源压缩——（js、css、sprites）<br>使用离线缓存——（把常用的变动又少的 js、css、图片存储到 localstorage，第二次访问的时候直接走本地缓存。在移动端使用广泛）<br>使用浏览器缓存</li><li><strong>加载</strong><br>懒加载——（图片懒加载、数据懒加载、功能懒加载）<br>预加载——在某个功能还没展现时，在空闲时间预先加载相关图片或者 js 代码<br>异步加载——async、defer<br>css、js 放置位置</li><li><strong>域名、cdn</strong><br>静态资源使用多个域名——（对于图片、CSS、JS，可使用几个域名，可以并发加载。）<br>使用 CDN——（资源加速）</li><li><strong>服务器</strong><br>Gzip 压缩文件内容<br>SSR 服务器渲染</li></ul><p><strong>2、操作优化</strong></p><ul><li><strong>js+css+html</strong><br>DOM 操作优化——（缓存已经访问过的有关元素、避免使用 JavaScript 来修改页面布局）<br>避免使用 CSS 表达式（Expression）<br>用 link 代替@import<br>使用外部 JavaScript 和 CSS——（这样可以使用缓存）<br>不要在 HTML 中缩放图像——（不要为了在 HTML 中设置长宽而使用比实际需要大的图片。）</li><li><strong>算法</strong><br>优化算法——（优化查找、排序算法。尽量少使用嵌套循环、使用事件代理）</li><li><strong>网络请求</strong><br>使 iframe 的数量最小<br>简单请求使用 GET 方式<br>减小 Cookie 体积</li></ul><hr><h5 id="四、雅虎性能优化军规"><a href="#四、雅虎性能优化军规" class="headerlink" title="四、雅虎性能优化军规"></a>四、雅虎性能优化军规</h5><p>前端性能优化良好实践：<a href="https://www.cnblogs.com/xianyulaodi/p/5755079.html" target="_blank" rel="noopener">雅虎军规</a><br>原文地址：<a href="https://juejin.im/post/5b73ef38f265da281e048e51" target="_blank" rel="noopener">前端性能优化之雅虎 35 条军规-掘金</a></p><p><strong>内容部分</strong></p><ul><li>减少 http 请求数（合并文件、雪碧图、base64 图片）</li><li>减少 dns 查找</li><li>避免重定向【牢记重定向会拖慢用户体验，在用户和 HTML 文档之间插入重定向会延迟页面上的所有东西，页面无法渲染，组件也无法开始下载，直到 HTML 文档被送达浏览器。有一种常见的极其浪费资源的重定向，而且 web 开发人员一般都意识不到这一点，就是 URL 尾部缺少一个斜线的时候。例如，跳转到<a href="http://astrology.yahoo.com/astrology会返回一个重定向到http://astrology.yahoo.com/astrology/的301响应（注意添在尾部的斜线）。在Apache中可以用Alias，mod_rewrite或者DirectorySlash指令来取消不必要的重定向。】" target="_blank" rel="noopener">http://astrology.yahoo.com/astrology会返回一个重定向到http://astrology.yahoo.com/astrology/的301响应（注意添在尾部的斜线）。在Apache中可以用Alias，mod_rewrite或者DirectorySlash指令来取消不必要的重定向。】</a></li><li>ajax 缓存【如果用户从上一次使用之后再没有修改过她的通讯录，而且 Ajax 响应是可缓存的，有尚未过期的 Expires 或者 Cache-Control HTTP 头，那么之前的通讯录就可以从缓存中读出。必须通知浏览器，应该继续使用之前缓存的通讯录响应，还是去请求一个新的。】</li><li>延迟加载组件</li><li>预加载组件</li><li>减少 DOM 元素数量</li><li>跨域分离组件【分离组件可以最大化并行下载，但要确保只用不超过 2-4 个域，因为存在 DNS 查找的代价。】</li></ul><p><strong>css 部分</strong></p><ul><li>避免使用 css 表达式【如 background-color: expression( (new Date()).getHours()%2 ? “#B8D4FF” : “#F08A00” );】</li><li>选择 link 而不是 import</li><li>避免使用滤镜</li><li>样式表置顶</li></ul><p><strong>js 部分</strong></p><ul><li>去除重复脚本</li><li>尽量减少 dom 访问（缓存节点、离线更新、不用 js 修复布局）</li><li>用智能的事件处理器（事件委托绑定事件）</li><li>脚本置底</li></ul><p><strong>javascript, css</strong></p><ul><li>把 JavaScript 和 css 放到页面之外（充分利用缓存）</li><li>压缩 JavaScript 和 css（混淆是一种可选的源码优化措施，要比压缩更复杂，所以混淆过程也更容易产生 bug）</li></ul><p><strong>图片</strong></p><ul><li>优化图片、压缩图片</li><li>优化 css sprite</li><li>不用要 html 压缩图片（不要因为在 HTML 中可以设置宽高而使用本不需要的大图）</li><li>用小的可缓存的的 favicon.ico</li></ul><p><strong>cookie</strong></p><ul><li>减少 cookie 的体积</li><li>把组件放在不含 cokie 的域下【当浏览器发送对静态图像的请求时，cookie 也会一起发送，而服务器根本不需要这些 cookie。所以它们只会造成没有意义的网络- 通信量，应该确保对静态组件的请求不含 cookie。可以创建一个子域，把所有的静态组件都部署在那儿。】</li></ul><p><strong>移动端</strong></p><ul><li>保证所有的组件都小于 25k</li><li>把组件打包到复合文档</li><li>服务器</li><li>gzip 压缩</li><li>避免图片 src 属性为空（浏览器会向服务器发送另一个请求）</li><li>配置 etag</li><li>对 ajax 用 get 请求（浏览器的 POST 请求是通过一个两步的过程来实现的：先发送- HTTP 头，在发送数据）</li><li>尽早清空缓存区</li><li>使用 cdn 内容分发网络</li><li>添上 Expires 或者 Cache-Control HTTP 头</li></ul><p><strong>实战优化总结：</strong></p><ol><li>用 translate 替代 top 属性（top 会触发 layout，但 translate 不会）</li><li>用 opacity 代替 visibility（opacity 不会触发重绘也不会触发回流，只是改变图层 3. alpha 值，但是必须要将这个图片独立出一个图层，visibility 会触发重绘）</li><li>不要一条一条的修改 DOM 的样式，预先定义好 class，然后修改 DOM 的 className</li><li>把 DOM 离线后修改，比如：先把 DOM 给 display:none（有一次 reflow），然后你修改 100 次，然后再把它显示出来</li><li>不要把 DOM 节点的属性值放在一个循环里当成循环的变量（先用变量存储下来）</li><li>不要使用 table 布局，可能很小的一个小改动会造成整个 table 的重新布局</li><li>动画实现的速度的选择（根据 performance 量化性能优化）</li><li>对于动画新建图层（启用 gpu 硬件加速(并行运算)</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端测试、性能监测、自动化集成方案</title>
      <link href="/2019/05/21/%E5%89%8D%E7%AB%AF%E6%B5%8B%E8%AF%95%E3%80%81%E6%80%A7%E8%83%BD%E7%9B%91%E6%B5%8B%E3%80%81%E8%87%AA%E5%8A%A8%E5%8C%96%E9%9B%86%E6%88%90%E6%96%B9%E6%A1%88/"/>
      <url>/2019/05/21/%E5%89%8D%E7%AB%AF%E6%B5%8B%E8%AF%95%E3%80%81%E6%80%A7%E8%83%BD%E7%9B%91%E6%B5%8B%E3%80%81%E8%87%AA%E5%8A%A8%E5%8C%96%E9%9B%86%E6%88%90%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h5 id="一、前端性能监测方案"><a href="#一、前端性能监测方案" class="headerlink" title="一、前端性能监测方案"></a>一、前端性能监测方案</h5><p><strong>性能监测：</strong></p><ol><li><p><strong>chrome 的 performance：</strong><br>DNS 查询耗时 ：domainLookupEnd - domainLookupStart<br>TCP 链接耗时 ：connectEnd - connectStart</p><!-- more --><p>request 请求耗时 ：responseEnd - responseStart<br>解析 dom 树耗时 ： domComplete - domInteractive<br>白屏时间 ：responseStart - navigationStart<br>domready 时间(用户可操作时间节点) ：domContentLoadedEventEnd - navigationStart<br>onload 时间(总下载时间) ：loadEventEnd - navigationStart<br>获取所有资源请求的时间数据,这个函数返回一个按 startTime 排序的对象数组 getEntries: ƒ getEntries()</p></li><li><p><strong>Google 的 Lighthouse 插件</strong></p></li><li><p><strong>网页性能测试分析工具-PageSpeed Insights （插件）、Page Speed Online（网页）</strong><br>Pagespeed 测试工具出自 google，通过分析网页的内容来提供网站加载速度优化建议。PageSpeed Insights 是一款可以分析网页打开速度的谷歌浏览器插件，通过 PageSpeed Insights 插件的分析并给出相应的优化建议，网站开发人员可以找出网站速度的瓶颈所在，并相应的网站优化，带给用户更好的用户体验。</p></li><li><p><strong>Yslow</strong></p></li><li><p><strong>Pingdom：</strong>测试网站所有对象的加载时间（HTML，images，JavaScript，CSS，嵌入式框架等）。 您还可以检查网站每个元素的加载速度并改善加载缓慢的项目。 在测试结果中，可以看到网站每个元素的加载时间报告，元素的大小和元素的总数量。</p></li><li><p><strong>GTmetrix：</strong>结合了最流行的 Firefox 性能组件 YSlow 的和谷歌网页速度测试工具。 Gtmetrix 给你提供改进网站速度的建议，虽然 YSlow 的和谷歌网页的速度测试的建议是针对 Firefox 的，也可以适用于其他浏览器。</p></li><li><p><strong>Light Speed Now</strong><br>测试你的网站的速度性能，并把测试报告发送给到你的邮箱。</p></li><li><p><strong>Load Impact</strong><br>Loadimpact 对于一个每天有成千上万的游客访问的大型网站来说是个非常重要的工具。 一个免费帐户允许你模拟 50 个用户访问的压力测试，还要更多的话你就必须升级高级账号。</p></li><li><p><strong>Site-Perf</strong><br>它模拟浏览器下载图片，CSS，JS 和其他文件，在报告中你可以看到先加载网站的哪些页以及加载时间。 这是十分有用的性能报告，可以用来查找到提高你的网站的载入速度需要改善的元素。</p></li></ol><h5 id="二、前端单元测试和持续集成"><a href="#二、前端单元测试和持续集成" class="headerlink" title="二、前端单元测试和持续集成"></a>二、前端单元测试和持续集成</h5><p>一个测试体系大体应该包含四部分</p><ul><li>测试运行器 Test Runner: edp-test karma</li><li>测试框架 Testing Framework: jasmine mocha qunit Jest</li><li>断言库 Assertion library: expect.js should chai</li><li>覆盖率 Coverage library: istanbul</li></ul><p><strong>Mocha/Karma+Travis.CI 的前端测试工作流</strong></p><ol><li><strong>mocha</strong> 是一个功能丰富的前端测试框架。所谓”测试框架”，就是运行测试的工具。通过它，可以为 JavaScript 应用添加测试，从而保证代码的质量。mocha 既可以基于 Node.js 环境运行 也可以在浏览器环境运行。欲了解更多可去官方网站进行学习。</li><li><strong>Karma</strong>：一个基于 Node.js 的 JavaScript 测试执行过程管理工具（Test Runner）。该工具可用于测试所有主流 Web 浏览器，也可集成到 CI（Continuous integration）工具，也可和其他代码编辑器一起使用。这个测试工具的一个强大特性就是，它可以监控文件的变化，然后自行执行，通过 console.log 显示测试结果。Karma 的一个强大特性就是，它可以监控一套文件的变换，并立即开始测试已保存的文件，用户无需离开文本编辑器。测试结果通常显示在命令行中，而非代码编辑器。这也就让 Karma 基本可以和任何 JS 编辑器一起使用。</li><li><strong>Travis.CI:</strong> 提供的是持续集成服务（Continuous Integration，简称 CI）。它绑定 Github 上面的项目，只要有新的代码，就会自动抓取。然后，提供一个运行环境，执行测试，完成构建，还能部署到服务器。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指offer笔记</title>
      <link href="/2019/04/08/%E5%89%91%E6%8C%87offer/"/>
      <url>/2019/04/08/%E5%89%91%E6%8C%87offer/</url>
      
        <content type="html"><![CDATA[<p><strong>1 在一个二维数组中（每个一维数组的长度相同）,每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</strong></p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Find</span>(<span class="params">target, array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> rowCount = array.length</span><br><span class="line">    <span class="keyword">let</span> colCount = array[<span class="number">0</span>].length</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = rowCount - <span class="number">1</span>, j = <span class="number">0</span>; i &gt;= <span class="number">0</span> &amp;&amp; j &lt; colCount;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (target === array[i][j]) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">if</span> (target &gt; array[i][j]) &#123;</span><br><span class="line">            j++</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i--</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2 请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy,则经过替换之后的字符串为We%20Are%20Happy。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceSpace1</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> reg = <span class="regexp">/\s/g</span></span><br><span class="line">    <span class="keyword">return</span> str.replace(reg, <span class="string">'%20'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>用空间换时间</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceSpace2</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> newStr = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] === <span class="string">' '</span>) &#123;</span><br><span class="line">            newStr += <span class="string">'%20'</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newStr += str[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newStr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>节约空间，直接操作原字符串，倒序插入</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceSpace3</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 先统计空格总数，确定最后一个字符的位置</span></span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> strArr = str.split(<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; strArr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (strArr[i] === <span class="string">' '</span>) count++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 注意，要将字符串转化为数组之后才能进行从后往前扩展赋值的操作</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = strArr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (strArr[i] !== <span class="string">' '</span>)</span><br><span class="line">            strArr[i + <span class="number">2</span> * count] = strArr[i]</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            count--</span><br><span class="line">            strArr[i + <span class="number">2</span> * count] = <span class="string">'%'</span></span><br><span class="line">            strArr[i + <span class="number">2</span> * count + <span class="number">1</span>] = <span class="string">'2'</span></span><br><span class="line">            strArr[i + <span class="number">2</span> * count + <span class="number">2</span>] = <span class="string">'0'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> strArr.join(<span class="string">''</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//console.log(replaceSpace3('hello world'));</span></span><br></pre></td></tr></table></figure><p><strong>3  输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。</strong></p><p><strong>方法1：使用尾递归</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printListFromTailToHead1</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> list = []</span><br><span class="line">    <span class="keyword">let</span> node = head</span><br><span class="line">    <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            list = printListFromTailToHead(node.next)</span><br><span class="line">        &#125;</span><br><span class="line">        list.push(node.val)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法2：使用栈</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printListFromTailToHead2</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> list = []</span><br><span class="line">    <span class="keyword">let</span> node = head</span><br><span class="line">    <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">        list.unshift(node.val) **先把首节点放进去</span><br><span class="line">        <span class="keyword">while</span> (node.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            node = node.next</span><br><span class="line">            list.unshift(node.val) **依次放入下一个节点值</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(val, next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> node4 = <span class="keyword">new</span> Node(<span class="number">4</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">let</span> node3 = <span class="keyword">new</span> Node(<span class="number">3</span>, node4)</span><br><span class="line"><span class="keyword">let</span> node2 = <span class="keyword">new</span> Node(<span class="number">2</span>, node3)</span><br><span class="line"><span class="keyword">let</span> node1 = <span class="keyword">new</span> Node(<span class="number">1</span>, node2)</span><br><span class="line"><span class="comment">//console.log(printListFromTailToHead2(node1));</span></span><br></pre></td></tr></table></figure><p><strong>4 输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。 假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</strong></p><p> 先序遍历特点：第一个值是根节点<br> 中序遍历特点：根节点左边都是左子树，右边都是右子树<br> 思路：<br> 首先根据根节点a将中序遍历划分为两部分，左边为左子树，右边为右子树<br> 在左子树中根据第一条规则递归，得出左子树<br> 在右子树中根据第一条规则递归，得出右子树<br> 最后合成一棵树</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reConstructBinaryTree</span>(<span class="params">pre, vin</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pre.length == <span class="number">0</span> || vin.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    let index = vin.indexOf(pre[0]) ##根节点在vin的索引</span><br><span class="line">    let left = vin.slice(0, index) ##中序左子树</span><br><span class="line">    let right = vin.slice(index + 1) ##中序右子树</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        val: pre[<span class="number">0</span>],</span><br><span class="line">        left: reConstructBinaryTree(pre.slice(<span class="number">1</span>, index + <span class="number">1</span>), left),</span><br><span class="line">        right: reConstructBinaryTree(pre.slice(index + <span class="number">1</span>), right)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5 用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</strong></p><p> 分析：<br> 入队：将元素进栈A<br> 出队：判断栈B是否为空，如果为空，则将栈A中所有元素pop，并push进栈B，栈B出栈；<br> 如果不为空，栈B直接出栈。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> inStack = [],</span><br><span class="line">    outStack = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    inStack.push(node)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (inStack.length === <span class="number">0</span> &amp;&amp; outStack.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span> (!outStack.length) &#123;</span><br><span class="line">        <span class="keyword">while</span> (inStack.length) &#123;</span><br><span class="line">            outStack.push(inStack.pop())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> outStack.pop()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6 把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个非减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。</strong></p><p><strong>方法1：直接找出数组最小值</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">minNumberInRotateArray</span>(<span class="params">rotateArray</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (rotateArray.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> min = rotateArray[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> rotateArray) &#123;</span><br><span class="line">        min = i &lt; min ? i : min</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法2：直接找出开始非递增的值. 非减排序数组的旋转数组，遍历找到第一个小于前一个数的值即为最小值</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">minNumberInRotateArray</span>(<span class="params">rotateArray</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!rotateArray.length) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; rotateArray.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rotateArray[i] &lt; rotateArray[i - <span class="number">1</span>])</span><br><span class="line">            <span class="keyword">return</span> rotateArray[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rotateArray[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法3：二分查找，根据中间值进行判断</strong><br>中间元素大于第一个元素，则中间元素位于前面的递增子数组，此时最小元素位于中间元素的后面。我们可以让第一个指针left指向中间元素。<br>移动之后，第一个指针仍然位于前面的递增数组中。<br>中间元素小于第一个元素，则中间元素位于后面的递增子数组，此时最小元素位于中间元素的前面。我们可以让第二个指针right指向中间元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">minNumberInRotateArray</span>(<span class="params">rotateArray</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> size = rotateArray.length</span><br><span class="line">    <span class="keyword">if</span> (size === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        **定义left指针、right指针</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>,</span><br><span class="line">        right = size - <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> mid = <span class="number">0</span></span><br><span class="line">        **确保是旋转数组</span><br><span class="line">    <span class="keyword">while</span> (rotateArray[left] &gt; rotateArray[right]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (right - left === <span class="number">1</span>) &#123;</span><br><span class="line">            mid = right</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        **这里注意要将小数化为整数，否则mid为小数，导致后面结果均为<span class="literal">undefined</span></span><br><span class="line">        mid = left + <span class="built_in">Math</span>.floor((right - left) / <span class="number">2</span>)</span><br><span class="line">            **如果rotateArray[left] rotateArray[right] rotateArray[mid]三者相等</span><br><span class="line">            **无法确定中间元素是属于前面还是后面的递增子数组</span><br><span class="line">            **只能顺序查找</span><br><span class="line">        <span class="keyword">if</span> (rotateArray[left] == rotateArray[right] &amp;&amp; rotateArray[left] == rotateArray[mid]) &#123;</span><br><span class="line">            <span class="keyword">return</span> _MinOrder(rotateArray, left, right)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rotateArray[mid] &gt; rotateArray[left]) &#123;</span><br><span class="line">            left = mid</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rotateArray[mid]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_MinOrder</span>(<span class="params">array, left, right</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> min = array[left]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = left; i &lt; right; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[i] &lt; min)</span><br><span class="line">            min = array[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let arr = [4, 5, 6, 7, 2, 3]</span></span><br><span class="line"><span class="comment">// console.log(minNumberInRotateArray(arr));</span></span><br></pre></td></tr></table></figure><p><strong>7 大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。n&lt;=39</strong><br><strong>方法1：正向相加，以下两种写法是一样的</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fibonacci</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span> || n === <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> n1 = <span class="number">1</span>,</span><br><span class="line">        n2 = <span class="number">1</span>,</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">        res = n1 + n2</span><br><span class="line">        n1 = n2</span><br><span class="line">        n2 = res</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fibonacci</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> n1 = <span class="number">0</span>,</span><br><span class="line">        n2 = <span class="number">1</span>,</span><br><span class="line">        res</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        res = n1 + n2</span><br><span class="line">        n1 = n2</span><br><span class="line">        n2 = res</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法2：使用递归（速度太慢，占用大量内存，不建议使用）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fibonacci</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> Fibonacci(n - <span class="number">1</span>) + Fibonacci(n - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>8 一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。</strong><br> 分析：同样是斐波拉契数列，但是与上述的斐波拉契数列不同<br> 上面的为 0 | 1 1 2 3 5 ……<br> 本题的为 0 | 1 2 3 5 8 ……</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jumpFloor</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (number &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (number === <span class="number">1</span> || number === <span class="number">2</span>) <span class="keyword">return</span> number</span><br><span class="line">    <span class="keyword">let</span> n1 = <span class="number">1</span>,</span><br><span class="line">        n2 = <span class="number">2</span>,</span><br><span class="line">        res</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; number; i++) &#123;</span><br><span class="line">        res = n1 + n2</span><br><span class="line">        n1 = n2</span><br><span class="line">        n2 = res</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>9 一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</strong><br> 分析：f(n) = f(n-1) + f(n-2) + f(n-3) + … + f(1) =f(n-1)+f(n-1)=2*f(n-1)<br> 数列类似于1 2 4 8 16……</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jumpFloorII</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (number &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (number === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * jumpFloorII(number - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用递归</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jumpFloorII</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (number &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (number === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= number; i++) &#123;</span><br><span class="line">        res = <span class="number">2</span> * res</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用位运算，报错：未通过所有的测试用例，why？</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jumpFloorII</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res &lt;&lt; (number - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>10 输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。</strong><br> <strong>普通计算</strong><br> ‘&gt;&gt;&gt;’是无视符号位的右移，&gt;&gt;右移是补符号位，所以负数补1造成死循环</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NumberOf1</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    if (n &lt; 0) n = n &gt;&gt;&gt; 0 ##计算补码</span><br><span class="line">    <span class="keyword">let</span> res = n.toString(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; res.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (res[i] === <span class="string">'1'</span>) count++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>利用位运算符计算</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NumberOf1</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (n !== <span class="number">0</span>) &#123;</span><br><span class="line">        count++ **如果一个整数不为<span class="number">0</span>，那么这个整数至少有一位是<span class="number">1</span></span><br><span class="line">        n = n &amp; (n - 1) ##将二进制的最后一个1变为0</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>11 给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。</strong><br><strong>传统公式求解时间复杂度O(n)</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Power</span>(<span class="params">base, exponent</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">Math</span>.abs(exponent); i++) &#123;</span><br><span class="line">        result *= base</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (exponent &lt; <span class="number">0</span>) result = <span class="number">1</span> / result</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>递归，事件复杂度O(logn)</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Power</span>(<span class="params">base, exponent</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="built_in">Math</span>.abs(exponent)</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">0</span> &amp;&amp; base !== <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> base</span><br><span class="line">    <span class="keyword">let</span> result = Power(base, n &gt;&gt; <span class="number">1</span>)</span><br><span class="line">    result *= result</span><br><span class="line">    <span class="keyword">if</span> ((n &amp; <span class="number">1</span>) === <span class="number">1</span>) result *= base</span><br><span class="line">    <span class="keyword">if</span> (exponent &lt; <span class="number">0</span>) result = <span class="number">1</span> / result</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>综合解法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Power</span>(<span class="params">base, exponent</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (exponent == <span class="number">0</span> &amp;&amp; base != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (exponent == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> base;</span><br><span class="line">    <span class="keyword">if</span> (base == <span class="number">0</span> &amp;&amp; exponent &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (base == <span class="number">0</span> &amp;&amp; exponent &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> n = exponent;</span><br><span class="line">    <span class="keyword">if</span> (exponent &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        n = -exponent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> result = Power(base, n &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    result *= result;</span><br><span class="line">    <span class="keyword">if</span> ((n &amp; <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">        result *= base;</span><br><span class="line">    <span class="keyword">if</span> (exponent &lt; <span class="number">0</span>)</span><br><span class="line">        result = <span class="number">1</span> / result;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>12 输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分。 并保证奇数和奇数，偶数和偶数之间的相对位置不变。</strong></p><p><strong>方法1：另开空间</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reOrderArray</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> odds = [],</span><br><span class="line">        evens = []</span><br><span class="line">    array.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            evens.push(item)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            odds.push(item)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> odds.concat(evens)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 采用插入排序，不正确</span></span><br><span class="line"><span class="comment">// function reOrderArray2(array) &#123;</span></span><br><span class="line"><span class="comment">//     for (let i = 1; i &lt; array.length; i++) &#123;</span></span><br><span class="line"><span class="comment">//         if (array[i] % 2 == 1) &#123;</span></span><br><span class="line"><span class="comment">//             for (let j = i; j &gt; 0; j--) &#123;</span></span><br><span class="line"><span class="comment">//                 if (array[j - 1] % 2 == 0) &#123;</span></span><br><span class="line"><span class="comment">//                     let temp = array[j];</span></span><br><span class="line"><span class="comment">//                     array[j] = array[j - 1];</span></span><br><span class="line"><span class="comment">//                     array[j - 1] = temp;</span></span><br><span class="line"><span class="comment">//                 &#125;</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p><strong>13 输入一个链表，输出该链表中倒数第k个结点。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*function ListNode(x)&#123;</span></span><br><span class="line"><span class="comment">    this.val = x;</span></span><br><span class="line"><span class="comment">    this.next = null;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br></pre></td></tr></table></figure><p> 分析：定义两个指针快指针和慢指针，让快指针先走(k-1)步<br> 再让快指针和慢指针同时走，快指针走完时，慢指针就到达了倒数第k个节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FindKthToTail</span>(<span class="params">head, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span> || k &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> fastNode = head,</span><br><span class="line">        slowNode = head</span><br><span class="line">        **注意这里是先走k<span class="number">-1</span>步</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; k; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fastNode.next == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">        fastNode = fastNode.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (fastNode.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        fastNode = fastNode.next</span><br><span class="line">        slowNode = slowNode.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slowNode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>14 输入一个链表，反转链表后，输出新链表的表头。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ReverseList</span>(<span class="params">pHead</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pHead == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="literal">null</span>,</span><br><span class="line">        next = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">while</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//做循环，如果当前节点不为空的话，始终执行此循环，此循环的目的就是让当前节点从指向next到指向pre</span></span><br><span class="line">        <span class="comment">//如此就可以做到反转链表的效果</span></span><br><span class="line">        <span class="comment">//先用next保存head的下一个节点的信息，保证单链表不会因为失去head节点的原next节点而就此断裂</span></span><br><span class="line">        next = head.next;</span><br><span class="line">        <span class="comment">//保存完next，就可以让head从指向next变成指向pre了，代码如下</span></span><br><span class="line">        head.next = pre;</span><br><span class="line">        <span class="comment">//head指向pre后，就继续依次反转下一个节点</span></span><br><span class="line">        <span class="comment">//让pre，head，next依次向后移动一个节点，继续下一次的指针反转</span></span><br><span class="line"></span><br><span class="line">        pre = head;</span><br><span class="line">        head = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>15 输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。</strong><br><strong>方法1：采用递归版本</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Merge</span>(<span class="params">pHead1, pHead2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pHead1 == <span class="literal">null</span>) <span class="keyword">return</span> pHead2</span><br><span class="line">    <span class="keyword">if</span> (pHead2 == <span class="literal">null</span>) <span class="keyword">return</span> pHead1</span><br><span class="line">    <span class="keyword">if</span> (pHead1.val &lt; pHead2.val) &#123;</span><br><span class="line">        pHead1.next = Merge(pHead1.next, pHead2)</span><br><span class="line">        <span class="keyword">return</span> pHead1</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        pHead2.next = Merge(pHead1, pHead2.next)</span><br><span class="line">        <span class="keyword">return</span> pHead2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法2：采用非递归版本</strong><br> 比较两个链表的首结点，哪个小的的结点则合并到第三个链表尾结点，并向前移动一个结点。<br> 步骤一结果会有一个链表先遍历结束，或者没有<br> 第三个链表尾结点指向剩余未遍历结束的链表<br> 返回第三个链表首结点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Merge</span>(<span class="params">pHead1, pHead2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pHead1) <span class="keyword">return</span> pHead2</span><br><span class="line">    <span class="keyword">if</span> (!pHead2) <span class="keyword">return</span> pHead1</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> head</span><br><span class="line">    <span class="keyword">if</span> (pHead1.val &lt;= pHead2.val) &#123;</span><br><span class="line">        head = pHead1</span><br><span class="line">        pHead1 = pHead1.next</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        head = pHead2</span><br><span class="line">        pHead2 = pHead2.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> p = head</span><br><span class="line">    <span class="keyword">while</span> (pHead1 &amp;&amp; pHead2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pHead1.val &lt;= pHead2.val) &#123;</span><br><span class="line">            p.next = pHead1</span><br><span class="line">            pHead1 = pHead1.next</span><br><span class="line">            p = p.next</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p.next = pHead2</span><br><span class="line">            pHead2 = pHead2.next</span><br><span class="line">            p = p.next</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!pHead1) p.next = pHead2</span><br><span class="line">    <span class="keyword">if</span> (!pHead2) p.next = pHead1</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>16 输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* function TreeNode(x) &#123;</span></span><br><span class="line"><span class="comment">    this.val = x;</span></span><br><span class="line"><span class="comment">    this.left = null;</span></span><br><span class="line"><span class="comment">    this.right = null;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br></pre></td></tr></table></figure><p><strong>方法1</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HasSubtree</span>(<span class="params">pRoot1, pRoot2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">false</span></span><br><span class="line">        <span class="comment">//当Tree1和Tree2都不为零的时候，才进行比较。否则直接返回false</span></span><br><span class="line">    <span class="keyword">if</span> (pRoot1 != <span class="literal">null</span> &amp;&amp; pRoot2 != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pRoot1.val === pRoot2.val) &#123;</span><br><span class="line">            <span class="comment">//以这个根节点为为起点判断是否包含Tree2</span></span><br><span class="line">            flag = _hasSubtree(pRoot1, pRoot2)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果找不到，那么就再去root的左儿子当作起点，去判断时候包含Tree2</span></span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            flag = HasSubtree(pRoot1.left, pRoot2)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果还找不到，那么就再去root的右儿子当作起点，去判断时候包含Tree2</span></span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            flag = HasSubtree(pRoot1.right, pRoot2)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断以node1为根的子树与以node2为根的子树是否完全相等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_hasSubtree</span>(<span class="params">node1, node2</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//如果Tree2已经遍历完了都能对应的上，返回true</span></span><br><span class="line">    <span class="keyword">if</span> (node2 == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果Tree2还没有遍历完，Tree1却遍历完了。返回false</span></span><br><span class="line">    <span class="keyword">if</span> (node1 == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果其中有一个点没有对应上，返回false</span></span><br><span class="line">    <span class="keyword">if</span> (node1.val != node2.val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果根节点对应的上，那么就分别去子节点里面匹配</span></span><br><span class="line">    <span class="keyword">return</span> _hasSubtree(node1.left, node2.left) &amp;&amp; _hasSubtree(node1.right, node2.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法2：使用短路版本进行改写，方法同上，只是简化了代码，但是测试不通过？</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HasSubtree</span>(<span class="params">node1, node2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node1 == <span class="literal">null</span> || node2 == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> _hasSubtree(node1, node2) ||</span><br><span class="line">        HasSubtree(node1.left, node2) ||</span><br><span class="line">        HasSubtree(node1.right, node2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_hasSubtree</span>(<span class="params">pRoot1, pRoot2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pRoot2 == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (pRoot1 == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (pRoot1.val === pRoot2.val) &#123;</span><br><span class="line">        <span class="keyword">return</span> _hasSubtree(pRoot1.left, pRoot2.left) &amp;&amp; _hasSubtree(pRoot1.right, pRoot2.right)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>17 操作给定的二叉树，将其变换为源二叉树的镜像。</strong><br><strong>方法1:采用递归</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Mirror</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> temp = root.left</span><br><span class="line">    root.left = root.right</span><br><span class="line">    root.right = temp</span><br><span class="line">    <span class="keyword">if</span> (root.left) &#123; Mirror(root.left) &#125;</span><br><span class="line">    <span class="keyword">if</span> (root.right) &#123; Mirror(root.right) &#125;</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>18 输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尚未想到思路</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printMatrix</span>(<span class="params">matrix</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>19 定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。</strong><br> <strong>分析：</strong><br> 思路：利用一个辅助栈来存放最小值<br>​     栈  3，4，2，5，1<br>​     辅助栈 3，3，2，2，1<br> 每入栈一次，就与辅助栈顶比较大小，如果小就入栈，如果大就入栈当前的辅助栈顶<br> 当出栈时，辅助栈也要出栈<br> 这种做法可以保证辅助栈顶一定都当前栈的最小值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stack1 = [], <span class="comment">//主栈</span></span><br><span class="line">    stack2 = [] <span class="comment">//辅助栈</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    stack1.push(value)</span><br><span class="line">    <span class="keyword">if</span> (!stack2) &#123;</span><br><span class="line">        stack2.push(value)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &lt;= stack2.top()) &#123;</span><br><span class="line">        stack2.push(value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (stack2.top() === stack1.top()) &#123;</span><br><span class="line">        stack2.pop()</span><br><span class="line">    &#125;</span><br><span class="line">    stack1.pop()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">top</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stack1[stack1.length - <span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">min</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stack2[stack2.length - <span class="number">1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>19 输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。</strong><br> <strong>分析：</strong><br> 入栈1,2,3,4,5<br> 出栈4,5,3,2,1<br> 借用一个辅助的栈，遍历压栈顺序，先讲第一个放入栈中，这里是1，<br> 然后判断栈顶元素是不是出栈顺序的第一个元素，这里是4，很显然1≠4，<br> 所以我们继续压栈，直到相等以后开始出栈，出栈一个元素，则将出栈顺序向后移动一位，直到不相等，这样循环等压栈顺序遍历完成，<br> 如果辅助栈还不为空，说明弹出序列不是该栈的弹出顺序。</p><p> 测试未通过,why？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IsPopOrder1</span>(<span class="params">pushV, popV</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((!pushV) || (!popV)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">let</span> stack = []</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; pushV.length; i++) &#123;</span><br><span class="line">        stack.push(pushV[i])</span><br><span class="line">            <span class="comment">//如果栈不为空，且栈顶元素等于弹出序列</span></span><br><span class="line">        <span class="keyword">while</span> (stack.length !== <span class="number">0</span> &amp;&amp; stack[stack.length - <span class="number">1</span>] === popV[index]) &#123;</span><br><span class="line">            stack.pop()</span><br><span class="line">            index++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.length === <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 和以上解法一样，j相当于index</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IsPopOrder2</span>(<span class="params">pushV, popV</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> list = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; pushV.length; i++) &#123;</span><br><span class="line">        list.push(pushV[i]);</span><br><span class="line">        <span class="keyword">while</span> (list.length !== <span class="number">0</span> &amp;&amp; list[list.length - <span class="number">1</span>] == popV[j]) &#123;</span><br><span class="line">            list.pop();</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list.length === <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>20 从上往下打印出二叉树的每个节点，同层节点从左至右打印。（层次遍历，借助队列实现）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* function TreeNode(x) &#123;</span></span><br><span class="line"><span class="comment">    this.val = x;</span></span><br><span class="line"><span class="comment">    this.left = null;</span></span><br><span class="line"><span class="comment">    this.right = null;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PrintFromTopToBottom</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> nodes = [],</span><br><span class="line">        vals = []</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> vals</span><br><span class="line">    nodes.push(root)</span><br><span class="line">    <span class="keyword">while</span> (nodes.length) &#123;</span><br><span class="line">        <span class="keyword">let</span> cur = nodes.shift()</span><br><span class="line">        vals.push(cur.val)</span><br><span class="line">        <span class="keyword">if</span> (cur.left) &#123;</span><br><span class="line">            nodes.push(cur.left)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cur.right) &#123;</span><br><span class="line">            nodes.push(cur.right)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vals</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>21 输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。</strong></p><p><strong>思路：</strong><br>已知条件：后序序列最后一个值为root；二叉搜索树左子树值都比root小，右子树值都比root大。<br>1、确定root；<br>2、遍历序列（除去root结点），找到第一个大于root的位置，则该位置左边为左子树，右边为右子树；<br>3、遍历右子树，若发现有小于root的值，则直接返回false；<br>4、分别判断左子树和右子树是否仍是二叉搜索树（即递归步骤1、2、3）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">VerifySquenceOfBST</span>(<span class="params">sequence</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> left = [],</span><br><span class="line">        right = []</span><br><span class="line">    <span class="keyword">let</span> root</span><br><span class="line">    <span class="keyword">if</span> (sequence.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">let</span> index <span class="comment">//左右子树界限</span></span><br><span class="line">    root = sequence[sequence.length - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (; i &lt; sequence.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sequence[i] &gt; root) <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &lt; sequence.length - <span class="number">1</span>; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sequence[j] &lt; root) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i !== <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> m = <span class="number">0</span>; m &lt; i; m++)</span><br><span class="line">            left.push(sequence[m])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i !== sequence.length - <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> m = <span class="number">0</span>; m &lt; i; m++)</span><br><span class="line">            right.push(sequence[m])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> leftFlag = <span class="literal">true</span>,</span><br><span class="line">        rightFlag = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (left.length &gt; <span class="number">1</span>) leftFlag = VerifySquenceOfBST(left)</span><br><span class="line">    <span class="keyword">if</span> (right.length &gt; <span class="number">1</span>) VerifySquenceOfBST(right)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (leftFlag &amp;&amp; rightFlag)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法2：</strong></p><p><strong>思路：找住二叉查找树的特点：左子树&lt;根&lt;=右子树  使用分治思想</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">VerifySquenceOfBST</span>(<span class="params">sequence</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sequence.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (sequence.length === <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> _judge(sequence, <span class="number">0</span>, sequence.length - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_judge</span>(<span class="params">a, start, end</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt;= end) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">let</span> i = start</span><br><span class="line">    <span class="keyword">while</span> (a[i] &lt; a[end]) &#123;</span><br><span class="line">        ++i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &lt; end; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[j] &lt; a[end])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _judge(a, start, i - <span class="number">1</span>) &amp;&amp; _judge(a, i, end - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>22 输入一颗二叉树的跟节点和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。(注意: 在返回值的list中，数组长度大的数组靠前)</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* function TreeNode(x) &#123;</span></span><br><span class="line"><span class="comment">    this.va = x;</span></span><br><span class="line"><span class="comment">    this.left = null;</span></span><br><span class="line"><span class="comment">    this.right = null;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"><span class="comment">//可以使用递归解决，但是测试不通过</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FindPath</span>(<span class="params">root, expectNumber</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> listAll = [],</span><br><span class="line">        list = []</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> listAll</span><br><span class="line">    list.push(root.val)</span><br><span class="line">    expectNumber -= root.val</span><br><span class="line">    <span class="keyword">if</span> (expectNumber == <span class="number">0</span> &amp;&amp; root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">        listAll.push(list)</span><br><span class="line">    &#125;</span><br><span class="line">    FindPath(root.left, expectNumber)</span><br><span class="line">    FindPath(root.right, expectNumber)</span><br><span class="line">    list.pop()</span><br><span class="line">    <span class="keyword">return</span> listAll</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>23 输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。</strong></p><p>（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*function RandomListNode(x)&#123;</span></span><br><span class="line"><span class="comment">    this.label = x;</span></span><br><span class="line"><span class="comment">    this.next = null;</span></span><br><span class="line"><span class="comment">    this.random = null;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">//方法1:递归</span></span><br><span class="line"><span class="comment">//此题转化为一个头结点和除去头结点剩余部分，剩余部分操作和原问题一致</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Clone</span>(<span class="params">pHead</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pHead == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用new一个对象无法测试通过</span></span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="keyword">new</span> RandomListNode(pHead.x)</span><br><span class="line">    <span class="keyword">let</span> newNode = pHead</span><br><span class="line"></span><br><span class="line">    newNode.next = pHead.next</span><br><span class="line">    newNode.random = pHead.random</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开始递归</span></span><br><span class="line">    newNode.next = Clone(pHead.next)</span><br><span class="line">    <span class="keyword">return</span> newNode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法2：三步走——无法测试通过</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Clone</span>(<span class="params">pHead</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pHead == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> currentNode = pHead;</span><br><span class="line">    <span class="comment">//1、复制每个结点，如复制结点A得到A1，将结点A1插到结点A后面；</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> cloneNode = currentNode;</span><br><span class="line">        <span class="keyword">let</span> nextNode = currentNode.next;</span><br><span class="line">        currentNode.next = cloneNode;</span><br><span class="line">        cloneNode.next = nextNode;</span><br><span class="line">        currentNode = nextNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    currentNode = pHead;</span><br><span class="line">    <span class="comment">//2、重新遍历链表，复制老结点的随机指针给新结点，如A1.random = A.random.next;</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode != <span class="literal">null</span>) &#123;</span><br><span class="line">        currentNode.next.random = currentNode.random == <span class="literal">null</span> ? <span class="literal">null</span> : currentNode.random.next;</span><br><span class="line">        currentNode = currentNode.next.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、拆分链表，将链表拆分为原链表和复制后的链表</span></span><br><span class="line">    currentNode = pHead;</span><br><span class="line">    <span class="keyword">let</span> pCloneHead = pHead.next;</span><br><span class="line">    <span class="keyword">while</span> (currentNode != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> cloneNode = currentNode.next;</span><br><span class="line">        currentNode.next = cloneNode.next;</span><br><span class="line">        cloneNode.next = cloneNode.next == <span class="literal">null</span> ? <span class="literal">null</span> : cloneNode.next.next;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pCloneHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>24 输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。</strong></p><p><strong>方法1：非递归版</strong><br>解题思路：<br>1.核心是中序遍历的非递归算法。<br>2.修改当前遍历节点与前一遍历节点的指针指向。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Convert</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> stack = []</span><br><span class="line">    <span class="keyword">let</span> p = root;</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="literal">null</span>; 用于保存中序遍历序列的上一节点</span><br><span class="line">    <span class="keyword">let</span> isFirst = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">null</span> || stack.length !== <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(p);</span><br><span class="line">            p = p.left;</span><br><span class="line">        &#125;</span><br><span class="line">        p = stack.pop();</span><br><span class="line">        <span class="keyword">if</span> (isFirst) &#123;</span><br><span class="line">            root = p; 将中序遍历序列中的第一个节点记为root</span><br><span class="line">            pre = root;</span><br><span class="line">            isFirst = <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pre.right = p;</span><br><span class="line">            p.left = pre;</span><br><span class="line">            pre = p;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法二：递归版</strong><br>解题思路：<br>1.将左子树构造成双链表，并返回链表头节点。<br>2.定位至左子树双链表最后一个节点。<br>3.如果左子树链表不为空的话，将当前root追加到左子树链表。<br>4.将右子树构造成双链表，并返回链表头节点。<br>5.如果右子树链表不为空的话，将该链表追加到root节点之后。<br>6.根据左子树链表是否为空确定返回的节点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Convert</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    <span class="number">1.</span>将左子树构造成双链表，并返回链表头节点</span><br><span class="line">    <span class="keyword">let</span> left = Convert(root.left);</span><br><span class="line">    <span class="keyword">let</span> p = left;</span><br><span class="line">    <span class="number">2.</span>定位至左子树双链表最后一个节点</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">null</span> &amp;&amp; p.right != <span class="literal">null</span>) &#123;</span><br><span class="line">        p = p.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">3.</span>如果左子树链表不为空的话，将当前root追加到左子树链表</span><br><span class="line">    <span class="keyword">if</span> (left != <span class="literal">null</span>) &#123;</span><br><span class="line">        p.right = root;</span><br><span class="line">        root.left = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">4.</span>将右子树构造成双链表，并返回链表头节点</span><br><span class="line">    <span class="keyword">let</span> right = Convert(root.right);</span><br><span class="line">    <span class="number">5.</span>如果右子树链表不为空的话，将该链表追加到root节点之后</span><br><span class="line">    <span class="keyword">if</span> (right != <span class="literal">null</span>) &#123;</span><br><span class="line">        right.left = root;</span><br><span class="line">        root.right = right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left != <span class="literal">null</span> ? left : root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法三：改进递归版</strong><br>解题思路：<br>思路与方法二中的递归版一致，仅对第2点中的定位作了修改，<br>新增一个全局变量记录左子树的最后一个节点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Convert</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">        leftLast = root; 最后的一个节点可能为最右侧的叶节点</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">1.</span>将左子树构造成双链表，并返回链表头节点</span><br><span class="line">    <span class="keyword">let</span> left = Convert(root.left);</span><br><span class="line">    <span class="number">3.</span>如果左子树链表不为空的话，将当前root追加到左子树链表</span><br><span class="line">    <span class="keyword">if</span> (left != <span class="literal">null</span>) &#123;</span><br><span class="line">        leftLast.right = root;</span><br><span class="line">        root.left = leftLast;</span><br><span class="line">    &#125;</span><br><span class="line">    leftLast = root; 当根节点只含左子树时，则该根节点为最后一个节点</span><br><span class="line">    <span class="number">4.</span>将右子树构造成双链表，并返回链表头节点</span><br><span class="line">    <span class="keyword">let</span> right = Convert(root.right);</span><br><span class="line">    <span class="number">5.</span>如果右子树链表不为空的话，将该链表追加到root节点之后</span><br><span class="line">    <span class="keyword">if</span> (right != <span class="literal">null</span>) &#123;</span><br><span class="line">        right.left = root;</span><br><span class="line">        root.right = right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left != <span class="literal">null</span> ? left : root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>25 输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Permutation</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (str !== <span class="string">''</span>) dfs(str, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_dfs</span>(<span class="params">str, s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = str.length</span><br><span class="line">    <span class="keyword">if</span> (s === len) &#123;</span><br><span class="line">        result.push(str)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = s; i &lt; len; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != s &amp;&amp; str[s] == str[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">let</span> temp = str[s]</span><br><span class="line">        str[s] = str[i]</span><br><span class="line">        str[i] = str[s]</span><br><span class="line">            [str[s], str[i]] = [str[i], str[s]]</span><br><span class="line">        dfs(str, s + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>26 数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。</strong></p><p><strong>方法1：快速排序</strong><br>先对这个数组进行排序，在已排序的数组中，位于中间位置的数字就是超过数组长度一半的那个数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_quickSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> arr</span><br><span class="line">    <span class="keyword">let</span> pivotIndex = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">let</span> pivot = arr.splice(pivotIndex, <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> left = [],</span><br><span class="line">        right = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        arr[i] &lt;= pivot ? left.push(arr[i]) : right.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _quickSort(left).concat([pivot], _quickSort(right))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MoreThanHalfNum_Solution1</span>(<span class="params">numbers</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = numbers.length</span><br><span class="line">    <span class="keyword">let</span> sortedNumbers = _quickSort(numbers)</span><br><span class="line">    <span class="keyword">let</span> midNum = sortedNumbers[<span class="built_in">Math</span>.floor(len / <span class="number">2</span>)]</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sortedNumbers[i] === midNum) count++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count * <span class="number">2</span> &gt; len) <span class="keyword">return</span> midNum</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法2：直接使用键值对存储数和出现的次数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MoreThanHalfNum_Solution2</span>(<span class="params">numbers</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = numbers.length</span><br><span class="line">    <span class="keyword">let</span> json = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> key = numbers[i]</span><br><span class="line">        <span class="keyword">if</span> (json.hasOwnProperty(key)) &#123;</span><br><span class="line">            json[key]++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            json[key] = <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> json) &#123;</span><br><span class="line">        <span class="keyword">if</span> (json[key] * <span class="number">2</span> &gt; len) <span class="keyword">return</span> key</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法3：依次循环，直接统计出出现最多的数字</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MoreThanHalfNum_Solution3</span>(<span class="params">numbers</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = numbers.length</span><br><span class="line">    <span class="keyword">if</span> (len === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> num = numbers[<span class="number">0</span>],</span><br><span class="line">        count = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        numbers[i] == num ? count++ : count--</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                num = numbers[i]</span><br><span class="line">                count = <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (numbers[i] == num) &#123;</span><br><span class="line">            count++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count * <span class="number">2</span> &gt; len) <span class="keyword">return</span> num</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>26 输入n个整数，找出其中最小的K个数。</strong></p><p><strong>1)快排（针对找第k大的数，更快捷一些）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetLeastNumbers_Solution1</span>(<span class="params">input, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sorted = _quickSort(input)</span><br><span class="line">    <span class="keyword">return</span> sorted.slice(<span class="number">0</span>, k)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2）冒泡排序(测试不正确)</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetLeastNumbers_Solution2</span>(<span class="params">input, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = input.length</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (input[i + <span class="number">1</span>] &lt; input[i]) &#123;</span><br><span class="line">                <span class="keyword">let</span> temp = input[i + <span class="number">1</span>]</span><br><span class="line">                input[i + <span class="number">1</span>] = input[i]</span><br><span class="line">                input[i] = temp</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> input.slice(<span class="number">0</span>, k)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>27 计算连续子向量的最大和（包括正数和负数）</strong></p><p>分析：使用动态规划<br>F（i）：以array[i]为末尾元素的子数组的和的最大值，子数组的元素的相对位置不变<br>F（i）=max（F（i-1）+array[i],array[i]）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FindGreatestSumOfSubArray</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = array[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> max = array[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        max = <span class="built_in">Math</span>.max(max + array[i], array[i])</span><br><span class="line">        res = <span class="built_in">Math</span>.max(max, res)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FindGreatestSumOfSubArray</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!array) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> total = array[<span class="number">0</span>],</span><br><span class="line">        maxSum = array[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        total &gt;= <span class="number">0</span> ? total += array[i] : total = array[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> (total &gt; maxSum) maxSum = total</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxSum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>28 求出任意非负整数区间中1出现的次数（从1 到 n 中1出现的次数）。</strong></p><p>最直接的方法统计</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NumberOf1Between1AndN_Solution</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>,</span><br><span class="line">        charLen = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> str = i.toString()</span><br><span class="line">        charLen = str.length</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; charLen; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str[j] === <span class="string">'1'</span>)</span><br><span class="line">                count++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行超时:您的程序未能在规定时间内运行结束，请检查是否循环有错或算法复杂度过大。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NumberOf1Between1AndN_Solution</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = i</span><br><span class="line">        <span class="keyword">while</span> (i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp % <span class="number">10</span> === <span class="number">1</span>) count++</span><br><span class="line">                temp /= <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这种解法？</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NumberOf1Between1AndN_Solution</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ret = <span class="number">0</span>,</span><br><span class="line">        base = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n / base) &#123;</span><br><span class="line">        <span class="keyword">let</span> bit = (n / base) - (n / base) / <span class="number">10</span> * <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (bit == <span class="number">0</span>)</span><br><span class="line">            ret += n / (base * <span class="number">10</span>) * base;</span><br><span class="line">        <span class="keyword">if</span> (bit == <span class="number">1</span>)</span><br><span class="line">            ret += n / (base * <span class="number">10</span>) * base + (n - n / base * base) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (bit &gt; <span class="number">1</span>)</span><br><span class="line">            ret += (n / (base * <span class="number">10</span>) + <span class="number">1</span>) * base;</span><br><span class="line">        base *= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>29 输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个.所以在这里自定义一个比较大小的函数，比较两个字符串s1, s2大小的时候，先将它们拼接起来，比较s1+s2,和s2+s1那个大，如果s1+s2大，那说明s2应该放前面，所以按这个规则，s2就应该排在s1前面。</strong> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PrintMinNumber</span>(<span class="params">numbers</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!numbers) <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">    <span class="keyword">let</span> len = numbers.length</span><br><span class="line">    <span class="keyword">let</span> newArr = numbers.sort(_compare)</span><br><span class="line">    <span class="keyword">return</span> newArr.join(<span class="string">''</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现自定义的排序函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_compare</span>(<span class="params">n1, n2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> number1 = <span class="string">`<span class="subst">$&#123;n1&#125;</span><span class="subst">$&#123;n2&#125;</span>`</span></span><br><span class="line">    <span class="keyword">let</span> number2 = <span class="string">`<span class="subst">$&#123;n2&#125;</span><span class="subst">$&#123;n1&#125;</span>`</span></span><br><span class="line">    <span class="keyword">if</span> (number1 &gt; number2) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (number1 &lt; number2) <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>30 把只包含质因子2、3和5的数称作丑数（Ugly Number）。例如6、8都是丑数，但14不是，因为它包含质因子7。 习惯上我们把1当做是第一个丑数。求按从小到大的顺序的第N个丑数。</strong></p><p><strong>思路解析：</strong><br>一个丑数一定由另一个丑数乘以2或者乘以3或者乘以5得到，那么我们从1开始乘以2,3,5，就得到2,3,5三个丑数，在从这三个丑数出发乘以2,3,5就得到4，6,10,6，9,15,10,15,25九个丑数，我们发现这种方法会得到重复的丑数，而且我们题目要求第N个丑数，这样的方法得到的丑数也是无序的。那么我们可以维护三个队列：<br>（1）丑数数组： 1<br>乘以2的队列：2<br>乘以3的队列：3<br>乘以5的队列：5<br>选择三个队列头最小的数2加入丑数数组，同时将该最小的数乘以2,3,5放入三个队列；<br>（2）丑数数组：1,2<br>乘以2的队列：4<br>乘以3的队列：3，6<br>乘以5的队列：5，10<br>选择三个队列头最小的数3加入丑数数组，同时将该最小的数乘以2,3,5放入三个队列；<br>（3）丑数数组：1,2,3<br>乘以2的队列：4,6<br>乘以3的队列：6,9<br>乘以5的队列：5,10,15<br>……</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetUglyNumber_Solution</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">7</span>) <span class="keyword">return</span> index</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    res[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> t2 = <span class="number">0</span>,</span><br><span class="line">        t3 = <span class="number">0</span>,</span><br><span class="line">        t5 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; index; i++) &#123;</span><br><span class="line">        res[i] = <span class="built_in">Math</span>.min(res[t2] * <span class="number">2</span>, <span class="built_in">Math</span>.min(res[t3] * <span class="number">3</span>, res[t5] * <span class="number">5</span>));</span><br><span class="line">        <span class="keyword">if</span> (res[i] == res[t2] * <span class="number">2</span>) t2++;</span><br><span class="line">        <span class="keyword">if</span> (res[i] == res[t3] * <span class="number">3</span>) t3++;</span><br><span class="line">        <span class="keyword">if</span> (res[i] == res[t5] * <span class="number">5</span>) t5++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res[index - <span class="number">1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>31 在一个字符串(0&lt;=字符串长度&lt;=10000，全部由字母组成)中找到第一个只出现一次的字符,并返回它的位置, 如果没有则返回 -1（需要区分大小写）.</strong></p><p><strong>暴力搜索</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FirstNotRepeatingChar1</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!str) <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">let</span> count = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!count.hasOwnProperty(str[i])) &#123;</span><br><span class="line">            count[str[i]] = <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            count[str[i]]++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> str) &#123;</span><br><span class="line">        <span class="keyword">if</span> (count[str[i]] === <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存在漏洞</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FirstNotRepeatingChar</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!str) <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str.lastIndexOf(str[i]) === i) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`只在<span class="subst">$&#123;i&#125;</span>位出现了<span class="subst">$&#123;str[i]&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> str[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>32 在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数P。</strong></p><p><strong>思路：参考《剑指offer》用归并排序的思想， 时间复杂度O(nlogn)</strong><br>function InversePairs(data) {<br>​    write code here<br>}</p><p><strong>33 输入两个链表，找出它们的第一个公共结点。</strong></p><p>/<em>function ListNode(x){<br>​    this.val = x;<br>​    this.next = null;<br>}</em>/<br><strong>思路：用两个指针扫描”两个链表“，最终两个指针到达 null 或者到达公共结点。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FindFirstCommonNode</span>(<span class="params">pHead1, pHead2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> p1 = pHead1,</span><br><span class="line">        p2 = pHead2</span><br><span class="line">    <span class="keyword">while</span> (p1 !== p2) &#123;</span><br><span class="line">        p1 = (p1 == <span class="literal">null</span> ? pHead2 : p1.next)</span><br><span class="line">        p2 = (p2 == <span class="literal">null</span> ? pHead1 : p2.next)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p1</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//思路与上述相同</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FindFirstCommonNode</span>(<span class="params">pHead1, pHead2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> p1 = pHead1;</span><br><span class="line">    <span class="keyword">let</span> p2 = pHead2;</span><br><span class="line">    <span class="keyword">while</span> (p1 !== p2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p1 != <span class="literal">null</span>) p1 = p1.next;</span><br><span class="line">        <span class="keyword">if</span> (p2 != <span class="literal">null</span>) p2 = p2.next;</span><br><span class="line">        <span class="keyword">if</span> (p1 != p2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p1 == <span class="literal">null</span>) p1 = pHead2;</span><br><span class="line">            <span class="keyword">if</span> (p2 == <span class="literal">null</span>) p2 = pHead1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>34 统计一个数字在排序数组中出现的次数。</strong></p><p><strong>思路：由于数组有序，所以使用二分查找方法定位k的第一次出现位置和最后一次出现位置</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetNumberOfK</span>(<span class="params">data, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> firstIndex = _getFirst(data, k)</span><br><span class="line">    <span class="keyword">let</span> lastIndex = _getLast(data, k)</span><br><span class="line">    <span class="keyword">return</span> lastIndex - firstIndex + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取k在data数组中第一次出现的index</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_getFirst</span>(<span class="params">data, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span>,</span><br><span class="line">        end = data.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor(start, end)</span><br><span class="line">    <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">        <span class="keyword">if</span> (data[mid] &lt; k) &#123;</span><br><span class="line">            start = mid + <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            end = mid - <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        mid = <span class="built_in">Math</span>.floor(start, end)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> start</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取k在data数组中最后一次出现的index</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_getLast</span>(<span class="params">data, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span>,</span><br><span class="line">        end = data.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor(start, end)</span><br><span class="line">    <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">        <span class="keyword">if</span> (data[mid] &lt;= k) &#123;</span><br><span class="line">            start = mid + <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            end = mid - <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        mid = <span class="built_in">Math</span>.floor(start, end)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> end</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>35 输入一棵二叉树，求该树的深度。</strong></p><p>**从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。</p><p>/* function TreeNode(x) {<br>​    this.val = x;<br>​    this.left = null;<br>​    this.right = null;<br>} <em>/<br>*</em>方法1：采用递归实现**</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TreeDepth</span>(<span class="params">pRoot</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pRoot) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(TreeDepth(pRoot.left) + <span class="number">1</span>, TreeDepth(pRoot.right) + <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法2：非递归——层次遍历(测试未通过)</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TreeDepth</span>(<span class="params">pRoot</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pRoot == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> queue = []</span><br><span class="line">    queue.push(pRoot);</span><br><span class="line">    <span class="keyword">let</span> depth = <span class="number">0</span>,</span><br><span class="line">        count = <span class="number">0</span>,</span><br><span class="line">        nextCount = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (queue.length != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> top = queue.pop();</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">if</span> (top.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            queue.push(top.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (top.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            queue.push(top.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count == nextCount) &#123;</span><br><span class="line">            nextCount = queue.length;</span><br><span class="line">            count = <span class="number">0</span>;</span><br><span class="line">            depth++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> depth;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试同样未通过</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TreeDepth</span>(<span class="params">pRoot</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pRoot) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> queue = []</span><br><span class="line">    queue.push(pRoot)</span><br><span class="line">    <span class="keyword">let</span> level = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (queue) &#123;</span><br><span class="line">        <span class="keyword">let</span> len = queue.length</span><br><span class="line">        level++</span><br><span class="line">        <span class="keyword">while</span> (len--) &#123;</span><br><span class="line">            <span class="keyword">let</span> temp = queue[<span class="number">0</span>]</span><br><span class="line">            queue.pop()</span><br><span class="line">            <span class="keyword">if</span> (temp.left) queue.push(temp.left)</span><br><span class="line">            <span class="keyword">if</span> (temp.right) queue.push(temp.right)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> level</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>36 输入一棵二叉树，判断该二叉树是否是平衡二叉树。</strong></p><p><strong>方法1：利用剪枝</strong><br>改为从下往上遍历，如果子树是平衡二叉树，则返回子树的高度；如果发现子树不是平衡二叉树，<br>则直接停止遍历，这样至多只对每个结点访问一次。</p><p>测试未通过，请检查是否存在语法错误或者数组越界非法访问等情况</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IsBalanced_Solution</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _getDepth(root) != <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_getDepth</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> left = _getDepth(root.left)</span><br><span class="line">    <span class="keyword">if</span> (left == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">let</span> right = _getDepth(root.right)</span><br><span class="line">    <span class="keyword">if</span> (right == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.abs(left - right) &gt; <span class="number">1</span> ? <span class="number">-1</span> : <span class="number">1</span> + <span class="built_in">Math</span>.max(left, right)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法2：</strong><br>测试仍然未通过，请检查是否存在语法错误或者数组越界非法访问等情况</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isBalanced = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IsBalanced_Solution</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    _getDepth(root);</span><br><span class="line">    <span class="keyword">return</span> isBalanced;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_getDepth</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> left = getDepth(root.left);</span><br><span class="line">    <span class="keyword">let</span> right = getDepth(root.right);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(left - right) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        isBalanced = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> right &gt; left ? right + <span class="number">1</span> : left + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>37 一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。</strong></p><p>首先：位运算中异或的性质：两个相同数字异或=0，一个数和0异或还是它本身。<br>当只有一个数出现一次时，我们把数组中所有的数，依次异或运算，最后剩下的就是落单的数，因为成对儿出现的都抵消了。<br>依照这个思路，我们来看两个数（我们假设是AB）出现一次的数组。我们首先还是先异或，剩下的数字肯定是A、B异或的结果，这个结果的二进制中的1，表现的是A和B的不同的位。<br>我们就取第一个1所在的位数，假设是第3位，接着把原数组分成两组，分组标准是第3位是否为1。<br>如此，相同的数肯定在一个组，因为相同数字所有位都相同，而不同的数，肯定不在一组。<br>然后把这两个组按照最开始的思路，依次异或，剩余的两个结果就是这两个只出现一次的数字。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FindNumsAppearOnce</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> num1, num2</span><br><span class="line">    <span class="keyword">if</span> (array == <span class="literal">null</span> || array.length &lt; <span class="number">2</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">let</span> temp = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        temp ^= array[i]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> indexOf1 = _findFirstBit(temp)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_isBit(array[i], indexOf1))</span><br><span class="line">            num1 ^= array[i]</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            num2 ^= array[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [num1, num2]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找到第一个为1的二进制位</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_findFirstBit</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> indexBit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (((num &amp; <span class="number">1</span>) == <span class="number">0</span>) &amp;&amp; (indexBit) &lt; <span class="number">8</span> * <span class="number">4</span>) &#123;</span><br><span class="line">        num = num &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        ++indexBit;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> indexBit;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断这个数第index位是否为1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_isBit</span>(<span class="params">num, indexBit</span>) </span>&#123;</span><br><span class="line">    num = num &gt;&gt; indexBit;</span><br><span class="line">    <span class="keyword">return</span> (num &amp; <span class="number">1</span>) == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>38 有多少种连续的正数序列的和为sum(至少包括两个数)</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FindContinuousSequence</span>(<span class="params">sum</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = []</span><br><span class="line">    <span class="keyword">let</span> low = <span class="number">1</span>,</span><br><span class="line">        high = <span class="number">2</span></span><br><span class="line">        求和公式是(a0+an)*n/<span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> (high &gt; low) &#123;</span><br><span class="line">        <span class="keyword">let</span> cur = (high + low) * (high - low + <span class="number">1</span>) / <span class="number">2</span></span><br><span class="line">            <span class="comment">//相等，那么就将窗口范围的所有数添加进结果集</span></span><br><span class="line">        <span class="keyword">if</span> (cur == sum) &#123;</span><br><span class="line">            <span class="keyword">let</span> list = []</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = low; i &lt;= high; i++)</span><br><span class="line">                list.push(i)</span><br><span class="line">            result.push(list)</span><br><span class="line">            low++</span><br><span class="line">            <span class="comment">//如果当前窗口内的值之和小于sum，那么右边窗口右移一下</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur &lt; sum) &#123;</span><br><span class="line">            high++</span><br><span class="line">            <span class="comment">//如果当前窗口内的值之和大于sum，那么左边窗口右移一下</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            low++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>39 输入一个递增排序的数组和一个数字S，在数组中查找两个数，使得他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FindNumbersWithSum</span>(<span class="params">array, sum</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="keyword">let</span> len = array.length</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>,</span><br><span class="line">        j = len - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        找到的第一组（相差最大的）就是乘积最小的。</span><br><span class="line">        可以这样证明：考虑x+y=C（C是常数），x*y的大小。</span><br><span class="line">        不妨设y&gt;=x，y-x=d&gt;=<span class="number">0</span>，即y=x+d, <span class="number">2</span>x+d=C, x=(C-d)/<span class="number">2</span>, x*y=x(x+d)=(C-d)(C+d)/<span class="number">4</span>=(C^<span class="number">2</span>-d^<span class="number">2</span>)/<span class="number">4</span>，</span><br><span class="line">        也就是x*y是一个关于变量d的二次函数，对称轴是y轴，开口向下。</span><br><span class="line">        d是&gt;=<span class="number">0</span>的，d越大, x*y也就越小。</span><br><span class="line">        <span class="keyword">if</span> (array[i] + array[j] === sum) &#123;</span><br><span class="line">            res.push(array[i])</span><br><span class="line">            res.push(array[j])</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; array[i] + array[j] &gt; sum) --j;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; array[i] + array[j] &lt; sum) ++i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>40 对于一个给定的字符序列S，请你把其循环左移K位后的序列输出</strong></p><p>提交未通过</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LeftRotateString1</span>(<span class="params">str, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = str.length</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span> || n == <span class="number">0</span>) <span class="keyword">return</span> str;</span><br><span class="line">    n = n % len</span><br><span class="line">    str += str</span><br><span class="line">    <span class="keyword">return</span> str.slice(n, n + len)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//提交未通过</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LeftRotateString2</span>(<span class="params">str, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = str.length</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span> || n == <span class="number">0</span>) <span class="keyword">return</span> str;</span><br><span class="line">    <span class="keyword">let</span> s1 = str.slice(<span class="number">0</span>, n)</span><br><span class="line">    <span class="keyword">let</span> s2 = str.slice(n, len)</span><br><span class="line">    <span class="keyword">return</span> s2 + s1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//本地测试通过，但是提交不通过</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LeftRotateString3</span>(<span class="params">str, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = str.length</span><br><span class="line">    <span class="keyword">if</span> (len &lt;= <span class="number">0</span> || n &lt;= <span class="number">0</span>) <span class="keyword">return</span> str</span><br><span class="line">    n = n % len</span><br><span class="line">    <span class="keyword">let</span> s1 = _reverse(str.slice(<span class="number">0</span>, n), <span class="number">0</span>, n - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">let</span> s2 = _reverse(str.slice(n, len), n, len - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">let</span> res = _reverse(s1 + s2, <span class="number">0</span>, len - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_reverse</span>(<span class="params">str, start, end</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = str.split(<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = arr[start]</span><br><span class="line">        arr[start] = arr[end]</span><br><span class="line">        arr[end] = temp</span><br><span class="line">        start++, end--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr.join(<span class="string">''</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>41 单词顺序反转</strong></p><p>利用反转函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ReverseSentence1</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = str.split(<span class="string">' '</span>)</span><br><span class="line">    arr.reverse()</span><br><span class="line">    <span class="keyword">return</span> arr.join(<span class="string">' '</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用新数组存储反转单词</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ReverseSentence2</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (str.trim() == <span class="string">""</span>) <span class="keyword">return</span> str</span><br><span class="line">    <span class="keyword">let</span> arr = str.split(<span class="string">' '</span>)</span><br><span class="line">    <span class="keyword">let</span> temp = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        temp.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp.join(<span class="string">' '</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先反转整个句子，再依次反转每个单词</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ReverseSentence3</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = str.length</span><br><span class="line">    <span class="keyword">let</span> arr = str.split(<span class="string">''</span>)</span><br><span class="line">        判断句子中是否含有<span class="string">' '</span>字符，如果没有，则为一个单词，不做处理直接返回即可</span><br><span class="line">    <span class="keyword">if</span> (arr.includes(<span class="string">' '</span>)) &#123;</span><br><span class="line">        _reverse(arr, <span class="number">0</span>, len - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">let</span> blank = <span class="number">-1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] == <span class="string">' '</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> nextBlank = i</span><br><span class="line">                _reverse(arr, blank + <span class="number">1</span>, nextBlank - <span class="number">1</span>);</span><br><span class="line">                blank = nextBlank;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        _reverse(arr, blank + <span class="number">1</span>, len - <span class="number">1</span>) <span class="comment">//最后一个单词单独进行反转</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr.join(<span class="string">''</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_reverse</span>(<span class="params">arr, start, end</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = arr[start]</span><br><span class="line">        arr[start] = arr[end]</span><br><span class="line">        arr[end] = temp</span><br><span class="line">        start++, end--</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>42 有2个大王,2个小王(一副牌原本是54张)…</strong></p><p>随机从中抽出了5张牌，大\ 小 王可以看成任何数字, 并且A看作1, J为11, Q为12, K为13<br>求抽到顺子的概率<br>为了方便起见,你可以认为大小王是0。</p><p><strong>思路：</strong><br>满足条件：<br>1、max-min&lt;5<br>2、除0外没有重复的数字<br>3、数组长度为5</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IsContinuous</span>(<span class="params">numbers</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> map = &#123;&#125;</span><br><span class="line">    <span class="keyword">let</span> len = numbers.length,</span><br><span class="line">        max = <span class="number">-1</span>,</span><br><span class="line">        min = <span class="number">14</span></span><br><span class="line">    <span class="keyword">if</span> (len &lt; <span class="number">5</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!map[numbers[i]]) &#123;</span><br><span class="line">            map[numbers[i]] = <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map[numbers[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (numbers[i] == <span class="number">0</span>) <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (map[numbers[i]] &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">if</span> (numbers[i] &gt; max) max = numbers[i]</span><br><span class="line">        <span class="keyword">if</span> (numbers[i] &lt; min) min = numbers[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (max - min &lt; <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>43 随机指定一个数m,让编号为0的小朋友开始报数，小朋友的编号是从0到n-1.每次喊到m-1的那个小朋友要出列唱首歌并出列，再从下一个小朋友开始问最后留下的一个小朋友是谁？</strong></p><p>问题描述：n个人（编号0~(n-1))，从0开始报数，报到(m-1)的退出，剩下的人 继续从0开始报数。求胜利者的编号。</p><p><strong>思路1：数学归纳法——不懂…</strong><br>令f[i]表示i个人玩游戏报m退出最后胜利者的编号，最后的结果自然是f[n]。<br>递推公式<br>f[1]=0;<br>f[i]=(f[i-1]+m)%i;  (i&gt;1)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LastRemaining_Solution</span>(<span class="params">n, m</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> (LastRemaining_Solution(n - <span class="number">1</span>, m) + m) % n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路2：用数组模拟环——不懂…</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LastRemaining_Solution</span>(<span class="params">n, m</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">1</span> || m &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">let</span> array = []</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">-1</span>,</span><br><span class="line">        step = <span class="number">0</span>,</span><br><span class="line">        count = n</span><br><span class="line">    <span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        i++; <span class="comment">//指向上一个被删除对象的下一个元素。</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= n) i = <span class="number">0</span>; <span class="comment">//模拟环。</span></span><br><span class="line">        <span class="keyword">if</span> (array[i] == <span class="number">-1</span>) <span class="keyword">continue</span>; <span class="comment">//跳过被删除的对象。</span></span><br><span class="line">        step++; <span class="comment">//记录已走过的。</span></span><br><span class="line">        <span class="keyword">if</span> (step == m) &#123; <span class="comment">//找到待删除的对象。</span></span><br><span class="line">            array[i] = <span class="number">-1</span>;</span><br><span class="line">            step = <span class="number">0</span>;</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i; <span class="comment">//返回跳出循环时的i,即最后一个被设置为-1的元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>44 求1+2+3+…+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。</strong></p><p>共同点：一，利用利用短路 &amp;&amp; 来实现 if的功能；二，利用递归来实现循环while的功能<br>不同点：方法一：递归实现1+2+..+n;方法二：n(n+1)/2,递归实现n(n+1)；方法三，利用Math实现n(n+1)<br><strong>思路1：递归实现1+2+..+n</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sum_Solution</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = n</span><br><span class="line">    <span class="keyword">let</span> temp = n &amp;&amp; Sum_Solution(n - <span class="number">1</span>)</span><br><span class="line">    result += temp</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路2： n(n+1)/2,递归实现n(n+1)；</strong><br><strong>思路3，利用Math实现n(n+1)</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sum_Solution</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">Math</span>.pow(n, <span class="number">2</span>) + n) &gt;&gt; <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>45 写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。</strong></p><p>首先看十进制是如何做的： 5+7=12，三步走<br>第一步：相加各位的值，不算进位，得到2。<br>第二步：计算进位值，得到10. 如果这一步的进位值为0，那么第一步得到的值就是最终结果。<br>第三步：重复上述两步，只是相加的值变成上述两步的得到的结果2和10，得到12。</p><p>同样我们可以用三步走的方式计算二进制值相加： 5-101，7-111 第一步：相加各位的值，不算进位，得到010，二进制每位相加就相当于各位做异或操作，101^111。<br>第二步：计算进位值，得到1010，相当于各位做与操作得到101，再向左移一位得到1010，(101&amp;111)&lt;&lt;1。<br>第三步重复上述两步， 各位相加 010^1010=1000，进位值为100=(010&amp;1010)&lt;&lt;1。<br>继续重复上述两步：1000^100 = 1100，进位值为0，跳出循环，1100为最终结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Add</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (num2 != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = num1 ^ num2;</span><br><span class="line">        num2 = (num1 &amp; num2) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        num1 = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>46 将一个字符串转换成一个整数(实现Integer.valueOf(string)的功能，但是string不符合数字要求时返回0)，要求不能使用字符串转换整数的库函数。 数值为0或者字符串不是一个合法的数值则返回0。</strong></p><p>以下算法测试不通过，如输入+123,输出为0</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">StrToInt</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (str.trim() == <span class="string">''</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> symbol = <span class="number">1</span></span><br><span class="line">        判断正负号</span><br><span class="line">    <span class="keyword">if</span> (str[<span class="number">0</span>] == <span class="string">'-'</span>) &#123;</span><br><span class="line">        symbol = <span class="number">-1</span></span><br><span class="line">        str[<span class="number">0</span>] = <span class="string">'0'</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str[<span class="number">0</span>] == <span class="string">'+'</span>) &#123;</span><br><span class="line">        symbol = <span class="number">1</span></span><br><span class="line">        str[<span class="number">0</span>] = <span class="string">'0'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] &lt; <span class="string">'0'</span> || str[i] &gt; <span class="string">'9'</span>) &#123;</span><br><span class="line">            sum = <span class="number">0</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        sum = sum * <span class="number">10</span> + <span class="built_in">parseInt</span>(str[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> symbol * sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试通过！</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">StrToInt2</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> numlist = [<span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'+'</span>, <span class="string">'-'</span>]</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>,</span><br><span class="line">        symbol = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (str == <span class="string">''</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> char <span class="keyword">of</span> str) &#123;</span><br><span class="line">        <span class="keyword">if</span> (numlist.includes(char)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (char == <span class="string">'+'</span>) &#123;</span><br><span class="line">                symbol = <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (char == <span class="string">'-'</span>) &#123;</span><br><span class="line">                symbol = <span class="number">-1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sum = sum * <span class="number">10</span> + numlist.indexOf(char)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sum = <span class="number">0</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum * symbol</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>47 在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字。</strong></p><p><strong>思路1:</strong><br>最简单的方法：我最直接的想法就是构造一个容量为N的辅助数组B，原数组A中每个数对应B中下标，首次命中，B中对应元素+1。如果某次命中时，B中对应的不为0，<br>说明，前边已经有一样数字了，那它就是重复的了。</p><p>时间复杂度O（n），空间复杂度O（n），算法优点是简单快速，比用set更轻量更快，不打乱原数组顺序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">duplicate</span>(<span class="params">numbers, duplication</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//这里要特别注意~找到任意重复的一个值并赋值到duplication[0]</span></span><br><span class="line">    <span class="comment">//函数返回True/False</span></span><br><span class="line">    <span class="keyword">let</span> count = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (count[numbers[i]] == <span class="literal">undefined</span>) &#123;</span><br><span class="line">            count[numbers[i]] = <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            duplication[<span class="number">0</span>] = numbers[i];</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间O(n)， 空间O(1)_这个看不太懂…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">duplicate</span>(<span class="params">numbers, duplication</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!numbers) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (numbers[i] !== i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (numbers[i] == numbers[numbers[i]]) &#123;</span><br><span class="line">                duplication[<span class="number">0</span>] = numbers[i];</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> temp = numbers[i];</span><br><span class="line">            numbers[i] = numbers[temp];</span><br><span class="line">            numbers[temp] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>48 给定一个数组A[0,1,…,n-1],请构建一个数组B[0,1,…,n-1],其中B中的元素B[i]=A[0]<em>A[1]</em>…<em>A[i-1]*A[i+1]</em>…*A[n-1]。不能使用除法。</strong></p><p>参考<a href="https://www.nowcoder.com/questionTerminal/94a4d381a68b47b7a8bed86f2975db46" target="_blank" rel="noopener">https://www.nowcoder.com/questionTerminal/94a4d381a68b47b7a8bed86f2975db46</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    write code here</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(StrToInt2(<span class="string">'123'</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>项目开发笔记</title>
      <link href="/2019/03/30/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/03/30/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h5 id="一-去哪儿网项目开发"><a href="#一-去哪儿网项目开发" class="headerlink" title="一 去哪儿网项目开发"></a>一 去哪儿网项目开发</h5><p><strong>1、前端 mock 接口数据模拟</strong></p><ul><li>使用 vue-cli 创建的项目，static 是可以直接通过服务器访问到的，因此可以将 mock 的 json 数据放到 static 目录下，通过</li></ul><a id="more"></a><p><code>axios.get(&quot;/static/mock/index.json&quot;).then(this.fn);</code> ——获取 json 全部数据<br><code>axios.get(&quot;/static/mock/index.json?city=&quot; + this.city).then(this.fn);</code> ——查询 json 中指定数据<br>还可以配置 devServer 的代理（在 config/index.js）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> proxyTable: &#123;</span><br><span class="line">      &apos;/api&apos;: &#123;</span><br><span class="line">               target: &apos;http://localhost:8081&apos;,</span><br><span class="line">               pathRewrite: &#123;</span><br><span class="line">                   &apos;^/api&apos;: &apos;/static/mock&apos;</span><br><span class="line">              &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端请求格式可以变为 axios.get(‘/api/index.json’)</p><ul><li>通过 express 或 koa 项目模拟接口数据</li><li>通过 <a href="https://www.easy-mock.com/网站进行数据模拟（会自动生成在线的api接口）" target="_blank" rel="noopener">https://www.easy-mock.com/网站进行数据模拟（会自动生成在线的api接口）</a></li></ul><p><strong>2、常见 tips</strong></p><p><strong>基本配置：</strong></p><ul><li>移动端配置：修改 index.html 文件的 meta，使其适配手机<meta name="viewport" content="width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no"></li><li>引入 reset.css 文件（网上有较为成熟的文件，直接引入即可）</li><li>解决 300ms 延迟问题：下载 fastclick 库，在 main.js 中加入 import fastClick from ‘fastclick’; fastClick.attach(document.body);</li><li>解决移动端一像素边框：可以复用 border.css 文件，使用 class=”border-bottom”即可</li><li>通过 iconfont 生成字体图标，直接引入项目即可</li><li>最好建立 varibles.style（或其他格式）存储常量（如颜色配置、高度长度值等），修改起来更容易</li><li>使用 mixins.style（或其他格式）提取通用样式代码（如文字溢出、2x3x 图等）</li></ul><p><strong>组件库：</strong></p><ul><li>轮播图解决方案，可以使用 vue-awesome-swiper 库，在 main.js 加入 import VueAwesomeSwiper from ‘vue-awesome-swiper’;import ‘swiper/dist/css/swiper.css’<br>;Vue.use(VueAwesomeSwiper)</li><li>移动端滚动库（better-scroll）</li><li>图片轮播点击后出现图片画廊</li></ul><p><strong>性能优化：</strong></p><ul><li>使用 keep-alive 自带标签可以提高性能，不用每次重新请求页面数据。但是其缓存功能也会导致数据不会在状态（如城市）更新时及时更新，因此可以使用 actived 钩子解决</li><li>使用 vuex 管理共享数据，对于需要记忆的数据可以采用 localstorage 进行存储，最小加上 try-catch（用户可能关闭了存储功能、或者开启了隐身模式导致程序异常）</li><li>对于搜索框，需要采用防抖函数；对于滚动监听，需要采用节流函数——以提高页面性能</li><li>全局页面记得解绑，不然会出现大量 bug; 设置定时器 timer 后，在组件卸载时需要及时清除<img style="width:60%;" src="https://i.loli.net/2019/09/02/fThIJNpVUwYl96Q.png"></li></ul><p><strong>页面交互效果：</strong></p><ul><li><p>头部渐隐效果——用户体验感觉特别好！</p><img style="width:50%;" src="https://i.loli.net/2019/09/02/Y7hBqlxVEQnUkPN.png"></li><li><p>封装动画组件</p><img style="width:40%;" src="https://i.loli.net/2019/09/02/GvQOoBwb6PVqJ4C.png"></li></ul><p><strong>前后端接口联调：</strong></p><ul><li>删除 static 下的 mock 文件夹（模拟数据），修改 config/index.js 中的 proxyTable，地址改为后端的接口地址即可</li></ul><p><strong>真机测试：</strong></p><ul><li>使用真机的 ip 进行访问，但是 webpack 不支持非 localhost，需要进行配置<br>在 package.json 添加 “dev”: “webpack-dev-server –host 0.0.0.0 –inline –progress –config build/webpack.dev.conf.js”</li><li>如果在真机过程中出现了一些异常（白屏），如某些浏览器不支持 promise 的话，建议安装 babel-polyfill 包</li></ul><p><strong>打包上线：</strong><br>运行 npm run build，生成 dist 目录，将 dist 目录放置生产环境即可</p><hr><h5 id="二-音乐播放器开发"><a href="#二-音乐播放器开发" class="headerlink" title="二 音乐播放器开发"></a>二 音乐播放器开发</h5><p><strong>tips：</strong><br>jsonp 封装（解决跨域问题）<br>轮播图组件开发<br>dom 操作函数封装</p><p>大型电商网站前端构建：（需要考虑的问题）<br>如何发布、如何快速地迭代？</p><p><strong>前端架构技术基础</strong><br>1、语言基础 html/css/js<br>2、基本框架与类库<br>3、设计模式（继承&amp;重用）<br>4、性能优化（http cache、dom 渲染）<br>5、其他（自动化构建、跨终端适配、代码托管）</p><p><strong>项目组织</strong><br>1、产品设计、发布与迭代<br>2、数据分析与优化<br>如第三方统计工具（百度统计)——提升产品的质量<br>3、项目架构组织方式和目录组织<br>1）目录层次组织<br>2）页面层次组织<br>3）组件化和设计模式层次组织<br>4、组件化中 CMD 和 AMD 模块化</p><p><strong>前端架构实施前地思考</strong><br>1、技术选型<br>2、模块地边界划分<br>3、自动化的发布与迭代</p><p><strong>前端的优化思路</strong><br>1、代码层面<br>2、架构层面（可扩展性是否受到制约<br>3、协议层面<br>4、综合（多种技术的综合使用</p><p><strong>前端自动化</strong><br>发布&amp;测试&amp;开发 grunt/gulp/webpack/rollup 等</p><hr><h5 id="三-vue-全栈项目后台管理系统"><a href="#三-vue-全栈项目后台管理系统" class="headerlink" title="三 vue 全栈项目后台管理系统"></a>三 vue 全栈项目后台管理系统</h5><p><strong>后端：</strong><br>先使用 express 建立后端 server，并连接 mongodb（安装 mongoose）<br>搭建路由 routes 和数据模型 model<br>写登录权限验证接口（安装 body-parser、bcrypt、gravatar、jsonwebtoken、passport、passport-jwt、validator）<br><strong>解释：</strong><br>bcrypt——密码加密<br>gravatar——生成全球公认头像，用户必须要在 gravatar 官网注册头像，否则显示默认头像<br>jsonwebtoken——根据对应规则生成 token<br>passport、passport-jwt——验证 token<br>检查后端，完成接口测试<br><strong>前后端连载：</strong><br>安裝 concurrently<br>“dev”: “concurrently &quot;npm run server&quot; &quot;npm run client&quot;“<br><strong>前端：</strong><br>组件组织形式：<br><img style="width:80%" src="https://i.loli.net/2019/09/02/tdGT3FM8oqVs26x.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/2019/03/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2019/03/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h4 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h4><p>1、递归+记忆化——递推<br>2、状态的定义<br>3、状态转移方程<br>4、最优子结构</p><a id="more"></a><h4 id="比较概念"><a href="#比较概念" class="headerlink" title="比较概念"></a>比较概念</h4><p><strong>DP vs 回溯（递归） vs 贪心</strong><br>DP——记录局部最优子结构/多种记录值<br>回溯（递归）——重复计算<br>贪心——永远局部最优</p><h4 id="实战演练"><a href="#实战演练" class="headerlink" title="实战演练"></a>实战演练</h4><p><strong>0、二维矩阵计算走法种类（存在障碍）</strong><br><strong>1、爬楼梯（每次只能走一阶或两阶）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f(n) = f(n - <span class="number">1</span>) + f(n - <span class="number">2</span>)</span><br><span class="line">f(<span class="number">1</span>) = <span class="number">1</span></span><br><span class="line">f(<span class="number">2</span>) = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>​ 其实斐波拉契数列有 O(logN)的解法</p><p><strong>2、三角形最小路径之和(m 层)</strong><br>状态定义：DP[i][j]——从底部走到[i][j]的所有路径最小和</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 状态转移方程：dp[i][j] = min(dp[i + 1][j], dp[i + 1][j + 1]) + triangle[i][j]</span></span><br><span class="line"><span class="comment">// 初始值：DP[m-1][j]=T[m-1][j]</span></span><br><span class="line"><span class="comment">// 返回dp[0][0]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">minPath</span>(<span class="params">triangle</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (triangle.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> dp = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; triangle.length; i++) &#123;</span><br><span class="line">    dp[i] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; triangle[i].length; j++) &#123;</span><br><span class="line">      dp[i].push(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 初始化</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dp.length; i++) &#123;</span><br><span class="line">    dp[dp.length - <span class="number">1</span>][i] = triangle[dp.length - <span class="number">1</span>][i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 递归</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = dp.length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; dp[i].length; j++) &#123;</span><br><span class="line">      dp[i][j] = <span class="built_in">Math</span>.min(dp[i + <span class="number">1</span>][j], dp[i + <span class="number">1</span>][j + <span class="number">1</span>]) + triangle[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、乘积最大子序列 (2 3 -2 4)</strong><br>如果不用连续<br>如果连续<br>1）暴力求解？<br>2）动态规划<br>这里的状态是二维的，不只是一维，需要同时存 max 和 min，因为元素可能为负数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DP[i, j] = [max, min]</span><br><span class="line"><span class="keyword">if</span> (a[i] &gt; <span class="number">0</span>) DP[i, <span class="number">0</span>] = DP[i - <span class="number">1</span>, <span class="number">0</span>] _ a[i]</span><br><span class="line"><span class="keyword">if</span> (a[i] &lt; <span class="number">0</span>) DP[i, <span class="number">0</span>] = DP[i - <span class="number">1</span>, <span class="number">1</span>] _ a[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a[i] &gt; <span class="number">0</span>) DP[i, <span class="number">1</span>] = DP[i - <span class="number">1</span>, <span class="number">1</span>] _ a[i]</span><br><span class="line"><span class="keyword">if</span> (a[i] &lt; <span class="number">0</span>) DP[i, <span class="number">1</span>] = DP[i - <span class="number">1</span>, <span class="number">0</span>] _ a[i]</span><br></pre></td></tr></table></figure><p>​结果： 遍历 DP[i, 0]，找出最大值</p><p>或者直接定义两个数组也可</p><p><strong>4、股票买卖问题<a href="每次只能同时拥有一股">7, 1, 3, 5, 2, 4, 1</a></strong><br>1）只能买卖一次\两次\三次\k 次等等<br>DP[i,j]=<a href="max-profit表示达到第i天可达到的最大利润,status存储是否拥有股票,0/1">max-profit,status</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DP[i<span class="number">-1</span>,<span class="number">0</span>] <span class="comment">//此时未买入,不动</span></span><br><span class="line">DP[i<span class="number">-1</span>,<span class="number">1</span>]+a[i] <span class="comment">//此时拥有股票,卖出</span></span><br><span class="line">DP[i, <span class="number">0</span>] = max(DP[i - <span class="number">1</span>, <span class="number">0</span>], DP[i - <span class="number">1</span>, <span class="number">1</span>] + a[i])</span><br><span class="line"></span><br><span class="line">DP[i<span class="number">-1</span>,<span class="number">1</span>] <span class="comment">//此时拥有股票,不动</span></span><br><span class="line">DP[i<span class="number">-1</span>,<span class="number">0</span>]-a[i] <span class="comment">//此时未买入,买一股</span></span><br><span class="line">DP[i, <span class="number">1</span>] = max(DP[i - <span class="number">1</span>, <span class="number">1</span>], DP[i - <span class="number">1</span>, <span class="number">0</span>] - a[i])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是当前定义的状态还不够,如果有 k 次限制呢?</span></span><br><span class="line"><span class="comment">// 定义三维,增加交易的多少次</span></span><br><span class="line">DP[i, j, k] = [max - profit, status, times]</span><br></pre></td></tr></table></figure><p>2）买卖无数次<br>3）卖完必须隔 1 天买入</p><p><strong>5 最长上升子序列(位置不变)</strong><br><strong>1)不用连续</strong><br>方法 1:暴力求解<br>方法 2:动态规划 O(N^2)<br>状态定义:DP[i] 到第 i 个数(选上 i 元素)的最优子结构<br>结果:DP[0]到 DP[n-1]的最大值<br>状态转移方程:DP[i]=max(DP[j])+1 (j 从 0 到 i-1,且 a[j]&lt;a[i])<br>方法 3:二分法 O(NlogN)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dp[i] 表示以第i个元素结尾的最长上升子序列的长度</span></span><br><span class="line"><span class="comment">// 如果dp[i]&lt;dp[j]+1,则dp[i]=dp[j]+1</span></span><br><span class="line"><span class="comment">// 初始化dp[0]=1</span></span><br><span class="line"><span class="comment">// 返回max(dp[0],dp[1],……,dp[n-1])的最大值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lengthOfLIS</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (nums.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> dp = [<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    dp.push(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> LIS = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; dp.length; i++) &#123;</span><br><span class="line">    dp[i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nums[i] &gt; nums[j] &amp;&amp; dp[i] &lt; dp[j] + <span class="number">1</span>) &#123;</span><br><span class="line">        dp[i] = dp[j] + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (LIS &lt; dp[i]) &#123;</span><br><span class="line">      LIS = dp[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> LIS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2)要求连续(更加容易)</strong></p><p><strong>6 零钱兑换问题</strong><br>DP[i] 表示凑成 i 的最小零钱总数<br>DP[i] = min(DP[i - coin[j]]) + 1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给定4种面额的硬币1分，2分，5分，6分，如果要找11分的零钱，怎么做才能使得找的硬币数量总和最少。</span></span><br><span class="line"><span class="comment">// 动态方程： dp[i] = max(dp[i - 1], dp[i - 2], dp[i - 5], dp[i - 6]) + 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">coinChange</span>(<span class="params">coins, amount</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dp = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= amount; i++) &#123;</span><br><span class="line">    dp.push(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= amount; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; coins.length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i - coins[j] &gt;= <span class="number">0</span> &amp;&amp; dp[i - coins[j]] !== <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[i] === <span class="number">-1</span> || dp[i] &gt; dp[i - coins[j]] + <span class="number">1</span>) &#123;</span><br><span class="line">          dp[i] = dp[i - coins[j]] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dp[amount];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>7 背包问题</strong><br>01 背包 完全背包 多重背包<br>1)01 背包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dp( i,j ) = Max( dp( i<span class="number">-1</span>, j ), dp( i<span class="number">-1</span>, j-w[i] ) + v[i] )</span><br><span class="line"><span class="comment">// DP[k,w]表示当背包容量还剩 w 时,在前 k 个物品中选择的最大价值</span></span><br><span class="line">DP[k, w] = DP[k - <span class="number">1</span>, w] <span class="comment">//(当第 k 件过重, 超出总容量)</span></span><br><span class="line">DP[k, w] = max(DP[k - <span class="number">1</span>, w], DP[k - <span class="number">1</span>][w(总) - w(k)] + v[k]) <span class="comment">//前者表示放入第 k 个物品, 后者表示不放入第 k 个物品 2)完全背包 3)多重背包</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端总结</title>
      <link href="/2019/03/09/%E5%89%8D%E7%AB%AF%E6%80%BB%E7%BB%93/"/>
      <url>/2019/03/09/%E5%89%8D%E7%AB%AF%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前端还是一个年轻的行业，新的行业标准， 框架， 库都不断在更新和新增，正如赫门在 2015 深 JS 大会上的《前端服务化之路》主题演讲中说的一句话：“每 18 至 24 个月，前端都会难一倍”，这些变化使前端的能力更加丰富、创造的应用也会更加完美。所以关注各种前端技术，跟上快速变化的节奏，也是身为一个前端程序员必备的技能之一。</p></blockquote><a id="more"></a><h4 id="一、node-js-及项目工程化"><a href="#一、node-js-及项目工程化" class="headerlink" title="一、node.js 及项目工程化"></a>一、node.js 及项目工程化</h4><p><strong>1、遍历文件夹的所有文件</strong></p><p>要熟悉node常用模块的应用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nodejs使用的commonjs的语法，只能用require引入</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readDir = <span class="function"><span class="params">entry</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> dirInfo = fs.readdirSync(entry);</span><br><span class="line">  dirInfo.forEach(<span class="function"><span class="params">dir</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fileLocation = path.join(entry, dir);</span><br><span class="line">    <span class="keyword">const</span> info = fs.statSync(fileLocation);</span><br><span class="line">    <span class="keyword">if</span> (info.isDirectory()) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`dir:<span class="subst">$&#123;fileLocation&#125;</span>`</span>);</span><br><span class="line">      readDir(fileLocation);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`file:<span class="subst">$&#123;fileLocation&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历当前文件夹下的所有文件</span></span><br><span class="line">readDir(__dirname);</span><br></pre></td></tr></table></figure><p><strong>面试时注意：</strong><br>为什么前端需要学习nodejs：使用 nodejs 可以做前端工程化、webpack、npm 包管理</p><hr><p><strong>2、nodejs 版本升级</strong></p><p>为什么需要升级 node 版本？<br>webpack 打包速度更快，可以尝试升级 node 版本<br>nvm 升级<br>允许在电脑上安装多个 node 版本，可以任意切换</p><p><strong>3、模块化的差异</strong><br>AMD(require.js)、CMD(sea.js)、commonJS(nodejs)、ES6 module<br>AMD 依赖前置、CMD 依赖就近<br>commonJS 支持动态引入（可以根据不同逻辑引入不同内容），ES6 module 不支持动态引入（只能是静态引入）</p><p><strong>4、图片上传到服务器的过程</strong><br>图片如何为实现预览？（思路）<br>1）高版本浏览器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">onchange</span>=<span class="string">"function()&#123;&#125;"</span> /&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"base64"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>onchange 后使用 FileReader.readAsDataURL 将图片转化为 base64，再插入 img 的 src 中可以实现预览效果</p><p>2）兼容低版本浏览器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">onchange</span>=<span class="string">"function()&#123;&#125;"</span> /&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"url"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>onchange 触发时，让 input 通过表单的形式提交给后端，后端存储完会返回给图片 url，再在 img 中显示图片</p><p><strong>5、token 存在 cookie 里，过期怎么处理？</strong><br>跳转到登录页面</p><p><strong>6、node 框架中的 mvc</strong><br>model view controller<br>模型 视图 控制器<br>mvc 的理念<br>mvc、mvp、mvvm 的差异</p><p><strong>7、mongodb 和 mysql 的优势</strong><br>数据灵活采用 nosql 合适，如 mongodb<br>数据规范采用结构化数据库合适，如 mysql</p><p><strong>8、less、sass、stylus、css</strong><br>less 底层通过 js 做编译，sass 底层通过 ruby 做编译<br>可以定义变量，采用命名空间（解决 css 冲突，如 vue 中的 scoped 参数）与 css module</p><p><strong>9、工程化上的按需加载</strong><br>异步组件<br>import(‘a.js’).then()<br>react 中采用 reloadable.js 库</p><p><strong>10、git 上的冲突如何解决</strong><br>冲突产生：两人修改同一文件同一代码块<br>拉取最新代码，手动解决冲突，再提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin git@github.com:iloveyou11/land_system_yanghao.git</span><br><span class="line">git pull origin master</span><br><span class="line">.gitignore</span><br><span class="line">git add .</span><br><span class="line">git commit –m “这里写下你自己的记录本次提交内容的信息”</span><br><span class="line">git push origin master -f</span><br><span class="line">//删除文件夹 git rm -r --cached target</span><br><span class="line"></span><br><span class="line">//多人协作，分支开发，合并至主支：</span><br><span class="line">git checkout -b mydev   /  git checkout -b mydev     新建并切换至分支</span><br><span class="line">git add .</span><br><span class="line">git commit –m / git commit –m  -a“这里写下你自己的记录本次提交内容的信息”</span><br><span class="line">git push （目前已经将本地代码全部提交至github上的分支)</span><br><span class="line">git checkout master</span><br><span class="line">git merge origin/mydev（将github上分支mydev的内容合并到master主枝）</span><br><span class="line">git push  （将master的内容也提交至线上）</span><br><span class="line">git branch -d mydev（删除mydev分支）</span><br></pre></td></tr></table></figure><p><strong>11、设计模式</strong><br>观察者模式、发布-订阅模式、工厂模式、代理模式、组合模式、适配器模式、单例模式、外观模式……<br>redux 中的 store——观察者模式<br>组合模式优于继承<br>单例模式</p><p><strong>12、nodejs 中的 npm 与版本管理（package.lock，yarn.lock）</strong><br>package.lock，yarn.lock 为版本锁，锁定同一版本<br>建议再项目中加上 lock 文件，否则上线后会遇到 npm 包版本变更带来的坑</p><p><strong>13、webpack</strong><br>建议读英文官方文档（国内翻译很慢而且不准确）<br>webpack4 比 webpack3 性能提高了 95%以上<br>api 级别发生了大量的变化<br>webpack 插件的原理、loader 的实现</p><p><strong>14、后端环境搭建</strong><br>nodejs+pm2（进程管理工具）</p><p><strong>15、typescript</strong><br>代码校验，类型约束——可以很好地提高代码质量</p><h4 id="二、reactJS-常见问题讲解"><a href="#二、reactJS-常见问题讲解" class="headerlink" title="二、reactJS 常见问题讲解"></a>二、reactJS 常见问题讲解</h4><p><strong>1、redux 中间件的原理</strong><br>action 和 store 中间（中间件）<br>action 到达 store 之前会走这个中间件，中间件可以将函数 action 转化为对象，再传递给 store<br>redux-saga、redux-thunk 等<br>如何对 dispatch 进行包装的?<br>看 github redux-thunk 源码<br><strong>2、你会把数据统一放到 redux 中管理，还是共享的数据放到 redux 中管理</strong><br>如果 redux、props、state 都存储数据，不方便定位问题<br>而且不方便扩展，可维护性差<br>建议使用 redux 存储全部数据即可<br><strong>3、componentWillReceiveProps 的调用时机</strong><br>props 改变时才会被调用，第一次传递 props 时是不会调用的<br><strong>4、react 性能优化的最佳实践</strong><br>pureComponent 适合的场景（自带 componentShouldUpdate，但是是浅比较）<br>使用 immutable.js 库和 pureComponent 做结合，可以非常完美的解决 react 的性能问题<br><strong>5、虚拟 dom 是什么？为什么会提高代码性能</strong><br>虚拟 dom 是 js 对象，比对 js 对象很快<br>dom diff 算法、key 值问题<br><strong>6、webpack 中，是借助 loader 完成的 jsx 代码的转化，还是 babel</strong><br>babel：preset-react<br><strong>7、调用 setState 后，发生了什么？setState 是异步的，在什么时候遇到过坑</strong><br>使用函数式调用，避免异步操作带来的各种坑<br>this.setState(()=&gt;({<br>​ name:’Dell Lee’<br>}))<br><strong>8、refs 的作用是什么？在什么业务场景下会使用到 refs</strong><br>1、渲染图片完成后，获取宽和高<br>2、对 input/video/audio 需要控制时，例如输入框焦点、媒体播放状态<br>3、直接动画控制<br>4、集成第三方库<br>注意：如果能使用 props 实现，应该尽量避免使用 refs 实现<br>使用 ref 的正确方式：（应使用函数式写法，不要使用 ref=’abc’这样字符串的写法<br><strong>9、高阶组件怎么理解，它本质是什么？</strong><br>高阶组件：对组件进行包装，返回新的组件<br>原则：[组合优于继承]<br>react 的 hook？（建议看一下）<br><strong>10、受控组件和非受控组件的区别</strong><br>受控组件：组件的改变完全依赖于数据的变化<br>非受控组件：可以不需要设置它的 state 属性，而通过 ref 来操作真实的 DOM。<br><strong>11、函数组件和 hooks</strong><br><strong>12、this 指向问题你一般怎么解决？</strong><br>箭头函数、bind(this)——constructor 中<br><strong>13、函数组件怎么做性能优化</strong><br>函数组件，可以使用 Reacr.memo，拥有 shouldUpdate</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">React.memo(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">​ <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>123123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>14、哪个生命周期发送 ajax？</strong><br>componentDidMount 中<br>1、componentWillMount 在新版本 react 中已经废弃了<br>2、SSR 项目时，componentWillMount 要做服务器端数据的获取，因此不能被占用<br><strong>15、SSR 的原理</strong><br>借助虚拟 dom<br><strong>16、react-saga 的设计思想是什么？什么是 sideEffects？</strong><br>（冲击高薪可以看一下）<br><strong>17、react、jquery、vue 是否可能共存在一个项目中？</strong><br>每个只操作对应的 div，可以实现共存<br><strong>18、组件是什么？类是什么？类被编译成什么？</strong><br>模块：针对 webpack 打包工具而言<br>组件：页面的一部分<br>类：被编译后其实就是构造函数<br><strong>19、你是如何跟着社区成长的？</strong><br>如何主动学习新技术？<br>多看英文文档，看 react 官方团队的 twitter<br><strong>20、如何避免 ajax 数据重新获取？</strong><br>使用 react-redux 进行管理<br><strong>21、react-router4 的核心思想是什么，和 3 有什么区别？</strong><br>react-router4 中路由也变成了组件,如<link><br><strong>22、reselect 是做什么使用的？</strong><br>相当于计算属性（如 vue 中的 computed）<br><strong>23、react-router 的基本原理，hashHistory、browserHistory</strong><br>browserHistory 在前端不能单独配置，还需要在后端进行配置<br>hashHistory 不需要后端服务器配置，仅依赖前端即可<br><strong>24、什么情况下使用异步组件？</strong><br>reloadable 库——懒加载<br>import(‘./home/header’).then()<br>require.ensure<br><strong>25、xss 攻击在 react 中如何防范</strong><br>慎用 dangerouslySetInnerHTML 函数<br><strong>26、immutable.js 和 redux 的最佳实践</strong></p><h4 id="三、Vue-js-常见问题讲解"><a href="#三、Vue-js-常见问题讲解" class="headerlink" title="三、Vue.js 常见问题讲解"></a>三、Vue.js 常见问题讲解</h4><p><strong>1、vuex 是什么？怎么使用？哪种功能场景使用它？</strong><br>vuex 是状态（数据）管理仓库，解决组件间状态共享的问题，强调集中式管理<br><strong>2、导航钩子有哪些？它们有什么参数？</strong></p><ul><li><strong>全局导航钩子</strong><br>全局导航钩子主要有两种钩子：前置守卫、后置钩子，<br>注册一个全局前置守卫：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123; ... &#125;);</span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do someting</span></span><br><span class="line">&#125;);</span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do someting</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这三个参数 to 、from 、next 分别的作用：<br>to: Route，代表要进入的目标，它是一个路由对象<br>from: Route，代表当前正要离开的路由，同样也是一个路由对象<br>next: Function，这是一个必须需要调用的方法，而具体的执行效果则依赖 next 方法调用的参数</p><ul><li><strong>路由独享的钩子</strong><br>顾名思义，即单个路由独享的导航钩子，它是在路由配置上直接进行定义的：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">'/file'</span>,</span><br><span class="line">            component: File,</span><br><span class="line">            beforeEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span> ,next</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// do someting</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>组件内的导航钩子</strong><br>组件内的导航钩子主要有这三种：beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave。他们是直接在路由组件内部直接进行定义的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> File = &#123;</span><br><span class="line">    template: <span class="string">`&lt;div&gt;This is file&lt;/div&gt;`</span>,</span><br><span class="line">    beforeRouteEnter(to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">        <span class="comment">// do someting</span></span><br><span class="line">        <span class="comment">// 在渲染该组件的对应路由被 confirm 前调用</span></span><br><span class="line">    &#125;,</span><br><span class="line">    beforeRouteUpdate(to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">        <span class="comment">// do someting</span></span><br><span class="line">        <span class="comment">// 在当前路由改变，但是依然渲染该组件是调用</span></span><br><span class="line">    &#125;,</span><br><span class="line">    beforeRouteLeave(to, <span class="keyword">from</span> ,next) &#123;</span><br><span class="line">        <span class="comment">// do someting</span></span><br><span class="line">        <span class="comment">// 导航离开该组件的对应路由时被调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">最后是完整的导航解析流程：</span><br><span class="line">导航被触发</span><br><span class="line">在失活的组件里调用离开守卫</span><br><span class="line">调用全局的 beforeEach 守卫</span><br><span class="line">在重用的组件里调用 beforeRouteUpdate 守卫</span><br><span class="line">在路由配置里调用 beforEnter</span><br><span class="line">解析异步路由组件</span><br><span class="line">在被激活的组件里调用 beforeRouteEnter</span><br><span class="line">调用全局的 beforeResolve 守卫</span><br><span class="line">导航被确认</span><br><span class="line">调用全局的 afterEach 钩子</span><br><span class="line">触发 DOM 更新</span><br><span class="line">在创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数</span><br></pre></td></tr></table></figure><p><strong>3、v-model 是什么？vue 标签怎么绑定事件？</strong><br><strong>4、vue 路由懒加载</strong><br><strong>5、vue-loader</strong><br><strong>6、插槽</strong><br><strong>7、vue 的虚拟 dom</strong><br><strong>8、vue 的 keep-alive</strong><br><strong>9、swiper 插件从后台获取数据没问题，css 代码没问题，但是图片不动，应该怎么解决？</strong><br>主要原因：swiper 提前初始化了，而这个时候，数据还没有完全加载<br>1）vue 中提供了 nextTick 方法专门解决此类问题<br>2）修改 swiper 的配置：observer：true，observeParents：true</p><h4 id="四、页面布局及设备适配"><a href="#四、页面布局及设备适配" class="headerlink" title="四、页面布局及设备适配"></a>四、页面布局及设备适配</h4><p><strong>1、元素水平垂直剧中、图片水平垂直居中、清除浮动、自适应布局</strong><br>1）单行文本居中：<br>水平居中：text-align:center;<br>垂直居中：line-height:XXpx; /<em>line-height 与元素的 height 的值一致</em>/<br>2）多行文本居中</p><ul><li>使用 display:table 来实现<br>主要实现代码：<br>display: table 使块状元素成为一个块级表格;<br>display: table-cell;子元素设置成表格单元格;<br>vertical-align: middle;使表格内容居中显示，即可实现垂直居中的效果;</li><li>使用 absolute 与 transform 配合实现<br>position:absolute; 首先给文本绝对定位；<br>left:50%;top:50%;transform:translate(-50%,-50%);<br>让文本距离盒子左边和上边分别为 50%，再用 transform 向左（上）平移它自己宽度（高度）的 50%，也就达到居中效果了。</li><li>使用 flex 实现<br>主要实现代码：<br>display: flex;设置 display 属性的值为 flex 将其定义为弹性容器<br>align-items: center;定义项目在交叉轴（纵轴）上如何对齐，垂直对齐居中<br>justify-content: center; 定义了项目在主轴上的对齐方式，水平对齐居中</li></ul><p><strong>2、清除浮动</strong></p><ul><li>添加元素及其 clear 属性</li><li>父元素设置伪元素清除浮动</li><li>父元素设置 overflow:hidden</li><li>父元素设置一定的高度 height</li><li>父元素设置 display: table</li></ul><p><strong>3、IE6 兼容</strong><br>IE6 7 下常见 CSS 兼容性处理：</p><ul><li>H5 标签不兼容，比如 header，section，footer 等</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">  header &#123;</span><br><span class="line">    display: block; //自定义标签默认为inline元素，需手动转成block，不然宽高不起作用</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background: red;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.createElement(<span class="string">"header"</span>); <span class="comment">//自己创建header标签</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>IE6 下，块元素包含块元素浮动，如果被包含的块元素设置高度，则被包含的块元素会撑满一行，而不是随父元素浮动<br>解决方案 : h2 {float: left;} //被包含的块元素也设置浮动，可解决此问题</li><li>左右两个块元素，左面浮动，右面设置 margin-left，IE6 下会导致有一条缝隙的出现<br>解决方案: .right { float: left;}</li><li>IE6 下子元素宽高大于父元素宽高，会撑开父元素</li><li>关于 margin 的重叠 1.传递的 margin，对于现代浏览器可以触发 BFC，比如 overflow:hidden;对于 IE 低版本可以触发 haslayout，比如 zoom:1; 2.垂直方向上合并的 margin,我们尽量采用避开此布局方法的方式解决</li><li>IE6 下，display : inline-block;失效</li><li>IE6 最小高度</li><li>IE6 7 双边距问题</li><li>IE6 7 li 里元素都浮动会导致下方产生 4px 的间隙<br>更多详见<a href="https://www.cnblogs.com/Lycheeling/p/5999407.html" target="_blank" rel="noopener">https://www.cnblogs.com/Lycheeling/p/5999407.html</a></li></ul><p><strong>4、文字单行居中，多行左对齐</strong><br>详见<a href="https://blog.csdn.net/fungleo/article/details/49797311" target="_blank" rel="noopener">https://blog.csdn.net/fungleo/article/details/49797311</a></p><ul><li>解决方法一：利用行内元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文字测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="comment">/* 傻大本粗RESET*/</span></span></span><br><span class="line">      * &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">        list-style: none;</span><br><span class="line">        font-weight: normal;</span><br><span class="line">        font-style: normal;</span><br><span class="line">      &#125;</span><br><span class="line">      body &#123;</span><br><span class="line">        font-size: 13px;</span><br><span class="line">        font-family: tahoma, Helvetica, Arial, "\5FAE\8F6F\96C5\9ED1";</span><br><span class="line">        line-height: 1;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="comment">/* 代码开始 */</span></span></span><br><span class="line">      ul &#123;</span><br><span class="line">        width: 500px;</span><br><span class="line">        margin: 100px auto;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="comment">/* 开始了！！！！ */</span></span></span><br><span class="line">      li &#123;</span><br><span class="line"><span class="css">        <span class="comment">/* 这些都不重要 */</span></span></span><br><span class="line">        float: left;</span><br><span class="line">        width: 100px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-id">#fafafa</span>;</span></span><br><span class="line">        height: 50px;</span><br><span class="line">        margin-right: 10px;</span><br><span class="line"><span class="css">        <span class="comment">/* 重点 */</span></span></span><br><span class="line">        text-align: center;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="comment">/* 重点 */</span></span></span><br><span class="line">      p &#123;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        text-align: left;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>一行文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是比较长的两行文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>解决方法二：利用万能的表格</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 傻大本粗RESET*/</span></span><br><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: tahoma, Helvetica, Arial, <span class="string">"\5FAE\8F6F\96C5\9ED1"</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 代码开始 */</span></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">loat</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fafafa</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 重点 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>利用图层遮盖解决的方法</li></ul><p><strong>5、多行文本显示省略号</strong><br><strong>6、1px 边框</strong><br><strong>7、doctype 不存在会发生什么</strong><br><strong>8、title 和 alt 区别</strong><br><strong>9、过渡效果</strong></p><h4 id="五、前后端协作及综合问题讲解"><a href="#五、前后端协作及综合问题讲解" class="headerlink" title="五、前后端协作及综合问题讲解"></a>五、前后端协作及综合问题讲解</h4><p>学会追根溯源的精神（要探索原理、多研究底层）<br><strong>1、跨域</strong><br>常见跨域方案有哪些？<br>线上代码跨域、本地开发跨域（代理）<br>allow-access-origin<br>jsonp（前后端都要改代码、不支持 post 请求、callback 函数名一定是变化的）<br><strong>2、jsonp 原理</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.jsonp1;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp1</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">//jsonp1(&#123;a:1,b:2&#125;)</span></span><br></pre></td></tr></table></figure><p><strong>3、http 与 https，运营商注入问题</strong><br>https 更安全，公钥和私钥了解过吗？<br>http 的网站会出现广告，https 不会出现广告，为什么？<br>劫持注入问题：http 明文传输，运营商劫持注入广告内容，https 是密文传输<br>建议看【图解 http】<br><strong>4、浏览器渲染机制，渲染引擎及 js 引擎</strong><br>google v8 引擎——只包含了 js 引擎（如 nodejs 基于 v8 引擎）<br>回流和重绘——重绘不可避免，尽量避免回流（渲染引擎会做更多计算）<br><strong>5、浏览器缓存机制</strong><br>浏览器缓存优势和劣势：<br>[劣势]：如果修改代码后文件名不变，会导致用户不能及时加载最新的代码<br>[优势]：加载速度更快<br>contentHash 和 hash 在 webpack 中的区别是什么？<br><strong>6、你在项目中遇到什么比较难的问题，怎么解决的（发散题）</strong><br>多表达自己的特点和思路，多说说对待复杂问题的思路，不只是聊具体的问题和解决方法<br><strong>7、你公司项目的开发流程是什么</strong><br>评审阶段——排期阶段<br>确定接口——开发——前后端联调——测试——上线<br>线上验证<br><strong>线上有 bug 怎么办？</strong><br>赶紧恢复到上一个版本，保证系统正常运行<br>如果遇到数据库结构大变、程序大幅度变更的情况，赶紧修改线上 bug，重新上线<br>[测试是一个很重要的环节]<br><strong>8、你对优雅编程有什么样的思考</strong><br>代码设计想清楚（提高设计能力，多看开源项目源码）<br>好的代码（程序怎么写得漂亮）<br>面向对象编程<br>eslint 检测（使用 webpack 做强制约束）<br><strong>9、如何思考扩展性和复用性之间的冲突</strong><br><strong>10、一门技术深入学习的思路</strong><br>[英语一定要好]<br>先看官方文档，从头读到尾<br>看源代码（如何实现的）<br>看社区<br><strong>11、框架的横向对比</strong><br>angular（国内用得比较少）<br>vue（简单，国人用的多）<br>react（官方团队创新力比较强，社区更完善）</p><h4 id="六、原生-JS、jQuery-常见问题讲解"><a href="#六、原生-JS、jQuery-常见问题讲解" class="headerlink" title="六、原生 JS、jQuery 常见问题讲解"></a>六、原生 JS、jQuery 常见问题讲解</h4><p><strong>1、面向对象编程和面向过程编程地区别</strong><br>编程思路的问题<br><strong>2、this 指向问题</strong><br><strong>3、普通函数与箭头函数</strong><br><strong>4、eval 函数是做什么的</strong><br>可以直接执行 js 代码<br>在严格模式下，eval 的作用域是不同的<br><strong>5、函数节流和函数防抖</strong><br><strong>6、作用域链</strong><br><strong>7、原型链继承的机制</strong><br><strong>8、垃圾回收（GC）的机制是什么</strong><br><strong>9、promise 精讲</strong><br><strong>10、数组方法</strong><br><strong>11、深拷贝</strong><br><strong>12、$(window).onload和$(window).ready 的区别</strong> 1.执行时间<br>​ window.onload 必须等到页面内包括图片的所有元素加载完毕后才能执行。<br>​ $(document).ready()是DOM结构绘制完毕后就执行，不必等到加载完毕。<br>2.编写个数不同<br>​         window.onload不能同时编写多个，如果有多个window.onload方法，只会执行一个<br>​         $(document).ready()可以同时编写多个，并且都可以得到执行 3.简化写法<br>​ window.onload 没有简化写法<br>​ $(document).ready(function(){})可以简写成$(function(){});</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>初/中级前端知识体系</title>
      <link href="/2019/02/01/%E5%88%9D%E4%B8%AD%E7%BA%A7%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
      <url>/2019/02/01/%E5%88%9D%E4%B8%AD%E7%BA%A7%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<p><strong>前端发展方向：</strong></p><ul><li>全栈: 前后端开发，需要了解 Node / 数据库/ Nginx / 反向代理 / 负载均衡 / PM2 / Docker 等服务端或者运维知识</li><li>跨平台: Hybrid / Flutter / React Native / Swift 等</li><li>视觉游戏: WebGL / 动画 / Three.js / Canvas / 游戏引擎 / VR / AR 等</li><li>底层框架: 浏览器引擎 / 框架底层 / 机器学习 / 算法等<img style="width:100%" src="https://i.loli.net/2019/09/08/dKgyLF3Q51GacYW.png"></li></ul><hr><p>以下为前端人的自我修炼之路：</p><p><strong>Html+css</strong></p><blockquote><ol><li>熟练运用 HTML/HTML5/XHTML、CSS/CSS3、JavaScript 构建高性能的 Web 应用程序</li><li>精通网页制作技术，熟悉页面架构和布局</li><li>能解决多浏览器兼容性问题</li><li>至少掌握 css 预处理器中的一种: sass,less,stylus</li></ol></blockquote><p><strong>JavaScript</strong></p><blockquote><ol><li>JavaScript 语言基础、熟练掌握 es6</li><li>函数式编程与测试</li><li>理解并掌握 Javascript 语言核心技术 DOM、BOM、AJAX、Restful、JSON 等</li></ol></blockquote><p><strong>前端性能优化</strong></p><blockquote><ol><li>前端性能测试、AMP</li><li>掌握丰富的 css/JavaScript 等前端性能优化经验，解决多浏览器、多屏幕尺寸的 webview 的兼容和适配问题</li></ol></blockquote><p><strong>前端工程化</strong></p><blockquote><ol><li>熟悉 webpack、Yeoman、rollup、Gulp、grunt 等至少一种配置</li><li>能够熟练运用和管理基于 npm、yarn 等风格的代码工程</li><li>对前端工程化与模块化开发有一定了解，并有实践经验(如 RequireJS/SeaJS/ES6 模块化/commonjs 等)</li><li>熟练运用主流的 JS 库和 Bootstrap 开发框架，并深入理解其设计原理</li></ol></blockquote><p><strong>MVVM MVC 框架</strong></p><blockquote><ol><li>熟悉 react、redux、react-router 技术栈</li><li>熟悉 vue、vue-router、vuex、axios 和 vue-resource 等 vue 技术栈，熟悉 MVC、MVVM 等模式</li><li>持续关注业界的新话题和新技术，使用过一种以上的前端 MVVM 框架（如 Angular、React、Vue 等）</li><li>熟练使用 Vue、React 框架进行 PC、手机端页面开发</li></ol></blockquote><p><strong>设计模式、网络安全</strong></p><blockquote><ol><li>JavaScript 常见设计模式与实战</li><li>前端加密与安全策略与网络安全</li><li>熟悉浏览器兼容性，web 优化技巧</li></ol></blockquote><p><strong>图形学、H5 游戏</strong></p><blockquote><ol><li>echarts、highcharts、d3.js</li><li>Canvas、threejs</li></ol></blockquote><p><strong>数据结构与算法</strong></p><blockquote><ol><li>掌握数据结构</li><li>熟练掌握基本算法</li></ol></blockquote><p><strong>移动端、微信系列</strong></p><blockquote><ol><li>ReactNative 原理剖析&amp;PWA、前端嵌入式开发与 VR、人工智能</li><li>有 React Native 项目经验者可加分</li><li>熟悉微信网页功能开发（如微信分享，微信支付），掌握调试微信网页调试工具</li><li>有移动 APP 应用、微信公众号、小程序开发经验</li><li>熟悉 W3C 标准，对表现与数据分离、web 语义化等有深刻理解，熟悉移动 web 开发、有 hybrid app 开发尤佳</li></ol></blockquote><p><strong>NodeJS</strong></p><blockquote><ol><li>熟悉 express、koa 、NodeJS 核心 API 与源代码</li><li>熟练使用 nodejs，会使用 redis 和 socket 技术</li><li>熟悉基于 nodejs 平台的开发流程，了解 Cordova、ionic、flutter、RN 等移动开发框架</li><li>掌握一门后端语言（Java、python 等）</li><li>研究过 nodejs 框架(express/koa)等，有 npm 的模块开发经验</li></ol></blockquote><p><strong>其他</strong></p><blockquote><ol><li>熟悉 linux 系统的基本操作</li><li>掌握 git 基本操作，熟悉团队项目协同开发流程</li><li>熟悉基本数据库操作（如 MySQL、MongoDB 等）</li></ol></blockquote><p><strong>开源作品</strong></p><blockquote><ol><li>有相关开源作品、个人技术公众号</li><li>有个人技术博客</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux node项目环境部署</title>
      <link href="/2019/01/03/%E5%85%B3%E4%BA%8Elinux%E4%B8%8A%E7%9A%84%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/01/03/%E5%85%B3%E4%BA%8Elinux%E4%B8%8A%E7%9A%84%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p><strong>阿里云服务器：</strong><br>1、连接到服务器<br>2、安装最新版本 node+npm（查看版本），已自带 node 和 npm 环境（实现选择的镜像）</p><a id="more"></a><p>3、Centos 安装 mysql：<a href="https://www.cnblogs.com/huangxinyuan650/p/6360464.html" target="_blank" rel="noopener">https://www.cnblogs.com/huangxinyuan650/p/6360464.html</a><br>4、mysql 运行 sql 导入数据库（pwd：123456）<br><a href="https://blog.csdn.net/askycat/article/details/70991389" target="_blank" rel="noopener">https://blog.csdn.net/askycat/article/details/70991389</a><br>5、安装 curl 工具（配置环境变量？测试一下 curl 命令）<br><a href="http://www.souvc.com/?p=1779" target="_blank" rel="noopener">http://www.souvc.com/?p=1779</a><br><a href="https://blog.csdn.net/qq_34827048/article/details/73564292" target="_blank" rel="noopener">https://blog.csdn.net/qq_34827048/article/details/73564292</a><br>6、上传项目文件到服务器（使用 WinSCP，进行远程传输）<a href="https://jingyan.baidu.com/article/ceb9fb10a8dbb78cad2ba03a.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/ceb9fb10a8dbb78cad2ba03a.html</a><br>7、安装 geoserver，不需要安装 tomcat<br><a href="https://www.jianshu.com/p/0f25646963f3" target="_blank" rel="noopener">https://www.jianshu.com/p/0f25646963f3</a><br><a href="http://39.108.227.136:8080/geoserver/web/——打开geoserver页面" target="_blank" rel="noopener">http://39.108.227.136:8080/geoserver/web/——打开geoserver页面</a><br>startup.sh: command not found<br>命令前加上 bash 或 sh 或 ./<br>.代表当前目录，如果执行程序或脚本没有加入环境变量 PATH，在当前目录时前面要加”./“<br>关于 LINUX 权限-bash: ./startup.sh: Permission denied<br>用命令 chmod 修改一下 bin 目录下的.sh 权限就可以了<br>如 chmod u+x *.sh<br>8、批量发布 xml 和 shp，publicShp.js 中的 xml 要为绝对路径，才能正常发布<br>9、npm start 启动程序，要另外添加 3800 端口（允许访问）<br>10、Centos 安装图形界面（不建议）<br>安装引导过程中可以选择图形界面（Gnome、KDE……）<br><a href="https://www.linuxidc.com/Linux/2017-03/141348.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2017-03/141348.htm</a><br><a href="https://blog.csdn.net/m0_37903789/article/details/84504589" target="_blank" rel="noopener">https://blog.csdn.net/m0_37903789/article/details/84504589</a><br>11、安装代码编辑器（可选）<br><a href="https://blog.csdn.net/zdhsoft/article/details/73457259——vscode" target="_blank" rel="noopener">https://blog.csdn.net/zdhsoft/article/details/73457259——vscode</a><br><a href="https://github.com/spf13/spf13-vim——配置vim" target="_blank" rel="noopener">https://github.com/spf13/spf13-vim——配置vim</a><br>12、X2Go Client 下载与使用（另一终端工具，可选）<br><a href="https://blog.csdn.net/qq_17105473/article/details/74597343——windows安装" target="_blank" rel="noopener">https://blog.csdn.net/qq_17105473/article/details/74597343——windows安装</a><br><a href="https://blog.csdn.net/iloveyin/article/details/48490723——linux配置" target="_blank" rel="noopener">https://blog.csdn.net/iloveyin/article/details/48490723——linux配置</a></p><hr><p><strong>问题解决：</strong><br>升级 node 版本：<a href="https://segmentfault.com/a/1190000015302680" target="_blank" rel="noopener">https://segmentfault.com/a/1190000015302680</a><br>在后台运行 geoserver：<a href="https://blog.csdn.net/ruiyelp/article/details/80184249" target="_blank" rel="noopener">https://blog.csdn.net/ruiyelp/article/details/80184249</a></p><ol><li>command &amp; ： 后台运行，你关掉终端会停止运行</li><li>nohup command &amp; ： 后台运行，你关掉终端也会继续运行<br>复制粘贴：ctrl+shift+v<br>添加环境变量（GEOSERVER_DATA_DIR）：<a href="https://www.cnblogs.com/whoamme/p/4039998.html" target="_blank" rel="noopener">https://www.cnblogs.com/whoamme/p/4039998.html</a><br>Vim 优化：<a href="https://github.com/spf13/spf13-vim" target="_blank" rel="noopener">https://github.com/spf13/spf13-vim</a></li></ol><hr><p><strong>目录问题：</strong><br>下载的软件存放位置<br>/var/cache/apt/archives<br>安装后软件默认位置<br>/usr/share<br>可执行文件位置<br>/usr/bin<br>配置文件位置<br>/etc<br>lib 文件位置<br>/usr/lib<br>桌面文件<br>/home/yourname/desktop</p><p>/usr：系统级的目录，可以理解为 C:/Windows/，/usr/lib 理解为 C:/Windows/System32。<br>/usr/local：用户级的程序目录，可以理解为 C:/Progrem Files/。用户自己编译的软件默认会安装到这个目录下。<br>/opt：用户级的程序目录，可以理解为 D:/Software，opt 有可选的意思，这里可以用于放置第三方大型软件（或游戏），当你不需要时，直接 rm -rf 掉即可。在硬盘容量不够时，也可将/opt 单独挂载到其他磁盘上使用。<br>源码放哪里？<br>/usr/src：系统级的源码目录。<br>/usr/local/src：用户级的源码目录。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github部署个人博客教程</title>
      <link href="/2019/01/01/hexo+github%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
      <url>/2019/01/01/hexo+github%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo 官方文档</a></p><p>这是我的个人博客效果: <a href="https://iloveyou11.github.io/" target="_blank" rel="noopener">YP blog</a></p><a id="more"></a><h4 id="搭建的具体流程"><a href="#搭建的具体流程" class="headerlink" title="搭建的具体流程"></a>搭建的具体流程</h4><ul><li>安装 git，申请 github 账号，生成 ssh 密钥，在 github 新建 new SSH Key</li><li>在 github 新建个人仓库用户名，取名为<strong>‘’用户名.github.io’’</strong>这个用户名使用你的 GitHub 帐号名称代替，这个是固定写法</li><li>安装 nodejs</li><li>安装 hexo <code>npm install -g hexo-cli</code></li><li>初始化博客 <code>hexo init [name]</code>创建博客项目</li><li>为了检测网站别按顺序输入以下命令：<code>hexo g</code> 、<code>hexo s</code>，打开 localhost:4000 查看网站是否成功显示</li><li>关联 github，安装包<code>npm install hexo-deployer-git --save</code>，修改_config.yml 配置文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/name/name.github.io.git  #记得加.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><ul><li>分别运行<code>hexo g</code> 、<code>hexo s</code>，在https://[yourname].github.io/查看博客（在下方会讲命令的具体作用）</li><li>关于主题更换（默认是 landscape 主题，如果想更换主题请看这里）<br>在主题官网选择好主题，找到对应的 github 仓库，<code>git clone [theme path] themes/[theme name]</code>安装到本项目的 themes 文件夹下，并修改_config.yml 配置文件中 theme（名字与你命名的主题文件夹名字相同），再分别运行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  #清除缓存</span><br><span class="line">hexo g   #相当于hexo generate，生成博客</span><br><span class="line">hexo d   #相当于hexo deploy，部署博客</span><br></pre></td></tr></table></figure><p>打开你的博客地址即可看到效果</p><ul><li>关于博客书写<br><code>hexo n &quot;博客名字&quot;</code>，会在<code>source/_posts</code>文件夹下生成 markdown 文件，使用 markdown 语法书写博客即可，建议使用<a href="http://marxi.co/" target="_blank" rel="noopener">Marxico</a>可视化工具编写（也可以采用其他的可视化工具，视个人而定）</li><li>博客的格式<br>博客的大体可以采用以下格式（不同主题格式或许有些不同，可以自行查阅相关文档）：</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">date: 2019-07-25</span><br><span class="line">author: XXX</span><br><span class="line">categories: XXX</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">  - </span>Android</span><br><span class="line">comments: true</span><br><span class="line">cover_picture: /images/banner.jpg</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">这里写博客开头部分内容</span><br><span class="line"></span><br><span class="line"><span class="section"># 如果添加下行语句，文章会自动生成“更多”按钮，点击后 more 后面的内容才会显示</span></span><br><span class="line"></span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"></span><br><span class="line">这里写后续的博客内容</span><br></pre></td></tr></table></figure><ul><li>关于图片<br>如果采用本地项目文件夹存储图片，每次打开博客会加载大量的图片，会导致性能有所下降，建议使用图床存储，如<a href="https://www.qiniu.com/" target="_blank" rel="noopener">七牛</a> 或 <a href="http://www.tietuku.com/" target="_blank" rel="noopener">贴图库</a> ，在文章中直接采用外链引入图片</li></ul><p><strong>[坑]</strong>：如果 hexo g 生成的文件缺少 index.html 和 archive，部署后打开博客会出现 404 的错误说找不到 index,html 文件,在 github 仓库中打开确实没有.造成这个问题的原因是缺少相应的 npm 包，输入命令<code>npm ls --depth 0</code>，安装好缺少的包重新发布即可.好像是因为安装了新的主题而引起的,这个问题也是折腾了我好久.-_-</p><h4 id="hexo-常用命令"><a href="#hexo-常用命令" class="headerlink" title="hexo 常用命令"></a>hexo 常用命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g #全局安装Hexo</span><br><span class="line">npm update hexo -g #升级hexo</span><br><span class="line">hexo init #初始化项目</span><br><span class="line">hexo n &quot;name&quot; &lt;=&gt; hexo new &quot;name&quot; #新建名为name的文章</span><br><span class="line">hexo g &lt;=&gt; hexo generate #生成博客</span><br><span class="line">hexo s &lt;=&gt; hexo server #启动服务，本地预览效果</span><br><span class="line">hexo d &lt;=&gt; hexo deploy #部署博客</span><br></pre></td></tr></table></figure><h4 id="markdown-常用语法"><a href="#markdown-常用语法" class="headerlink" title="markdown 常用语法"></a>markdown 常用语法</h4><p><strong>标题</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题</span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure><p><strong>字体</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*`</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure><p><strong>引用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure><p><strong>分割线</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><p><strong>图片</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![图片alt](图片地址 &apos;&apos;图片title&apos;&apos;)</span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure><p><strong>超链接</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;) #title可加可不加</span><br><span class="line">&lt;a href=&quot;超链接地址&quot; target=&quot;_blank&quot;&gt;超链接名&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><strong>列表</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- 列表内容  #无序列表</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line">1.列表内容  #有序列表</span><br><span class="line">2.列表内容</span><br><span class="line">3.列表内容</span><br></pre></td></tr></table></figure><p><strong>表格</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> `代码内容`  #单行</span><br><span class="line"></span><br><span class="line">(```)  #多行，空格不要，```后面可以写上语言类别，如javascript等</span><br><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">(```)</span><br></pre></td></tr></table></figure><p><strong>流程图</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">```flow</span><br><span class="line">st=&gt;start: 开始</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">&amp;```</span><br></pre></td></tr></table></figure><p><strong>字体大小颜色、大小、背景色设置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">红色文字: &lt;font color=&quot;#dd0000&quot;&gt;红色文字：&lt;/font&gt;&lt;br /&gt;</span><br><span class="line">字体大小: &lt;font size=&quot;1&quot;&gt;size为1&lt;/font&gt;&lt;br /&gt;</span><br><span class="line">背景色:   &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#FF00FF&gt;背景色的设置是按照十六进制颜色值：#7FFFD4&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span><br></pre></td></tr></table></figure><p><strong>瞄点设置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- [测试](#测试)</span><br><span class="line">### &lt;a id=&quot;测试&quot;&gt;测试&lt;/a&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
